((call
   (push.const core primitives)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core/exceptions.scm" . 6145))
 (call
   (push.const . syntax)
   (push.const . core.exceptions\x27;guard)
   (push.const
     (else)
     ("../stdlib/core/exceptions.scm" . 20485)
     ((_ (var clause ... (else e1 e2 ...)) b1 b2 ...)
      (call/cc
        (lambda (cont)
          (with-exception-handler
            (lambda (var) (call-with-values (lambda () (cond clause ... (else e1 e2 ...))) cont))
            (lambda () b1 b2 ...))))
      ((b2 . 1) (b1 . 0) (e2 . 1) (e1 . 0) (clause . 1) (var . 0))
      (else cond call-with-values with-exception-handler cont lambda call/cc))
     ((_ (var clause ...) b1 b2 ...)
      ((call/cc
         (lambda (guard-k)
           (with-exception-handler
             (lambda (condition)
               ((call/cc
                  (lambda (handler-k)
                    (guard-k
                      (lambda ()
                        (let ((var condition))
                          (cond clause ... (else (handler-k (lambda () (raise condition))))))))))))
             (lambda ()
               (call-with-values
                 (lambda () b1 b2 ...)
                 (lambda args (guard-k (lambda () (apply values args))))))))))
      ((b2 . 1) (b1 . 0) (clause . 1) (var . 0))
      (values
        apply
        args
        call-with-values
        raise
        else
        cond
        let
        handler-k
        condition
        with-exception-handler
        guard-k
        lambda
        call/cc)))
   (push.const
     (raise import . \x2E;raise)
     (_ import . \x2E;_)
     (... import . \x2E;...)
     (else import . \x2E;else)
     (values import . \x2E;values)
     (condition import . \x2E;condition)
     (with-exception-handler import . \x2E;with-exception-handler)
     (call/cc import . \x2E;call/cc)
     (call-with-values import . \x2E;call-with-values)
     (cond import . \x2E;cond)
     (apply import . \x2E;apply)
     (let import . \x2E;let)
     (lambda import . \x2E;lambda))
   (apply.gloc.of \x2E;set-top-level-macro! "../stdlib/core/exceptions.scm" . 6145))
 (push.const . core.exceptions)
 (push.const . #f)
 (push.const
   (with-exception-handler import . \x2E;with-exception-handler)
   (guard import . core.exceptions\x27;guard)
   (raise import . \x2E;raise)
   (raise-continuable import . \x2E;raise-continuable))
 (apply.gloc.of \x2E;intern-scheme-library "../stdlib/core/exceptions.scm" . 6145))

((call
   (push.const core primitives)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core/parameters.scm" . 6145))
 (call
   (push.const core intrinsics)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core/parameters.scm" . 6145))
 (call
   (push.const
     (_ import . \x2E;_)
     (... import . \x2E;...)
     (let import . \x2E;let)
     (parameterize-aux import . core.parameters\x27;parameterize-aux)
     (set! import . \x2E;set!)
     (dynamic-wind import . \x2E;dynamic-wind)
     (lambda import . \x2E;lambda))
   (extend . 1)
   (call
     (push.const . syntax)
     (push.const . core.parameters\x27;parameterize-aux)
     (push.const
       ()
       ("../stdlib/core/parameters.scm" . 14341)
       ((_ () ((save new param value) ...) body ...)
        (let ((save #f) ... (new value) ...)
          (dynamic-wind
            (lambda () (set! save (param)) ... (param new) ...)
            (lambda () body ...)
            (lambda () (param save) ...)))
        ((body . 1) (value . 1) (param . 1) (new . 1) (save . 1))
        (set! lambda dynamic-wind let))
       ((_ ((e1 e2) . more) (stash ...) body ...)
        (parameterize-aux more (stash ... (tmp1 tmp2 e1 e2)) body ...)
        ((body . 1) (stash . 1) (more . 0) (e2 . 0) (e1 . 0))
        (tmp2 tmp1 parameterize-aux)))
     (push.iloc.0 . 0)
     (apply.gloc.of \x2E;set-top-level-macro! "../stdlib/core/parameters.scm" . 6145))
   (push.const . syntax)
   (push.const . core.parameters\x27;parameterize)
   (push.const
     ()
     ("../stdlib/core/parameters.scm" . 25605)
     ((_ ((e1 e2) ...) body ...)
      (parameterize-aux ((e1 e2) ...) () body ...)
      ((body . 1) (e2 . 1) (e1 . 1))
      (parameterize-aux)))
   (push.iloc.0 . 0)
   (apply.gloc.of \x2E;set-top-level-macro! "../stdlib/core/parameters.scm" . 6145))
 (push.const . core.parameters)
 (push.const . #f)
 (push.const
   (make-parameter import . \x2E;make-parameter)
   (parameterize import . core.parameters\x27;parameterize))
 (apply.gloc.of \x2E;intern-scheme-library "../stdlib/core/parameters.scm" . 6145))

((call
   (push.const core primitives)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core/arithmetic.scm" . 6145))
 (close
   (2 0 . core.arithmetic\x27;flmod)
   (push.iloc.0 . 0)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.subr.gloc.of \x2E;fldiv 2 "../stdlib/core/arithmetic.scm" . 129043)
   (push.iloc.0 . 1)
   (push.subr.gloc.of \x2E;fl* 2 "../stdlib/core/arithmetic.scm" . 129038)
   (ret.subr.gloc.of \x2E;fl- "../stdlib/core/arithmetic.scm" . 129031))
 (set.gloc.of core.arithmetic\x27;flmod)
 (close
   (2 0 . core.arithmetic\x27;fldiv-and-mod)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.subr.gloc.of \x2E;fldiv 2 "../stdlib/core/arithmetic.scm" . 133136)
   (extend . 1)
   (push.iloc.0 . 0)
   (push.iloc.1 . 0)
   (push.iloc.0 . 0)
   (push.iloc.1 . 1)
   (push.subr.gloc.of \x2E;fl* 2 "../stdlib/core/arithmetic.scm" . 134170)
   (push.subr.gloc.of \x2E;fl- 2 "../stdlib/core/arithmetic.scm" . 134163)
   (ret.subr.gloc.of \x2E;values "../stdlib/core/arithmetic.scm" . 134153))
 (set.gloc.of core.arithmetic\x27;fldiv-and-mod)
 (close
   (2 0 . core.arithmetic\x27;flmod0)
   (push.iloc.0 . 0)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.subr.gloc.of \x2E;fldiv0 2 "../stdlib/core/arithmetic.scm" . 138259)
   (push.iloc.0 . 1)
   (push.subr.gloc.of \x2E;fl* 2 "../stdlib/core/arithmetic.scm" . 138254)
   (ret.subr.gloc.of \x2E;fl- "../stdlib/core/arithmetic.scm" . 138247))
 (set.gloc.of core.arithmetic\x27;flmod0)
 (close
   (2 0 . core.arithmetic\x27;fldiv0-and-mod0)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.subr.gloc.of \x2E;fldiv0 2 "../stdlib/core/arithmetic.scm" . 142353)
   (extend . 1)
   (push.iloc.0 . 0)
   (push.iloc.1 . 0)
   (push.iloc.0 . 0)
   (push.iloc.1 . 1)
   (push.subr.gloc.of \x2E;fl* 2 "../stdlib/core/arithmetic.scm" . 143387)
   (push.subr.gloc.of \x2E;fl- 2 "../stdlib/core/arithmetic.scm" . 143380)
   (ret.subr.gloc.of \x2E;values "../stdlib/core/arithmetic.scm" . 143369))
 (set.gloc.of core.arithmetic\x27;fldiv0-and-mod0)
 (push.const . 2)
 (subr.gloc.of \x2E;fixnum-width 0)
 (push)
 (subr.gloc.of \x2E;expt 2 "../stdlib/core/arithmetic.scm" . 145434)
 (set.gloc.of core.arithmetic\x27;2^fixnum-width)
 (close
   (2 0 . core.arithmetic\x27;fxmod)
   (push.iloc.0 . 0)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.subr.gloc.of \x2E;fxdiv 2 "../stdlib/core/arithmetic.scm" . 149523)
   (push.iloc.0 . 1)
   (push.subr.gloc.of \x2E;fx* 2 "../stdlib/core/arithmetic.scm" . 149518)
   (ret.subr.gloc.of \x2E;fx- "../stdlib/core/arithmetic.scm" . 149511))
 (set.gloc.of core.arithmetic\x27;fxmod)
 (close
   (2 0 . core.arithmetic\x27;fxdiv-and-mod)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.subr.gloc.of \x2E;fxdiv 2 "../stdlib/core/arithmetic.scm" . 153616)
   (extend . 1)
   (push.iloc.0 . 0)
   (push.iloc.1 . 0)
   (push.iloc.0 . 0)
   (push.iloc.1 . 1)
   (push.subr.gloc.of \x2E;fx* 2 "../stdlib/core/arithmetic.scm" . 154650)
   (push.subr.gloc.of \x2E;fx- 2 "../stdlib/core/arithmetic.scm" . 154643)
   (ret.subr.gloc.of \x2E;values "../stdlib/core/arithmetic.scm" . 154633))
 (set.gloc.of core.arithmetic\x27;fxdiv-and-mod)
 (close
   (2 0 . core.arithmetic\x27;fxmod0)
   (push.iloc.0 . 0)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.subr.gloc.of \x2E;fxdiv0 2 "../stdlib/core/arithmetic.scm" . 158739)
   (push.iloc.0 . 1)
   (push.subr.gloc.of \x2E;fx* 2 "../stdlib/core/arithmetic.scm" . 158734)
   (ret.subr.gloc.of \x2E;fx- "../stdlib/core/arithmetic.scm" . 158727))
 (set.gloc.of core.arithmetic\x27;fxmod0)
 (close
   (2 0 . core.arithmetic\x27;fxdiv0-and-mod0)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.subr.gloc.of \x2E;fxdiv0 2 "../stdlib/core/arithmetic.scm" . 162833)
   (extend . 1)
   (push.iloc.0 . 0)
   (push.iloc.1 . 0)
   (push.iloc.0 . 0)
   (push.iloc.1 . 1)
   (push.subr.gloc.of \x2E;fx* 2 "../stdlib/core/arithmetic.scm" . 163867)
   (push.subr.gloc.of \x2E;fx- 2 "../stdlib/core/arithmetic.scm" . 163860)
   (ret.subr.gloc.of \x2E;values "../stdlib/core/arithmetic.scm" . 163849))
 (set.gloc.of core.arithmetic\x27;fxdiv0-and-mod0)
 (close
   (3 0 . core.arithmetic\x27;fx+/carry)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.iloc.0 . 2)
   (push.subr.gloc.of \x2E;+ 3 "../stdlib/core/arithmetic.scm" . 167953)
   (extend . 1)
   (call
     (push.iloc.0 . 0)
     (push.gloc.of core.arithmetic\x27;2^fixnum-width)
     (apply.gloc.of \x2E;mod0 "../stdlib/core/arithmetic.scm" . 168978))
   (push)
   (push.iloc.0 . 0)
   (push.gloc.of core.arithmetic\x27;2^fixnum-width)
   (push.subr.gloc.of \x2E;div0 2 "../stdlib/core/arithmetic.scm" . 170002)
   (ret.subr.gloc.of \x2E;values "../stdlib/core/arithmetic.scm" . 171017))
 (set.gloc.of core.arithmetic\x27;fx+/carry)
 (close
   (3 0 . core.arithmetic\x27;fx-/carry)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.iloc.0 . 2)
   (push.subr.gloc.of \x2E;- 3 "../stdlib/core/arithmetic.scm" . 175121)
   (extend . 1)
   (call
     (push.iloc.0 . 0)
     (push.gloc.of core.arithmetic\x27;2^fixnum-width)
     (apply.gloc.of \x2E;mod0 "../stdlib/core/arithmetic.scm" . 176146))
   (push)
   (push.iloc.0 . 0)
   (push.gloc.of core.arithmetic\x27;2^fixnum-width)
   (push.subr.gloc.of \x2E;div0 2 "../stdlib/core/arithmetic.scm" . 177170)
   (ret.subr.gloc.of \x2E;values "../stdlib/core/arithmetic.scm" . 178185))
 (set.gloc.of core.arithmetic\x27;fx-/carry)
 (close
   (3 0 . core.arithmetic\x27;fx*/carry)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.subr.gloc.of \x2E;* 2 "../stdlib/core/arithmetic.scm" . 182292)
   (push.iloc.0 . 2)
   (push.subr.gloc.of \x2E;+ 2 "../stdlib/core/arithmetic.scm" . 182289)
   (extend . 1)
   (call
     (push.iloc.0 . 0)
     (push.gloc.of core.arithmetic\x27;2^fixnum-width)
     (apply.gloc.of \x2E;mod0 "../stdlib/core/arithmetic.scm" . 183314))
   (push)
   (push.iloc.0 . 0)
   (push.gloc.of core.arithmetic\x27;2^fixnum-width)
   (push.subr.gloc.of \x2E;div0 2 "../stdlib/core/arithmetic.scm" . 184338)
   (ret.subr.gloc.of \x2E;values "../stdlib/core/arithmetic.scm" . 185353))
 (set.gloc.of core.arithmetic\x27;fx*/carry)
 (close
   (4 0 . core.arithmetic\x27;fxrotate-bit-field)
   (push.iloc.0 . 2)
   (push.iloc.0 . 1)
   (push.subr.gloc.of \x2E;fx- 2 "../stdlib/core/arithmetic.scm" . 193557)
   (extend . 1)
   (push.iloc.0 . 0)
   (subr.gloc.of \x2E;fxpositive? 1 "../stdlib/core/arithmetic.scm" . 194573)
   (if.true
     (call
       (push.iloc.1 . 3)
       (push.iloc.0 . 0)
       (apply.gloc.of core.arithmetic\x27;fxmod "../stdlib/core/arithmetic.scm" . 195611))
     (push)
     (extend . 1)
     (push.iloc 2 . 0)
     (push.iloc 2 . 1)
     (push.iloc 2 . 2)
     (push.subr.gloc.of \x2E;fxbit-field 3 "../stdlib/core/arithmetic.scm" . 196636)
     (extend . 1)
     (push.iloc 3 . 0)
     (push.iloc 3 . 1)
     (push.iloc 3 . 2)
     (push.iloc.0 . 0)
     (push.iloc.1 . 0)
     (push.subr.gloc.of \x2E;fxarithmetic-shift-left 2 "../stdlib/core/arithmetic.scm" . 197660)
     (push.iloc.0 . 0)
     (push.iloc 2 . 0)
     (push.iloc.1 . 0)
     (push.subr.gloc.of \x2E;fx- 2 "../stdlib/core/arithmetic.scm" . 198717)
     (push.subr.gloc.of \x2E;fxarithmetic-shift-right 2 "../stdlib/core/arithmetic.scm" . 198684)
     (push.subr.gloc.of \x2E;fxior 2 "../stdlib/core/arithmetic.scm" . 199707)
     (ret.subr.gloc.of \x2E;fxcopy-bit-field "../stdlib/core/arithmetic.scm" . 200719))
   (ret.iloc 1 . 0))
 (set.gloc.of core.arithmetic\x27;fxrotate-bit-field)
 (close
   (3 0 . core.arithmetic\x27;fxreverse-bit-field)
   (push.iloc.0 . 2)
   (push.iloc.0 . 1)
   (push.subr.gloc.of \x2E;fx- 2 "../stdlib/core/arithmetic.scm" . 208917)
   (extend . 1)
   (push.iloc.0 . 0)
   (subr.gloc.of \x2E;fxpositive? 1 "../stdlib/core/arithmetic.scm" . 209933)
   (if.true
     (extend.enclose+
       (3 0 . loop)
       (push.iloc.0 . 2)
       (subr.gloc.of \x2E;fxzero? 1 "../stdlib/core/arithmetic.scm" . 211987)
       (if.true
         (push.iloc 3 . 0)
         (push.iloc 3 . 1)
         (push.iloc 3 . 2)
         (push.iloc.0 . 0)
         (ret.subr.gloc.of \x2E;fxcopy-bit-field "../stdlib/core/arithmetic.scm" . 213011))
       (push.iloc.0 . 1)
       (push.const . 1)
       (push.subr.gloc.of \x2E;fxand 2 "../stdlib/core/arithmetic.scm" . 214048)
       (subr.gloc.of \x2E;fxzero? 1 "../stdlib/core/arithmetic.scm" . 214039)
       (if.true
         (push.iloc.0 . 0)
         (push.const . 1)
         (push.subr.gloc.of \x2E;fxarithmetic-shift-left 2 "../stdlib/core/arithmetic.scm" . 215069)
         (push.iloc.0 . 1)
         (push.const . 1)
         (push.subr.gloc.of
           \x2E;fxarithmetic-shift-right
           2
           "../stdlib/core/arithmetic.scm"
           .
           216093)
         (push.iloc.0 . 2)
         (push.const . 1)
         (push.subr.gloc.of \x2E;fx- 2 "../stdlib/core/arithmetic.scm" . 217117)
         (apply.iloc+ (1 . 0) "../stdlib/core/arithmetic.scm" . 215063))
       (push.iloc.0 . 0)
       (push.const . 1)
       (push.subr.gloc.of \x2E;fxarithmetic-shift-left 2 "../stdlib/core/arithmetic.scm" . 218148)
       (push.const . 1)
       (push.subr.gloc.of \x2E;fxior 2 "../stdlib/core/arithmetic.scm" . 218141)
       (push.iloc.0 . 1)
       (push.const . 1)
       (push.subr.gloc.of \x2E;fxarithmetic-shift-right 2 "../stdlib/core/arithmetic.scm" . 219165)
       (push.iloc.0 . 2)
       (push.const . 1)
       (push.subr.gloc.of \x2E;fx- 2 "../stdlib/core/arithmetic.scm" . 220189)
       (apply.iloc+ (1 . 0) "../stdlib/core/arithmetic.scm" . 218135))
     (push.const . 0)
     (push.iloc 2 . 0)
     (push.iloc 2 . 1)
     (push.iloc 2 . 2)
     (push.subr.gloc.of \x2E;fxbit-field 3 "../stdlib/core/arithmetic.scm" . 210988)
     (push.iloc.1 . 0)
     (apply.iloc+ (0 . 0) "../stdlib/core/arithmetic.scm" . 210957))
   (ret.iloc 1 . 0))
 (set.gloc.of core.arithmetic\x27;fxreverse-bit-field)
 (gloc.of \x2E;bitwise-arithmetic-shift)
 (set.gloc.of core.arithmetic\x27;bitwise-arithmetic-shift-left)
 (close
   (3 0 . core.arithmetic\x27;bitwise-if)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.subr.gloc.of \x2E;bitwise-and 2 "../stdlib/core/arithmetic.scm" . 227348)
   (push.iloc.0 . 0)
   (push.subr.gloc.of \x2E;bitwise-not 1 "../stdlib/core/arithmetic.scm" . 228385)
   (push.iloc.0 . 2)
   (push.subr.gloc.of \x2E;bitwise-and 2 "../stdlib/core/arithmetic.scm" . 228372)
   (ret.subr.gloc.of \x2E;bitwise-ior "../stdlib/core/arithmetic.scm" . 227335))
 (set.gloc.of core.arithmetic\x27;bitwise-if)
 (close
   (2 0 . core.arithmetic\x27;bitwise-bit-set?)
   (push.const . 1)
   (push.iloc.0 . 1)
   (push.subr.gloc.of \x2E;bitwise-arithmetic-shift 2 "../stdlib/core/arithmetic.scm" . 232480)
   (push.iloc.0 . 0)
   (push.subr.gloc.of \x2E;bitwise-and 2 "../stdlib/core/arithmetic.scm" . 232467)
   (push.subr.gloc.of \x2E;zero? 1 "../stdlib/core/arithmetic.scm" . 232460)
   (ret.subr.gloc.of \x2E;not "../stdlib/core/arithmetic.scm" . 232455))
 (set.gloc.of core.arithmetic\x27;bitwise-bit-set?)
 (close
   (3 0 . core.arithmetic\x27;bitwise-copy-bit)
   (push.const . 1)
   (push.iloc.0 . 1)
   (push.subr.gloc.of \x2E;bitwise-arithmetic-shift 2 "../stdlib/core/arithmetic.scm" . 236564)
   (push.iloc.0 . 2)
   (push.iloc.0 . 1)
   (push.subr.gloc.of \x2E;bitwise-arithmetic-shift 2 "../stdlib/core/arithmetic.scm" . 237594)
   (push.iloc.0 . 0)
   (apply.gloc.of core.arithmetic\x27;bitwise-if "../stdlib/core/arithmetic.scm" . 237577))
 (set.gloc.of core.arithmetic\x27;bitwise-copy-bit)
 (close
   (3 0 . core.arithmetic\x27;bitwise-bit-field)
   (push.iloc.0 . 0)
   (push.const . -1)
   (push.iloc.0 . 2)
   (push.subr.gloc.of \x2E;bitwise-arithmetic-shift 2 "../stdlib/core/arithmetic.scm" . 241696)
   (push.subr.gloc.of \x2E;bitwise-not 1 "../stdlib/core/arithmetic.scm" . 241683)
   (push.subr.gloc.of \x2E;bitwise-and 2 "../stdlib/core/arithmetic.scm" . 242729)
   (push.iloc.0 . 1)
   (apply.gloc.of
     core.arithmetic\x27;bitwise-arithmetic-shift-right
     "../stdlib/core/arithmetic.scm"
     .
     242697))
 (set.gloc.of core.arithmetic\x27;bitwise-bit-field)
 (close
   (4 0 . core.arithmetic\x27;bitwise-copy-bit-field)
   (push.const . -1)
   (push.iloc.0 . 1)
   (push.subr.gloc.of \x2E;bitwise-arithmetic-shift 2 "../stdlib/core/arithmetic.scm" . 250901)
   (push.const . -1)
   (push.iloc.0 . 2)
   (push.subr.gloc.of \x2E;bitwise-arithmetic-shift 2 "../stdlib/core/arithmetic.scm" . 251938)
   (push.subr.gloc.of \x2E;bitwise-not 1 "../stdlib/core/arithmetic.scm" . 251925)
   (push.subr.gloc.of \x2E;bitwise-and 2 "../stdlib/core/arithmetic.scm" . 252948)
   (push.iloc.0 . 3)
   (push.iloc.0 . 1)
   (push.subr.gloc.of \x2E;bitwise-arithmetic-shift 2 "../stdlib/core/arithmetic.scm" . 253978)
   (push.iloc.0 . 0)
   (apply.gloc.of core.arithmetic\x27;bitwise-if "../stdlib/core/arithmetic.scm" . 253961))
 (set.gloc.of core.arithmetic\x27;bitwise-copy-bit-field)
 (close
   (2 0 . core.arithmetic\x27;bitwise-arithmetic-shift-right)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.subr.gloc.of \x2E;- 1 "../stdlib/core/arithmetic.scm" . 258085)
   (ret.subr.gloc.of \x2E;bitwise-arithmetic-shift "../stdlib/core/arithmetic.scm" . 258055))
 (set.gloc.of core.arithmetic\x27;bitwise-arithmetic-shift-right)
 (close
   (4 0 . core.arithmetic\x27;bitwise-rotate-bit-field)
   (push.iloc.0 . 2)
   (push.iloc.0 . 1)
   (push.subr.gloc.of \x2E;- 2 "../stdlib/core/arithmetic.scm" . 266261)
   (extend . 1)
   (push.iloc.0 . 0)
   (subr.gloc.of \x2E;positive? 1 "../stdlib/core/arithmetic.scm" . 267277)
   (if.true
     (call
       (push.iloc.1 . 3)
       (push.iloc.0 . 0)
       (apply.gloc.of \x2E;mod "../stdlib/core/arithmetic.scm" . 268315))
     (push)
     (extend . 1)
     (call
       (push.iloc 2 . 0)
       (push.iloc 2 . 1)
       (push.iloc 2 . 2)
       (apply.gloc.of
         core.arithmetic\x27;bitwise-bit-field
         "../stdlib/core/arithmetic.scm"
         .
         269340))
     (push)
     (extend . 1)
     (push.iloc 3 . 0)
     (push.iloc 3 . 1)
     (push.iloc 3 . 2)
     (push.iloc.0 . 0)
     (push.iloc.1 . 0)
     (push.subr.gloc.of \x2E;bitwise-arithmetic-shift 2 "../stdlib/core/arithmetic.scm" . 270364)
     (call
       (push.iloc.0 . 0)
       (push.iloc 2 . 0)
       (push.iloc.1 . 0)
       (push.subr.gloc.of \x2E;- 2 "../stdlib/core/arithmetic.scm" . 271427)
       (apply.gloc.of
         core.arithmetic\x27;bitwise-arithmetic-shift-right
         "../stdlib/core/arithmetic.scm"
         .
         271388))
     (push)
     (push.subr.gloc.of \x2E;bitwise-ior 2 "../stdlib/core/arithmetic.scm" . 272411)
     (apply.gloc.of
       core.arithmetic\x27;bitwise-copy-bit-field
       "../stdlib/core/arithmetic.scm"
       .
       273423))
   (ret.iloc 1 . 0))
 (set.gloc.of core.arithmetic\x27;bitwise-rotate-bit-field)
 (close
   (3 0 . core.arithmetic\x27;bitwise-reverse-bit-field)
   (push.iloc.0 . 2)
   (push.iloc.0 . 1)
   (push.subr.gloc.of \x2E;- 2 "../stdlib/core/arithmetic.scm" . 281621)
   (extend . 1)
   (push.iloc.0 . 0)
   (subr.gloc.of \x2E;positive? 1 "../stdlib/core/arithmetic.scm" . 282637)
   (if.true
     (extend.enclose+
       (3 0 . loop)
       (push.iloc.0 . 2)
       (subr.gloc.of \x2E;zero? 1 "../stdlib/core/arithmetic.scm" . 284691)
       (if.true
         (push.iloc 3 . 0)
         (push.iloc 3 . 1)
         (push.iloc 3 . 2)
         (push.iloc.0 . 0)
         (apply.gloc.of
           core.arithmetic\x27;bitwise-copy-bit-field
           "../stdlib/core/arithmetic.scm"
           .
           285715))
       (push.iloc.0 . 1)
       (push.const . 1)
       (push.subr.gloc.of \x2E;bitwise-and 2 "../stdlib/core/arithmetic.scm" . 286750)
       (subr.gloc.of \x2E;zero? 1 "../stdlib/core/arithmetic.scm" . 286743)
       (if.true
         (push.iloc.0 . 0)
         (push.const . 1)
         (push.subr.gloc.of
           \x2E;bitwise-arithmetic-shift
           2
           "../stdlib/core/arithmetic.scm"
           .
           287773)
         (call
           (push.iloc.0 . 1)
           (push.const . 1)
           (apply.gloc.of
             core.arithmetic\x27;bitwise-arithmetic-shift-right
             "../stdlib/core/arithmetic.scm"
             .
             288797))
         (push)
         (push.n+.iloc (0 . 2) -1 "../stdlib/core/arithmetic.scm" . 289821)
         (apply.iloc+ (1 . 0) "../stdlib/core/arithmetic.scm" . 287767))
       (push.iloc.0 . 0)
       (push.const . 1)
       (push.subr.gloc.of \x2E;bitwise-arithmetic-shift 2 "../stdlib/core/arithmetic.scm" . 290858)
       (push.const . 1)
       (push.subr.gloc.of \x2E;bitwise-ior 2 "../stdlib/core/arithmetic.scm" . 290845)
       (call
         (push.iloc.0 . 1)
         (push.const . 1)
         (apply.gloc.of
           core.arithmetic\x27;bitwise-arithmetic-shift-right
           "../stdlib/core/arithmetic.scm"
           .
           291869))
       (push)
       (push.n+.iloc (0 . 2) -1 "../stdlib/core/arithmetic.scm" . 292893)
       (apply.iloc+ (1 . 0) "../stdlib/core/arithmetic.scm" . 290839))
     (push.const . 0)
     (call
       (push.iloc 2 . 0)
       (push.iloc 2 . 1)
       (push.iloc 2 . 2)
       (apply.gloc.of
         core.arithmetic\x27;bitwise-bit-field
         "../stdlib/core/arithmetic.scm"
         .
         283692))
     (push)
     (push.iloc.1 . 0)
     (apply.iloc+ (0 . 0) "../stdlib/core/arithmetic.scm" . 283661))
   (ret.iloc 1 . 0))
 (set.gloc.of core.arithmetic\x27;bitwise-reverse-bit-field)
 (push.const . core.arithmetic)
 (push.const . #f)
 (push.const
   (fixnum? import . \x2E;fixnum?)
   (fixnum-width import . \x2E;fixnum-width)
   (least-fixnum import . \x2E;least-fixnum)
   (greatest-fixnum import . \x2E;greatest-fixnum)
   (fx=? import . \x2E;fx=?)
   (fx<? import . \x2E;fx<?)
   (fx>? import . \x2E;fx>?)
   (fx<=? import . \x2E;fx<=?)
   (fx>=? import . \x2E;fx>=?)
   (fxzero? import . \x2E;fxzero?)
   (fxpositive? import . \x2E;fxpositive?)
   (fxnegative? import . \x2E;fxnegative?)
   (fxodd? import . \x2E;fxodd?)
   (fxeven? import . \x2E;fxeven?)
   (fxmax import . \x2E;fxmax)
   (fxmin import . \x2E;fxmin)
   (fx+ import . \x2E;fx+)
   (fx* import . \x2E;fx*)
   (fx- import . \x2E;fx-)
   (fxdiv import . \x2E;fxdiv)
   (fxmod import . core.arithmetic\x27;fxmod)
   (fxdiv-and-mod import . core.arithmetic\x27;fxdiv-and-mod)
   (fxdiv0 import . \x2E;fxdiv0)
   (fxmod0 import . core.arithmetic\x27;fxmod0)
   (fxdiv0-and-mod0 import . core.arithmetic\x27;fxdiv0-and-mod0)
   (fx+/carry import . core.arithmetic\x27;fx+/carry)
   (fx-/carry import . core.arithmetic\x27;fx-/carry)
   (fx*/carry import . core.arithmetic\x27;fx*/carry)
   (fxnot import . \x2E;fxnot)
   (fxand import . \x2E;fxand)
   (fxior import . \x2E;fxior)
   (fxxor import . \x2E;fxxor)
   (fxif import . \x2E;fxif)
   (fxbit-count import . \x2E;fxbit-count)
   (fxlength import . \x2E;fxlength)
   (fxfirst-bit-set import . \x2E;fxfirst-bit-set)
   (fxbit-set? import . \x2E;fxbit-set?)
   (fxcopy-bit import . \x2E;fxcopy-bit)
   (fxbit-field import . \x2E;fxbit-field)
   (fxcopy-bit-field import . \x2E;fxcopy-bit-field)
   (fxarithmetic-shift import . \x2E;fxarithmetic-shift)
   (fxarithmetic-shift-left import . \x2E;fxarithmetic-shift-left)
   (fxarithmetic-shift-right import . \x2E;fxarithmetic-shift-right)
   (fxrotate-bit-field import . core.arithmetic\x27;fxrotate-bit-field)
   (fxreverse-bit-field import . core.arithmetic\x27;fxreverse-bit-field)
   (flonum? import . \x2E;flonum?)
   (real->flonum import . \x2E;real->flonum)
   (fl=? import . \x2E;fl=?)
   (fl<? import . \x2E;fl<?)
   (fl>? import . \x2E;fl>?)
   (fl<=? import . \x2E;fl<=?)
   (fl>=? import . \x2E;fl>=?)
   (flinteger? import . \x2E;flinteger?)
   (flzero? import . \x2E;flzero?)
   (flpositive? import . \x2E;flpositive?)
   (flnegative? import . \x2E;flnegative?)
   (flodd? import . \x2E;flodd?)
   (fleven? import . \x2E;fleven?)
   (flfinite? import . \x2E;flfinite?)
   (flinfinite? import . \x2E;flinfinite?)
   (flnan? import . \x2E;flnan?)
   (flmax import . \x2E;flmax)
   (flmin import . \x2E;flmin)
   (fl+ import . \x2E;fl+)
   (fl* import . \x2E;fl*)
   (fl- import . \x2E;fl-)
   (fl/ import . \x2E;fl/)
   (fldiv-and-mod import . core.arithmetic\x27;fldiv-and-mod)
   (fldiv import . \x2E;fldiv)
   (flmod import . core.arithmetic\x27;flmod)
   (fldiv0-and-mod0 import . core.arithmetic\x27;fldiv0-and-mod0)
   (fldiv0 import . \x2E;fldiv0)
   (flmod0 import . core.arithmetic\x27;flmod0)
   (flnumerator import . \x2E;flnumerator)
   (fldenominator import . \x2E;fldenominator)
   (flfloor import . \x2E;flfloor)
   (flceiling import . \x2E;flceiling)
   (fltruncate import . \x2E;fltruncate)
   (flround import . \x2E;flround)
   (flexp import . \x2E;flexp)
   (flexpt import . \x2E;flexpt)
   (fllog import . \x2E;fllog)
   (flsin import . \x2E;flsin)
   (flcos import . \x2E;flcos)
   (fltan import . \x2E;fltan)
   (flasin import . \x2E;flasin)
   (flacos import . \x2E;flacos)
   (flatan import . \x2E;flatan)
   (flabs import . \x2E;flabs)
   (flsqrt import . \x2E;flsqrt)
   (fixnum->flonum import . \x2E;fixnum->flonum)
   (bitwise-not import . \x2E;bitwise-not)
   (bitwise-and import . \x2E;bitwise-and)
   (bitwise-ior import . \x2E;bitwise-ior)
   (bitwise-xor import . \x2E;bitwise-xor)
   (bitwise-if import . core.arithmetic\x27;bitwise-if)
   (bitwise-bit-count import . \x2E;bitwise-bit-count)
   (bitwise-length import . \x2E;bitwise-length)
   (bitwise-first-bit-set import . \x2E;bitwise-first-bit-set)
   (bitwise-bit-set? import . core.arithmetic\x27;bitwise-bit-set?)
   (bitwise-copy-bit import . core.arithmetic\x27;bitwise-copy-bit)
   (bitwise-bit-field import . core.arithmetic\x27;bitwise-bit-field)
   (bitwise-copy-bit-field import . core.arithmetic\x27;bitwise-copy-bit-field)
   (bitwise-arithmetic-shift import . \x2E;bitwise-arithmetic-shift)
   (bitwise-arithmetic-shift-left import . core.arithmetic\x27;bitwise-arithmetic-shift-left)
   (bitwise-arithmetic-shift-right import . core.arithmetic\x27;bitwise-arithmetic-shift-right)
   (bitwise-rotate-bit-field import . core.arithmetic\x27;bitwise-rotate-bit-field)
   (bitwise-reverse-bit-field import . core.arithmetic\x27;bitwise-reverse-bit-field)
   (&no-infinities import . \x2E;&no-infinities)
   (make-no-infinities-violation import . \x2E;make-no-infinities-violation)
   (no-infinities-violation? import . \x2E;no-infinities-violation?)
   (&no-nans import . \x2E;&no-nans)
   (make-no-nans-violation import . \x2E;make-no-nans-violation)
   (no-nans-violation? import . \x2E;no-nans-violation?))
 (apply.gloc.of \x2E;intern-scheme-library "../stdlib/core/arithmetic.scm" . 6145))

((call
   (push.const core primitives)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core/sorting.scm" . 6145))
 (close
   (2 0 . core.sorting\x27;list-sort)
   (extend.unbound . 3)
   (push.close
     (2 0)
     (iloc.0 . 0)
     (if.null? (ret.iloc 0 . 1))
     (iloc.0 . 1)
     (if.null? (ret.iloc 0 . 0))
     (call
       (push.car.iloc (0 . 1) "../stdlib/core/sorting.scm" . 23575)
       (push.car.iloc (0 . 0) "../stdlib/core/sorting.scm" . 23586)
       (apply.iloc (2 . 0) "../stdlib/core/sorting.scm" . 23569))
     (if.true
       (push.car.iloc (0 . 1) "../stdlib/core/sorting.scm" . 24599)
       (call
         (push.iloc.0 . 0)
         (push.cdr.iloc (0 . 1) "../stdlib/core/sorting.scm" . 24622)
         (apply.iloc (1 . 0) "../stdlib/core/sorting.scm" . 24610))
       (ret.cons "../stdlib/core/sorting.scm" . 24593))
     (push.car.iloc (0 . 0) "../stdlib/core/sorting.scm" . 25623)
     (call
       (push.cdr.iloc (0 . 0) "../stdlib/core/sorting.scm" . 25641)
       (push.iloc.0 . 1)
       (apply.iloc (1 . 0) "../stdlib/core/sorting.scm" . 25634))
     (ret.cons "../stdlib/core/sorting.scm" . 25617))
   (push.close
     (2 0)
     (=n.iloc (0 . 1) 1 "../stdlib/core/sorting.scm" . 29714)
     (if.true
       (push.car.iloc (0 . 0) "../stdlib/core/sorting.scm" . 30744)
       (ret.subr.gloc.of \x2E;list "../stdlib/core/sorting.scm" . 30738))
     (=n.iloc (0 . 1) 2 "../stdlib/core/sorting.scm" . 31762)
     (if.true
       (call
         (push.cadr.iloc (0 . 0) "../stdlib/core/sorting.scm" . 32796)
         (push.car.iloc (0 . 0) "../stdlib/core/sorting.scm" . 32807)
         (apply.iloc (2 . 0) "../stdlib/core/sorting.scm" . 32790))
       (if.true
         (push.cadr.iloc (0 . 0) "../stdlib/core/sorting.scm" . 33820)
         (push.car.iloc (0 . 0) "../stdlib/core/sorting.scm" . 33831)
         (ret.subr.gloc.of \x2E;list "../stdlib/core/sorting.scm" . 33814))
       (push.car.iloc (0 . 0) "../stdlib/core/sorting.scm" . 34844)
       (push.cadr.iloc (0 . 0) "../stdlib/core/sorting.scm" . 34854)
       (ret.subr.gloc.of \x2E;list "../stdlib/core/sorting.scm" . 34838))
     (push.iloc.0 . 1)
     (push.const . 2)
     (push.subr.gloc.of \x2E;div 2 "../stdlib/core/sorting.scm" . 36893)
     (extend . 1)
     (call
       (push.iloc.1 . 0)
       (push.iloc.0 . 0)
       (apply.iloc (2 . 1) "../stdlib/core/sorting.scm" . 37915))
     (push)
     (call
       (push.iloc.1 . 0)
       (push.iloc.0 . 0)
       (push.subr.gloc.of \x2E;list-tail 2 "../stdlib/core/sorting.scm" . 38945)
       (push.iloc.1 . 1)
       (push.iloc.0 . 0)
       (push.subr.gloc.of \x2E;- 2 "../stdlib/core/sorting.scm" . 38965)
       (apply.iloc (2 . 1) "../stdlib/core/sorting.scm" . 38939))
     (push)
     (apply.iloc (2 . 0) "../stdlib/core/sorting.scm" . 37908))
   (push.close
     (1 0)
     (extend.enclose+
       (2 0 . loop)
       (cdr.iloc (0 . 1) "../stdlib/core/sorting.scm" . 44059)
       (if.null?
         (push.iloc.0 . 0)
         (push.const)
         (ret.subr.gloc.of \x2E;values "../stdlib/core/sorting.scm" . 44070))
       (call
         (push.car.iloc (0 . 1) "../stdlib/core/sorting.scm" . 46110)
         (push.cadr.iloc (0 . 1) "../stdlib/core/sorting.scm" . 46120)
         (apply.iloc (4 . 0) "../stdlib/core/sorting.scm" . 46104))
       (if.true
         (push.n+.iloc (0 . 0) 1 "../stdlib/core/sorting.scm" . 47134)
         (push.cdr.iloc (0 . 1) "../stdlib/core/sorting.scm" . 47144)
         (apply.iloc+ (1 . 0) "../stdlib/core/sorting.scm" . 47128))
       (push.iloc.0 . 0)
       (push.cdr.iloc (0 . 1) "../stdlib/core/sorting.scm" . 48164)
       (ret.subr.gloc.of \x2E;values "../stdlib/core/sorting.scm" . 48152))
     (push.const . 1)
     (push.iloc.1 . 0)
     (apply.iloc+ (0 . 0) "../stdlib/core/sorting.scm" . 43019))
   (enclose . 3)
   (iloc.1 . 1)
   (if.null?.ret.const)
   (push.iloc.1 . 1)
   (push.subr.gloc.of \x2E;length 1 "../stdlib/core/sorting.scm" . 52249)
   (extend . 1)
   (push.close (0 0) (push.iloc 3 . 1) (apply.iloc (2 . 2) "../stdlib/core/sorting.scm" . 53287))
   (push.close
     (2 0)
     (iloc.0 . 1)
     (if.null? (ret.iloc 3 . 1))
     (push.iloc 3 . 1)
     (push.iloc.0 . 0)
     (push.subr.gloc.of \x2E;list-head 2 "../stdlib/core/sorting.scm" . 56352)
     (call
       (push.iloc.0 . 1)
       (push.iloc.1 . 0)
       (push.iloc.0 . 0)
       (push.subr.gloc.of \x2E;- 2 "../stdlib/core/sorting.scm" . 57387)
       (apply.iloc (2 . 1) "../stdlib/core/sorting.scm" . 57376))
     (push)
     (apply.iloc (2 . 0) "../stdlib/core/sorting.scm" . 56345))
   (apply.gloc.of \x2E;call-with-values "../stdlib/core/sorting.scm" . 52238))
 (set.gloc.of core.sorting\x27;list-sort)
 (close
   (2 0 . core.sorting\x27;vector-sort)
   (push.iloc.0 . 1)
   (push.subr.gloc.of \x2E;vector->list 1 "../stdlib/core/sorting.scm" . 61458)
   (extend . 1)
   (call
     (push.iloc.1 . 0)
     (push.iloc.0 . 0)
     (apply.gloc.of core.sorting\x27;list-sort "../stdlib/core/sorting.scm" . 62485))
   (push)
   (extend . 1)
   (push.iloc.1 . 0)
   (iloc.0 . 0)
   (if.eq? (ret.iloc 2 . 1))
   (push.iloc.0 . 0)
   (ret.subr.gloc.of \x2E;list->vector "../stdlib/core/sorting.scm" . 65554))
 (set.gloc.of core.sorting\x27;vector-sort)
 (close
   (2 0 . core.sorting\x27;vector-sort!)
   (push.iloc.0 . 1)
   (push.subr.gloc.of \x2E;vector-length 1 "../stdlib/core/sorting.scm" . 69649)
   (extend . 1)
   (push.iloc.0 . 0)
   (push.const . 2)
   (push.subr.gloc.of \x2E;div 2 "../stdlib/core/sorting.scm" . 69693)
   (push.const . 1)
   (push.subr.gloc.of \x2E;+ 2 "../stdlib/core/sorting.scm" . 69690)
   (push.subr.gloc.of \x2E;make-vector 1 "../stdlib/core/sorting.scm" . 69677)
   (extend . 1)
   (extend.unbound . 2)
   (push.close
     (2 0)
     (extend.enclose+
       (1 0 . loop1)
       (iloc.0 . 0)
       (<.iloc (2 . 1) "../stdlib/core/sorting.scm" . 74774)
       (if.true
         (push.iloc 6 . 1)
         (push.iloc.0 . 0)
         (push.subr.gloc.of \x2E;vector-ref 2 "../stdlib/core/sorting.scm" . 75807)
         (push.iloc.0 . 0)
         (extend . 2)
         (extend.enclose+
           (1 0 . loop2)
           (iloc.0 . 0)
           (<=.iloc (5 . 1) "../stdlib/core/sorting.scm" . 77857)
           (if.true
             (call
               (call
                 (push.iloc 9 . 1)
                 (push.iloc.0 . 0)
                 (push.subr.gloc.of \x2E;vector-ref 2 "../stdlib/core/sorting.scm" . 78891)
                 (push.iloc 2 . 0)
                 (apply.iloc (9 . 0) "../stdlib/core/sorting.scm" . 78885))
               (if.false.ret)
               (push.iloc 9 . 1)
               (push.iloc.0 . 0)
               (subr.gloc.of \x2E;vector-ref 2 "../stdlib/core/sorting.scm" . 80943)
               (set.iloc 2 . 0)
               (iloc.0 . 0)
               (set.iloc 2 . 1)
               (ret.const.unspec))
             (push.n+.iloc (0 . 0) 1 "../stdlib/core/sorting.scm" . 82984)
             (apply.iloc+ (1 . 0) "../stdlib/core/sorting.scm" . 82977))
           (push.iloc 9 . 1)
           (push.iloc 2 . 1)
           (push.iloc 9 . 1)
           (push.iloc 3 . 0)
           (push.subr.gloc.of \x2E;vector-ref 2 "../stdlib/core/sorting.scm" . 85045)
           (subr.gloc.of \x2E;vector-set! 3 "../stdlib/core/sorting.scm" . 85025)
           (push.iloc 9 . 1)
           (push.iloc 3 . 0)
           (push.iloc 2 . 0)
           (subr.gloc.of \x2E;vector-set! 3 "../stdlib/core/sorting.scm" . 86049)
           (push.n+.iloc (3 . 0) 1 "../stdlib/core/sorting.scm" . 87080)
           (apply.iloc+ (4 . 0) "../stdlib/core/sorting.scm" . 87073))
         (push.n+.iloc (2 . 0) 1 "../stdlib/core/sorting.scm" . 76839)
         (apply.iloc+ (0 . 0) "../stdlib/core/sorting.scm" . 76824))
       (ret.const.unspec))
     (push.iloc.1 . 0)
     (apply.iloc+ (0 . 0) "../stdlib/core/sorting.scm" . 73741))
   (push.close
     (2 0)
     (push.iloc.0 . 1)
     (push.iloc.0 . 0)
     (push.subr.gloc.of \x2E;- 2 "../stdlib/core/sorting.scm" . 91159)
     (push.const . 10)
     (subr.gloc.of \x2E;> 2 "../stdlib/core/sorting.scm" . 91156)
     (if.true
       (push.iloc.0 . 0)
       (push.iloc.0 . 1)
       (push.subr.gloc.of \x2E;+ 2 "../stdlib/core/sorting.scm" . 92199)
       (push.const . 2)
       (push.subr.gloc.of \x2E;div 2 "../stdlib/core/sorting.scm" . 92194)
       (extend . 1)
       (call
         (push.iloc.1 . 0)
         (push.iloc.0 . 0)
         (apply.iloc (2 . 1) "../stdlib/core/sorting.scm" . 93206))
       (call
         (push.n+.iloc (0 . 0) 1 "../stdlib/core/sorting.scm" . 94237)
         (push.iloc.1 . 1)
         (apply.iloc (2 . 1) "../stdlib/core/sorting.scm" . 94230))
       (extend.enclose+
         (2 0 . loop)
         (iloc.0 . 0)
         (>.iloc (2 . 0) "../stdlib/core/sorting.scm" . 96287)
         (if.true
           (extend.enclose+
             (3 0 . loop)
             (call
               (iloc.0 . 0)
               (<=.iloc (5 . 1) "../stdlib/core/sorting.scm" . 98349)
               (if.false.ret)
               (push.iloc.0 . 1)
               (push.iloc 2 . 1)
               (ret.subr.gloc.of \x2E;< "../stdlib/core/sorting.scm" . 98362))
             (if.true
               (call
                 (push.iloc 7 . 0)
                 (push.iloc.0 . 1)
                 (push.subr.gloc.of \x2E;vector-ref 2 "../stdlib/core/sorting.scm" . 99381)
                 (push.iloc 9 . 1)
                 (push.iloc.0 . 0)
                 (push.subr.gloc.of \x2E;vector-ref 2 "../stdlib/core/sorting.scm" . 99402)
                 (apply.iloc (9 . 0) "../stdlib/core/sorting.scm" . 99375))
               (if.true
                 (push.iloc 9 . 1)
                 (push.iloc.0 . 2)
                 (push.iloc 7 . 0)
                 (push.iloc.0 . 1)
                 (push.subr.gloc.of \x2E;vector-ref 2 "../stdlib/core/sorting.scm" . 100420)
                 (subr.gloc.of \x2E;vector-set! 3 "../stdlib/core/sorting.scm" . 100399)
                 (push.iloc.0 . 0)
                 (push.n+.iloc (0 . 1) 1 "../stdlib/core/sorting.scm" . 101432)
                 (push.n+.iloc (0 . 2) 1 "../stdlib/core/sorting.scm" . 101441)
                 (apply.iloc+ (1 . 0) "../stdlib/core/sorting.scm" . 101423))
               (push.iloc 9 . 1)
               (push.iloc.0 . 2)
               (push.iloc 9 . 1)
               (push.iloc.0 . 0)
               (push.subr.gloc.of \x2E;vector-ref 2 "../stdlib/core/sorting.scm" . 103492)
               (subr.gloc.of \x2E;vector-set! 3 "../stdlib/core/sorting.scm" . 103471)
               (push.n+.iloc (0 . 0) 1 "../stdlib/core/sorting.scm" . 104501)
               (push.iloc.0 . 1)
               (push.n+.iloc (0 . 2) 1 "../stdlib/core/sorting.scm" . 104513)
               (apply.iloc+ (1 . 0) "../stdlib/core/sorting.scm" . 104495))
             (extend.enclose+
               (2 0 . loop)
               (iloc.0 . 0)
               (<.iloc (4 . 1) "../stdlib/core/sorting.scm" . 107569)
               (if.true
                 (push.iloc 11 . 1)
                 (push.iloc.0 . 1)
                 (push.iloc 9 . 0)
                 (push.iloc.0 . 0)
                 (push.subr.gloc.of \x2E;vector-ref 2 "../stdlib/core/sorting.scm" . 108614)
                 (subr.gloc.of \x2E;vector-set! 3 "../stdlib/core/sorting.scm" . 108593)
                 (push.n+.iloc (0 . 0) 1 "../stdlib/core/sorting.scm" . 109623)
                 (push.n+.iloc (0 . 1) 1 "../stdlib/core/sorting.scm" . 109632)
                 (apply.iloc+ (1 . 0) "../stdlib/core/sorting.scm" . 109617))
               (ret.const.unspec))
             (push.iloc.1 . 1)
             (push.iloc.1 . 2)
             (apply.iloc+ (0 . 0) "../stdlib/core/sorting.scm" . 106536))
           (push.n+.iloc (3 . 0) 1 "../stdlib/core/sorting.scm" . 97326)
           (push.const . 0)
           (push.iloc 4 . 0)
           (apply.iloc+ (0 . 0) "../stdlib/core/sorting.scm" . 97311))
         (push.iloc 5 . 0)
         (push.iloc.0 . 1)
         (push.iloc 7 . 1)
         (push.iloc.0 . 0)
         (push.subr.gloc.of \x2E;vector-ref 2 "../stdlib/core/sorting.scm" . 111672)
         (subr.gloc.of \x2E;vector-set! 3 "../stdlib/core/sorting.scm" . 111647)
         (push.n+.iloc (0 . 0) 1 "../stdlib/core/sorting.scm" . 112677)
         (push.n+.iloc (0 . 1) 1 "../stdlib/core/sorting.scm" . 112685)
         (apply.iloc+ (1 . 0) "../stdlib/core/sorting.scm" . 112671))
       (push.iloc 2 . 0)
       (push.const . 0)
       (apply.iloc+ (0 . 0) "../stdlib/core/sorting.scm" . 95254))
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (apply.iloc (1 . 0) "../stdlib/core/sorting.scm" . 114708))
   (enclose . 2)
   (push.const . 0)
   (push.n+.iloc (2 . 0) -1 "../stdlib/core/sorting.scm" . 116754)
   (apply.iloc (0 . 1) "../stdlib/core/sorting.scm" . 116745))
 (set.gloc.of core.sorting\x27;vector-sort!)
 (push.const . core.sorting)
 (push.const . #f)
 (push.const
   (list-sort import . core.sorting\x27;list-sort)
   (vector-sort import . core.sorting\x27;vector-sort)
   (vector-sort! import . core.sorting\x27;vector-sort!))
 (apply.gloc.of \x2E;intern-scheme-library "../stdlib/core/sorting.scm" . 6145))

((call
   (push.const core arithmetic)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core/bytevectors.scm" . 6145))
 (call
   (push.const core primitives)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core/bytevectors.scm" . 6145))
 (close
   (4 0 . core.bytevectors\x27;bytevector-uint-ref)
   (push.iloc.0 . 2)
   (const . big)
   (if.eq?
     (push.iloc.0 . 1)
     (push.iloc.0 . 3)
     (push.subr.gloc.of \x2E;+ 2 "../stdlib/core/bytevectors.scm" . 47129)
     (extend . 1)
     (extend.enclose+
       (2 0 . loop)
       (iloc.0 . 0)
       (>=.iloc (2 . 0) "../stdlib/core/bytevectors.scm" . 49174)
       (if.true (ret.iloc 0 . 1))
       (push.n+.iloc (0 . 0) 1 "../stdlib/core/bytevectors.scm" . 51228)
       (push.const . 256)
       (push.iloc.0 . 1)
       (push.subr.gloc.of \x2E;* 2 "../stdlib/core/bytevectors.scm" . 51239)
       (push.iloc 3 . 0)
       (push.iloc.0 . 0)
       (push.subr.gloc.of \x2E;bytevector-u8-ref 2 "../stdlib/core/bytevectors.scm" . 51251)
       (push.subr.gloc.of \x2E;+ 2 "../stdlib/core/bytevectors.scm" . 51236)
       (apply.iloc+ (1 . 0) "../stdlib/core/bytevectors.scm" . 51222))
     (push.iloc 2 . 1)
     (push.const . 0)
     (apply.iloc+ (0 . 0) "../stdlib/core/bytevectors.scm" . 48144))
   (push.iloc.0 . 2)
   (const . little)
   (if.eq?
     (extend.enclose+
       (2 0 . loop)
       (iloc.0 . 0)
       (<.iloc (2 . 1) "../stdlib/core/bytevectors.scm" . 54292)
       (if.true (ret.iloc 0 . 1))
       (push.n+.iloc (0 . 0) -1 "../stdlib/core/bytevectors.scm" . 56346)
       (push.const . 256)
       (push.iloc.0 . 1)
       (push.subr.gloc.of \x2E;* 2 "../stdlib/core/bytevectors.scm" . 56357)
       (push.iloc 2 . 0)
       (push.iloc.0 . 0)
       (push.subr.gloc.of \x2E;bytevector-u8-ref 2 "../stdlib/core/bytevectors.scm" . 56369)
       (push.subr.gloc.of \x2E;+ 2 "../stdlib/core/bytevectors.scm" . 56354)
       (apply.iloc+ (1 . 0) "../stdlib/core/bytevectors.scm" . 56340))
     (push.iloc.1 . 1)
     (push.iloc.1 . 3)
     (push.const . -1)
     (push.subr.gloc.of \x2E;+ 3 "../stdlib/core/bytevectors.scm" . 53276)
     (push.const . 0)
     (apply.iloc+ (0 . 0) "../stdlib/core/bytevectors.scm" . 53262))
   (push.const . bytevector-uint-ref)
   (push.const . "expected endianness, but got ~r, as argument 3")
   (push.iloc.0 . 2)
   (push.subr.gloc.of \x2E;format 2 "../stdlib/core/bytevectors.scm" . 59427)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.iloc.0 . 2)
   (push.iloc.0 . 3)
   (push.subr.gloc.of \x2E;list 4 "../stdlib/core/bytevectors.scm" . 60451)
   (apply.gloc.of \x2E;assertion-violation "../stdlib/core/bytevectors.scm" . 58382))
 (set.gloc.of core.bytevectors\x27;bytevector-uint-ref)
 (close
   (4 0 . core.bytevectors\x27;bytevector-sint-ref)
   (push.iloc.0 . 2)
   (const . big)
   (if.eq?
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.subr.gloc.of \x2E;bytevector-u8-ref 2 "../stdlib/core/bytevectors.scm" . 65557)
     (push.const . 127)
     (subr.gloc.of \x2E;> 2 "../stdlib/core/bytevectors.scm" . 65554)
     (if.true
       (call
         (push.iloc.0 . 0)
         (push.iloc.0 . 1)
         (push.iloc.0 . 2)
         (push.iloc.0 . 3)
         (apply.gloc.of
           core.bytevectors\x27;bytevector-uint-ref
           "../stdlib/core/bytevectors.scm"
           .
           66581))
       (push)
       (push.const . 256)
       (push.iloc.0 . 3)
       (push.subr.gloc.of \x2E;expt 2 "../stdlib/core/bytevectors.scm" . 66624)
       (ret.subr.gloc.of \x2E;- "../stdlib/core/bytevectors.scm" . 66578))
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.iloc.0 . 2)
     (push.iloc.0 . 3)
     (apply.gloc.of
       core.bytevectors\x27;bytevector-uint-ref
       "../stdlib/core/bytevectors.scm"
       .
       67602))
   (push.iloc.0 . 2)
   (const . little)
   (if.eq?
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.iloc.0 . 3)
     (push.const . -1)
     (push.subr.gloc.of \x2E;+ 3 "../stdlib/core/bytevectors.scm" . 69675)
     (push.subr.gloc.of \x2E;bytevector-u8-ref 2 "../stdlib/core/bytevectors.scm" . 69653)
     (push.const . 127)
     (subr.gloc.of \x2E;> 2 "../stdlib/core/bytevectors.scm" . 69650)
     (if.true
       (call
         (push.iloc.0 . 0)
         (push.iloc.0 . 1)
         (push.iloc.0 . 2)
         (push.iloc.0 . 3)
         (apply.gloc.of
           core.bytevectors\x27;bytevector-uint-ref
           "../stdlib/core/bytevectors.scm"
           .
           70677))
       (push)
       (push.const . 256)
       (push.iloc.0 . 3)
       (push.subr.gloc.of \x2E;expt 2 "../stdlib/core/bytevectors.scm" . 70720)
       (ret.subr.gloc.of \x2E;- "../stdlib/core/bytevectors.scm" . 70674))
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.iloc.0 . 2)
     (push.iloc.0 . 3)
     (apply.gloc.of
       core.bytevectors\x27;bytevector-uint-ref
       "../stdlib/core/bytevectors.scm"
       .
       71698))
   (push.const . bytevector-uint-ref)
   (push.const . "expected endianness, but got ~r, as argument 3")
   (push.iloc.0 . 2)
   (push.subr.gloc.of \x2E;format 2 "../stdlib/core/bytevectors.scm" . 74787)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.iloc.0 . 2)
   (push.iloc.0 . 3)
   (push.subr.gloc.of \x2E;list 4 "../stdlib/core/bytevectors.scm" . 75811)
   (apply.gloc.of \x2E;assertion-violation "../stdlib/core/bytevectors.scm" . 73742))
 (set.gloc.of core.bytevectors\x27;bytevector-sint-ref)
 (close
   (5 0 . core.bytevectors\x27;bytevector-uint-set!)
   (call
     (=n.iloc (0 . 2) 0 "../stdlib/core/bytevectors.scm" . 79886)
     (if.true
       (push.iloc.0 . 1)
       (push.iloc.0 . 4)
       (push.subr.gloc.of \x2E;+ 2 "../stdlib/core/bytevectors.scm" . 80921)
       (extend . 1)
       (extend.enclose+
         (1 0 . loop)
         (iloc.0 . 0)
         (>=.iloc (2 . 0) "../stdlib/core/bytevectors.scm" . 82969)
         (if.true (ret.const.unspec))
         (push.iloc 3 . 0)
         (push.iloc.0 . 0)
         (push.const . 0)
         (subr.gloc.of \x2E;bytevector-u8-set! 3 "../stdlib/core/bytevectors.scm" . 85017)
         (push.n+.iloc (0 . 0) 1 "../stdlib/core/bytevectors.scm" . 86047)
         (apply.iloc+ (1 . 0) "../stdlib/core/bytevectors.scm" . 86041))
       (push.iloc 2 . 1)
       (apply.iloc+ (0 . 0) "../stdlib/core/bytevectors.scm" . 81936))
     (push.const . 0)
     (push.iloc.0 . 2)
     (push.const . 256)
     (push.iloc.0 . 4)
     (push.subr.gloc.of \x2E;expt 2 "../stdlib/core/bytevectors.scm" . 87063)
     (subr.gloc.of \x2E;< 3 "../stdlib/core/bytevectors.scm" . 87054)
     (if.true
       (push.iloc.0 . 3)
       (const . big)
       (if.eq?
         (extend.enclose+
           (2 0 . loop)
           (iloc.0 . 0)
           (<.iloc (2 . 1) "../stdlib/core/bytevectors.scm" . 91168)
           (if.true (ret.const.unspec))
           (push.iloc 2 . 0)
           (push.iloc.0 . 0)
           (push.iloc.0 . 1)
           (push.const . 255)
           (push.subr.gloc.of \x2E;bitwise-and 2 "../stdlib/core/bytevectors.scm" . 93216)
           (subr.gloc.of \x2E;bytevector-u8-set! 3 "../stdlib/core/bytevectors.scm" . 93216)
           (push.n+.iloc (0 . 0) -1 "../stdlib/core/bytevectors.scm" . 94246)
           (push.iloc.0 . 1)
           (push.const . -8)
           (push.subr.gloc.of
             \x2E;bitwise-arithmetic-shift
             2
             "../stdlib/core/bytevectors.scm"
             .
             94240)
           (apply.iloc+ (1 . 0) "../stdlib/core/bytevectors.scm" . 94240))
         (push.iloc.1 . 1)
         (push.iloc.1 . 4)
         (push.subr.gloc.of \x2E;+ 2 "../stdlib/core/bytevectors.scm" . 89125)
         (push.const . 1)
         (push.subr.gloc.of \x2E;- 2 "../stdlib/core/bytevectors.scm" . 89122)
         (push.iloc.1 . 2)
         (apply.iloc+ (0 . 0) "../stdlib/core/bytevectors.scm" . 90135))
       (push.iloc.0 . 3)
       (const . little)
       (if.eq?
         (push.iloc.0 . 1)
         (push.iloc.0 . 4)
         (push.subr.gloc.of \x2E;+ 2 "../stdlib/core/bytevectors.scm" . 96288)
         (extend . 1)
         (extend.enclose+
           (2 0 . loop)
           (iloc.0 . 0)
           (>=.iloc (2 . 0) "../stdlib/core/bytevectors.scm" . 98336)
           (if.true (ret.const.unspec))
           (push.iloc 3 . 0)
           (push.iloc.0 . 0)
           (push.iloc.0 . 1)
           (push.const . 255)
           (push.subr.gloc.of \x2E;bitwise-and 2 "../stdlib/core/bytevectors.scm" . 100384)
           (subr.gloc.of \x2E;bytevector-u8-set! 3 "../stdlib/core/bytevectors.scm" . 100384)
           (push.n+.iloc (0 . 0) 1 "../stdlib/core/bytevectors.scm" . 101414)
           (push.iloc.0 . 1)
           (push.const . -8)
           (push.subr.gloc.of
             \x2E;bitwise-arithmetic-shift
             2
             "../stdlib/core/bytevectors.scm"
             .
             101408)
           (apply.iloc+ (1 . 0) "../stdlib/core/bytevectors.scm" . 101408))
         (push.iloc 2 . 1)
         (push.iloc 2 . 2)
         (apply.iloc+ (0 . 0) "../stdlib/core/bytevectors.scm" . 97303))
       (ret.const.unspec))
     (push.const . bytevector-uint-set!)
     (push.const . "value out of range, ~s as argument 3")
     (push.iloc.0 . 2)
     (push.subr.gloc.of \x2E;format 2 "../stdlib/core/bytevectors.scm" . 104483)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.iloc.0 . 2)
     (push.iloc.0 . 3)
     (push.iloc.0 . 4)
     (push.subr.gloc.of \x2E;list 5 "../stdlib/core/bytevectors.scm" . 105507)
     (apply.gloc.of \x2E;assertion-violation "../stdlib/core/bytevectors.scm" . 103438))
   (ret.const.unspec))
 (set.gloc.of core.bytevectors\x27;bytevector-uint-set!)
 (close
   (5 0 . core.bytevectors\x27;bytevector-sint-set!)
   (call
     (push.const . 2)
     (push.iloc.0 . 4)
     (push.const . 8)
     (push.subr.gloc.of \x2E;* 2 "../stdlib/core/bytevectors.scm" . 110626)
     (push.const . 1)
     (push.subr.gloc.of \x2E;- 2 "../stdlib/core/bytevectors.scm" . 110623)
     (push.subr.gloc.of \x2E;expt 2 "../stdlib/core/bytevectors.scm" . 110615)
     (extend . 1)
     (push.n+.iloc (0 . 0) 1 "../stdlib/core/bytevectors.scm" . 111642)
     (push.subr.gloc.of \x2E;- 1 "../stdlib/core/bytevectors.scm" . 111639)
     (push.iloc.1 . 2)
     (push.iloc.0 . 0)
     (subr.gloc.of \x2E;< 3 "../stdlib/core/bytevectors.scm" . 112653)
     (if.true
       (>n.iloc (1 . 2) 0 "../stdlib/core/bytevectors.scm" . 113681)
       (if.true
         (push.iloc.1 . 0)
         (push.iloc.1 . 1)
         (push.iloc.1 . 2)
         (push.iloc.1 . 3)
         (push.iloc.1 . 4)
         (apply.gloc.of
           core.bytevectors\x27;bytevector-uint-set!
           "../stdlib/core/bytevectors.scm"
           .
           114705))
       (push.iloc.1 . 0)
       (push.iloc.1 . 1)
       (push.iloc.1 . 2)
       (push.const . 256)
       (push.iloc.1 . 4)
       (push.subr.gloc.of \x2E;expt 2 "../stdlib/core/bytevectors.scm" . 115767)
       (push.subr.gloc.of \x2E;+ 2 "../stdlib/core/bytevectors.scm" . 115760)
       (push.iloc.1 . 3)
       (push.iloc.1 . 4)
       (apply.gloc.of
         core.bytevectors\x27;bytevector-uint-set!
         "../stdlib/core/bytevectors.scm"
         .
         115729))
     (push.const . bytevector-sint-set!)
     (push.const . "value out of range, ~s as argument 3")
     (push.iloc.1 . 2)
     (push.subr.gloc.of \x2E;format 2 "../stdlib/core/bytevectors.scm" . 117794)
     (push.iloc.1 . 0)
     (push.iloc.1 . 1)
     (push.iloc.1 . 2)
     (push.iloc.1 . 3)
     (push.iloc.1 . 4)
     (push.subr.gloc.of \x2E;list 5 "../stdlib/core/bytevectors.scm" . 118818)
     (apply.gloc.of \x2E;assertion-violation "../stdlib/core/bytevectors.scm" . 116749))
   (ret.const.unspec))
 (set.gloc.of core.bytevectors\x27;bytevector-sint-set!)
 (close
   (3 0 . core.bytevectors\x27;bytevector->uint-list)
   (extend.enclose+
     (2 0 . loop)
     (>n.iloc (0 . 0) -1 "../stdlib/core/bytevectors.scm" . 124941)
     (if.true
       (push.iloc.0 . 0)
       (push.iloc 2 . 2)
       (push.subr.gloc.of \x2E;- 2 "../stdlib/core/bytevectors.scm" . 125971)
       (call
         (push.iloc 2 . 0)
         (push.iloc.0 . 0)
         (push.iloc 2 . 1)
         (push.iloc 2 . 2)
         (apply.gloc.of
           core.bytevectors\x27;bytevector-uint-ref
           "../stdlib/core/bytevectors.scm"
           .
           125988))
       (push)
       (iloc.0 . 1)
       (push.cons)
       (apply.iloc+ (1 . 0) "../stdlib/core/bytevectors.scm" . 125965))
     (push.iloc 2 . 2)
     (subr.gloc.of \x2E;- 1 "../stdlib/core/bytevectors.scm" . 126998)
     (=.iloc (0 . 0) "../stdlib/core/bytevectors.scm" . 126993)
     (if.true (ret.iloc 0 . 1))
     (push.const . bytevector->uint-list)
     (push.const . "expected appropriate element size as argument 3, but got ~r")
     (push.iloc 2 . 2)
     (push.subr.gloc.of \x2E;format 2 "../stdlib/core/bytevectors.scm" . 130086)
     (push.iloc 2 . 0)
     (push.iloc 2 . 1)
     (push.iloc 2 . 2)
     (push.subr.gloc.of \x2E;list 3 "../stdlib/core/bytevectors.scm" . 131110)
     (apply.gloc.of \x2E;assertion-violation "../stdlib/core/bytevectors.scm" . 129041))
   (push.iloc.1 . 0)
   (push.subr.gloc.of \x2E;bytevector-length 1 "../stdlib/core/bytevectors.scm" . 123928)
   (push.iloc.1 . 2)
   (push.subr.gloc.of \x2E;- 2 "../stdlib/core/bytevectors.scm" . 123925)
   (push.const)
   (apply.iloc+ (0 . 0) "../stdlib/core/bytevectors.scm" . 123911))
 (set.gloc.of core.bytevectors\x27;bytevector->uint-list)
 (close
   (3 0 . core.bytevectors\x27;bytevector->sint-list)
   (extend.enclose+
     (2 0 . loop)
     (>n.iloc (0 . 0) -1 "../stdlib/core/bytevectors.scm" . 136205)
     (if.true
       (push.iloc.0 . 0)
       (push.iloc 2 . 2)
       (push.subr.gloc.of \x2E;- 2 "../stdlib/core/bytevectors.scm" . 137235)
       (call
         (push.iloc 2 . 0)
         (push.iloc.0 . 0)
         (push.iloc 2 . 1)
         (push.iloc 2 . 2)
         (apply.gloc.of
           core.bytevectors\x27;bytevector-sint-ref
           "../stdlib/core/bytevectors.scm"
           .
           137252))
       (push)
       (iloc.0 . 1)
       (push.cons)
       (apply.iloc+ (1 . 0) "../stdlib/core/bytevectors.scm" . 137229))
     (push.iloc 2 . 2)
     (subr.gloc.of \x2E;- 1 "../stdlib/core/bytevectors.scm" . 138262)
     (=.iloc (0 . 0) "../stdlib/core/bytevectors.scm" . 138257)
     (if.true (ret.iloc 0 . 1))
     (push.const . bytevector->sint-list)
     (push.const . "expected appropriate element size as argument 3, but got ~r")
     (push.iloc 2 . 2)
     (push.subr.gloc.of \x2E;format 2 "../stdlib/core/bytevectors.scm" . 141350)
     (push.iloc 2 . 0)
     (push.iloc 2 . 1)
     (push.iloc 2 . 2)
     (push.subr.gloc.of \x2E;list 3 "../stdlib/core/bytevectors.scm" . 142374)
     (apply.gloc.of \x2E;assertion-violation "../stdlib/core/bytevectors.scm" . 140305))
   (push.iloc.1 . 0)
   (push.subr.gloc.of \x2E;bytevector-length 1 "../stdlib/core/bytevectors.scm" . 135192)
   (push.iloc.1 . 2)
   (push.subr.gloc.of \x2E;- 2 "../stdlib/core/bytevectors.scm" . 135189)
   (push.const)
   (apply.iloc+ (0 . 0) "../stdlib/core/bytevectors.scm" . 135175))
 (set.gloc.of core.bytevectors\x27;bytevector->sint-list)
 (close
   (3 0 . core.bytevectors\x27;uint-list->bytevector)
   (push.iloc.0 . 2)
   (push.iloc.0 . 0)
   (push.subr.gloc.of \x2E;length 1 "../stdlib/core/bytevectors.scm" . 146474)
   (push.subr.gloc.of \x2E;* 2 "../stdlib/core/bytevectors.scm" . 146466)
   (push.subr.gloc.of \x2E;make-bytevector 1 "../stdlib/core/bytevectors.scm" . 146449)
   (extend . 1)
   (extend.enclose+
     (2 0 . loop)
     (iloc.0 . 1)
     (if.null? (ret.iloc 2 . 0))
     (call
       (push.iloc 2 . 0)
       (push.iloc.0 . 0)
       (push.car.iloc (0 . 1) "../stdlib/core/bytevectors.scm" . 150573)
       (push.iloc 3 . 1)
       (push.iloc 3 . 2)
       (apply.gloc.of
         core.bytevectors\x27;bytevector-uint-set!
         "../stdlib/core/bytevectors.scm"
         .
         150546))
     (push.iloc.0 . 0)
     (push.iloc 3 . 2)
     (push.subr.gloc.of \x2E;+ 2 "../stdlib/core/bytevectors.scm" . 151576)
     (push.cdr.iloc (0 . 1) "../stdlib/core/bytevectors.scm" . 151587)
     (apply.iloc+ (1 . 0) "../stdlib/core/bytevectors.scm" . 151570))
   (push.const . 0)
   (push.iloc 2 . 0)
   (apply.iloc+ (0 . 0) "../stdlib/core/bytevectors.scm" . 147465))
 (set.gloc.of core.bytevectors\x27;uint-list->bytevector)
 (close
   (3 0 . core.bytevectors\x27;sint-list->bytevector)
   (push.iloc.0 . 2)
   (push.iloc.0 . 0)
   (push.subr.gloc.of \x2E;length 1 "../stdlib/core/bytevectors.scm" . 155690)
   (push.subr.gloc.of \x2E;* 2 "../stdlib/core/bytevectors.scm" . 155682)
   (push.subr.gloc.of \x2E;make-bytevector 1 "../stdlib/core/bytevectors.scm" . 155665)
   (extend . 1)
   (extend.enclose+
     (2 0 . loop)
     (iloc.0 . 1)
     (if.null? (ret.iloc 2 . 0))
     (call
       (push.iloc 2 . 0)
       (push.iloc.0 . 0)
       (push.car.iloc (0 . 1) "../stdlib/core/bytevectors.scm" . 159789)
       (push.iloc 3 . 1)
       (push.iloc 3 . 2)
       (apply.gloc.of
         core.bytevectors\x27;bytevector-sint-set!
         "../stdlib/core/bytevectors.scm"
         .
         159762))
     (push.iloc.0 . 0)
     (push.iloc 3 . 2)
     (push.subr.gloc.of \x2E;+ 2 "../stdlib/core/bytevectors.scm" . 160792)
     (push.cdr.iloc (0 . 1) "../stdlib/core/bytevectors.scm" . 160803)
     (apply.iloc+ (1 . 0) "../stdlib/core/bytevectors.scm" . 160786))
   (push.const . 0)
   (push.iloc 2 . 0)
   (apply.iloc+ (0 . 0) "../stdlib/core/bytevectors.scm" . 156681))
 (set.gloc.of core.bytevectors\x27;sint-list->bytevector)
 (call
   (push.const
     (bitwise-and import . \x2E;bitwise-and)
     (native-endianness import . \x2E;native-endianness)
     (bitwise-arithmetic-shift import . \x2E;bitwise-arithmetic-shift)
     (_ import . \x2E;_)
     (quote import . \x2E;quote))
   (extend . 1)
   (call
     (push.const . syntax)
     (push.const . core.bytevectors\x27;div256)
     (push.const
       ()
       ("../stdlib/core/bytevectors.scm" . 30725)
       ((_ x) (bitwise-arithmetic-shift x -8) ((x . 0)) (bitwise-arithmetic-shift)))
     (push.iloc.0 . 0)
     (apply.gloc.of \x2E;set-top-level-macro! "../stdlib/core/bytevectors.scm" . 6145))
   (call
     (push.const . syntax)
     (push.const . core.bytevectors\x27;mod256)
     (push.const
       ()
       ("../stdlib/core/bytevectors.scm" . 34821)
       ((_ x) (bitwise-and x 255) ((x . 0)) (bitwise-and)))
     (push.iloc.0 . 0)
     (apply.gloc.of \x2E;set-top-level-macro! "../stdlib/core/bytevectors.scm" . 6145))
   (push.const . syntax)
   (push.const . core.bytevectors\x27;endianness)
   (push.const
     (big little native)
     ("../stdlib/core/bytevectors.scm" . 38917)
     ((_ big) 'big () (big quote))
     ((_ little) 'little () (little quote))
     ((_ native) (native-endianness) () (native-endianness)))
   (push.iloc.0 . 0)
   (apply.gloc.of \x2E;set-top-level-macro! "../stdlib/core/bytevectors.scm" . 6145))
 (push.const . core.bytevectors)
 (push.const . #f)
 (push.const
   (endianness import . core.bytevectors\x27;endianness)
   (native-endianness import . \x2E;native-endianness)
   (bytevector? import . \x2E;bytevector?)
   (make-bytevector import . \x2E;make-bytevector)
   (bytevector-length import . \x2E;bytevector-length)
   (bytevector=? import . \x2E;bytevector=?)
   (bytevector-fill! import . \x2E;bytevector-fill!)
   (bytevector-copy! import . \x2E;bytevector-copy!)
   (bytevector-copy import . \x2E;bytevector-copy)
   (bytevector-u8-ref import . \x2E;bytevector-u8-ref)
   (bytevector-s8-ref import . \x2E;bytevector-s8-ref)
   (bytevector-u8-set! import . \x2E;bytevector-u8-set!)
   (bytevector-s8-set! import . \x2E;bytevector-s8-set!)
   (bytevector->u8-list import . \x2E;bytevector->u8-list)
   (u8-list->bytevector import . \x2E;u8-list->bytevector)
   (bytevector-uint-ref import . core.bytevectors\x27;bytevector-uint-ref)
   (bytevector-sint-ref import . core.bytevectors\x27;bytevector-sint-ref)
   (bytevector-uint-set! import . core.bytevectors\x27;bytevector-uint-set!)
   (bytevector-sint-set! import . core.bytevectors\x27;bytevector-sint-set!)
   (bytevector->uint-list import . core.bytevectors\x27;bytevector->uint-list)
   (bytevector->sint-list import . core.bytevectors\x27;bytevector->sint-list)
   (uint-list->bytevector import . core.bytevectors\x27;uint-list->bytevector)
   (sint-list->bytevector import . core.bytevectors\x27;sint-list->bytevector)
   (bytevector-u16-ref import . \x2E;bytevector-u16-ref)
   (bytevector-s16-ref import . \x2E;bytevector-s16-ref)
   (bytevector-u16-native-ref import . \x2E;bytevector-u16-native-ref)
   (bytevector-s16-native-ref import . \x2E;bytevector-s16-native-ref)
   (bytevector-u16-set! import . \x2E;bytevector-u16-set!)
   (bytevector-s16-set! import . \x2E;bytevector-s16-set!)
   (bytevector-u16-native-set! import . \x2E;bytevector-u16-native-set!)
   (bytevector-s16-native-set! import . \x2E;bytevector-s16-native-set!)
   (bytevector-u32-ref import . \x2E;bytevector-u32-ref)
   (bytevector-s32-ref import . \x2E;bytevector-s32-ref)
   (bytevector-u32-native-ref import . \x2E;bytevector-u32-native-ref)
   (bytevector-s32-native-ref import . \x2E;bytevector-s32-native-ref)
   (bytevector-u32-set! import . \x2E;bytevector-u32-set!)
   (bytevector-s32-set! import . \x2E;bytevector-s32-set!)
   (bytevector-u32-native-set! import . \x2E;bytevector-u32-native-set!)
   (bytevector-s32-native-set! import . \x2E;bytevector-s32-native-set!)
   (bytevector-u64-ref import . \x2E;bytevector-u64-ref)
   (bytevector-s64-ref import . \x2E;bytevector-s64-ref)
   (bytevector-u64-native-ref import . \x2E;bytevector-u64-native-ref)
   (bytevector-s64-native-ref import . \x2E;bytevector-s64-native-ref)
   (bytevector-u64-set! import . \x2E;bytevector-u64-set!)
   (bytevector-s64-set! import . \x2E;bytevector-s64-set!)
   (bytevector-u64-native-set! import . \x2E;bytevector-u64-native-set!)
   (bytevector-s64-native-set! import . \x2E;bytevector-s64-native-set!)
   (bytevector-ieee-single-ref import . \x2E;bytevector-ieee-single-ref)
   (bytevector-ieee-single-native-ref import . \x2E;bytevector-ieee-single-native-ref)
   (bytevector-ieee-single-set! import . \x2E;bytevector-ieee-single-set!)
   (bytevector-ieee-single-native-set! import . \x2E;bytevector-ieee-single-native-set!)
   (bytevector-ieee-double-ref import . \x2E;bytevector-ieee-double-ref)
   (bytevector-ieee-double-native-ref import . \x2E;bytevector-ieee-double-native-ref)
   (bytevector-ieee-double-set! import . \x2E;bytevector-ieee-double-set!)
   (bytevector-ieee-double-native-set! import . \x2E;bytevector-ieee-double-native-set!))
 (apply.gloc.of \x2E;intern-scheme-library "../stdlib/core/bytevectors.scm" . 6145))

((close
   (1 0)
   (push.const . with-syntax)
   (push.const . "value does not match to pattern")
   (push.const (((m ...) ...) (syntax ((t (... ...)) ...))))
   (apply.gloc.of \x2E;syntax-violation "../stdlib/core/syntax-case.scm" . 147499))
 (set.gloc.of \x2E;fn12.1\x60;12)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (push.const . #(x ...))
   (push.const (x . 1))
   (apply.gloc.of \x2E;syntax/c1 "../stdlib/core/syntax-case.scm" . 122903))
 (set.gloc.of \x2E;fn11.1\x60;11)
 (close
   (1 0)
   (push.const . with-syntax)
   (push.const . "value does not match to pattern")
   (push.const ((t) (generate-temporaries (syntax (q)))))
   (apply.gloc.of \x2E;syntax-violation "../stdlib/core/syntax-case.scm" . 92187))
 (set.gloc.of \x2E;fn18.1\x60;18)
 (close
   (4 0)
   (push.gloc.of \x2E;patvars)
   (push.iloc.0 . 0)
   (push.const quasisyntax unsyntax unsyntax-splicing)
   (push.const quasisyntax . d)
   (push.const . #f)
   (push.close
     (1 0)
     (touch.gloc.of qs\x60;10)
     (call
       (push.iloc.0 . 0)
       (push.const . d)
       (apply.gloc.of \x2E;syntax/i1 "../stdlib/core/syntax-case.scm" . 67596))
     (push)
     (push.n+.iloc (1 . 1) 1 "../stdlib/core/syntax-case.scm" . 67604)
     (push.iloc.1 . 2)
     (push.close
       (2 0)
       (push.iloc.0 . 0)
       (call
         (push.iloc.0 . 1)
         (call
           (push.iloc.1 . 0)
           (push.const . d)
           (apply.gloc.of \x2E;syntax/i1 "../stdlib/core/syntax-case.scm" . 70681))
         (if.eq? (ret.iloc 2 . 0))
         (push.iloc.1 . 0)
         (push.iloc.0 . 1)
         (push.subr.gloc.of \x2E;list 1 "../stdlib/core/syntax-case.scm" . 70677)
         (push.const)
         (push.const d)
         (push.const . #f)
         (push.gloc.of \x2E;fn4.1\x60;4)
         (push.subr.gloc.of \x2E;list 3 "../stdlib/core/syntax-case.scm" . 68624)
         (push.const . _)
         (push.const . #f)
         (push.gloc.of \x2E;fn17.1\x60;17)
         (push.subr.gloc.of \x2E;list 3 "../stdlib/core/syntax-case.scm" . 70677)
         (apply.gloc.of \x2E;syntax-dispatch "../stdlib/core/syntax-case.scm" . 68624))
       (push)
       (apply.iloc (2 . 3) "../stdlib/core/syntax-case.scm" . 68624))
     (apply.gloc.of qs\x60;10 "../stdlib/core/syntax-case.scm" . 67596))
   (push.subr.gloc.of \x2E;list 3 "../stdlib/core/syntax-case.scm" . 64519)
   (push.const unsyntax . d)
   (push.close
     (1 0)
     (push.iloc.1 . 1)
     (push.const . 0)
     (push.subr.gloc.of \x2E;= 2 "../stdlib/core/syntax-case.scm" . 74769)
     (ret.subr.gloc.of \x2E;not "../stdlib/core/syntax-case.scm" . 74764))
   (push.close
     (1 0)
     (touch.gloc.of qs\x60;10)
     (call
       (push.iloc.0 . 0)
       (push.const . d)
       (apply.gloc.of \x2E;syntax/i1 "../stdlib/core/syntax-case.scm" . 75788))
     (push)
     (push.n+.iloc (1 . 1) -1 "../stdlib/core/syntax-case.scm" . 75796)
     (push.iloc.1 . 2)
     (push.close
       (2 0)
       (push.iloc.0 . 0)
       (call
         (push.iloc.0 . 1)
         (call
           (push.iloc.1 . 0)
           (push.const . d)
           (apply.gloc.of \x2E;syntax/i1 "../stdlib/core/syntax-case.scm" . 78873))
         (if.eq? (ret.iloc 2 . 0))
         (push.iloc.1 . 0)
         (push.iloc.0 . 1)
         (push.subr.gloc.of \x2E;list 1 "../stdlib/core/syntax-case.scm" . 78869)
         (push.const)
         (push.const d)
         (push.const . #f)
         (push.gloc.of \x2E;fn27.1\x60;27)
         (push.subr.gloc.of \x2E;list 3 "../stdlib/core/syntax-case.scm" . 76816)
         (push.const . _)
         (push.const . #f)
         (push.gloc.of \x2E;fn20.1\x60;20)
         (push.subr.gloc.of \x2E;list 3 "../stdlib/core/syntax-case.scm" . 78869)
         (apply.gloc.of \x2E;syntax-dispatch "../stdlib/core/syntax-case.scm" . 76816))
       (push)
       (apply.iloc (2 . 3) "../stdlib/core/syntax-case.scm" . 76816))
     (apply.gloc.of qs\x60;10 "../stdlib/core/syntax-case.scm" . 75788))
   (push.subr.gloc.of \x2E;list 3 "../stdlib/core/syntax-case.scm" . 64519)
   (push.const unsyntax-splicing . d)
   (push.close
     (1 0)
     (push.iloc.1 . 1)
     (push.const . 0)
     (push.subr.gloc.of \x2E;= 2 "../stdlib/core/syntax-case.scm" . 82961)
     (ret.subr.gloc.of \x2E;not "../stdlib/core/syntax-case.scm" . 82956))
   (push.close
     (1 0)
     (touch.gloc.of qs\x60;10)
     (call
       (push.iloc.0 . 0)
       (push.const . d)
       (apply.gloc.of \x2E;syntax/i1 "../stdlib/core/syntax-case.scm" . 83980))
     (push)
     (push.n+.iloc (1 . 1) -1 "../stdlib/core/syntax-case.scm" . 83988)
     (push.iloc.1 . 2)
     (push.close
       (2 0)
       (push.iloc.0 . 0)
       (call
         (push.iloc.0 . 1)
         (call
           (push.iloc.1 . 0)
           (push.const . d)
           (apply.gloc.of \x2E;syntax/i1 "../stdlib/core/syntax-case.scm" . 87065))
         (if.eq? (ret.iloc 2 . 0))
         (push.iloc.1 . 0)
         (push.iloc.0 . 1)
         (push.subr.gloc.of \x2E;list 1 "../stdlib/core/syntax-case.scm" . 87061)
         (push.const)
         (push.const d)
         (push.const . #f)
         (push.gloc.of \x2E;fn22.1\x60;22)
         (push.subr.gloc.of \x2E;list 3 "../stdlib/core/syntax-case.scm" . 85008)
         (push.const . _)
         (push.const . #f)
         (push.gloc.of \x2E;fn9.1\x60;9)
         (push.subr.gloc.of \x2E;list 3 "../stdlib/core/syntax-case.scm" . 87061)
         (apply.gloc.of \x2E;syntax-dispatch "../stdlib/core/syntax-case.scm" . 85008))
       (push)
       (apply.iloc (2 . 3) "../stdlib/core/syntax-case.scm" . 85008))
     (apply.gloc.of qs\x60;10 "../stdlib/core/syntax-case.scm" . 83980))
   (push.subr.gloc.of \x2E;list 3 "../stdlib/core/syntax-case.scm" . 64519)
   (push.const unsyntax q)
   (push.close
     (1 0)
     (push.iloc.1 . 1)
     (push.const . 0)
     (ret.subr.gloc.of \x2E;= "../stdlib/core/syntax-case.scm" . 91148))
   (push.close
     (1 0)
     (push.iloc.0 . 0)
     (call
       (call
         (push.iloc.0 . 0)
         (push.const q)
         (push.const (q . 0))
         (apply.gloc.of \x2E;syntax/c1 "../stdlib/core/syntax-case.scm" . 92191))
       (push)
       (apply.gloc.of \x2E;generate-temporaries "../stdlib/core/syntax-case.scm" . 92191))
     (push)
     (push.subr.gloc.of \x2E;list 1 "../stdlib/core/syntax-case.scm" . 92191)
     (push.const)
     (push.const (t))
     (push.const . #f)
     (push.close
       (1 0)
       (call
         (push.iloc.0 . 0)
         (push.const t q)
         (push.const (q . 0) (t . 0))
         (apply.gloc.of \x2E;syntax/c1 "../stdlib/core/syntax-case.scm" . 93201))
       (push)
       (iloc 2 . 2)
       (push.cons)
       (call
         (push.iloc.0 . 0)
         (push.const . t)
         (apply.gloc.of \x2E;syntax/i1 "../stdlib/core/syntax-case.scm" . 93198))
       (push)
       (apply.iloc (2 . 3) "../stdlib/core/syntax-case.scm" . 93198))
     (push.subr.gloc.of \x2E;list 3 "../stdlib/core/syntax-case.scm" . 92172)
     (push.const . _)
     (push.const . #f)
     (push.gloc.of \x2E;fn18.1\x60;18)
     (push.subr.gloc.of \x2E;list 3 "../stdlib/core/syntax-case.scm" . 92191)
     (apply.gloc.of \x2E;syntax-dispatch "../stdlib/core/syntax-case.scm" . 92172))
   (push.subr.gloc.of \x2E;list 3 "../stdlib/core/syntax-case.scm" . 64519)
   (push.const (unsyntax q ...) . d)
   (push.close
     (1 0)
     (push.iloc.1 . 1)
     (push.const . 0)
     (ret.subr.gloc.of \x2E;= "../stdlib/core/syntax-case.scm" . 95244))
   (push.close
     (1 0)
     (touch.gloc.of qs\x60;10)
     (call
       (push.iloc.0 . 0)
       (push.const . d)
       (apply.gloc.of \x2E;syntax/i1 "../stdlib/core/syntax-case.scm" . 96268))
     (push)
     (push.iloc.1 . 1)
     (push.iloc.1 . 2)
     (push.close
       (2 0)
       (push.iloc.1 . 0)
       (call
         (call
           (push.iloc.1 . 0)
           (push.const q ...)
           (push.const (q . 1))
           (apply.gloc.of \x2E;syntax/c1 "../stdlib/core/syntax-case.scm" . 98345))
         (push)
         (apply.gloc.of \x2E;generate-temporaries "../stdlib/core/syntax-case.scm" . 98345))
       (push)
       (push.subr.gloc.of \x2E;list 1 "../stdlib/core/syntax-case.scm" . 98345)
       (push.const)
       (push.const (t ...))
       (push.const . #f)
       (push.close
         (1 0)
         (call
           (push.iloc.0 . 0)
           (push.const (t q) ...)
           (push.const (q . 1) (t . 1))
           (apply.gloc.of \x2E;syntax/c1 "../stdlib/core/syntax-case.scm" . 99351))
         (push)
         (push.iloc.1 . 0)
         (push.subr.gloc.of \x2E;append 2 "../stdlib/core/syntax-case.scm" . 99351)
         (call
           (push.iloc.0 . 0)
           (push.iloc.1 . 1)
           (push.subr.gloc.of \x2E;list 1 "../stdlib/core/syntax-case.scm" . 99348)
           (push.const)
           (push.const d)
           (push.const . #f)
           (push.gloc.of \x2E;fn2.1\x60;2)
           (push.subr.gloc.of \x2E;list 3 "../stdlib/core/syntax-case.scm" . 99348)
           (push.const . _)
           (push.const . #f)
           (push.gloc.of \x2E;fn1.1\x60;1)
           (push.subr.gloc.of \x2E;list 3 "../stdlib/core/syntax-case.scm" . 99348)
           (apply.gloc.of \x2E;syntax-dispatch "../stdlib/core/syntax-case.scm" . 99348))
         (push)
         (apply.iloc (3 . 3) "../stdlib/core/syntax-case.scm" . 99348))
       (push.subr.gloc.of \x2E;list 3 "../stdlib/core/syntax-case.scm" . 97296)
       (push.const . _)
       (push.const . #f)
       (push.gloc.of \x2E;fn31.1\x60;31)
       (push.subr.gloc.of \x2E;list 3 "../stdlib/core/syntax-case.scm" . 98345)
       (apply.gloc.of \x2E;syntax-dispatch "../stdlib/core/syntax-case.scm" . 97296))
     (apply.gloc.of qs\x60;10 "../stdlib/core/syntax-case.scm" . 96268))
   (push.subr.gloc.of \x2E;list 3 "../stdlib/core/syntax-case.scm" . 64519)
   (push.const (unsyntax-splicing q ...) . d)
   (push.close
     (1 0)
     (push.iloc.1 . 1)
     (push.const . 0)
     (ret.subr.gloc.of \x2E;= "../stdlib/core/syntax-case.scm" . 102412))
   (push.close
     (1 0)
     (touch.gloc.of qs\x60;10)
     (call
       (push.iloc.0 . 0)
       (push.const . d)
       (apply.gloc.of \x2E;syntax/i1 "../stdlib/core/syntax-case.scm" . 103436))
     (push)
     (push.iloc.1 . 1)
     (push.iloc.1 . 2)
     (push.close
       (2 0)
       (push.iloc.1 . 0)
       (call
         (call
           (push.iloc.1 . 0)
           (push.const q ...)
           (push.const (q . 1))
           (apply.gloc.of \x2E;syntax/c1 "../stdlib/core/syntax-case.scm" . 105513))
         (push)
         (apply.gloc.of \x2E;generate-temporaries "../stdlib/core/syntax-case.scm" . 105513))
       (push)
       (push.subr.gloc.of \x2E;list 1 "../stdlib/core/syntax-case.scm" . 105513)
       (push.const)
       (push.const (t ...))
       (push.const . #f)
       (push.close
         (1 0)
         (call
           (push.iloc.0 . 0)
           (push.const ((t (... ...)) q) ...)
           (push.const (q . 1) (t . 1))
           (apply.gloc.of \x2E;syntax/c1 "../stdlib/core/syntax-case.scm" . 106519))
         (push)
         (push.iloc.1 . 0)
         (push.subr.gloc.of \x2E;append 2 "../stdlib/core/syntax-case.scm" . 106519)
         (call
           (push.iloc.0 . 0)
           (call
             (push.iloc.0 . 0)
             (push.const (t (... ...)) ...)
             (push.const (t . 1))
             (apply.gloc.of \x2E;syntax/c1 "../stdlib/core/syntax-case.scm" . 107557))
           (push)
           (push.subr.gloc.of \x2E;list 1 "../stdlib/core/syntax-case.scm" . 107557)
           (push.const)
           (push.const ((m ...) ...))
           (push.const . #f)
           (push.close
             (1 0)
             (push.iloc.0 . 0)
             (push.iloc 2 . 1)
             (push.subr.gloc.of \x2E;list 1 "../stdlib/core/syntax-case.scm" . 108569)
             (push.const)
             (push.const d)
             (push.const . #f)
             (push.gloc.of \x2E;fn13.1\x60;13)
             (push.subr.gloc.of \x2E;list 3 "../stdlib/core/syntax-case.scm" . 108569)
             (push.const . _)
             (push.const . #f)
             (push.gloc.of \x2E;fn7.1\x60;7)
             (push.subr.gloc.of \x2E;list 3 "../stdlib/core/syntax-case.scm" . 108569)
             (apply.gloc.of \x2E;syntax-dispatch "../stdlib/core/syntax-case.scm" . 108569))
           (push.subr.gloc.of \x2E;list 3 "../stdlib/core/syntax-case.scm" . 106516)
           (push.const . _)
           (push.const . #f)
           (push.gloc.of \x2E;fn26.1\x60;26)
           (push.subr.gloc.of \x2E;list 3 "../stdlib/core/syntax-case.scm" . 107557)
           (apply.gloc.of \x2E;syntax-dispatch "../stdlib/core/syntax-case.scm" . 106516))
         (push)
         (apply.iloc (3 . 3) "../stdlib/core/syntax-case.scm" . 106516))
       (push.subr.gloc.of \x2E;list 3 "../stdlib/core/syntax-case.scm" . 104464)
       (push.const . _)
       (push.const . #f)
       (push.gloc.of \x2E;fn3.1\x60;3)
       (push.subr.gloc.of \x2E;list 3 "../stdlib/core/syntax-case.scm" . 105513)
       (apply.gloc.of \x2E;syntax-dispatch "../stdlib/core/syntax-case.scm" . 104464))
     (apply.gloc.of qs\x60;10 "../stdlib/core/syntax-case.scm" . 103436))
   (push.subr.gloc.of \x2E;list 3 "../stdlib/core/syntax-case.scm" . 64519)
   (push.const a . d)
   (push.const . #f)
   (push.close
     (1 0)
     (touch.gloc.of qs\x60;10)
     (call
       (push.iloc.0 . 0)
       (push.const . a)
       (apply.gloc.of \x2E;syntax/i1 "../stdlib/core/syntax-case.scm" . 110604))
     (push)
     (push.iloc.1 . 1)
     (push.iloc.1 . 2)
     (push.close
       (2 0)
       (touch.gloc.of qs\x60;10)
       (call
         (push.iloc.1 . 0)
         (push.const . d)
         (apply.gloc.of \x2E;syntax/i1 "../stdlib/core/syntax-case.scm" . 112658))
       (push)
       (push.iloc 2 . 1)
       (push.iloc.0 . 0)
       (push.close
         (2 0)
         (push.iloc.0 . 0)
         (call
           (call
             (push.iloc.1 . 1)
             (call
               (push.iloc 2 . 0)
               (push.const . a)
               (apply.gloc.of \x2E;syntax/i1 "../stdlib/core/syntax-case.scm" . 115748))
             (if.not.eq?.ret.const . #f)
             (push.iloc.0 . 1)
             (call
               (push.iloc 2 . 0)
               (push.const . d)
               (apply.gloc.of \x2E;syntax/i1 "../stdlib/core/syntax-case.scm" . 115763))
             (ret.eq? "../stdlib/core/syntax-case.scm" . 115763))
           (if.true (ret.iloc 3 . 0))
           (push.iloc 2 . 0)
           (push.iloc.1 . 1)
           (push.iloc.0 . 1)
           (push.subr.gloc.of \x2E;list 2 "../stdlib/core/syntax-case.scm" . 115739)
           (push.const)
           (push.const a d)
           (push.const . #f)
           (push.gloc.of \x2E;fn30.1\x60;30)
           (push.subr.gloc.of \x2E;list 3 "../stdlib/core/syntax-case.scm" . 113686)
           (push.const . _)
           (push.const . #f)
           (push.gloc.of \x2E;fn28.1\x60;28)
           (push.subr.gloc.of \x2E;list 3 "../stdlib/core/syntax-case.scm" . 115739)
           (apply.gloc.of \x2E;syntax-dispatch "../stdlib/core/syntax-case.scm" . 113686))
         (push)
         (apply.iloc (3 . 3) "../stdlib/core/syntax-case.scm" . 113686))
       (apply.gloc.of qs\x60;10 "../stdlib/core/syntax-case.scm" . 111632))
     (apply.gloc.of qs\x60;10 "../stdlib/core/syntax-case.scm" . 110604))
   (push.subr.gloc.of \x2E;list 3 "../stdlib/core/syntax-case.scm" . 64519)
   (push.const . #(x ...))
   (push.const . #f)
   (push.close
     (1 0)
     (touch.gloc.of vqs\x60;10)
     (call
       (push.iloc.0 . 0)
       (push.const x ...)
       (push.const (x . 1))
       (apply.gloc.of \x2E;syntax/c1 "../stdlib/core/syntax-case.scm" . 119821))
     (push)
     (push.iloc.1 . 1)
     (push.iloc.1 . 2)
     (push.close
       (2 0)
       (push.iloc.0 . 0)
       (call
         (call
           (touch.gloc.of same?\x60;117)
           (call
             (push.iloc.1 . 0)
             (push.const x ...)
             (push.const (x . 1))
             (apply.gloc.of \x2E;syntax/c1 "../stdlib/core/syntax-case.scm" . 122919))
           (push)
           (push.iloc.0 . 1)
           (apply.gloc.of same?\x60;117 "../stdlib/core/syntax-case.scm" . 122907))
         (if.true (ret.iloc 2 . 0))
         (push.iloc.1 . 0)
         (push.iloc.0 . 1)
         (push.subr.gloc.of \x2E;list 1 "../stdlib/core/syntax-case.scm" . 122903)
         (push.const)
         (push.const (x ...))
         (push.const . #f)
         (push.gloc.of \x2E;fn11.1\x60;11)
         (push.subr.gloc.of \x2E;list 3 "../stdlib/core/syntax-case.scm" . 120850)
         (push.const . _)
         (push.const . #f)
         (push.gloc.of \x2E;fn8.1\x60;8)
         (push.subr.gloc.of \x2E;list 3 "../stdlib/core/syntax-case.scm" . 122903)
         (apply.gloc.of \x2E;syntax-dispatch "../stdlib/core/syntax-case.scm" . 120850))
       (push)
       (apply.iloc (2 . 3) "../stdlib/core/syntax-case.scm" . 120850))
     (apply.gloc.of vqs\x60;10 "../stdlib/core/syntax-case.scm" . 119821))
   (push.subr.gloc.of \x2E;list 3 "../stdlib/core/syntax-case.scm" . 147499)
   (push.const . _)
   (push.const . #f)
   (push.close
     (1 0)
     (push.iloc.1 . 2)
     (push.iloc.1 . 0)
     (apply.iloc (1 . 3) "../stdlib/core/syntax-case.scm" . 131086))
   (push.subr.gloc.of \x2E;list 3 "../stdlib/core/syntax-case.scm" . 65545)
   (apply.gloc.of \x2E;syntax-dispatch "../stdlib/core/syntax-case.scm" . 147499))
 (set.gloc.of qs\x60;10)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (push.const a . d)
   (push.const (d . 0) (a . 0))
   (apply.gloc.of \x2E;syntax/c1 "../stdlib/core/syntax-case.scm" . 117791))
 (set.gloc.of \x2E;fn30.1\x60;30)
 (close
   (1 0)
   (push.const . with-syntax)
   (push.const . "value does not match to pattern")
   (push.const ((t ...) (generate-temporaries (syntax (q ...)))))
   (apply.gloc.of \x2E;syntax-violation "../stdlib/core/syntax-case.scm" . 145446))
 (set.gloc.of \x2E;fn10.1\x60;10)
 (close
   (1 0)
   (subr.gloc.of \x2E;backtrace 0 "../stdlib/core/syntax-case.scm" . 35854)
   (if.true
     (push.iloc.0 . 0)
     (push.const
       syntax-case
       (list e0 ...)
       ()
       ((p ...) (let () e1 e2 ...))
       (_ (syntax-violation 'with-syntax "value does not match to pattern" '((p e0) ...))))
     (push.const (e2 . 1) (e1 . 0) (p . 1) (e0 . 1))
     (apply.gloc.of \x2E;syntax/c1 "../stdlib/core/syntax-case.scm" . 36878))
   (push.iloc.0 . 0)
   (push.const syntax-case (list e0 ...) () ((p ...) (let () e1 e2 ...)))
   (push.const (e2 . 1) (e1 . 0) (p . 1) (e0 . 1))
   (apply.gloc.of \x2E;syntax/c1 "../stdlib/core/syntax-case.scm" . 43022))
 (set.gloc.of \x2E;fn29.1\x60;29)
 (close
   (4 0)
   (iloc.0 . 0)
   (if.null?
     (push.iloc.0 . 2)
     (push.const)
     (apply.iloc (0 . 3) "../stdlib/core/syntax-case.scm" . 134157))
   (touch.gloc.of vqs\x60;10)
   (push.cdr.iloc (0 . 0) "../stdlib/core/syntax-case.scm" . 135186)
   (push.iloc.0 . 1)
   (push.iloc.0 . 2)
   (push.close
     (2 0)
     (push.gloc.of \x2E;patvars)
     (push.car.iloc (1 . 0) "../stdlib/core/syntax-case.scm" . 137249)
     (push.const unsyntax unsyntax-splicing)
     (push.const unsyntax q ...)
     (push.close
       (1 0)
       (push.iloc 2 . 1)
       (push.const . 0)
       (ret.subr.gloc.of \x2E;= "../stdlib/core/syntax-case.scm" . 139287))
     (push.close
       (1 0)
       (push.iloc.0 . 0)
       (call
         (call
           (push.iloc.0 . 0)
           (push.const q ...)
           (push.const (q . 1))
           (apply.gloc.of \x2E;syntax/c1 "../stdlib/core/syntax-case.scm" . 140334))
         (push)
         (apply.gloc.of \x2E;generate-temporaries "../stdlib/core/syntax-case.scm" . 140334))
       (push)
       (push.subr.gloc.of \x2E;list 1 "../stdlib/core/syntax-case.scm" . 140334)
       (push.const)
       (push.const (t ...))
       (push.const . #f)
       (push.close
         (1 0)
         (call
           (push.iloc.0 . 0)
           (push.const (t q) ...)
           (push.const (q . 1) (t . 1))
           (apply.gloc.of \x2E;syntax/c1 "../stdlib/core/syntax-case.scm" . 141340))
         (push)
         (push.iloc 2 . 0)
         (push.subr.gloc.of \x2E;append 2 "../stdlib/core/syntax-case.scm" . 141340)
         (call
           (push.iloc.0 . 0)
           (push.const t ...)
           (push.const (t . 1))
           (apply.gloc.of \x2E;syntax/c1 "../stdlib/core/syntax-case.scm" . 142364))
         (push)
         (push.iloc 2 . 1)
         (push.subr.gloc.of \x2E;append 2 "../stdlib/core/syntax-case.scm" . 142364)
         (apply.iloc (3 . 3) "../stdlib/core/syntax-case.scm" . 141337))
       (push.subr.gloc.of \x2E;list 3 "../stdlib/core/syntax-case.scm" . 140311)
       (push.const . _)
       (push.const . #f)
       (push.gloc.of \x2E;fn15.1\x60;15)
       (push.subr.gloc.of \x2E;list 3 "../stdlib/core/syntax-case.scm" . 140334)
       (apply.gloc.of \x2E;syntax-dispatch "../stdlib/core/syntax-case.scm" . 140311))
     (push.subr.gloc.of \x2E;list 3 "../stdlib/core/syntax-case.scm" . 136210)
     (push.const unsyntax-splicing q ...)
     (push.close
       (1 0)
       (push.iloc 2 . 1)
       (push.const . 0)
       (ret.subr.gloc.of \x2E;= "../stdlib/core/syntax-case.scm" . 144407))
     (push.close
       (1 0)
       (push.iloc.0 . 0)
       (call
         (call
           (push.iloc.0 . 0)
           (push.const q ...)
           (push.const (q . 1))
           (apply.gloc.of \x2E;syntax/c1 "../stdlib/core/syntax-case.scm" . 145454))
         (push)
         (apply.gloc.of \x2E;generate-temporaries "../stdlib/core/syntax-case.scm" . 145454))
       (push)
       (push.subr.gloc.of \x2E;list 1 "../stdlib/core/syntax-case.scm" . 145454)
       (push.const)
       (push.const (t ...))
       (push.const . #f)
       (push.close
         (1 0)
         (call
           (push.iloc.0 . 0)
           (push.const ((t (... ...)) q) ...)
           (push.const (q . 1) (t . 1))
           (apply.gloc.of \x2E;syntax/c1 "../stdlib/core/syntax-case.scm" . 146460))
         (push)
         (push.iloc 2 . 0)
         (push.subr.gloc.of \x2E;append 2 "../stdlib/core/syntax-case.scm" . 146460)
         (call
           (push.iloc.0 . 0)
           (call
             (push.iloc.0 . 0)
             (push.const (t (... ...)) ...)
             (push.const (t . 1))
             (apply.gloc.of \x2E;syntax/c1 "../stdlib/core/syntax-case.scm" . 147498))
           (push)
           (push.subr.gloc.of \x2E;list 1 "../stdlib/core/syntax-case.scm" . 147498)
           (push.const)
           (push.const ((m ...) ...))
           (push.const . #f)
           (push.close
             (1 0)
             (call
               (push.iloc.0 . 0)
               (push.const m ... ...)
               (push.const (m . 2))
               (apply.gloc.of \x2E;syntax/c1 "../stdlib/core/syntax-case.scm" . 148510))
             (push)
             (push.iloc 3 . 1)
             (ret.subr.gloc.of \x2E;append "../stdlib/core/syntax-case.scm" . 148510))
           (push.subr.gloc.of \x2E;list 3 "../stdlib/core/syntax-case.scm" . 146457)
           (push.const . _)
           (push.const . #f)
           (push.gloc.of \x2E;fn12.1\x60;12)
           (push.subr.gloc.of \x2E;list 3 "../stdlib/core/syntax-case.scm" . 147498)
           (apply.gloc.of \x2E;syntax-dispatch "../stdlib/core/syntax-case.scm" . 146457))
         (push)
         (apply.iloc (3 . 3) "../stdlib/core/syntax-case.scm" . 146457))
       (push.subr.gloc.of \x2E;list 3 "../stdlib/core/syntax-case.scm" . 145431)
       (push.const . _)
       (push.const . #f)
       (push.gloc.of \x2E;fn10.1\x60;10)
       (push.subr.gloc.of \x2E;list 3 "../stdlib/core/syntax-case.scm" . 145454)
       (apply.gloc.of \x2E;syntax-dispatch "../stdlib/core/syntax-case.scm" . 145431))
     (push.subr.gloc.of \x2E;list 3 "../stdlib/core/syntax-case.scm" . 136210)
     (push.const . _)
     (push.const . #f)
     (push.close
       (1 0)
       (touch.gloc.of qs\x60;10)
       (push.car.iloc (2 . 0) "../stdlib/core/syntax-case.scm" . 149533)
       (push.iloc 2 . 1)
       (push.iloc.1 . 0)
       (push.close
         (2 0)
         (push.iloc.0 . 0)
         (push.iloc.0 . 1)
         (iloc 2 . 1)
         (push.cons)
         (apply.iloc (3 . 3) "../stdlib/core/syntax-case.scm" . 151583))
       (apply.gloc.of qs\x60;10 "../stdlib/core/syntax-case.scm" . 149529))
     (push.subr.gloc.of \x2E;list 3 "../stdlib/core/syntax-case.scm" . 137249)
     (apply.gloc.of \x2E;syntax-dispatch "../stdlib/core/syntax-case.scm" . 136210))
   (apply.gloc.of vqs\x60;10 "../stdlib/core/syntax-case.scm" . 132103))
 (set.gloc.of vqs\x60;10)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (push.const quasisyntax . d)
   (push.const (d . 0))
   (apply.gloc.of \x2E;syntax/c1 "../stdlib/core/syntax-case.scm" . 72729))
 (set.gloc.of \x2E;fn4.1\x60;4)
 (close
   (1 0)
   (push.const . with-syntax)
   (push.const . "value does not match to pattern")
   (push.const (((m ...) ...) (syntax ((t (... ...)) ...))))
   (apply.gloc.of \x2E;syntax-violation "../stdlib/core/syntax-case.scm" . 107558))
 (set.gloc.of \x2E;fn26.1\x60;26)
 (close
   (1 0)
   (push.const . with-syntax)
   (push.const . "value does not match to pattern")
   (push.const (d dnew))
   (apply.gloc.of \x2E;syntax-violation "../stdlib/core/syntax-case.scm" . 99348))
 (set.gloc.of \x2E;fn1.1\x60;1)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (push.const t ... . d)
   (push.const (d . 0) (t . 1))
   (apply.gloc.of \x2E;syntax/c1 "../stdlib/core/syntax-case.scm" . 100375))
 (set.gloc.of \x2E;fn2.1\x60;2)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (push.const unsyntax . d)
   (push.const (d . 0))
   (apply.gloc.of \x2E;syntax/c1 "../stdlib/core/syntax-case.scm" . 80921))
 (set.gloc.of \x2E;fn27.1\x60;27)
 (close
   (1 0)
   (call
     (iloc.0 . 0)
     (if.not.pair?.ret.const . #f)
     (push.iloc.0 . 0)
     (ret.subr.gloc.of \x2E;car "../stdlib/core/syntax-case.scm" . 25640))
   (push)
   (push.const . "misplaced auxiliary syntactic keyword")
   (push.iloc.0 . 0)
   (apply.gloc.of \x2E;syntax-violation "../stdlib/core/syntax-case.scm" . 25607))
 (set.gloc.of \x2E;fn19.1\x60;19)
 (close
   (2 0 . same?)
   (iloc.0 . 0)
   (if.null? (iloc.0 . 1) (ret.null? "../stdlib/core/syntax-case.scm" . 124961))
   (iloc.0 . 1)
   (if.null?.ret.const . #f)
   (push.car.iloc (0 . 0) "../stdlib/core/syntax-case.scm" . 127019)
   (car.iloc (0 . 1) "../stdlib/core/syntax-case.scm" . 127028)
   (if.not.eq?.ret.const . #f)
   (touch.gloc.of same?\x60;117)
   (push.cdr.iloc (0 . 0) "../stdlib/core/syntax-case.scm" . 128045)
   (push.cdr.iloc (0 . 1) "../stdlib/core/syntax-case.scm" . 128054)
   (apply.gloc.of same?\x60;117 "../stdlib/core/syntax-case.scm" . 128038))
 (set.gloc.of same?\x60;117)
 (close
   (1 0)
   (push.const . with-syntax)
   (push.const . "value does not match to pattern")
   (push.const (d dnew))
   (apply.gloc.of \x2E;syntax-violation "../stdlib/core/syntax-case.scm" . 87061))
 (set.gloc.of \x2E;fn9.1\x60;9)
 (close
   (1 0)
   (push.const . with-syntax)
   (push.const . "value does not match to pattern")
   (push.const ((t ...) (generate-temporaries (syntax (q ...)))))
   (apply.gloc.of \x2E;syntax-violation "../stdlib/core/syntax-case.scm" . 105505))
 (set.gloc.of \x2E;fn3.1\x60;3)
 (close
   (1 0)
   (push.gloc.of \x2E;patvars)
   (push.iloc.0 . 0)
   (push.const)
   (push.const _ ((p e0) ...) e1 e2 ...)
   (push.const . #f)
   (push.gloc.of \x2E;fn29.1\x60;29)
   (push.subr.gloc.of \x2E;list 3 "../stdlib/core/syntax-case.scm" . 33799)
   (apply.gloc.of \x2E;syntax-dispatch "../stdlib/core/syntax-case.scm" . 33799))
 (set.gloc.of \x2E;fn24.1\x60;24)
 (close
   (1 0)
   (push.const . with-syntax)
   (push.const . "value does not match to pattern")
   (push.const (d dnew))
   (apply.gloc.of \x2E;syntax-violation "../stdlib/core/syntax-case.scm" . 108569))
 (set.gloc.of \x2E;fn7.1\x60;7)
 (close
   (1 0)
   (push.gloc.of \x2E;patvars)
   (push.iloc.0 . 0)
   (push.const)
   (push.const _ x)
   (push.const . #f)
   (push.gloc.of \x2E;fn32.1\x60;32)
   (push.subr.gloc.of \x2E;list 3 "../stdlib/core/syntax-case.scm" . 64519)
   (apply.gloc.of \x2E;syntax-dispatch "../stdlib/core/syntax-case.scm" . 64519))
 (set.gloc.of \x2E;fn14.1\x60;14)
 (close
   (1 0)
   (touch.gloc.of qs\x60;10)
   (call
     (push.iloc.0 . 0)
     (push.const . x)
     (apply.gloc.of \x2E;syntax/i1 "../stdlib/core/syntax-case.scm" . 154634))
   (push)
   (push.const . 0)
   (push.const)
   (push.close
     (2 0)
     (push.iloc.0 . 1)
     (call
       (push.iloc.1 . 0)
       (push.const . x)
       (apply.gloc.of \x2E;syntax/i1 "../stdlib/core/syntax-case.scm" . 156692))
     (if.eq?
       (push.iloc.1 . 0)
       (push.const syntax x)
       (push.const (x . 0))
       (apply.gloc.of \x2E;syntax/c1 "../stdlib/core/syntax-case.scm" . 156688))
     (push.iloc.1 . 0)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.subr.gloc.of \x2E;list 2 "../stdlib/core/syntax-case.scm" . 156688)
     (push.const)
     (push.const (b ...) x)
     (push.const . #f)
     (push.gloc.of \x2E;fn6.1\x60;6)
     (push.subr.gloc.of \x2E;list 3 "../stdlib/core/syntax-case.scm" . 155662)
     (push.const . _)
     (push.const . #f)
     (push.gloc.of \x2E;fn21.1\x60;21)
     (push.subr.gloc.of \x2E;list 3 "../stdlib/core/syntax-case.scm" . 156688)
     (apply.gloc.of \x2E;syntax-dispatch "../stdlib/core/syntax-case.scm" . 155662))
   (apply.gloc.of qs\x60;10 "../stdlib/core/syntax-case.scm" . 154634))
 (set.gloc.of \x2E;fn32.1\x60;32)
 (close
   (1 0)
   (push.const . with-syntax)
   (push.const . "value does not match to pattern")
   (push.const ((t ...) (generate-temporaries (syntax (q ...)))))
   (apply.gloc.of \x2E;syntax-violation "../stdlib/core/syntax-case.scm" . 140326))
 (set.gloc.of \x2E;fn15.1\x60;15)
 (close
   (1 0)
   (push.const . with-syntax)
   (push.const . "value does not match to pattern")
   (push.const ((x ...) xnew*))
   (apply.gloc.of \x2E;syntax-violation "../stdlib/core/syntax-case.scm" . 130090))
 (set.gloc.of \x2E;fn8.1\x60;8)
 (close
   (1 0)
   (push.const . with-syntax)
   (push.const . "value does not match to pattern")
   (push.const (a anew) (d dnew))
   (apply.gloc.of \x2E;syntax-violation "../stdlib/core/syntax-case.scm" . 115739))
 (set.gloc.of \x2E;fn28.1\x60;28)
 (close
   (1 0)
   (push.const . with-syntax)
   (push.const . "value does not match to pattern")
   (push.const ((t ...) (generate-temporaries (syntax (q ...)))))
   (apply.gloc.of \x2E;syntax-violation "../stdlib/core/syntax-case.scm" . 98337))
 (set.gloc.of \x2E;fn31.1\x60;31)
 (close
   (1 0)
   (call
     (iloc.0 . 0)
     (if.not.pair?.ret.const . #f)
     (push.iloc.0 . 0)
     (ret.subr.gloc.of \x2E;car "../stdlib/core/syntax-case.scm" . 29736))
   (push)
   (push.const . "misplaced auxiliary syntactic keyword")
   (push.iloc.0 . 0)
   (apply.gloc.of \x2E;syntax-violation "../stdlib/core/syntax-case.scm" . 29703))
 (set.gloc.of \x2E;fn23.1\x60;23)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (push.const with-syntax (b ...) (syntax x))
   (push.const (x . 0) (b . 1))
   (apply.gloc.of \x2E;syntax/c1 "../stdlib/core/syntax-case.scm" . 158740))
 (set.gloc.of \x2E;fn6.1\x60;6)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (push.const m ... ... . d)
   (push.const (d . 0) (m . 2))
   (apply.gloc.of \x2E;syntax/c1 "../stdlib/core/syntax-case.scm" . 108569))
 (set.gloc.of \x2E;fn13.1\x60;13)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (push.const unsyntax-splicing . d)
   (push.const (d . 0))
   (apply.gloc.of \x2E;syntax/c1 "../stdlib/core/syntax-case.scm" . 89113))
 (set.gloc.of \x2E;fn22.1\x60;22)
 (close
   (1 0)
   (push.const . with-syntax)
   (push.const . "value does not match to pattern")
   (push.const ((b ...) b*) (x xnew))
   (apply.gloc.of \x2E;syntax-violation "../stdlib/core/syntax-case.scm" . 158755))
 (set.gloc.of \x2E;fn21.1\x60;21)
 (close
   (1 0)
   (push.const . with-syntax)
   (push.const . "value does not match to pattern")
   (push.const (d dnew))
   (apply.gloc.of \x2E;syntax-violation "../stdlib/core/syntax-case.scm" . 78869))
 (set.gloc.of \x2E;fn20.1\x60;20)
 (close
   (1 0)
   (push.const . with-syntax)
   (push.const . "value does not match to pattern")
   (push.const (d dnew))
   (apply.gloc.of \x2E;syntax-violation "../stdlib/core/syntax-case.scm" . 70677))
 (set.gloc.of \x2E;fn17.1\x60;17)
 (call
   (push.const core primitives)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core/syntax-case.scm" . 6145))
 (call
   (push.const
     (quote import . \x2E;quote)
     (and import . \x2E;and)
     (_ import . \x2E;_)
     (quasisyntax import . core.syntax-case\x27;quasisyntax)
     (syntax import . \x2E;syntax)
     (unsyntax-splicing import . core.syntax-case\x27;unsyntax-splicing)
     (list import . \x2E;list)
     (let import . \x2E;let)
     (unsyntax import . core.syntax-case\x27;unsyntax)
     (lambda import . \x2E;lambda)
     (generate-temporaries import . \x2E;generate-temporaries)
     (syntax-case import . \x2E;syntax-case)
     (letrec* import . \x2E;letrec*)
     (syntax-violation import . \x2E;syntax-violation)
     (if import . \x2E;if)
     (... import . \x2E;...)
     (with-syntax import . core.syntax-case\x27;with-syntax))
   (extend . 1)
   (call
     (push.const . syntax)
     (push.const . core.syntax-case\x27;unsyntax)
     (call
       (push.gloc.of \x2E;fn19.1\x60;19)
       (apply.gloc.of \x2E;transformer-thunk "../stdlib/core/syntax-case.scm" . 6145))
     (push)
     (push.iloc.0 . 0)
     (apply.gloc.of \x2E;set-top-level-macro! "../stdlib/core/syntax-case.scm" . 6145))
   (call
     (push.const . syntax)
     (push.const . core.syntax-case\x27;unsyntax-splicing)
     (call
       (push.gloc.of \x2E;fn23.1\x60;23)
       (apply.gloc.of \x2E;transformer-thunk "../stdlib/core/syntax-case.scm" . 6145))
     (push)
     (push.iloc.0 . 0)
     (apply.gloc.of \x2E;set-top-level-macro! "../stdlib/core/syntax-case.scm" . 6145))
   (call
     (push.const . syntax)
     (push.const . core.syntax-case\x27;with-syntax)
     (call
       (push.gloc.of \x2E;fn24.1\x60;24)
       (apply.gloc.of \x2E;transformer-thunk "../stdlib/core/syntax-case.scm" . 6145))
     (push)
     (push.iloc.0 . 0)
     (apply.gloc.of \x2E;set-top-level-macro! "../stdlib/core/syntax-case.scm" . 6145))
   (push.const . syntax)
   (push.const . core.syntax-case\x27;quasisyntax)
   (call
     (push.gloc.of \x2E;fn14.1\x60;14)
     (apply.gloc.of \x2E;transformer-thunk "../stdlib/core/syntax-case.scm" . 6145))
   (push)
   (push.iloc.0 . 0)
   (apply.gloc.of \x2E;set-top-level-macro! "../stdlib/core/syntax-case.scm" . 6145))
 (push.const . core.syntax-case)
 (push.const . #f)
 (push.const
   (syntax-case import . \x2E;syntax-case)
   (syntax import . \x2E;syntax)
   (with-syntax import . core.syntax-case\x27;with-syntax)
   (make-variable-transformer import . \x2E;make-variable-transformer)
   (identifier? import . \x2E;identifier?)
   (bound-identifier=? import . \x2E;bound-identifier=?)
   (free-identifier=? import . \x2E;free-identifier=?)
   (datum->syntax import . \x2E;datum->syntax)
   (syntax->datum import . \x2E;syntax->datum)
   (generate-temporaries import . \x2E;generate-temporaries)
   (quasisyntax import . core.syntax-case\x27;quasisyntax)
   (unsyntax import . core.syntax-case\x27;unsyntax)
   (unsyntax-splicing import . core.syntax-case\x27;unsyntax-splicing)
   (syntax-violation import . \x2E;syntax-violation)
   (_ import . \x2E;_)
   (... import . \x2E;...))
 (apply.gloc.of \x2E;intern-scheme-library "../stdlib/core/syntax-case.scm" . 6145))

((call
   (push.const core primitives)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core/r5rs.scm" . 6145))
 (close (1 0 . core.r5rs\x27;force) (apply.iloc (0 . 0) "../stdlib/core/r5rs.scm" . 19463))
 (set.gloc.of core.r5rs\x27;force)
 (close
   (1 0 . core.r5rs\x27;make-promise)
   (push.const . #f)
   (push.const . #f)
   (extend . 2)
   (ret.close
     (0 0)
     (iloc.1 . 0)
     (if.true (ret.iloc 1 . 1))
     (call (apply.iloc (2 . 0) "../stdlib/core/r5rs.scm" . 28696))
     (push)
     (extend . 1)
     (iloc 2 . 0)
     (if.true (ret.iloc 2 . 1))
     (const . #t)
     (set.iloc 2 . 0)
     (iloc.0 . 0)
     (set.iloc 2 . 1)
     (ret.iloc 2 . 1)))
 (set.gloc.of core.r5rs\x27;make-promise)
 (call
   (push.const . syntax)
   (push.const . core.r5rs\x27;delay)
   (push.const
     ()
     ("../stdlib/core/r5rs.scm" . 36869)
     ((delay expression)
      (make-promise (lambda () expression))
      ((expression . 0) (delay . 0))
      (lambda make-promise)))
   (push.const
     (delay import . core.r5rs\x27;delay)
     (lambda import . \x2E;lambda)
     (make-promise import . core.r5rs\x27;make-promise))
   (apply.gloc.of \x2E;set-top-level-macro! "../stdlib/core/r5rs.scm" . 6145))
 (push.const . core.r5rs)
 (push.const . #f)
 (push.const
   (inexact->exact import . \x2E;exact)
   (exact->inexact import . \x2E;inexact)
   (quotient import . \x2E;quotient)
   (remainder import . \x2E;remainder)
   (modulo import . \x2E;modulo)
   (delay import . core.r5rs\x27;delay)
   (force import . core.r5rs\x27;force))
 (apply.gloc.of \x2E;intern-scheme-library "../stdlib/core/r5rs.scm" . 6145))

((close
   (1 0)
   (push.gloc.of \x2E;patvars)
   (push.iloc.0 . 0)
   (push.const)
   (push.const _ (lst ...))
   (push.const . #f)
   (push.gloc.of \x2E;fn2.1\x60;2)
   (push.subr.gloc.of \x2E;list 3 "../stdlib/core/control.scm" . 18439)
   (apply.gloc.of \x2E;syntax-dispatch "../stdlib/core/control.scm" . 18439))
 (set.gloc.of \x2E;fn1.1\x60;1)
 (close
   (1 0)
   (call
     (push.iloc.0 . 0)
     (push.const . k)
     (apply.gloc.of \x2E;syntax/i0 "../stdlib/core/control.scm" . 19480))
   (push)
   (call
     (push.iloc.0 . 0)
     (push.const lst ...)
     (push.const (lst . 1))
     (apply.gloc.of \x2E;syntax/c1 "../stdlib/core/control.scm" . 19507))
   (push)
   (push.subr.gloc.of \x2E;length 1 "../stdlib/core/control.scm" . 19499)
   (apply.gloc.of \x2E;datum->syntax "../stdlib/core/control.scm" . 19480))
 (set.gloc.of \x2E;fn2.1\x60;2)
 (call
   (push.const core syntax-case)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core/control.scm" . 6145))
 (call
   (push.const core primitives)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core/control.scm" . 6145))
 (call
   (push.const core intrinsics)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core/control.scm" . 6145))
 (call
   (push.const
     (quote import . \x2E;quote)
     (when import . core.control\x27;when)
     (not import . \x2E;not)
     (unless import . core.control\x27;unless)
     (_ import . \x2E;_)
     (case-lambda-help import . core.control\x27;case-lambda-help)
     (= import . \x2E;=)
     (let import . \x2E;let)
     (apply import . \x2E;apply)
     (>= import . \x2E;>=)
     (lambda import . \x2E;lambda)
     (length import . \x2E;length)
     (syntax-length import . core.control\x27;syntax-length)
     (if import . \x2E;if)
     (begin import . \x2E;begin)
     (assertion-violation import . \x2E;assertion-violation)
     (... import . \x2E;...))
   (extend . 1)
   (call
     (push.const . syntax)
     (push.const . core.control\x27;syntax-length)
     (call
       (push.gloc.of \x2E;fn1.1\x60;1)
       (apply.gloc.of \x2E;transformer-thunk "../stdlib/core/control.scm" . 6145))
     (push)
     (push.iloc.0 . 0)
     (apply.gloc.of \x2E;set-top-level-macro! "../stdlib/core/control.scm" . 6145))
   (call
     (push.const . syntax)
     (push.const . core.control\x27;when)
     (push.const
       ()
       ("../stdlib/core/control.scm" . 22533)
       ((when test result1 result2 ...)
        (if test (begin result1 result2 ...))
        ((result2 . 1) (result1 . 0) (test . 0) (when . 0))
        (begin if)))
     (push.iloc.0 . 0)
     (apply.gloc.of \x2E;set-top-level-macro! "../stdlib/core/control.scm" . 6145))
   (call
     (push.const . syntax)
     (push.const . core.control\x27;unless)
     (push.const
       ()
       ("../stdlib/core/control.scm" . 28677)
       ((unless test result1 result2 ...)
        (if (not test) (begin result1 result2 ...))
        ((result2 . 1) (result1 . 0) (test . 0) (unless . 0))
        (begin not if)))
     (push.iloc.0 . 0)
     (apply.gloc.of \x2E;set-top-level-macro! "../stdlib/core/control.scm" . 6145))
   (call
     (push.const . syntax)
     (push.const . core.control\x27;case-lambda-help)
     (push.const
       ()
       ("../stdlib/core/control.scm" . 34821)
       ((_ args n)
        (assertion-violation #f "wrong number of arguments" args)
        ((n . 0) (args . 0))
        (assertion-violation))
       ((_ args n ((x ...) b1 b2 ...) more ...)
        (if (= n (syntax-length (x ...)))
            (apply (lambda (x ...) b1 b2 ...) args)
            (case-lambda-help args n more ...))
        ((more . 1) (b2 . 1) (b1 . 0) (x . 1) (n . 0) (args . 0))
        (case-lambda-help lambda apply syntax-length = if))
       ((_ args n ((x1 x2 ... . r) b1 b2 ...) more ...)
        (if (>= n (syntax-length (x1 x2 ...)))
            (apply (lambda (x1 x2 ... . r) b1 b2 ...) args)
            (case-lambda-help args n more ...))
        ((more . 1) (b2 . 1) (b1 . 0) (r . 0) (x2 . 1) (x1 . 0) (n . 0) (args . 0))
        (case-lambda-help lambda apply syntax-length >= if))
       ((_ args n (r b1 b2 ...) more ...)
        (apply (lambda r b1 b2 ...) args)
        ((more . 1) (b2 . 1) (b1 . 0) (r . 0) (n . 0) (args . 0))
        (lambda apply)))
     (push.iloc.0 . 0)
     (apply.gloc.of \x2E;set-top-level-macro! "../stdlib/core/control.scm" . 6145))
   (push.const . syntax)
   (push.const . core.control\x27;case-lambda)
   (push.const
     ()
     ("../stdlib/core/control.scm" . 50181)
     ((_ (fmls b1 b2 ...)) (lambda fmls b1 b2 ...) ((b2 . 1) (b1 . 0) (fmls . 0)) (lambda))
     ((_ (fmls b1 b2 ...) ...)
      (lambda args (let ((n (length args))) (case-lambda-help args n (fmls b1 b2 ...) ...)))
      ((b2 . 2) (b1 . 1) (fmls . 1))
      (case-lambda-help length n let args lambda)))
   (push.iloc.0 . 0)
   (apply.gloc.of \x2E;set-top-level-macro! "../stdlib/core/control.scm" . 6145))
 (push.const . core.control)
 (push.const . #f)
 (push.const
   (when import . core.control\x27;when)
   (unless import . core.control\x27;unless)
   (do import . \x2E;do)
   (case-lambda import . core.control\x27;case-lambda))
 (apply.gloc.of \x2E;intern-scheme-library "../stdlib/core/control.scm" . 6145))

((close
   (1 0)
   (call
     (push.iloc.0 . 0)
     (push.const . k)
     (apply.gloc.of \x2E;syntax/i0 "../stdlib/core/optargs.scm" . 16394))
   (push)
   (call
     (push.iloc.0 . 0)
     (push.const lst ...)
     (push.const (lst . 1))
     (apply.gloc.of \x2E;syntax/c1 "../stdlib/core/optargs.scm" . 16421))
   (push)
   (push.subr.gloc.of \x2E;length 1 "../stdlib/core/optargs.scm" . 16413)
   (apply.gloc.of \x2E;datum->syntax "../stdlib/core/optargs.scm" . 16394))
 (set.gloc.of \x2E;fn1.1\x60;1)
 (close
   (1 0)
   (push.gloc.of \x2E;patvars)
   (push.iloc.0 . 0)
   (push.const)
   (push.const _ (lst ...))
   (push.const . #f)
   (push.gloc.of \x2E;fn1.1\x60;1)
   (push.subr.gloc.of \x2E;list 3 "../stdlib/core/optargs.scm" . 14343)
   (apply.gloc.of \x2E;syntax-dispatch "../stdlib/core/optargs.scm" . 14343))
 (set.gloc.of \x2E;fn2.1\x60;2)
 (call
   (push.const core syntax-case)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core/optargs.scm" . 6145))
 (call
   (push.const core intrinsics)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core/optargs.scm" . 6145))
 (call
   (push.const
     (append import . \x2E;append)
     (apply import . \x2E;apply)
     (quote import . \x2E;quote)
     (_ import . \x2E;_)
     (= import . \x2E;=)
     (car import . \x2E;car)
     (list import . \x2E;list)
     (let import . \x2E;let)
     (lambda import . \x2E;lambda)
     (pair? import . \x2E;pair?)
     (length import . \x2E;length)
     (syntax-length import . core.optargs\x27;syntax-length)
     (if import . \x2E;if)
     (let-optionals-aux import . core.optargs\x27;let-optionals-aux)
     (... import . \x2E;...))
   (extend . 1)
   (call
     (push.const . syntax)
     (push.const . core.optargs\x27;syntax-length)
     (call
       (push.gloc.of \x2E;fn2.1\x60;2)
       (apply.gloc.of \x2E;transformer-thunk "../stdlib/core/optargs.scm" . 6145))
     (push)
     (push.iloc.0 . 0)
     (apply.gloc.of \x2E;set-top-level-macro! "../stdlib/core/optargs.scm" . 6145))
   (call
     (push.const . syntax)
     (push.const . core.optargs\x27;let-optionals-aux)
     (push.const
       ()
       ("../stdlib/core/optargs.scm" . 19461)
       ((_ _ _ (value ...) () ()) (list value ...) ((value . 1)) (list))
       ((_ argc args () (var1 ... var2) (def1 ... def2))
        (if (= argc (syntax-length (var1 ... var2)))
            args
            (let ((temp def2)) (let-optionals-aux argc args (temp) (var1 ...) (def1 ...))))
        ((def2 . 0) (def1 . 1) (var2 . 0) (var1 . 1) (args . 0) (argc . 0))
        (let-optionals-aux temp let syntax-length = if))
       ((_ argc args (value ...) (var) (def))
        (if (= argc 1) (append args (list value ...)) (list def value ...))
        ((def . 0) (var . 0) (value . 1) (args . 0) (argc . 0))
        (list append = if))
       ((_ argc args (value ...) (var1 ... var2) (def1 ... def2))
        (if (= argc (syntax-length (var1 ... var2)))
            (append args (list value ...))
            (let ((temp def2))
              (let-optionals-aux argc args (temp value ...) (var1 ...) (def1 ...))))
        ((def2 . 0) (def1 . 1) (var2 . 0) (var1 . 1) (value . 1) (args . 0) (argc . 0))
        (let-optionals-aux temp let list append syntax-length = if)))
     (push.iloc.0 . 0)
     (apply.gloc.of \x2E;set-top-level-macro! "../stdlib/core/optargs.scm" . 6145))
   (push.const . syntax)
   (push.const . core.optargs\x27;let-optionals)
   (push.const
     ()
     ("../stdlib/core/optargs.scm" . 38917)
     ((_ args ((var def)) body1 body2 ...)
      (let ((var (if (pair? args) (car args) def))) body1 body2 ...)
      ((body2 . 1) (body1 . 0) (def . 0) (var . 0) (args . 0))
      (car pair? if let))
     ((_ args ((var def) ...) body1 body2 ...)
      (apply
        (lambda (var ...) body1 body2 ...)
        (let ((argc (length args))) (let-optionals-aux argc args () (var ...) (def ...))))
      ((body2 . 1) (body1 . 0) (def . 1) (var . 1) (args . 0))
      (let-optionals-aux length argc let lambda apply)))
   (push.iloc.0 . 0)
   (apply.gloc.of \x2E;set-top-level-macro! "../stdlib/core/optargs.scm" . 6145))
 (push.const . core.optargs)
 (push.const . #f)
 (push.const (let-optionals import . core.optargs\x27;let-optionals))
 (apply.gloc.of \x2E;intern-scheme-library "../stdlib/core/optargs.scm" . 6145))

((close
   (1 0)
   (push.iloc.0 . 0)
   (push.const check-argument n who arg expect (test arg))
   (push.const (test . 0) (expect . 0) (arg . 0) (who . 0) (n . 0))
   (apply.gloc.of \x2E;syntax/c1 "../stdlib/core/chkarg.scm" . 28682))
 (set.gloc.of \x2E;fn6.1\x60;6)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (call
     (call
       (push.iloc.0 . 0)
       (push.const . k)
       (apply.gloc.of \x2E;syntax/i0 "../stdlib/core/chkarg.scm" . 24605))
     (push)
     (push.const . "expected ~a, but got ~a as argument ~a")
     (call
       (call
         (push.iloc.0 . 0)
         (push.const . expect)
         (apply.gloc.of \x2E;syntax/i1 "../stdlib/core/chkarg.scm" . 24673))
       (push)
       (apply.gloc.of \x2E;syntax->datum "../stdlib/core/chkarg.scm" . 24673))
     (push)
     (push.const . "~s")
     (call
       (call
         (push.iloc.0 . 0)
         (push.const . n)
         (apply.gloc.of \x2E;syntax/i1 "../stdlib/core/chkarg.scm" . 24703))
       (push)
       (apply.gloc.of \x2E;syntax->datum "../stdlib/core/chkarg.scm" . 24703))
     (push)
     (push.subr.gloc.of \x2E;format 4 "../stdlib/core/chkarg.scm" . 24624)
     (apply.gloc.of \x2E;datum->syntax "../stdlib/core/chkarg.scm" . 24605))
   (push)
   (push.subr.gloc.of \x2E;list 1 "../stdlib/core/chkarg.scm" . 24605)
   (push.const)
   (push.const msg)
   (push.const . #f)
   (push.gloc.of \x2E;fn12.1\x60;12)
   (push.subr.gloc.of \x2E;list 3 "../stdlib/core/chkarg.scm" . 24586)
   (push.const . _)
   (push.const . #f)
   (push.gloc.of \x2E;fn7.1\x60;7)
   (push.subr.gloc.of \x2E;list 3 "../stdlib/core/chkarg.scm" . 24605)
   (apply.gloc.of \x2E;syntax-dispatch "../stdlib/core/chkarg.scm" . 24586))
 (set.gloc.of \x2E;fn2.1\x60;2)
 (close
   (1 0)
   (push.const . with-syntax)
   (push.const . "value does not match to pattern")
   (push.const
     (msg
       (datum->syntax
         (syntax k)
         (format "expected ~a, but got ~a" (syntax->datum (syntax expect)) "~s"))))
   (apply.gloc.of \x2E;syntax-violation "../stdlib/core/chkarg.scm" . 20509))
 (set.gloc.of \x2E;fn3.1\x60;3)
 (close
   (1 0)
   (push.gloc.of \x2E;patvars)
   (push.iloc.0 . 0)
   (push.const)
   (push.const _ e1 . e2)
   (push.gloc.of \x2E;fn1.1\x60;1)
   (push.gloc.of \x2E;fn11.1\x60;11)
   (push.subr.gloc.of \x2E;list 3 "../stdlib/core/chkarg.scm" . 14343)
   (push.const _ 0 who arg expect test)
   (push.gloc.of \x2E;fn4.1\x60;4)
   (push.gloc.of \x2E;fn9.1\x60;9)
   (push.subr.gloc.of \x2E;list 3 "../stdlib/core/chkarg.scm" . 13317)
   (push.const _ n who arg expect test)
   (push.gloc.of \x2E;fn8.1\x60;8)
   (push.gloc.of \x2E;fn2.1\x60;2)
   (push.subr.gloc.of \x2E;list 3 "../stdlib/core/chkarg.scm" . 13317)
   (push.const _ n who arg expect test)
   (push.gloc.of \x2E;fn10.1\x60;10)
   (push.gloc.of \x2E;fn6.1\x60;6)
   (push.subr.gloc.of \x2E;list 3 "../stdlib/core/chkarg.scm" . 14343)
   (push.const . _)
   (push.const . #f)
   (push.close
     (1 0)
     (push.const . check-argument)
     (push.const . "expected 4 or 5 clauses (<position> who arg expect test)")
     (push.iloc.1 . 0)
     (apply.gloc.of \x2E;syntax-violation "../stdlib/core/chkarg.scm" . 29708))
   (push.subr.gloc.of \x2E;list 3 "../stdlib/core/chkarg.scm" . 14343)
   (apply.gloc.of \x2E;syntax-dispatch "../stdlib/core/chkarg.scm" . 13317))
 (set.gloc.of \x2E;fn5.1\x60;5)
 (close
   (1 0)
   (push.const . with-syntax)
   (push.const . "value does not match to pattern")
   (push.const
     (msg
       (datum->syntax
         (syntax k)
         (format
           "expected ~a, but got ~a as argument ~a"
           (syntax->datum (syntax expect))
           "~s"
           (syntax->datum (syntax n))))))
   (apply.gloc.of \x2E;syntax-violation "../stdlib/core/chkarg.scm" . 24605))
 (set.gloc.of \x2E;fn7.1\x60;7)
 (close
   (1 0)
   (call
     (call
       (push.iloc.0 . 0)
       (push.const . test)
       (apply.gloc.of \x2E;syntax/i1 "../stdlib/core/chkarg.scm" . 19473))
     (push)
     (apply.gloc.of \x2E;syntax->datum "../stdlib/core/chkarg.scm" . 19473))
   (ret.pair? "../stdlib/core/chkarg.scm" . 19466))
 (set.gloc.of \x2E;fn4.1\x60;4)
 (close
   (1 0)
   (call
     (call
       (push.iloc.0 . 0)
       (push.const . test)
       (apply.gloc.of \x2E;syntax/i1 "../stdlib/core/chkarg.scm" . 23569))
     (push)
     (apply.gloc.of \x2E;syntax->datum "../stdlib/core/chkarg.scm" . 23569))
   (ret.pair? "../stdlib/core/chkarg.scm" . 23562))
 (set.gloc.of \x2E;fn8.1\x60;8)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (call
     (call
       (push.iloc.0 . 0)
       (push.const . k)
       (apply.gloc.of \x2E;syntax/i0 "../stdlib/core/chkarg.scm" . 20509))
     (push)
     (push.const . "expected ~a, but got ~a")
     (call
       (call
         (push.iloc.0 . 0)
         (push.const . expect)
         (apply.gloc.of \x2E;syntax/i1 "../stdlib/core/chkarg.scm" . 20562))
       (push)
       (apply.gloc.of \x2E;syntax->datum "../stdlib/core/chkarg.scm" . 20562))
     (push)
     (push.const . "~s")
     (push.subr.gloc.of \x2E;format 3 "../stdlib/core/chkarg.scm" . 20528)
     (apply.gloc.of \x2E;datum->syntax "../stdlib/core/chkarg.scm" . 20509))
   (push)
   (push.subr.gloc.of \x2E;list 1 "../stdlib/core/chkarg.scm" . 20509)
   (push.const)
   (push.const msg)
   (push.const . #f)
   (push.gloc.of \x2E;fn13.1\x60;13)
   (push.subr.gloc.of \x2E;list 3 "../stdlib/core/chkarg.scm" . 20490)
   (push.const . _)
   (push.const . #f)
   (push.gloc.of \x2E;fn3.1\x60;3)
   (push.subr.gloc.of \x2E;list 3 "../stdlib/core/chkarg.scm" . 20509)
   (apply.gloc.of \x2E;syntax-dispatch "../stdlib/core/chkarg.scm" . 20490))
 (set.gloc.of \x2E;fn9.1\x60;9)
 (close
   (1 0)
   (call
     (call
       (push.iloc.0 . 0)
       (push.const . e1)
       (apply.gloc.of \x2E;syntax/i1 "../stdlib/core/chkarg.scm" . 16403))
     (push)
     (apply.gloc.of \x2E;syntax->datum "../stdlib/core/chkarg.scm" . 16403))
   (push)
   (ret.subr.gloc.of \x2E;symbol? "../stdlib/core/chkarg.scm" . 16426))
 (set.gloc.of \x2E;fn1.1\x60;1)
 (close
   (1 0)
   (call
     (call
       (push.iloc.0 . 0)
       (push.const . test)
       (apply.gloc.of \x2E;syntax/i1 "../stdlib/core/chkarg.scm" . 27667))
     (push)
     (apply.gloc.of \x2E;syntax->datum "../stdlib/core/chkarg.scm" . 27667))
   (push)
   (ret.subr.gloc.of \x2E;symbol? "../stdlib/core/chkarg.scm" . 27658))
 (set.gloc.of \x2E;fn10.1\x60;10)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (push.const check-argument 0 e1 . e2)
   (push.const (e2 . 0) (e1 . 0))
   (apply.gloc.of \x2E;syntax/c1 "../stdlib/core/chkarg.scm" . 17418))
 (set.gloc.of \x2E;fn11.1\x60;11)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (push.const or test (assertion-violation 'who (format msg arg)))
   (push.const (arg . 0) (msg . 0) (who . 0) (test . 0))
   (apply.gloc.of \x2E;syntax/c1 "../stdlib/core/chkarg.scm" . 25612))
 (set.gloc.of \x2E;fn12.1\x60;12)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (push.const or test (assertion-violation 'who (format msg arg)))
   (push.const (arg . 0) (msg . 0) (who . 0) (test . 0))
   (apply.gloc.of \x2E;syntax/c1 "../stdlib/core/chkarg.scm" . 21516))
 (set.gloc.of \x2E;fn13.1\x60;13)
 (call
   (push.const core syntax-case)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core/chkarg.scm" . 6145))
 (call
   (push.const core primitives)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core/chkarg.scm" . 6145))
 (call
   (push.const . syntax)
   (push.const . core.chkarg\x27;check-argument)
   (call
     (push.gloc.of \x2E;fn5.1\x60;5)
     (apply.gloc.of \x2E;transformer-thunk "../stdlib/core/chkarg.scm" . 6145))
   (push)
   (push.const
     (format import . \x2E;format)
     (let import . \x2E;let)
     (with-syntax import . core.syntax-case\x27;with-syntax)
     (assertion-violation import . \x2E;assertion-violation)
     (datum->syntax import . \x2E;datum->syntax)
     (syntax import . \x2E;syntax)
     (or import . \x2E;or)
     (syntax->datum import . \x2E;syntax->datum)
     (quote import . \x2E;quote)
     (_ import . \x2E;_)
     (lambda import . \x2E;lambda)
     (check-argument import . core.chkarg\x27;check-argument))
   (apply.gloc.of \x2E;set-top-level-macro! "../stdlib/core/chkarg.scm" . 6145))
 (push.const . core.chkarg)
 (push.const . #f)
 (push.const (check-argument import . core.chkarg\x27;check-argument))
 (apply.gloc.of \x2E;intern-scheme-library "../stdlib/core/chkarg.scm" . 6145))

((close
   (1 0 . loop)
   (iloc.0 . 0)
   (if.not.pair?.ret.const . #f)
   (car.iloc (0 . 0) "../stdlib/core/lists.scm" . 298026)
   (if.not.symbol?.ret.const . #t)
   (push.car.iloc (0 . 0) "../stdlib/core/lists.scm" . 299042)
   (push.cdr.iloc (0 . 0) "../stdlib/core/lists.scm" . 299052)
   (subr.gloc.of \x2E;memq 2 "../stdlib/core/lists.scm" . 299036)
   (if.true.ret)
   (touch.gloc.of loop\x60;202)
   (push.cdr.iloc (0 . 0) "../stdlib/core/lists.scm" . 300066)
   (apply.gloc.of loop\x60;202 "../stdlib/core/lists.scm" . 300060))
 (set.gloc.of loop\x60;202)
 (close
   (2 0 . loop)
   (iloc.0 . 0)
   (if.null? (push.iloc.0 . 1) (ret.subr.gloc.of \x2E;reverse "../stdlib/core/lists.scm" . 306189))
   (push.car.iloc (0 . 0) "../stdlib/core/lists.scm" . 307223)
   (push.iloc.0 . 1)
   (subr.gloc.of \x2E;memq 2 "../stdlib/core/lists.scm" . 307217)
   (if.true
     (touch.gloc.of loop\x60;210)
     (push.cdr.iloc (0 . 0) "../stdlib/core/lists.scm" . 308247)
     (push.iloc.0 . 1)
     (apply.gloc.of loop\x60;210 "../stdlib/core/lists.scm" . 308241))
   (touch.gloc.of loop\x60;210)
   (push.cdr.iloc (0 . 0) "../stdlib/core/lists.scm" . 309271)
   (push.car.iloc (0 . 0) "../stdlib/core/lists.scm" . 309287)
   (iloc.0 . 1)
   (push.cons)
   (apply.gloc.of loop\x60;210 "../stdlib/core/lists.scm" . 309265))
 (set.gloc.of loop\x60;210)
 (close
   (1 0 . loop)
   (iloc.0 . 0)
   (if.null?.ret.const)
   (push.iloc.0 . 0)
   (subr.gloc.of \x2E;cdar 1 "../stdlib/core/lists.scm" . 30743)
   (if.null?
     (touch.gloc.of loop\x60;5)
     (push.cdr.iloc (0 . 0) "../stdlib/core/lists.scm" . 30761)
     (apply.gloc.of loop\x60;5 "../stdlib/core/lists.scm" . 30755))
   (push.iloc.0 . 0)
   (push.subr.gloc.of \x2E;cdar 1 "../stdlib/core/lists.scm" . 31771)
   (call
     (touch.gloc.of loop\x60;5)
     (push.cdr.iloc (0 . 0) "../stdlib/core/lists.scm" . 31788)
     (apply.gloc.of loop\x60;5 "../stdlib/core/lists.scm" . 31782))
   (ret.cons "../stdlib/core/lists.scm" . 31765))
 (set.gloc.of loop\x60;5)
 (call
   (push.const core optargs)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core/lists.scm" . 6145))
 (call
   (push.const core primitives)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core/lists.scm" . 6145))
 (close
   (1 0 . core.lists\x27;collect-cdr)
   (touch.gloc.of loop\x60;5)
   (push.iloc.0 . 0)
   (apply.gloc.of loop\x60;5 "../stdlib/core/lists.scm" . 28679))
 (set.gloc.of core.lists\x27;collect-cdr)
 (close
   (2 0 . core.lists\x27;find)
   (iloc.0 . 1)
   (if.null?.ret.const . #f)
   (iloc.0 . 1)
   (if.pair?
     (extend.enclose+
       (2 0 . loop)
       (call (push.iloc.0 . 0) (apply.iloc (2 . 0) "../stdlib/core/lists.scm" . 38935))
       (if.true (ret.iloc 0 . 0))
       (iloc.0 . 1)
       (if.null?.ret.const . #f)
       (iloc.0 . 1)
       (if.pair?
         (push.car.iloc (0 . 1) "../stdlib/core/lists.scm" . 41002)
         (push.cdr.iloc (0 . 1) "../stdlib/core/lists.scm" . 41013)
         (apply.iloc+ (1 . 0) "../stdlib/core/lists.scm" . 40996))
       (push.const . find)
       (push.const . "traversal reached to non-pair element ~s")
       (push.iloc.0 . 1)
       (push.subr.gloc.of \x2E;format 2 "../stdlib/core/lists.scm" . 43058)
       (push.iloc 2 . 0)
       (push.iloc 2 . 1)
       (push.subr.gloc.of \x2E;list 2 "../stdlib/core/lists.scm" . 43115)
       (apply.gloc.of \x2E;assertion-violation "../stdlib/core/lists.scm" . 43031))
     (push.car.iloc (1 . 1) "../stdlib/core/lists.scm" . 37919)
     (push.cdr.iloc (1 . 1) "../stdlib/core/lists.scm" . 37936)
     (apply.iloc+ (0 . 0) "../stdlib/core/lists.scm" . 37902))
   (push.const . find)
   (push.const . "expected chain of pairs, but got ~r, as argument 2")
   (push.iloc.0 . 1)
   (push.subr.gloc.of \x2E;format 2 "../stdlib/core/lists.scm" . 45097)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.subr.gloc.of \x2E;list 2 "../stdlib/core/lists.scm" . 45163)
   (apply.gloc.of \x2E;assertion-violation "../stdlib/core/lists.scm" . 45070))
 (set.gloc.of core.lists\x27;find)
 (close
   (2 0 . core.lists\x27;for-all-n)
   (push.iloc.0 . 1)
   (push.subr.gloc.of \x2E;length 1 "../stdlib/core/lists.scm" . 49171)
   (extend . 1)
   (extend.enclose
     (1 0)
     (extend.enclose+
       (1 0 . loop)
       (iloc.0 . 0)
       (if.null?.ret.const)
       (car.iloc (0 . 0) "../stdlib/core/lists.scm" . 55325)
       (if.pair?
         (push.iloc.0 . 0)
         (push.subr.gloc.of \x2E;caar 1 "../stdlib/core/lists.scm" . 56348)
         (call
           (push.cdr.iloc (0 . 0) "../stdlib/core/lists.scm" . 56365)
           (apply.iloc+ (1 . 0) "../stdlib/core/lists.scm" . 56359))
         (ret.cons "../stdlib/core/lists.scm" . 56342))
       (push.const . for-all)
       (push.const . "traversal reached to non-pair element ~s")
       (push.car.iloc (0 . 0) "../stdlib/core/lists.scm" . 58471)
       (push.subr.gloc.of \x2E;format 2 "../stdlib/core/lists.scm" . 58420)
       (push.iloc 5 . 1)
       (apply.gloc.of \x2E;assertion-violation "../stdlib/core/lists.scm" . 58390))
     (push.iloc.1 . 0)
     (apply.iloc+ (0 . 0) "../stdlib/core/lists.scm" . 53261))
   (extend.enclose+
     (2 0 . loop)
     (push.iloc.0 . 0)
     (subr.gloc.of \x2E;length 1 "../stdlib/core/lists.scm" . 61458)
     (=.iloc (3 . 0) "../stdlib/core/lists.scm" . 61455)
     (if.false.call
       (push.const . for-all)
       (push.const . "expected same length chains of pairs")
       (push.iloc 4 . 1)
       (apply.gloc.of \x2E;assertion-violation "../stdlib/core/lists.scm" . 62479))
     (iloc.0 . 1)
     (if.null?
       (push.iloc 4 . 0)
       (push.iloc.0 . 0)
       (apply.gloc.of \x2E;apply "../stdlib/core/lists.scm" . 64527))
     (call
       (push.iloc 4 . 0)
       (push.iloc.0 . 0)
       (apply.gloc.of \x2E;apply "../stdlib/core/lists.scm" . 65556))
     (if.false.ret)
     (call (push.iloc.0 . 1) (apply.iloc (2 . 0) "../stdlib/core/lists.scm" . 66586))
     (push)
     (call
       (push.iloc.0 . 1)
       (apply.gloc.of core.lists\x27;collect-cdr "../stdlib/core/lists.scm" . 66605))
     (push)
     (apply.iloc+ (1 . 0) "../stdlib/core/lists.scm" . 66580))
   (call (push.iloc 3 . 1) (apply.iloc (1 . 0) "../stdlib/core/lists.scm" . 60442))
   (push)
   (call
     (push.iloc 3 . 1)
     (apply.gloc.of core.lists\x27;collect-cdr "../stdlib/core/lists.scm" . 60477))
   (push)
   (apply.iloc+ (0 . 0) "../stdlib/core/lists.scm" . 60425))
 (set.gloc.of core.lists\x27;for-all-n)
 (close
   (2 0 . core.lists\x27;exists-n)
   (push.iloc.0 . 1)
   (push.subr.gloc.of \x2E;length 1 "../stdlib/core/lists.scm" . 70675)
   (extend . 1)
   (extend.enclose
     (1 0)
     (extend.enclose+
       (1 0 . loop)
       (iloc.0 . 0)
       (if.null?.ret.const)
       (car.iloc (0 . 0) "../stdlib/core/lists.scm" . 76829)
       (if.pair?
         (push.iloc.0 . 0)
         (push.subr.gloc.of \x2E;caar 1 "../stdlib/core/lists.scm" . 77852)
         (call
           (push.cdr.iloc (0 . 0) "../stdlib/core/lists.scm" . 77869)
           (apply.iloc+ (1 . 0) "../stdlib/core/lists.scm" . 77863))
         (ret.cons "../stdlib/core/lists.scm" . 77846))
       (push.const . exists)
       (push.const . "traversal reached to non-pair element ~s")
       (push.car.iloc (0 . 0) "../stdlib/core/lists.scm" . 79974)
       (push.subr.gloc.of \x2E;format 2 "../stdlib/core/lists.scm" . 79923)
       (push.iloc 5 . 1)
       (apply.gloc.of \x2E;assertion-violation "../stdlib/core/lists.scm" . 79894))
     (push.iloc.1 . 0)
     (apply.iloc+ (0 . 0) "../stdlib/core/lists.scm" . 74765))
   (extend.enclose+
     (2 0 . loop)
     (push.iloc.0 . 0)
     (subr.gloc.of \x2E;length 1 "../stdlib/core/lists.scm" . 82962)
     (=.iloc (3 . 0) "../stdlib/core/lists.scm" . 82959)
     (if.false.call
       (push.const . exists)
       (push.const . "expected same length chains of pairs")
       (push.iloc 4 . 1)
       (apply.gloc.of \x2E;assertion-violation "../stdlib/core/lists.scm" . 83983))
     (iloc.0 . 1)
     (if.null?
       (push.iloc 4 . 0)
       (push.iloc.0 . 0)
       (apply.gloc.of \x2E;apply "../stdlib/core/lists.scm" . 86031))
     (call
       (push.iloc 4 . 0)
       (push.iloc.0 . 0)
       (apply.gloc.of \x2E;apply "../stdlib/core/lists.scm" . 87059))
     (if.true.ret)
     (call (push.iloc.0 . 1) (apply.iloc (2 . 0) "../stdlib/core/lists.scm" . 88089))
     (push)
     (call
       (push.iloc.0 . 1)
       (apply.gloc.of core.lists\x27;collect-cdr "../stdlib/core/lists.scm" . 88108))
     (push)
     (apply.iloc+ (1 . 0) "../stdlib/core/lists.scm" . 88083))
   (call (push.iloc 3 . 1) (apply.iloc (1 . 0) "../stdlib/core/lists.scm" . 81946))
   (push)
   (call
     (push.iloc 3 . 1)
     (apply.gloc.of core.lists\x27;collect-cdr "../stdlib/core/lists.scm" . 81981))
   (push)
   (apply.iloc+ (0 . 0) "../stdlib/core/lists.scm" . 81929))
 (set.gloc.of core.lists\x27;exists-n)
 (close
   (2 0 . core.lists\x27;for-all-n-quick)
   (iloc.0 . 1)
   (if.null?.ret.const . #t)
   (extend.enclose+
     (2 0 . loop)
     (iloc.0 . 1)
     (if.null?
       (push.iloc 2 . 0)
       (push.iloc.0 . 0)
       (apply.gloc.of \x2E;apply "../stdlib/core/lists.scm" . 95249))
     (call
       (push.iloc 2 . 0)
       (push.iloc.0 . 0)
       (apply.gloc.of \x2E;apply "../stdlib/core/lists.scm" . 96278))
     (if.false.ret)
     (push.car.iloc (0 . 1) "../stdlib/core/lists.scm" . 97308)
     (push.cdr.iloc (0 . 1) "../stdlib/core/lists.scm" . 97319)
     (apply.iloc+ (1 . 0) "../stdlib/core/lists.scm" . 97302))
   (push.car.iloc (1 . 1) "../stdlib/core/lists.scm" . 93212)
   (push.cdr.iloc (1 . 1) "../stdlib/core/lists.scm" . 93229)
   (apply.iloc+ (0 . 0) "../stdlib/core/lists.scm" . 93195))
 (set.gloc.of core.lists\x27;for-all-n-quick)
 (close
   (2 0 . core.lists\x27;exists-n-quick)
   (iloc.0 . 1)
   (if.not.pair?.ret.const . #f)
   (extend.enclose+
     (2 0 . loop)
     (iloc.0 . 1)
     (if.null?
       (push.iloc 2 . 0)
       (push.iloc.0 . 0)
       (apply.gloc.of \x2E;apply "../stdlib/core/lists.scm" . 104466))
     (call
       (push.iloc 2 . 0)
       (push.iloc.0 . 0)
       (apply.gloc.of \x2E;apply "../stdlib/core/lists.scm" . 105494))
     (if.true.ret)
     (push.car.iloc (0 . 1) "../stdlib/core/lists.scm" . 106524)
     (push.cdr.iloc (0 . 1) "../stdlib/core/lists.scm" . 106535)
     (apply.iloc+ (1 . 0) "../stdlib/core/lists.scm" . 106518))
   (push.car.iloc (1 . 1) "../stdlib/core/lists.scm" . 102429)
   (push.cdr.iloc (1 . 1) "../stdlib/core/lists.scm" . 102446)
   (apply.iloc+ (0 . 0) "../stdlib/core/lists.scm" . 102412))
 (set.gloc.of core.lists\x27;exists-n-quick)
 (close
   (2 0 . core.lists\x27;for-all-1)
   (iloc.0 . 1)
   (if.null?.ret.const . #t)
   (iloc.0 . 1)
   (if.pair?
     (extend.enclose+
       (2 0 . loop)
       (iloc.0 . 1)
       (if.null? (push.iloc.0 . 0) (apply.iloc (2 . 0) "../stdlib/core/lists.scm" . 113700))
       (iloc.0 . 1)
       (if.pair?
         (call (push.iloc.0 . 0) (apply.iloc (2 . 0) "../stdlib/core/lists.scm" . 115740))
         (if.false.ret)
         (push.car.iloc (0 . 1) "../stdlib/core/lists.scm" . 116770)
         (push.cdr.iloc (0 . 1) "../stdlib/core/lists.scm" . 116781)
         (apply.iloc+ (1 . 0) "../stdlib/core/lists.scm" . 116764))
       (call (push.iloc.0 . 0) (apply.iloc (2 . 0) "../stdlib/core/lists.scm" . 118812))
       (if.false.ret)
       (push.const . for-all)
       (push.const . "traversal reached to non-pair element ~s")
       (push.iloc.0 . 1)
       (push.subr.gloc.of \x2E;format 2 "../stdlib/core/lists.scm" . 119866)
       (push.iloc 2 . 0)
       (push.iloc 2 . 1)
       (push.subr.gloc.of \x2E;list 2 "../stdlib/core/lists.scm" . 119923)
       (apply.gloc.of \x2E;assertion-violation "../stdlib/core/lists.scm" . 119836))
     (push.car.iloc (1 . 1) "../stdlib/core/lists.scm" . 112671)
     (push.cdr.iloc (1 . 1) "../stdlib/core/lists.scm" . 112688)
     (apply.iloc+ (0 . 0) "../stdlib/core/lists.scm" . 112654))
   (push.const . for-all)
   (push.const . "expected chain of pairs, but got ~r, as argument 2")
   (push.iloc.0 . 1)
   (push.subr.gloc.of \x2E;format 2 "../stdlib/core/lists.scm" . 121900)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.subr.gloc.of \x2E;list 2 "../stdlib/core/lists.scm" . 121966)
   (apply.gloc.of \x2E;assertion-violation "../stdlib/core/lists.scm" . 121870))
 (set.gloc.of core.lists\x27;for-all-1)
 (close
   (2 0 . core.lists\x27;exists-1)
   (iloc.0 . 1)
   (if.null?.ret.const . #f)
   (iloc.0 . 1)
   (if.pair?
     (extend.enclose+
       (2 0 . loop)
       (iloc.0 . 1)
       (if.null? (push.iloc.0 . 0) (apply.iloc (2 . 0) "../stdlib/core/lists.scm" . 129060))
       (call (push.iloc.0 . 0) (apply.iloc (2 . 0) "../stdlib/core/lists.scm" . 130071))
       (if.true.ret)
       (iloc.0 . 1)
       (if.pair?
         (push.car.iloc (0 . 1) "../stdlib/core/lists.scm" . 131114)
         (push.cdr.iloc (0 . 1) "../stdlib/core/lists.scm" . 131125)
         (apply.iloc+ (1 . 0) "../stdlib/core/lists.scm" . 131108))
       (push.const . exists)
       (push.const . "traversal reached to non-pair element ~s")
       (push.iloc.0 . 1)
       (push.subr.gloc.of \x2E;format 2 "../stdlib/core/lists.scm" . 133172)
       (push.iloc 2 . 0)
       (push.iloc 2 . 1)
       (push.subr.gloc.of \x2E;list 2 "../stdlib/core/lists.scm" . 133229)
       (apply.gloc.of \x2E;assertion-violation "../stdlib/core/lists.scm" . 133143))
     (push.car.iloc (1 . 1) "../stdlib/core/lists.scm" . 128031)
     (push.cdr.iloc (1 . 1) "../stdlib/core/lists.scm" . 128048)
     (apply.iloc+ (0 . 0) "../stdlib/core/lists.scm" . 128014))
   (push.const . exists)
   (push.const . "expected chain of pairs, but got ~r, as argument 2")
   (push.iloc.0 . 1)
   (push.subr.gloc.of \x2E;format 2 "../stdlib/core/lists.scm" . 135211)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.subr.gloc.of \x2E;list 2 "../stdlib/core/lists.scm" . 135277)
   (apply.gloc.of \x2E;assertion-violation "../stdlib/core/lists.scm" . 135182))
 (set.gloc.of core.lists\x27;exists-1)
 (close
   (2 1 . core.lists\x27;for-all)
   (iloc.0 . 2)
   (if.null?
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (apply.gloc.of core.lists\x27;for-all-1 "../stdlib/core/lists.scm" . 140302))
   (call
     (push.gloc.of \x2E;list-transpose+)
     (push.iloc.0 . 1)
     (push.iloc.0 . 2)
     (apply.gloc.of \x2E;apply "../stdlib/core/lists.scm" . 141326))
   (push)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (push.iloc.1 . 0)
     (push.iloc.0 . 0)
     (apply.gloc.of core.lists\x27;for-all-n-quick "../stdlib/core/lists.scm" . 142367))
   (push.iloc.1 . 0)
   (push.iloc.1 . 1)
   (iloc.1 . 2)
   (push.cons)
   (apply.gloc.of core.lists\x27;for-all-n "../stdlib/core/lists.scm" . 144398))
 (set.gloc.of core.lists\x27;for-all)
 (close
   (2 1 . core.lists\x27;exists)
   (iloc.0 . 2)
   (if.null?
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (apply.gloc.of core.lists\x27;exists-1 "../stdlib/core/lists.scm" . 149518))
   (call
     (push.gloc.of \x2E;list-transpose+)
     (push.iloc.0 . 1)
     (push.iloc.0 . 2)
     (apply.gloc.of \x2E;apply "../stdlib/core/lists.scm" . 150542))
   (push)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (push.iloc.1 . 0)
     (push.iloc.0 . 0)
     (apply.gloc.of core.lists\x27;exists-n-quick "../stdlib/core/lists.scm" . 151583))
   (push.iloc.1 . 0)
   (push.iloc.1 . 1)
   (iloc.1 . 2)
   (push.cons)
   (apply.gloc.of core.lists\x27;exists-n "../stdlib/core/lists.scm" . 153614))
 (set.gloc.of core.lists\x27;exists)
 (close
   (2 0 . core.lists\x27;filter)
   (extend.enclose+
     (1 0 . loop)
     (iloc.0 . 0)
     (if.null?.ret.const)
     (call
       (push.car.iloc (0 . 0) "../stdlib/core/lists.scm" . 159766)
       (apply.iloc (2 . 0) "../stdlib/core/lists.scm" . 159760))
     (if.true
       (push.car.iloc (0 . 0) "../stdlib/core/lists.scm" . 159783)
       (call
         (push.cdr.iloc (0 . 0) "../stdlib/core/lists.scm" . 159799)
         (apply.iloc+ (1 . 0) "../stdlib/core/lists.scm" . 159793))
       (ret.cons "../stdlib/core/lists.scm" . 159777))
     (push.cdr.iloc (0 . 0) "../stdlib/core/lists.scm" . 160795)
     (apply.iloc+ (1 . 0) "../stdlib/core/lists.scm" . 160789))
   (push.iloc.1 . 1)
   (apply.iloc+ (0 . 0) "../stdlib/core/lists.scm" . 157703))
 (set.gloc.of core.lists\x27;filter)
 (close
   (2 0 . core.lists\x27;partition)
   (extend.enclose+
     (3 0 . loop)
     (iloc.0 . 0)
     (if.null?
       (push.iloc.0 . 1)
       (push.subr.gloc.of \x2E;reverse 1 "../stdlib/core/lists.scm" . 165924)
       (push.iloc.0 . 2)
       (push.subr.gloc.of \x2E;reverse 1 "../stdlib/core/lists.scm" . 165939)
       (ret.subr.gloc.of \x2E;values "../stdlib/core/lists.scm" . 165916))
     (call
       (push.car.iloc (0 . 0) "../stdlib/core/lists.scm" . 166934)
       (apply.iloc (2 . 0) "../stdlib/core/lists.scm" . 166928))
     (if.true
       (push.cdr.iloc (0 . 0) "../stdlib/core/lists.scm" . 166951)
       (push.car.iloc (0 . 0) "../stdlib/core/lists.scm" . 166967)
       (iloc.0 . 1)
       (push.cons)
       (push.iloc.0 . 2)
       (apply.iloc+ (1 . 0) "../stdlib/core/lists.scm" . 166945))
     (push.cdr.iloc (0 . 0) "../stdlib/core/lists.scm" . 167963)
     (push.iloc.0 . 1)
     (push.car.iloc (0 . 0) "../stdlib/core/lists.scm" . 167984)
     (iloc.0 . 2)
     (push.cons)
     (apply.iloc+ (1 . 0) "../stdlib/core/lists.scm" . 167957))
   (push.iloc.1 . 1)
   (push.const)
   (push.const)
   (apply.iloc+ (0 . 0) "../stdlib/core/lists.scm" . 164871))
 (set.gloc.of core.lists\x27;partition)
 (close
   (3 0 . core.lists\x27;fold-left-1)
   (iloc.0 . 2)
   (if.null? (ret.iloc 0 . 1))
   (push.iloc.0 . 0)
   (call
     (push.iloc.0 . 1)
     (push.car.iloc (0 . 2) "../stdlib/core/lists.scm" . 174123)
     (apply.iloc (0 . 0) "../stdlib/core/lists.scm" . 174112))
   (push)
   (push.cdr.iloc (0 . 2) "../stdlib/core/lists.scm" . 174134)
   (apply.gloc.of core.lists\x27;fold-left-1 "../stdlib/core/lists.scm" . 174094))
 (set.gloc.of core.lists\x27;fold-left-1)
 (close
   (3 0 . core.lists\x27;fold-left-n)
   (iloc.0 . 2)
   (if.null? (ret.iloc 0 . 1))
   (push.iloc.0 . 0)
   (call
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.subr.gloc.of \x2E;list 1 "../stdlib/core/lists.scm" . 180276)
     (push.car.iloc (0 . 2) "../stdlib/core/lists.scm" . 180288)
     (push.subr.gloc.of \x2E;append 2 "../stdlib/core/lists.scm" . 180268)
     (apply.gloc.of \x2E;apply "../stdlib/core/lists.scm" . 180256))
   (push)
   (push.cdr.iloc (0 . 2) "../stdlib/core/lists.scm" . 180300)
   (apply.gloc.of core.lists\x27;fold-left-n "../stdlib/core/lists.scm" . 180238))
 (set.gloc.of core.lists\x27;fold-left-n)
 (close
   (3 1 . core.lists\x27;fold-left)
   (iloc.0 . 3)
   (if.null?
     (push.iloc.0 . 2)
     (subr.gloc.of \x2E;list? 1 "../stdlib/core/lists.scm" . 185359)
     (if.true
       (push.iloc.0 . 0)
       (push.iloc.0 . 1)
       (push.iloc.0 . 2)
       (apply.gloc.of core.lists\x27;fold-left-1 "../stdlib/core/lists.scm" . 186383))
     (push.const . fold-left)
     (push.const . "expected proper list, but got ~r, as argument 3")
     (push.iloc.0 . 2)
     (push.subr.gloc.of \x2E;format 2 "../stdlib/core/lists.scm" . 187439)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.iloc.0 . 2)
     (push.iloc.0 . 3)
     (push.subr.gloc.of \x2E;cons* 4 "../stdlib/core/lists.scm" . 187503)
     (apply.gloc.of \x2E;assertion-violation "../stdlib/core/lists.scm" . 187407))
   (call
     (push.gloc.of \x2E;list-transpose+)
     (push.iloc.0 . 2)
     (push.iloc.0 . 3)
     (apply.gloc.of \x2E;apply "../stdlib/core/lists.scm" . 188434))
   (push)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (push.iloc.1 . 0)
     (push.iloc.1 . 1)
     (push.iloc.0 . 0)
     (apply.gloc.of core.lists\x27;fold-left-n "../stdlib/core/lists.scm" . 189475))
   (push.const . fold-left)
   (push.const . "expected same length proper lists")
   (push.iloc.1 . 0)
   (push.iloc.1 . 1)
   (push.iloc.1 . 2)
   (push.iloc.1 . 3)
   (push.subr.gloc.of \x2E;cons* 4 "../stdlib/core/lists.scm" . 191574)
   (apply.gloc.of \x2E;assertion-violation "../stdlib/core/lists.scm" . 191506))
 (set.gloc.of core.lists\x27;fold-left)
 (close
   (3 0 . core.lists\x27;fold-right-1)
   (iloc.0 . 2)
   (if.null? (ret.iloc 0 . 1))
   (push.car.iloc (0 . 2) "../stdlib/core/lists.scm" . 197652)
   (call
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.cdr.iloc (0 . 2) "../stdlib/core/lists.scm" . 197686)
     (apply.gloc.of core.lists\x27;fold-right-1 "../stdlib/core/lists.scm" . 197662))
   (push)
   (apply.iloc (0 . 0) "../stdlib/core/lists.scm" . 197646))
 (set.gloc.of core.lists\x27;fold-right-1)
 (close
   (3 0 . core.lists\x27;fold-right-n)
   (iloc.0 . 2)
   (if.null? (ret.iloc 0 . 1))
   (push.iloc.0 . 0)
   (push.car.iloc (0 . 2) "../stdlib/core/lists.scm" . 203810)
   (call
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.cdr.iloc (0 . 2) "../stdlib/core/lists.scm" . 203850)
     (apply.gloc.of core.lists\x27;fold-right-n "../stdlib/core/lists.scm" . 203826))
   (push)
   (push.subr.gloc.of \x2E;list 1 "../stdlib/core/lists.scm" . 203820)
   (push.subr.gloc.of \x2E;append 2 "../stdlib/core/lists.scm" . 203802)
   (apply.gloc.of \x2E;apply "../stdlib/core/lists.scm" . 203790))
 (set.gloc.of core.lists\x27;fold-right-n)
 (close
   (3 1 . core.lists\x27;fold-right)
   (iloc.0 . 3)
   (if.null?
     (push.iloc.0 . 2)
     (subr.gloc.of \x2E;list? 1 "../stdlib/core/lists.scm" . 208911)
     (if.true
       (push.iloc.0 . 0)
       (push.iloc.0 . 1)
       (push.iloc.0 . 2)
       (apply.gloc.of core.lists\x27;fold-right-1 "../stdlib/core/lists.scm" . 209935))
     (push.const . fold-right)
     (push.const . "expected proper list, but got ~r, as argument 3")
     (push.iloc.0 . 2)
     (push.subr.gloc.of \x2E;format 2 "../stdlib/core/lists.scm" . 210992)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.iloc.0 . 2)
     (push.iloc.0 . 3)
     (push.subr.gloc.of \x2E;cons* 4 "../stdlib/core/lists.scm" . 211056)
     (apply.gloc.of \x2E;assertion-violation "../stdlib/core/lists.scm" . 210959))
   (call
     (push.gloc.of \x2E;list-transpose+)
     (push.iloc.0 . 2)
     (push.iloc.0 . 3)
     (apply.gloc.of \x2E;apply "../stdlib/core/lists.scm" . 211986))
   (push)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (push.iloc.1 . 0)
     (push.iloc.1 . 1)
     (push.iloc.0 . 0)
     (apply.gloc.of core.lists\x27;fold-right-n "../stdlib/core/lists.scm" . 213027))
   (push.const . fold-right)
   (push.const . "expected same length proper lists")
   (push.iloc.1 . 0)
   (push.iloc.1 . 1)
   (push.iloc.1 . 2)
   (push.iloc.1 . 3)
   (push.subr.gloc.of \x2E;cons* 4 "../stdlib/core/lists.scm" . 215127)
   (apply.gloc.of \x2E;assertion-violation "../stdlib/core/lists.scm" . 215058))
 (set.gloc.of core.lists\x27;fold-right)
 (close
   (2 0 . core.lists\x27;remp)
   (extend.enclose+
     (1 0 . loop)
     (iloc.0 . 0)
     (if.null?.ret.const)
     (call
       (push.car.iloc (0 . 0) "../stdlib/core/lists.scm" . 221206)
       (apply.iloc (2 . 0) "../stdlib/core/lists.scm" . 221200))
     (if.true
       (push.cdr.iloc (0 . 0) "../stdlib/core/lists.scm" . 222230)
       (apply.iloc+ (1 . 0) "../stdlib/core/lists.scm" . 222224))
     (push.car.iloc (0 . 0) "../stdlib/core/lists.scm" . 224278)
     (call
       (push.cdr.iloc (0 . 0) "../stdlib/core/lists.scm" . 225308)
       (apply.iloc+ (1 . 0) "../stdlib/core/lists.scm" . 225302))
     (ret.cons "../stdlib/core/lists.scm" . 224272))
   (push.iloc.1 . 1)
   (apply.iloc+ (0 . 0) "../stdlib/core/lists.scm" . 219143))
 (set.gloc.of core.lists\x27;remp)
 (close
   (2 0 . core.lists\x27;remove)
   (extend.enclose+
     (1 0 . loop)
     (iloc.0 . 0)
     (if.null?.ret.const)
     (push.car.iloc (0 . 0) "../stdlib/core/lists.scm" . 231448)
     (push.iloc 2 . 0)
     (subr.gloc.of \x2E;equal? 2 "../stdlib/core/lists.scm" . 231440)
     (if.true
       (push.cdr.iloc (0 . 0) "../stdlib/core/lists.scm" . 232470)
       (apply.iloc+ (1 . 0) "../stdlib/core/lists.scm" . 232464))
     (push.car.iloc (0 . 0) "../stdlib/core/lists.scm" . 234518)
     (call
       (push.cdr.iloc (0 . 0) "../stdlib/core/lists.scm" . 235548)
       (apply.iloc+ (1 . 0) "../stdlib/core/lists.scm" . 235542))
     (ret.cons "../stdlib/core/lists.scm" . 234512))
   (push.iloc.1 . 1)
   (apply.iloc+ (0 . 0) "../stdlib/core/lists.scm" . 229383))
 (set.gloc.of core.lists\x27;remove)
 (close
   (2 0 . core.lists\x27;remv)
   (extend.enclose+
     (1 0 . loop)
     (iloc.0 . 0)
     (if.null?.ret.const)
     (push.car.iloc (0 . 0) "../stdlib/core/lists.scm" . 241686)
     (push.iloc 2 . 0)
     (subr.gloc.of \x2E;eqv? 2 "../stdlib/core/lists.scm" . 241680)
     (if.true
       (push.cdr.iloc (0 . 0) "../stdlib/core/lists.scm" . 242710)
       (apply.iloc+ (1 . 0) "../stdlib/core/lists.scm" . 242704))
     (push.car.iloc (0 . 0) "../stdlib/core/lists.scm" . 244758)
     (call
       (push.cdr.iloc (0 . 0) "../stdlib/core/lists.scm" . 245788)
       (apply.iloc+ (1 . 0) "../stdlib/core/lists.scm" . 245782))
     (ret.cons "../stdlib/core/lists.scm" . 244752))
   (push.iloc.1 . 1)
   (apply.iloc+ (0 . 0) "../stdlib/core/lists.scm" . 239623))
 (set.gloc.of core.lists\x27;remv)
 (close
   (2 0 . core.lists\x27;remq)
   (extend.enclose+
     (1 0 . loop)
     (iloc.0 . 0)
     (if.null?.ret.const)
     (push.car.iloc (0 . 0) "../stdlib/core/lists.scm" . 251925)
     (iloc 2 . 0)
     (if.eq?
       (push.cdr.iloc (0 . 0) "../stdlib/core/lists.scm" . 252950)
       (apply.iloc+ (1 . 0) "../stdlib/core/lists.scm" . 252944))
     (push.car.iloc (0 . 0) "../stdlib/core/lists.scm" . 254998)
     (call
       (push.cdr.iloc (0 . 0) "../stdlib/core/lists.scm" . 256028)
       (apply.iloc+ (1 . 0) "../stdlib/core/lists.scm" . 256022))
     (ret.cons "../stdlib/core/lists.scm" . 254992))
   (push.iloc.1 . 1)
   (apply.iloc+ (0 . 0) "../stdlib/core/lists.scm" . 249863))
 (set.gloc.of core.lists\x27;remq)
 (close
   (2 0 . core.lists\x27;memp)
   (iloc.0 . 1)
   (if.null?.ret.const . #f)
   (call
     (push.car.iloc (0 . 1) "../stdlib/core/lists.scm" . 262159)
     (apply.iloc (0 . 0) "../stdlib/core/lists.scm" . 262153))
   (if.true (ret.iloc 0 . 1))
   (push.iloc.0 . 0)
   (push.cdr.iloc (0 . 1) "../stdlib/core/lists.scm" . 264212)
   (apply.gloc.of core.lists\x27;memp "../stdlib/core/lists.scm" . 264201))
 (set.gloc.of core.lists\x27;memp)
 (close
   (2 0 . core.lists\x27;assp)
   (iloc.0 . 1)
   (if.null?.ret.const . #f)
   (call
     (push.iloc.0 . 1)
     (push.subr.gloc.of \x2E;caar 1 "../stdlib/core/lists.scm" . 270351)
     (apply.iloc (0 . 0) "../stdlib/core/lists.scm" . 270345))
   (if.true (push.iloc.0 . 1) (ret.subr.gloc.of \x2E;car "../stdlib/core/lists.scm" . 270363))
   (push.iloc.0 . 0)
   (push.cdr.iloc (0 . 1) "../stdlib/core/lists.scm" . 272404)
   (apply.gloc.of core.lists\x27;assp "../stdlib/core/lists.scm" . 272393))
 (set.gloc.of core.lists\x27;assp)
 (close
   (1 1 . core.lists\x27;iota)
   (call
     (push.iloc.0 . 0)
     (subr.gloc.of \x2E;number? 1 "../stdlib/core/lists.scm" . 276496)
     (if.false.ret)
     (push.iloc.0 . 0)
     (subr.gloc.of \x2E;exact? 1 "../stdlib/core/lists.scm" . 276508)
     (if.false.ret)
     (push.iloc.0 . 0)
     (push.const . 0)
     (ret.subr.gloc.of \x2E;>= "../stdlib/core/lists.scm" . 276519))
   (if.false.call
     (push.const . iota)
     (push.const . "expected non-negative exact integer, but got ~u as argument 1")
     (push.iloc.0 . 0)
     (push.subr.gloc.of \x2E;format 2 "../stdlib/core/lists.scm" . 277542)
     (push.iloc.0 . 0)
     (iloc.0 . 1)
     (push.cons)
     (apply.gloc.of \x2E;assertion-violation "../stdlib/core/lists.scm" . 277515))
   (push.close
     (2 0)
     (extend.enclose+
       (2 0 . loop)
       (<n.iloc (0 . 0) 0 "../stdlib/core/lists.scm" . 280594)
       (if.true (ret.iloc 0 . 1))
       (push.n+.iloc (0 . 0) -1 "../stdlib/core/lists.scm" . 281629)
       (push.iloc 2 . 0)
       (push.iloc.0 . 0)
       (push.iloc 2 . 1)
       (push.subr.gloc.of \x2E;* 2 "../stdlib/core/lists.scm" . 281652)
       (push.subr.gloc.of \x2E;+ 2 "../stdlib/core/lists.scm" . 281643)
       (iloc.0 . 1)
       (push.cons)
       (apply.iloc+ (1 . 0) "../stdlib/core/lists.scm" . 281623))
     (push.n+.iloc (2 . 0) -1 "../stdlib/core/lists.scm" . 279575)
     (push.const)
     (apply.iloc+ (0 . 0) "../stdlib/core/lists.scm" . 279561))
   (call
     (push.iloc.0 . 1)
     (push.subr.gloc.of \x2E;length 1 "../stdlib/core/lists.scm" . 279561)
     (extend . 1)
     (=n.iloc (0 . 0) 2 "../stdlib/core/lists.scm" . 279561)
     (if.true (ret.iloc 1 . 1))
     (=n.iloc (0 . 0) 1 "../stdlib/core/lists.scm" . 279561)
     (if.true
       (push.iloc.1 . 1)
       (push.const . 1)
       (push.subr.gloc.of \x2E;list 1 "../stdlib/core/lists.scm" . 279561)
       (ret.subr.gloc.of \x2E;append "../stdlib/core/lists.scm" . 279561))
     (push.const . 0)
     (push.const . 1)
     (ret.subr.gloc.of \x2E;list "../stdlib/core/lists.scm" . 279561))
   (push)
   (apply.gloc.of \x2E;apply "../stdlib/core/lists.scm" . 6145))
 (set.gloc.of core.lists\x27;iota)
 (close
   (1 1 . core.lists\x27;make-list)
   (call
     (push.iloc.0 . 0)
     (subr.gloc.of \x2E;number? 1 "../stdlib/core/lists.scm" . 285712)
     (if.false.ret)
     (push.iloc.0 . 0)
     (subr.gloc.of \x2E;exact? 1 "../stdlib/core/lists.scm" . 285724)
     (if.false.ret)
     (push.iloc.0 . 0)
     (push.const . 0)
     (ret.subr.gloc.of \x2E;>= "../stdlib/core/lists.scm" . 285735))
   (if.false.call
     (push.const . make-list)
     (push.const . "expected non-negative exact integer, but got ~u as argument 1")
     (push.iloc.0 . 0)
     (push.subr.gloc.of \x2E;format 2 "../stdlib/core/lists.scm" . 286763)
     (push.iloc.0 . 0)
     (iloc.0 . 1)
     (push.cons)
     (apply.gloc.of \x2E;assertion-violation "../stdlib/core/lists.scm" . 286731))
   (call
     (iloc.0 . 1)
     (if.pair? (push.iloc.0 . 1) (ret.subr.gloc.of \x2E;car "../stdlib/core/lists.scm" . 288777))
     (ret.const . #f))
   (push)
   (extend . 1)
   (extend.enclose+
     (2 0 . loop)
     (<=n.iloc (0 . 1) 0 "../stdlib/core/lists.scm" . 289810)
     (if.true (ret.iloc 0 . 0))
     (push.iloc 2 . 0)
     (iloc.0 . 0)
     (push.cons)
     (push.n+.iloc (0 . 1) -1 "../stdlib/core/lists.scm" . 290861)
     (apply.iloc+ (1 . 0) "../stdlib/core/lists.scm" . 290839))
   (push.const)
   (push.iloc 2 . 0)
   (apply.iloc+ (0 . 0) "../stdlib/core/lists.scm" . 288777))
 (set.gloc.of core.lists\x27;make-list)
 (close
   (1 0 . core.lists\x27;list-of-unique-symbols?)
   (push.iloc.0 . 0)
   (subr.gloc.of \x2E;list? 1 "../stdlib/core/lists.scm" . 294924)
   (if.false.ret)
   (call
     (touch.gloc.of loop\x60;202)
     (push.iloc.0 . 0)
     (apply.gloc.of loop\x60;202 "../stdlib/core/lists.scm" . 295953))
   (push)
   (ret.subr.gloc.of \x2E;not "../stdlib/core/lists.scm" . 294919))
 (set.gloc.of core.lists\x27;list-of-unique-symbols?)
 (close
   (1 0 . core.lists\x27;remove-duplicate-symbols)
   (touch.gloc.of loop\x60;210)
   (push.iloc.0 . 0)
   (push.const)
   (apply.gloc.of loop\x60;210 "../stdlib/core/lists.scm" . 304135))
 (set.gloc.of core.lists\x27;remove-duplicate-symbols)
 (close
   (2 0 . core.lists\x27;break)
   (push.const)
   (extend . 1)
   (call
     (extend.enclose
       (1 0 . loop)
       (iloc.0 . 0)
       (if.null?.ret.const)
       (call
         (push.car.iloc (0 . 0) "../stdlib/core/lists.scm" . 317471)
         (apply.iloc (3 . 0) "../stdlib/core/lists.scm" . 317465))
       (if.true (iloc.0 . 0) (set.iloc 2 . 0) (ret.const))
       (push.car.iloc (0 . 0) "../stdlib/core/lists.scm" . 320543)
       (call
         (push.cdr.iloc (0 . 0) "../stdlib/core/lists.scm" . 320559)
         (apply.iloc (1 . 0) "../stdlib/core/lists.scm" . 320553))
       (ret.cons "../stdlib/core/lists.scm" . 320537))
     (push.iloc 2 . 1)
     (apply.iloc (0 . 0) "../stdlib/core/lists.scm" . 315408))
   (push)
   (push.iloc.0 . 0)
   (ret.subr.gloc.of \x2E;values "../stdlib/core/lists.scm" . 313351))
 (set.gloc.of core.lists\x27;break)
 (gloc.of \x2E;list-head)
 (set.gloc.of core.lists\x27;take)
 (gloc.of \x2E;list-tail)
 (set.gloc.of core.lists\x27;drop)
 (push.const . core.lists)
 (push.const . #f)
 (push.const
   (find import . core.lists\x27;find)
   (for-all import . core.lists\x27;for-all)
   (exists import . core.lists\x27;exists)
   (filter import . core.lists\x27;filter)
   (partition import . core.lists\x27;partition)
   (fold-left import . core.lists\x27;fold-left)
   (fold-right import . core.lists\x27;fold-right)
   (remp import . core.lists\x27;remp)
   (remove import . core.lists\x27;remove)
   (remv import . core.lists\x27;remv)
   (remq import . core.lists\x27;remq)
   (memp import . core.lists\x27;memp)
   (member import . \x2E;member)
   (memv import . \x2E;memv)
   (memq import . \x2E;memq)
   (assp import . core.lists\x27;assp)
   (assoc import . \x2E;assoc)
   (assv import . \x2E;assv)
   (assq import . \x2E;assq)
   (cons* import . \x2E;cons*)
   (iota import . core.lists\x27;iota)
   (make-list import . core.lists\x27;make-list)
   (list-of-unique-symbols? import . core.lists\x27;list-of-unique-symbols?)
   (remove-duplicate-symbols import . core.lists\x27;remove-duplicate-symbols)
   (take import . core.lists\x27;take)
   (drop import . core.lists\x27;drop)
   (break import . core.lists\x27;break))
 (apply.gloc.of \x2E;intern-scheme-library "../stdlib/core/lists.scm" . 6145))

((close
   (1 0)
   (push.gloc.of \x2E;patvars)
   (push.iloc.0 . 0)
   (push.const)
   (push.const ?_ ?pat ?expr ?body ...)
   (push.const . #f)
   (push.close
     (1 0)
     (call
       (call
         (push.iloc.0 . 0)
         (push.const . ?pat)
         (apply.gloc.of \x2E;syntax/i1 "../stdlib/core/destructuring.scm" . 268309))
       (push)
       (apply.gloc.of \x2E;syntax->datum "../stdlib/core/destructuring.scm" . 268309))
     (push)
     (call
       (apply.gloc.of \x2E;generate-temporary-symbol "../stdlib/core/destructuring.scm" . 269335))
     (push)
     (subr.gloc.of \x2E;make-core-hashtable 0)
     (push)
     (push.const)
     (push.subr.gloc.of \x2E;vector 1 "../stdlib/core/destructuring.scm" . 271381)
     (extend . 4)
     (push.close
       (0 0)
       (push.iloc.1 . 2)
       (push.iloc.1 . 3)
       (push.iloc.1 . 0)
       (push.iloc.1 . 1)
       (push.const)
       (push.const)
       (push.const)
       (apply.gloc.of
         core.destructuring\x27;compile-match
         "../stdlib/core/destructuring.scm"
         .
         273434))
     (push.close
       (3 0)
       (push.iloc.1 . 3)
       (push.const . 0)
       (push.subr.gloc.of \x2E;vector-ref 2 "../stdlib/core/destructuring.scm" . 274465)
       (push.subr.gloc.of \x2E;null? 1 "../stdlib/core/destructuring.scm" . 274458)
       (subr.gloc.of \x2E;not 1 "../stdlib/core/destructuring.scm" . 274453)
       (if.true
         (push.const . destructuring-bind)
         (push.const . "tail match not supported")
         (push.iloc 3 . 0)
         (push.iloc.1 . 0)
         (apply.gloc.of \x2E;syntax-violation "../stdlib/core/destructuring.scm" . 275477))
       (call
         (push.iloc.0 . 2)
         (apply.gloc.of
           core.destructuring\x27;duplicates?
           "../stdlib/core/destructuring.scm"
           .
           276501))
       (if.true
         (push.const . destructuring-bind)
         (push.const . "duplicate variables")
         (push.iloc 3 . 0)
         (push.iloc.1 . 0)
         (apply.gloc.of \x2E;syntax-violation "../stdlib/core/destructuring.scm" . 277525))
       (iloc.0 . 0)
       (if.true
         (push.iloc 2 . 0)
         (call
           (call
             (push.iloc 2 . 0)
             (push.const . k)
             (apply.gloc.of \x2E;syntax/i0 "../stdlib/core/destructuring.scm" . 280610))
           (push)
           (push.iloc.1 . 1)
           (apply.gloc.of \x2E;datum->syntax "../stdlib/core/destructuring.scm" . 280610))
         (push)
         (call
           (push.close
             (1 0)
             (call
               (push.iloc 3 . 0)
               (push.const . ?_)
               (apply.gloc.of \x2E;syntax/i1 "../stdlib/core/destructuring.scm" . 281656))
             (push)
             (push.iloc.0 . 0)
             (apply.gloc.of \x2E;datum->syntax "../stdlib/core/destructuring.scm" . 281656))
           (push.iloc.0 . 2)
           (apply.gloc.of \x2E;map "../stdlib/core/destructuring.scm" . 281639))
         (push)
         (call
           (push.close
             (1 0)
             (call
               (push.iloc 3 . 0)
               (push.const . k)
               (apply.gloc.of \x2E;syntax/i0 "../stdlib/core/destructuring.scm" . 282681))
             (push)
             (push.iloc.0 . 0)
             (apply.gloc.of \x2E;datum->syntax "../stdlib/core/destructuring.scm" . 282681))
           (push.iloc.0 . 1)
           (apply.gloc.of \x2E;map "../stdlib/core/destructuring.scm" . 282664))
         (push)
         (push.subr.gloc.of \x2E;list 3 "../stdlib/core/destructuring.scm" . 280610)
         (push.const)
         (push.const ?datum (?vars ...) (?inits ...))
         (push.const . #f)
         (push.gloc.of \x2E;fn20.1\x60;20)
         (push.subr.gloc.of \x2E;list 3 "../stdlib/core/destructuring.scm" . 272396)
         (push.const . _)
         (push.const . #f)
         (push.gloc.of \x2E;fn41.1\x60;41)
         (push.subr.gloc.of \x2E;list 3 "../stdlib/core/destructuring.scm" . 280610)
         (apply.gloc.of \x2E;syntax-dispatch "../stdlib/core/destructuring.scm" . 272396))
       (push.const . destructuring-bind)
       (push.const . "malformed pattern")
       (push.iloc 3 . 0)
       (push.iloc.1 . 0)
       (apply.gloc.of \x2E;syntax-violation "../stdlib/core/destructuring.scm" . 288789))
     (apply.gloc.of \x2E;call-with-values "../stdlib/core/destructuring.scm" . 268298))
   (push.subr.gloc.of \x2E;list 3 "../stdlib/core/destructuring.scm" . 265221)
   (apply.gloc.of \x2E;syntax-dispatch "../stdlib/core/destructuring.scm" . 265221))
 (set.gloc.of \x2E;fn42.1\x60;42)
 (close
   (1 0)
   (push.gloc.of core.destructuring\x27;ca---r)
   (push.car.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 362549)
   (push.cdr.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 362557)
   (ret.subr.gloc.of \x2E;core-hashtable-set! "../stdlib/core/destructuring.scm" . 362521))
 (set.gloc.of \x2E;fn7.1\x60;7)
 (close
   (2 0 . loop)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (subr.gloc.of \x2E;memq 2 "../stdlib/core/destructuring.scm" . 39954)
   (if.true.ret)
   (iloc.0 . 1)
   (if.not.pair?.ret.const . #f)
   (touch.gloc.of loop\x60;103)
   (push.car.iloc (0 . 1) "../stdlib/core/destructuring.scm" . 42013)
   (push.cdr.iloc (0 . 1) "../stdlib/core/destructuring.scm" . 42024)
   (apply.gloc.of loop\x60;103 "../stdlib/core/destructuring.scm" . 42007))
 (set.gloc.of loop\x60;103)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (push.const let ((?datum ?expr)) (let ((?vars ?inits) ...) ?body ...))
   (push.const (?body . 1) (?inits . 1) (?vars . 1) (?expr . 0) (?datum . 0))
   (apply.gloc.of \x2E;syntax/c1 "../stdlib/core/destructuring.scm" . 283671))
 (set.gloc.of \x2E;fn20.1\x60;20)
 (close
   (1 0 . loop)
   (iloc.0 . 0)
   (if.pair?
     (push.car.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 84009)
     (call
       (touch.gloc.of loop\x60;127)
       (push.cdr.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 84025)
       (apply.gloc.of loop\x60;127 "../stdlib/core/destructuring.scm" . 84019))
     (ret.cons "../stdlib/core/destructuring.scm" . 84003))
   (ret.const))
 (set.gloc.of loop\x60;127)
 (close
   (1 0)
   (push.const . with-syntax)
   (push.const . "value does not match to pattern")
   (push.const
     ((?vars ...) (map (lambda (e) (datum->syntax (syntax ?_) e)) vars))
     ((?inits ...) (map (lambda (e) (datum->syntax (syntax k) e)) inits))
     ((?tests ...) (map (lambda (e) (datum->syntax (syntax k) e)) tests))
     (?fender fender)
     (?body body))
   (apply.gloc.of \x2E;syntax-violation "../stdlib/core/destructuring.scm" . 345127))
 (set.gloc.of \x2E;fn27.1\x60;27)
 (close
   (2 0 . loop)
   (<=n.iloc (0 . 1) 0 "../stdlib/core/destructuring.scm" . 120855)
   (if.true.ret.const)
   (cdr.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 121886)
   (if.pair?
     (push.car.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 121903)
     (call
       (touch.gloc.of loop\x60;163)
       (push.cdr.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 121919)
       (push.n+.iloc (0 . 1) -1 "../stdlib/core/destructuring.scm" . 121929)
       (apply.gloc.of loop\x60;163 "../stdlib/core/destructuring.scm" . 121913))
     (ret.cons "../stdlib/core/destructuring.scm" . 121897))
   (ret.const))
 (set.gloc.of loop\x60;163)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (push.const . 2)
   (ret.subr.gloc.of \x2E;>= "../stdlib/core/destructuring.scm" . 239662))
 (set.gloc.of \x2E;fn6.1\x60;6)
 (close
   (1 0 . loop)
   (cdr.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 99358)
   (if.pair?
     (touch.gloc.of loop\x60;143)
     (push.cdr.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 99375)
     (apply.gloc.of loop\x60;143 "../stdlib/core/destructuring.scm" . 99369))
   (push.iloc.0 . 0)
   (ret.subr.gloc.of \x2E;cdr "../stdlib/core/destructuring.scm" . 100380))
 (set.gloc.of loop\x60;143)
 (close
   (1 0)
   (push.const . with-syntax)
   (push.const . "value does not match to pattern")
   (push.const
     (?datum (datum->syntax (syntax k) datum))
     ((?vars ...) (map (lambda (e) (datum->syntax (syntax ?_) e)) vars))
     ((?inits ...) (map (lambda (e) (datum->syntax (syntax k) e)) inits)))
   (apply.gloc.of \x2E;syntax-violation "../stdlib/core/destructuring.scm" . 280610))
 (set.gloc.of \x2E;fn41.1\x60;41)
 (close
   (2 0 . loop)
   (iloc.0 . 0)
   (if.pair?
     (call
       (push.iloc.0 . 0)
       (apply.gloc.of
         core.destructuring\x27;predicate-pair?
         "../stdlib/core/destructuring.scm"
         .
         129047))
     (if.true (ret.iloc 0 . 1))
     (touch.gloc.of loop\x60;171)
     (push.cdr.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 130082)
     (push.n+.iloc (0 . 1) 1 "../stdlib/core/destructuring.scm" . 130092)
     (apply.gloc.of loop\x60;171 "../stdlib/core/destructuring.scm" . 130076))
   (ret.iloc 0 . 1))
 (set.gloc.of loop\x60;171)
 (close
   (2 0 . loop)
   (iloc.0 . 0)
   (if.pair?
     (touch.gloc.of loop\x60;151)
     (push.cdr.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 106530)
     (push.n+.iloc (0 . 1) 1 "../stdlib/core/destructuring.scm" . 106540)
     (apply.gloc.of loop\x60;151 "../stdlib/core/destructuring.scm" . 106524))
   (ret.iloc 0 . 1))
 (set.gloc.of loop\x60;151)
 (close
   (1 0)
   (push.car.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 327732)
   (push.const . and)
   (cadr.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 327747)
   (push.cons)
   (ret.subr.gloc.of \x2E;list "../stdlib/core/destructuring.scm" . 327717))
 (set.gloc.of \x2E;fn34.1\x60;34)
 (close
   (1 0)
   (push.gloc.of core.destructuring\x27;cd---r)
   (push.car.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 366645)
   (push.cdr.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 366653)
   (ret.subr.gloc.of \x2E;core-hashtable-set! "../stdlib/core/destructuring.scm" . 366617))
 (set.gloc.of \x2E;fn31.1\x60;31)
 (close
   (1 0 . loop)
   (cdr.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 75806)
   (if.pair?
     (push.car.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 75823)
     (call
       (touch.gloc.of loop\x60;119)
       (push.cdr.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 75839)
       (apply.gloc.of loop\x60;119 "../stdlib/core/destructuring.scm" . 75833))
     (ret.cons "../stdlib/core/destructuring.scm" . 75817))
   (ret.const))
 (set.gloc.of loop\x60;119)
 (close
   (1 0 . loop)
   (cdr.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 92190)
   (if.pair?
     (touch.gloc.of loop\x60;135)
     (push.cdr.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 92207)
     (apply.gloc.of loop\x60;135 "../stdlib/core/destructuring.scm" . 92201))
   (ret.iloc 0 . 0))
 (set.gloc.of loop\x60;135)
 (close
   (1 0)
   (call
     (call
       (push.iloc.0 . 0)
       (push.const . ?fender)
       (apply.gloc.of \x2E;syntax/i1 "../stdlib/core/destructuring.scm" . 350267))
     (push)
     (apply.gloc.of \x2E;syntax->datum "../stdlib/core/destructuring.scm" . 350252))
   (push)
   (const . #t)
   (if.eq?
     (push.iloc.0 . 0)
     (push.const (and ?tests ...) (let ((?vars ?inits) ...) ?body))
     (push.const (?body . 0) (?inits . 1) (?vars . 1) (?tests . 1))
     (apply.gloc.of \x2E;syntax/c1 "../stdlib/core/destructuring.scm" . 351271))
   (push.iloc.0 . 0)
   (push.const (and ?tests ... (let ((?vars ?inits) ...) ?fender)) (let ((?vars ?inits) ...) ?body))
   (push.const (?body . 0) (?fender . 0) (?inits . 1) (?vars . 1) (?tests . 1))
   (apply.gloc.of \x2E;syntax/c1 "../stdlib/core/destructuring.scm" . 353319))
 (set.gloc.of \x2E;fn14.1\x60;14)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (push.const
     let
     ((?datum ?expr) (?pred-lhs ?pred-rhs) ... (?mem #f) ...)
     (let* (?subexprs ...) (cond ?dispatch ... (else #f))))
   (push.const
     (?dispatch . 1)
     (?subexprs . 1)
     (?mem . 1)
     (?pred-rhs . 1)
     (?pred-lhs . 1)
     (?expr . 0)
     (?datum . 0))
   (apply.gloc.of \x2E;syntax/c1 "../stdlib/core/destructuring.scm" . 357396))
 (set.gloc.of \x2E;fn24.1\x60;24)
 (close
   (1 0)
   (push.car.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 222225)
   (call
     (push.cadr.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 222254)
     (push.const (pair? and) (null?) (list?))
     (apply.gloc.of
       core.destructuring\x27;reorder-tests
       "../stdlib/core/destructuring.scm"
       .
       222239))
   (push)
   (push.cddr.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 222302)
   (ret.subr.gloc.of \x2E;cons* "../stdlib/core/destructuring.scm" . 221196))
 (set.gloc.of \x2E;fn25.1\x60;25)
 (close
   (3 0 . loop)
   (call
     (iloc.0 . 1)
     (if.null?.ret.const . #t)
     (iloc.0 . 2)
     (if.null?.ret.const . #t)
     (push.car.iloc (0 . 1) "../stdlib/core/destructuring.scm" . 228407)
     (push.car.iloc (0 . 2) "../stdlib/core/destructuring.scm" . 228416)
     (push.subr.gloc.of \x2E;equal? 2 "../stdlib/core/destructuring.scm" . 228399)
     (ret.subr.gloc.of \x2E;not "../stdlib/core/destructuring.scm" . 228394))
   (if.true (ret.iloc 0 . 0))
   (touch.gloc.of loop\x60;215)
   (push.n+.iloc (0 . 0) 1 "../stdlib/core/destructuring.scm" . 229403)
   (push.cdr.iloc (0 . 1) "../stdlib/core/destructuring.scm" . 229411)
   (push.cdr.iloc (0 . 2) "../stdlib/core/destructuring.scm" . 229420)
   (apply.gloc.of loop\x60;215 "../stdlib/core/destructuring.scm" . 229397))
 (set.gloc.of loop\x60;215)
 (close
   (1 0)
   (push.gloc.of \x2E;patvars)
   (push.iloc.0 . 0)
   (push.const)
   (push.const ?_ ?expr ?clauses ...)
   (push.const . #f)
   (push.close
     (1 0)
     (call
       (apply.gloc.of \x2E;generate-temporary-symbol "../stdlib/core/destructuring.scm" . 294935))
     (push)
     (subr.gloc.of \x2E;make-core-hashtable 0)
     (push)
     (push.const)
     (push.subr.gloc.of \x2E;vector 1 "../stdlib/core/destructuring.scm" . 296981)
     (extend . 3)
     (call
       (call
         (call
           (push.close
             (1 0)
             (push.iloc 2 . 0)
             (push.iloc.0 . 0)
             (push.const)
             (push.const ?pat)
             (push.const . #f)
             (push.close
               (1 0)
               (call
                 (call
                   (push.iloc.0 . 0)
                   (push.const . ?pat)
                   (apply.gloc.of \x2E;syntax/i1 "../stdlib/core/destructuring.scm" . 305194))
                 (push)
                 (apply.gloc.of \x2E;syntax->datum "../stdlib/core/destructuring.scm" . 305194))
               (push)
               (extend . 1)
               (push.close
                 (0 0)
                 (push.iloc 4 . 1)
                 (push.iloc 4 . 2)
                 (push.iloc.1 . 0)
                 (push.iloc 4 . 0)
                 (push.const)
                 (push.const)
                 (push.const)
                 (apply.gloc.of
                   core.destructuring\x27;compile-match
                   "../stdlib/core/destructuring.scm"
                   .
                   306242))
               (push.close
                 (3 0)
                 (call
                   (push.iloc.0 . 2)
                   (apply.gloc.of
                     core.destructuring\x27;duplicates?
                     "../stdlib/core/destructuring.scm"
                     .
                     307242))
                 (if.true
                   (push.const . destructuring-match)
                   (push.const . "duplicate variables")
                   (push.iloc 6 . 0)
                   (push.iloc.1 . 0)
                   (apply.gloc.of
                     \x2E;syntax-violation
                     "../stdlib/core/destructuring.scm"
                     .
                     307261))
                 (iloc.0 . 0)
                 (if.true
                   (push.const . #f)
                   (push.iloc.0 . 0)
                   (push.subr.gloc.of \x2E;reverse 1 "../stdlib/core/destructuring.scm" . 308281)
                   (push.const)
                   (push.const)
                   (call
                     (push.iloc 2 . 0)
                     (push.const . #t)
                     (apply.gloc.of \x2E;syntax/c0 "../stdlib/core/destructuring.scm" . 306209))
                   (push)
                   (call
                     (push.iloc 2 . 0)
                     (push.const . #t)
                     (apply.gloc.of \x2E;syntax/c0 "../stdlib/core/destructuring.scm" . 306209))
                   (push)
                   (ret.subr.gloc.of \x2E;list "../stdlib/core/destructuring.scm" . 306209))
                 (push.const . destructuring-match)
                 (push.const . "malformed pattern")
                 (push.iloc 6 . 0)
                 (push.iloc.1 . 0)
                 (apply.gloc.of \x2E;syntax-violation "../stdlib/core/destructuring.scm" . 309295))
               (apply.gloc.of \x2E;call-with-values "../stdlib/core/destructuring.scm" . 305183))
             (push.subr.gloc.of \x2E;list 3 "../stdlib/core/destructuring.scm" . 301082)
             (push.const ?pat ?body)
             (push.const . #f)
             (push.close
               (1 0)
               (call
                 (call
                   (push.iloc.0 . 0)
                   (push.const . ?pat)
                   (apply.gloc.of \x2E;syntax/i1 "../stdlib/core/destructuring.scm" . 311338))
                 (push)
                 (apply.gloc.of \x2E;syntax->datum "../stdlib/core/destructuring.scm" . 311338))
               (push)
               (extend . 1)
               (push.close
                 (0 0)
                 (push.iloc 4 . 1)
                 (push.iloc 4 . 2)
                 (push.iloc.1 . 0)
                 (push.iloc 4 . 0)
                 (push.const)
                 (push.const)
                 (push.const)
                 (apply.gloc.of
                   core.destructuring\x27;compile-match
                   "../stdlib/core/destructuring.scm"
                   .
                   312386))
               (push.close
                 (3 0)
                 (call
                   (push.iloc.0 . 2)
                   (apply.gloc.of
                     core.destructuring\x27;duplicates?
                     "../stdlib/core/destructuring.scm"
                     .
                     313386))
                 (if.true
                   (push.const . destructuring-match)
                   (push.const . "duplicate variables")
                   (push.iloc 6 . 0)
                   (push.iloc.1 . 0)
                   (apply.gloc.of
                     \x2E;syntax-violation
                     "../stdlib/core/destructuring.scm"
                     .
                     313405))
                 (iloc.0 . 0)
                 (if.true
                   (push.const . #f)
                   (push.iloc.0 . 0)
                   (push.subr.gloc.of \x2E;reverse 1 "../stdlib/core/destructuring.scm" . 314425)
                   (push.iloc.0 . 2)
                   (push.iloc.0 . 1)
                   (call
                     (push.iloc 2 . 0)
                     (push.const . ?body)
                     (apply.gloc.of \x2E;syntax/i1 "../stdlib/core/destructuring.scm" . 314452))
                   (push)
                   (call
                     (push.iloc 2 . 0)
                     (push.const . #t)
                     (apply.gloc.of \x2E;syntax/c0 "../stdlib/core/destructuring.scm" . 312353))
                   (push)
                   (ret.subr.gloc.of \x2E;list "../stdlib/core/destructuring.scm" . 312353))
                 (push.const . destructuring-match)
                 (push.const . "malformed pattern")
                 (push.iloc 6 . 0)
                 (push.iloc.1 . 0)
                 (apply.gloc.of \x2E;syntax-violation "../stdlib/core/destructuring.scm" . 315439))
               (apply.gloc.of \x2E;call-with-values "../stdlib/core/destructuring.scm" . 311327))
             (push.subr.gloc.of \x2E;list 3 "../stdlib/core/destructuring.scm" . 301082)
             (push.const ?pat ?fender ?body)
             (push.const . #f)
             (push.close
               (1 0)
               (call
                 (call
                   (push.iloc.0 . 0)
                   (push.const . ?pat)
                   (apply.gloc.of \x2E;syntax/i1 "../stdlib/core/destructuring.scm" . 317482))
                 (push)
                 (apply.gloc.of \x2E;syntax->datum "../stdlib/core/destructuring.scm" . 317482))
               (push)
               (extend . 1)
               (push.close
                 (0 0)
                 (push.iloc 4 . 1)
                 (push.iloc 4 . 2)
                 (push.iloc.1 . 0)
                 (push.iloc 4 . 0)
                 (push.const)
                 (push.const)
                 (push.const)
                 (apply.gloc.of
                   core.destructuring\x27;compile-match
                   "../stdlib/core/destructuring.scm"
                   .
                   318530))
               (push.close
                 (3 0)
                 (call
                   (push.iloc.0 . 2)
                   (apply.gloc.of
                     core.destructuring\x27;duplicates?
                     "../stdlib/core/destructuring.scm"
                     .
                     319530))
                 (if.true
                   (push.const . destructuring-match)
                   (push.const . "duplicate variables")
                   (push.iloc 6 . 0)
                   (push.iloc.1 . 0)
                   (apply.gloc.of
                     \x2E;syntax-violation
                     "../stdlib/core/destructuring.scm"
                     .
                     319549))
                 (iloc.0 . 0)
                 (if.true
                   (push.const . #f)
                   (push.iloc.0 . 0)
                   (push.subr.gloc.of \x2E;reverse 1 "../stdlib/core/destructuring.scm" . 320569)
                   (push.iloc.0 . 2)
                   (push.iloc.0 . 1)
                   (call
                     (push.iloc 2 . 0)
                     (push.const . ?body)
                     (apply.gloc.of \x2E;syntax/i1 "../stdlib/core/destructuring.scm" . 320596))
                   (push)
                   (call
                     (push.iloc 2 . 0)
                     (push.const . ?fender)
                     (apply.gloc.of \x2E;syntax/i1 "../stdlib/core/destructuring.scm" . 320611))
                   (push)
                   (ret.subr.gloc.of \x2E;list "../stdlib/core/destructuring.scm" . 320560))
                 (push.const . destructuring-match)
                 (push.const . "malformed pattern")
                 (push.iloc 6 . 0)
                 (push.iloc.1 . 0)
                 (apply.gloc.of \x2E;syntax-violation "../stdlib/core/destructuring.scm" . 321583))
               (apply.gloc.of \x2E;call-with-values "../stdlib/core/destructuring.scm" . 317471))
             (push.subr.gloc.of \x2E;list 3 "../stdlib/core/destructuring.scm" . 301082)
             (push.const . _)
             (push.const . #f)
             (push.close
               (1 0)
               (push.const . destructuring-match)
               (push.const . "malformed clause")
               (push.iloc 4 . 0)
               (push.iloc.1 . 0)
               (apply.gloc.of \x2E;syntax-violation "../stdlib/core/destructuring.scm" . 323615))
             (push.subr.gloc.of \x2E;list 3 "../stdlib/core/destructuring.scm" . 303132)
             (apply.gloc.of \x2E;syntax-dispatch "../stdlib/core/destructuring.scm" . 301082))
           (call
             (push.iloc.1 . 0)
             (push.const ?clauses ...)
             (push.const (?clauses . 1))
             (apply.gloc.of \x2E;syntax/c1 "../stdlib/core/destructuring.scm" . 324634))
           (push)
           (apply.gloc.of \x2E;map "../stdlib/core/destructuring.scm" . 297996))
         (push)
         (apply.gloc.of core.destructuring\x27;reorder "../stdlib/core/destructuring.scm" . 297996))
       (push)
       (apply.gloc.of core.destructuring\x27;cse "../stdlib/core/destructuring.scm" . 297996))
     (push)
     (extend . 1)
     (push.close
       (0 0)
       (push.gloc.of \x2E;car)
       (push.iloc.1 . 0)
       (apply.gloc.of core.lists\x27;partition "../stdlib/core/destructuring.scm" . 326700))
     (push.close
       (2 0)
       (call
         (push.gloc.of \x2E;fn34.1\x60;34)
         (push.iloc.0 . 0)
         (apply.gloc.of \x2E;map "../stdlib/core/destructuring.scm" . 327712))
       (push)
       (call
         (push.gloc.of \x2E;cdr)
         (push.iloc.0 . 1)
         (apply.gloc.of \x2E;map "../stdlib/core/destructuring.scm" . 328735))
       (push)
       (extend . 2)
       (push.iloc 4 . 0)
       (call
         (call
           (push.iloc 4 . 0)
           (push.const . k)
           (apply.gloc.of \x2E;syntax/i0 "../stdlib/core/destructuring.scm" . 330783))
         (push)
         (push.iloc 3 . 0)
         (apply.gloc.of \x2E;datum->syntax "../stdlib/core/destructuring.scm" . 330783))
       (push)
       (call
         (push.close
           (1 0)
           (call
             (call
               (push.iloc 5 . 0)
               (push.const . k)
               (apply.gloc.of \x2E;syntax/i0 "../stdlib/core/destructuring.scm" . 333861))
             (push)
             (push.cdr.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 333880)
             (apply.gloc.of \x2E;datum->syntax "../stdlib/core/destructuring.scm" . 333861))
           (push)
           (call
             (call
               (push.iloc 5 . 0)
               (push.const . ?_)
               (apply.gloc.of \x2E;syntax/i1 "../stdlib/core/destructuring.scm" . 334885))
             (push)
             (push.car.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 334905)
             (apply.gloc.of \x2E;datum->syntax "../stdlib/core/destructuring.scm" . 334885))
           (push)
           (ret.subr.gloc.of \x2E;list "../stdlib/core/destructuring.scm" . 333855))
         (push.iloc 3 . 1)
         (push.subr.gloc.of
           \x2E;core-hashtable->alist
           1
           "../stdlib/core/destructuring.scm"
           .
           335901)
         (apply.gloc.of \x2E;map "../stdlib/core/destructuring.scm" . 332824))
       (push)
       (call
         (push.close
           (1 0)
           (call
             (push.iloc 5 . 0)
             (push.const . k)
             (apply.gloc.of \x2E;syntax/i0 "../stdlib/core/destructuring.scm" . 337961))
           (push)
           (push.cdr.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 337980)
           (apply.gloc.of \x2E;datum->syntax "../stdlib/core/destructuring.scm" . 337961))
         (push.iloc 3 . 2)
         (push.const . 0)
         (push.subr.gloc.of \x2E;vector-ref 2 "../stdlib/core/destructuring.scm" . 337990)
         (apply.gloc.of \x2E;map "../stdlib/core/destructuring.scm" . 337944))
       (push)
       (call
         (push.close
           (1 0)
           (call
             (push.iloc 5 . 0)
             (push.const . k)
             (apply.gloc.of \x2E;syntax/i0 "../stdlib/core/destructuring.scm" . 340009))
           (push)
           (push.iloc.0 . 0)
           (apply.gloc.of \x2E;datum->syntax "../stdlib/core/destructuring.scm" . 340009))
         (push.iloc.0 . 0)
         (apply.gloc.of \x2E;map "../stdlib/core/destructuring.scm" . 339992))
       (push)
       (call
         (push.close
           (1 0)
           (push.close
             (0 0)
             (push.gloc.of \x2E;values)
             (push.iloc.1 . 0)
             (apply.gloc.of \x2E;apply "../stdlib/core/destructuring.scm" . 343116))
           (push.close
             (5 0)
             (push.iloc 6 . 0)
             (call
               (push.close
                 (1 0)
                 (call
                   (push.iloc 7 . 0)
                   (push.const . ?_)
                   (apply.gloc.of \x2E;syntax/i1 "../stdlib/core/destructuring.scm" . 345156))
                 (push)
                 (push.iloc.0 . 0)
                 (apply.gloc.of \x2E;datum->syntax "../stdlib/core/destructuring.scm" . 345156))
               (push.iloc.0 . 1)
               (apply.gloc.of \x2E;map "../stdlib/core/destructuring.scm" . 345139))
             (push)
             (call
               (push.close
                 (1 0)
                 (call
                   (push.iloc 7 . 0)
                   (push.const . k)
                   (apply.gloc.of \x2E;syntax/i0 "../stdlib/core/destructuring.scm" . 346181))
                 (push)
                 (push.iloc.0 . 0)
                 (apply.gloc.of \x2E;datum->syntax "../stdlib/core/destructuring.scm" . 346181))
               (push.iloc.0 . 2)
               (apply.gloc.of \x2E;map "../stdlib/core/destructuring.scm" . 346164))
             (push)
             (call
               (push.close
                 (1 0)
                 (call
                   (push.iloc 7 . 0)
                   (push.const . k)
                   (apply.gloc.of \x2E;syntax/i0 "../stdlib/core/destructuring.scm" . 347205))
                 (push)
                 (push.iloc.0 . 0)
                 (apply.gloc.of \x2E;datum->syntax "../stdlib/core/destructuring.scm" . 347205))
               (push.iloc.0 . 0)
               (apply.gloc.of \x2E;map "../stdlib/core/destructuring.scm" . 347188))
             (push)
             (push.iloc.0 . 4)
             (push.iloc.0 . 3)
             (push.subr.gloc.of \x2E;list 5 "../stdlib/core/destructuring.scm" . 345139)
             (push.const)
             (push.const (?vars ...) (?inits ...) (?tests ...) ?fender ?body)
             (push.const . #f)
             (push.gloc.of \x2E;fn14.1\x60;14)
             (push.subr.gloc.of \x2E;list 3 "../stdlib/core/destructuring.scm" . 343071)
             (push.const . _)
             (push.const . #f)
             (push.gloc.of \x2E;fn27.1\x60;27)
             (push.subr.gloc.of \x2E;list 3 "../stdlib/core/destructuring.scm" . 345139)
             (apply.gloc.of \x2E;syntax-dispatch "../stdlib/core/destructuring.scm" . 343071))
           (apply.gloc.of \x2E;call-with-values "../stdlib/core/destructuring.scm" . 342045))
         (push.iloc.0 . 1)
         (apply.gloc.of \x2E;map "../stdlib/core/destructuring.scm" . 327696))
       (push)
       (push.subr.gloc.of \x2E;list 5 "../stdlib/core/destructuring.scm" . 327696)
       (push.const)
       (push.const ?datum ((?pred-lhs ?pred-rhs) ...) (?mem ...) (?subexprs ...) (?dispatch ...))
       (push.const . #f)
       (push.gloc.of \x2E;fn24.1\x60;24)
       (push.subr.gloc.of \x2E;list 3 "../stdlib/core/destructuring.scm" . 327696)
       (push.const . _)
       (push.const . #f)
       (push.gloc.of \x2E;fn8.1\x60;8)
       (push.subr.gloc.of \x2E;list 3 "../stdlib/core/destructuring.scm" . 330783)
       (apply.gloc.of \x2E;syntax-dispatch "../stdlib/core/destructuring.scm" . 327696))
     (apply.gloc.of \x2E;call-with-values "../stdlib/core/destructuring.scm" . 297996))
   (push.subr.gloc.of \x2E;list 3 "../stdlib/core/destructuring.scm" . 291845)
   (apply.gloc.of \x2E;syntax-dispatch "../stdlib/core/destructuring.scm" . 291845))
 (set.gloc.of \x2E;fn26.1\x60;26)
 (close
   (3 0 . loop)
   (iloc.0 . 1)
   (if.null?
     (push.iloc.0 . 2)
     (push.iloc.0 . 0)
     (ret.subr.gloc.of \x2E;append "../stdlib/core/destructuring.scm" . 215053))
   (push.close
     (0 0)
     (push.close
       (1 0)
       (push.car.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 216132)
       (push.car.iloc (2 . 1) "../stdlib/core/destructuring.scm" . 216140)
       (ret.subr.gloc.of \x2E;memq "../stdlib/core/destructuring.scm" . 216126))
     (push.iloc.1 . 0)
     (apply.gloc.of core.lists\x27;partition "../stdlib/core/destructuring.scm" . 216103))
   (push.close
     (2 0)
     (touch.gloc.of loop\x60;199)
     (push.iloc.0 . 1)
     (push.cdr.iloc (1 . 1) "../stdlib/core/destructuring.scm" . 217114)
     (push.iloc.1 . 2)
     (push.iloc.0 . 0)
     (push.subr.gloc.of \x2E;append 2 "../stdlib/core/destructuring.scm" . 217126)
     (apply.gloc.of loop\x60;199 "../stdlib/core/destructuring.scm" . 217103))
   (apply.gloc.of \x2E;call-with-values "../stdlib/core/destructuring.scm" . 212999))
 (set.gloc.of loop\x60;199)
 (close
   (1 0)
   (push.const . with-syntax)
   (push.const . "value does not match to pattern")
   (push.const
     (?datum (datum->syntax (syntax k) datum))
     (((?pred-lhs ?pred-rhs) ...)
      (map (lambda (a)
             (list (datum->syntax (syntax k) (cdr a)) (datum->syntax (syntax ?_) (car a))))
           (core-hashtable->alist ren)))
     ((?mem ...) (map (lambda (e) (datum->syntax (syntax k) (cdr e))) (vector-ref mem 0)))
     ((?subexprs ...) (map (lambda (e) (datum->syntax (syntax k) e)) subexprs))
     ((?dispatch ...)
      (map (lambda (clause)
             (let-values (((tests vars inits body fender) (apply values clause)))
               (with-syntax (((?vars ...) (map (lambda (e) (datum->syntax (syntax ?_) e)) vars))
                             ((?inits ...) (map (lambda (e) (datum->syntax (syntax k) e)) inits))
                             ((?tests ...) (map (lambda (e) (datum->syntax (syntax k) e)) tests))
                             (?fender fender)
                             (?body body))
                 (if (eq? (syntax->datum (syntax ?fender)) #t)
                     (syntax ((and ?tests ...) (let ((?vars ?inits) ...) ?body)))
                     (syntax
                       ((and ?tests ... (let ((?vars ?inits) ...) ?fender))
                        (let ((?vars ?inits) ...) ?body)))))))
           clauses)))
   (apply.gloc.of \x2E;syntax-violation "../stdlib/core/destructuring.scm" . 330783))
 (set.gloc.of \x2E;fn8.1\x60;8)
 (call
   (push.const core syntax-case)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core/destructuring.scm" . 6145))
 (call
   (push.const core lists)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core/destructuring.scm" . 6145))
 (call
   (push.const core primitives)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core/destructuring.scm" . 6145))
 (subr.gloc.of \x2E;make-core-hashtable 0 "../stdlib/core/destructuring.scm" . 15378)
 (set.gloc.of core.destructuring\x27;ca---r)
 (subr.gloc.of \x2E;make-core-hashtable 0 "../stdlib/core/destructuring.scm" . 17426)
 (set.gloc.of core.destructuring\x27;cd---r)
 (close
   (1 0 . core.destructuring\x27;car+)
   (call
     (iloc.0 . 0)
     (if.not.pair?.ret.const . #f)
     (push.gloc.of core.destructuring\x27;ca---r)
     (push.car.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 21563)
     (push.const . #f)
     (ret.subr.gloc.of \x2E;core-hashtable-ref "../stdlib/core/destructuring.scm" . 21536))
   (push)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (push.iloc.0 . 0)
     (cdr.iloc (1 . 0) "../stdlib/core/destructuring.scm" . 23579)
     (ret.cons "../stdlib/core/destructuring.scm" . 23571))
   (push.const . car)
   (push.iloc.1 . 0)
   (ret.subr.gloc.of \x2E;list "../stdlib/core/destructuring.scm" . 25614))
 (set.gloc.of core.destructuring\x27;car+)
 (close
   (1 0 . core.destructuring\x27;cdr+)
   (call
     (iloc.0 . 0)
     (if.not.pair?.ret.const . #f)
     (push.gloc.of core.destructuring\x27;cd---r)
     (push.car.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 29755)
     (push.const . #f)
     (ret.subr.gloc.of \x2E;core-hashtable-ref "../stdlib/core/destructuring.scm" . 29728))
   (push)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (push.iloc.0 . 0)
     (cdr.iloc (1 . 0) "../stdlib/core/destructuring.scm" . 31771)
     (ret.cons "../stdlib/core/destructuring.scm" . 31763))
   (push.const . cdr)
   (push.iloc.1 . 0)
   (ret.subr.gloc.of \x2E;list "../stdlib/core/destructuring.scm" . 33806))
 (set.gloc.of core.destructuring\x27;cdr+)
 (close
   (1 0 . core.destructuring\x27;duplicates?)
   (iloc.0 . 0)
   (if.not.pair?.ret.const . #f)
   (touch.gloc.of loop\x60;103)
   (push.car.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 38941)
   (push.cdr.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 38958)
   (apply.gloc.of loop\x60;103 "../stdlib/core/destructuring.scm" . 38924))
 (set.gloc.of core.destructuring\x27;duplicates?)
 (close
   (1 0 . core.destructuring\x27;ellipsis-pair?)
   (iloc.0 . 0)
   (if.not.pair?.ret.const . #f)
   (car.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 47125)
   (if.not.symbol?.ret.const . #f)
   (cdr.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 48147)
   (if.not.pair?.ret.const . #f)
   (push.cadr.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 49169)
   (const . ...)
   (ret.eq? "../stdlib/core/destructuring.scm" . 49164))
 (set.gloc.of core.destructuring\x27;ellipsis-pair?)
 (close
   (1 0 . core.destructuring\x27;quoted-pair?)
   (iloc.0 . 0)
   (if.not.pair?.ret.const . #f)
   (push.car.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 54289)
   (const . quote)
   (if.not.eq?.ret.const . #f)
   (cdr.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 55315)
   (if.not.pair?.ret.const . #f)
   (cddr.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 56339)
   (ret.null? "../stdlib/core/destructuring.scm" . 56332))
 (set.gloc.of core.destructuring\x27;quoted-pair?)
 (close
   (1 0 . core.destructuring\x27;predicate-pair?)
   (iloc.0 . 0)
   (if.not.pair?.ret.const . #f)
   (push.car.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 61457)
   (const . ?)
   (if.not.eq?.ret.const . #f)
   (cdr.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 62483)
   (ret.pair? "../stdlib/core/destructuring.scm" . 62476))
 (set.gloc.of core.destructuring\x27;predicate-pair?)
 (close
   (1 0 . core.destructuring\x27;choose-pred)
   (call
     (iloc.0 . 0)
     (if.symbol?.ret.const . #t)
     (push.iloc.0 . 0)
     (subr.gloc.of \x2E;boolean? 1 "../stdlib/core/destructuring.scm" . 66592)
     (if.true.ret)
     (iloc.0 . 0)
     (if.null?.ret.const . #t)
     (push.iloc.0 . 0)
     (subr.gloc.of \x2E;char? 1 "../stdlib/core/destructuring.scm" . 66619)
     (if.true.ret)
     (push.iloc.0 . 0)
     (ret.subr.gloc.of \x2E;fixnum? "../stdlib/core/destructuring.scm" . 66631))
   (if.true.ret.const . eq?)
   (push.iloc.0 . 0)
   (subr.gloc.of \x2E;number? 1 "../stdlib/core/destructuring.scm" . 67598)
   (if.true.ret.const . eqv?)
   (ret.const . equal?))
 (set.gloc.of core.destructuring\x27;choose-pred)
 (close
   (1 0 . core.destructuring\x27;drop-last-pair)
   (iloc.0 . 0)
   (if.null?.ret.const)
   (touch.gloc.of loop\x60;119)
   (push.iloc.0 . 0)
   (apply.gloc.of loop\x60;119 "../stdlib/core/destructuring.scm" . 74766))
 (set.gloc.of core.destructuring\x27;drop-last-pair)
 (close
   (1 0 . core.destructuring\x27;drop-last-cdr)
   (iloc.0 . 0)
   (if.null?.ret.const)
   (touch.gloc.of loop\x60;127)
   (push.iloc.0 . 0)
   (apply.gloc.of loop\x60;127 "../stdlib/core/destructuring.scm" . 82958))
 (set.gloc.of core.destructuring\x27;drop-last-cdr)
 (close
   (1 0 . core.destructuring\x27;last-pair)
   (iloc.0 . 0)
   (if.null?.ret.const)
   (touch.gloc.of loop\x60;135)
   (push.iloc.0 . 0)
   (apply.gloc.of loop\x60;135 "../stdlib/core/destructuring.scm" . 91150))
 (set.gloc.of core.destructuring\x27;last-pair)
 (close
   (1 0 . core.destructuring\x27;last-cdr)
   (iloc.0 . 0)
   (if.pair?
     (touch.gloc.of loop\x60;143)
     (push.iloc.0 . 0)
     (apply.gloc.of loop\x60;143 "../stdlib/core/destructuring.scm" . 98318))
   (ret.iloc 0 . 0))
 (set.gloc.of core.destructuring\x27;last-cdr)
 (close
   (1 0 . core.destructuring\x27;count-pair)
   (touch.gloc.of loop\x60;151)
   (push.iloc.0 . 0)
   (push.const . 0)
   (apply.gloc.of loop\x60;151 "../stdlib/core/destructuring.scm" . 105479))
 (set.gloc.of core.destructuring\x27;count-pair)
 (close
   (2 0 . core.destructuring\x27;last-n-pair)
   (call
     (push.iloc.0 . 1)
     (apply.gloc.of core.destructuring\x27;count-pair "../stdlib/core/destructuring.scm" . 111632))
   (push)
   (extend . 1)
   (iloc.0 . 0)
   (<.iloc (1 . 0) "../stdlib/core/destructuring.scm" . 112656)
   (if.true.ret.const)
   (push.iloc.1 . 1)
   (push.iloc.0 . 0)
   (push.iloc.1 . 0)
   (push.subr.gloc.of \x2E;- 2 "../stdlib/core/destructuring.scm" . 113700)
   (ret.subr.gloc.of \x2E;list-tail "../stdlib/core/destructuring.scm" . 113685))
 (set.gloc.of core.destructuring\x27;last-n-pair)
 (close
   (2 0 . core.destructuring\x27;drop-last-n-pair)
   (iloc.0 . 1)
   (if.null?.ret.const)
   (touch.gloc.of loop\x60;163)
   (push.iloc.0 . 1)
   (call
     (push.iloc.0 . 1)
     (apply.gloc.of core.destructuring\x27;count-pair "../stdlib/core/destructuring.scm" . 119849))
   (push)
   (push.iloc.0 . 0)
   (push.subr.gloc.of \x2E;- 2 "../stdlib/core/destructuring.scm" . 119846)
   (apply.gloc.of loop\x60;163 "../stdlib/core/destructuring.scm" . 119822))
 (set.gloc.of core.destructuring\x27;drop-last-n-pair)
 (close
   (1 0 . core.destructuring\x27;count-non-dotted-pattern)
   (touch.gloc.of loop\x60;171)
   (push.iloc.0 . 0)
   (push.const . 0)
   (apply.gloc.of loop\x60;171 "../stdlib/core/destructuring.scm" . 126983))
 (set.gloc.of core.destructuring\x27;count-non-dotted-pattern)
 (close
   (2 0 . core.destructuring\x27;memoize-ref)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.const . 0)
   (push.subr.gloc.of \x2E;vector-ref 2 "../stdlib/core/destructuring.scm" . 135191)
   (push.subr.gloc.of \x2E;assoc 2 "../stdlib/core/destructuring.scm" . 135182)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (push.iloc.0 . 0)
     (ret.subr.gloc.of \x2E;cdr "../stdlib/core/destructuring.scm" . 135175))
   (call (apply.gloc.of \x2E;generate-temporary-symbol "../stdlib/core/destructuring.scm" . 137242))
   (push)
   (extend . 1)
   (push.iloc 2 . 1)
   (push.const . 0)
   (push.iloc 2 . 0)
   (iloc.0 . 0)
   (push.cons)
   (push.iloc 2 . 1)
   (push.const . 0)
   (subr.gloc.of \x2E;vector-ref 2 "../stdlib/core/destructuring.scm" . 138302)
   (push.cons)
   (subr.gloc.of \x2E;vector-set! 3 "../stdlib/core/destructuring.scm" . 138263)
   (ret.iloc 0 . 0))
 (set.gloc.of core.destructuring\x27;memoize-ref)
 (close
   (7 0 . core.destructuring\x27;compile-match)
   (call
     (push.iloc.0 . 2)
     (apply.gloc.of
       core.destructuring\x27;quoted-pair?
       "../stdlib/core/destructuring.scm"
       .
       142350))
   (if.true
     (call
       (push.cadr.iloc (0 . 2) "../stdlib/core/destructuring.scm" . 143404)
       (apply.gloc.of
         core.destructuring\x27;choose-pred
         "../stdlib/core/destructuring.scm"
         .
         143391))
     (push)
     (push.iloc.0 . 3)
     (push.const . quote)
     (push.cadr.iloc (0 . 2) "../stdlib/core/destructuring.scm" . 143423)
     (push.subr.gloc.of \x2E;list 2 "../stdlib/core/destructuring.scm" . 143382)
     (push.subr.gloc.of \x2E;list 3 "../stdlib/core/destructuring.scm" . 143382)
     (iloc.0 . 4)
     (push.cons)
     (push.iloc.0 . 5)
     (push.iloc.0 . 6)
     (ret.subr.gloc.of \x2E;values "../stdlib/core/destructuring.scm" . 143374))
   (call
     (push.iloc.0 . 2)
     (apply.gloc.of
       core.destructuring\x27;ellipsis-pair?
       "../stdlib/core/destructuring.scm"
       .
       144398))
   (if.true
     (cddr.iloc (0 . 2) "../stdlib/core/destructuring.scm" . 145436)
     (if.null?
       (push.car.iloc (0 . 2) "../stdlib/core/destructuring.scm" . 146462)
       (const . _)
       (if.eq?
         (push.const . list?)
         (push.iloc.0 . 3)
         (push.subr.gloc.of \x2E;list 2 "../stdlib/core/destructuring.scm" . 147489)
         (iloc.0 . 4)
         (push.cons)
         (push.iloc.0 . 5)
         (push.iloc.0 . 6)
         (ret.subr.gloc.of \x2E;values "../stdlib/core/destructuring.scm" . 147481))
       (push.const . list?)
       (push.iloc.0 . 3)
       (push.subr.gloc.of \x2E;list 2 "../stdlib/core/destructuring.scm" . 148513)
       (iloc.0 . 4)
       (push.cons)
       (push.iloc.0 . 3)
       (iloc.0 . 5)
       (push.cons)
       (push.car.iloc (0 . 2) "../stdlib/core/destructuring.scm" . 148562)
       (iloc.0 . 6)
       (push.cons)
       (ret.subr.gloc.of \x2E;values "../stdlib/core/destructuring.scm" . 148505))
     (call
       (cddr.iloc (0 . 2) "../stdlib/core/destructuring.scm" . 149541)
       (if.not.pair?.ret.const . #t)
       (push.cddr.iloc (0 . 2) "../stdlib/core/destructuring.scm" . 149571)
       (apply.gloc.of
         core.destructuring\x27;predicate-pair?
         "../stdlib/core/destructuring.scm"
         .
         149554))
     (if.true
       (push.car.iloc (0 . 2) "../stdlib/core/destructuring.scm" . 150558)
       (const . _)
       (if.eq?
         (push.iloc.0 . 0)
         (push.iloc.0 . 1)
         (push.cddr.iloc (0 . 2) "../stdlib/core/destructuring.scm" . 151600)
         (push.const . last-cdr)
         (push.iloc.0 . 3)
         (push.subr.gloc.of \x2E;list 2 "../stdlib/core/destructuring.scm" . 151577)
         (push.iloc.0 . 4)
         (push.iloc.0 . 5)
         (push.iloc.0 . 6)
         (apply.gloc.of
           core.destructuring\x27;compile-match
           "../stdlib/core/destructuring.scm"
           .
           151577))
       (push.iloc.0 . 0)
       (push.iloc.0 . 1)
       (push.cddr.iloc (0 . 2) "../stdlib/core/destructuring.scm" . 155696)
       (push.const . last-cdr)
       (push.iloc.0 . 3)
       (push.subr.gloc.of \x2E;list 2 "../stdlib/core/destructuring.scm" . 155673)
       (push.iloc.0 . 4)
       (push.const . drop-last-cdr)
       (push.iloc.0 . 3)
       (push.subr.gloc.of \x2E;list 2 "../stdlib/core/destructuring.scm" . 157736)
       (iloc.0 . 5)
       (push.cons)
       (push.car.iloc (0 . 2) "../stdlib/core/destructuring.scm" . 158766)
       (iloc.0 . 6)
       (push.cons)
       (apply.gloc.of
         core.destructuring\x27;compile-match
         "../stdlib/core/destructuring.scm"
         .
         155673))
     (cddr.iloc (0 . 2) "../stdlib/core/destructuring.scm" . 159772)
     (if.pair?
       (call
         (apply.gloc.of \x2E;generate-temporary-symbol "../stdlib/core/destructuring.scm" . 160804))
       (push.iloc.0 . 2)
       (subr.gloc.of \x2E;cdddr 1 "../stdlib/core/destructuring.scm" . 161829)
       (if.null?
         (call
           (push.const . last-pair)
           (push.iloc.0 . 3)
           (push.subr.gloc.of \x2E;list 2 "../stdlib/core/destructuring.scm" . 162861)
           (push.iloc.0 . 1)
           (apply.gloc.of
             core.destructuring\x27;memoize-ref
             "../stdlib/core/destructuring.scm"
             .
             162861))
         (push)
         (extend . 1)
         (push.car.iloc (1 . 2) "../stdlib/core/destructuring.scm" . 163881)
         (const . _)
         (if.eq?
           (push.iloc.1 . 0)
           (push.iloc.1 . 1)
           (push.cddr.iloc (1 . 2) "../stdlib/core/destructuring.scm" . 164923)
           (push.iloc.0 . 0)
           (push.const . and)
           (push.const . pair?)
           (push.iloc.1 . 3)
           (push.subr.gloc.of \x2E;list 2 "../stdlib/core/destructuring.scm" . 165939)
           (push.const . set!)
           (push.iloc.0 . 0)
           (push.const . last-pair)
           (push.iloc.1 . 3)
           (push.subr.gloc.of \x2E;list 2 "../stdlib/core/destructuring.scm" . 165939)
           (push.subr.gloc.of \x2E;list 3 "../stdlib/core/destructuring.scm" . 165939)
           (push.subr.gloc.of \x2E;list 3 "../stdlib/core/destructuring.scm" . 165939)
           (iloc.1 . 4)
           (push.cons)
           (push.iloc.1 . 5)
           (push.iloc.1 . 6)
           (apply.gloc.of
             core.destructuring\x27;compile-match
             "../stdlib/core/destructuring.scm"
             .
             164900))
         (push.iloc.1 . 0)
         (push.iloc.1 . 1)
         (push.cddr.iloc (1 . 2) "../stdlib/core/destructuring.scm" . 169019)
         (push.iloc.0 . 0)
         (push.const . and)
         (push.const . pair?)
         (push.iloc.1 . 3)
         (push.subr.gloc.of \x2E;list 2 "../stdlib/core/destructuring.scm" . 170035)
         (push.const . set!)
         (push.iloc.0 . 0)
         (push.const . last-pair)
         (push.iloc.1 . 3)
         (push.subr.gloc.of \x2E;list 2 "../stdlib/core/destructuring.scm" . 170035)
         (push.subr.gloc.of \x2E;list 3 "../stdlib/core/destructuring.scm" . 170035)
         (push.subr.gloc.of \x2E;list 3 "../stdlib/core/destructuring.scm" . 170035)
         (iloc.1 . 4)
         (push.cons)
         (push.const . drop-last-pair)
         (push.iloc.1 . 3)
         (push.subr.gloc.of \x2E;list 2 "../stdlib/core/destructuring.scm" . 171059)
         (iloc.1 . 5)
         (push.cons)
         (push.car.iloc (1 . 2) "../stdlib/core/destructuring.scm" . 172089)
         (iloc.1 . 6)
         (push.cons)
         (apply.gloc.of
           core.destructuring\x27;compile-match
           "../stdlib/core/destructuring.scm"
           .
           168996))
       (call
         (push.iloc.0 . 2)
         (apply.gloc.of
           core.destructuring\x27;count-non-dotted-pattern
           "../stdlib/core/destructuring.scm"
           .
           174122))
       (push)
       (push.const . 2)
       (push.subr.gloc.of \x2E;- 2 "../stdlib/core/destructuring.scm" . 174119)
       (extend . 1)
       (call
         (push.const . last-n-pair)
         (push.iloc.0 . 0)
         (push.iloc.1 . 3)
         (push.subr.gloc.of \x2E;list 3 "../stdlib/core/destructuring.scm" . 175151)
         (push.iloc.1 . 1)
         (apply.gloc.of
           core.destructuring\x27;memoize-ref
           "../stdlib/core/destructuring.scm"
           .
           175151))
       (push)
       (extend . 1)
       (push.car.iloc (2 . 2) "../stdlib/core/destructuring.scm" . 176171)
       (const . _)
       (if.eq?
         (push.iloc 2 . 0)
         (push.iloc 2 . 1)
         (push.cddr.iloc (2 . 2) "../stdlib/core/destructuring.scm" . 177213)
         (push.iloc.0 . 0)
         (push.const . and)
         (push.const . pair?)
         (push.iloc 2 . 3)
         (push.subr.gloc.of \x2E;list 2 "../stdlib/core/destructuring.scm" . 178229)
         (push.const . set!)
         (push.iloc.0 . 0)
         (push.const . last-n-pair)
         (push.iloc.1 . 0)
         (push.iloc 2 . 3)
         (push.subr.gloc.of \x2E;list 3 "../stdlib/core/destructuring.scm" . 178229)
         (push.subr.gloc.of \x2E;list 3 "../stdlib/core/destructuring.scm" . 178229)
         (push.subr.gloc.of \x2E;list 3 "../stdlib/core/destructuring.scm" . 178229)
         (iloc 2 . 4)
         (push.cons)
         (push.iloc 2 . 5)
         (push.iloc 2 . 6)
         (apply.gloc.of
           core.destructuring\x27;compile-match
           "../stdlib/core/destructuring.scm"
           .
           177190))
       (push.iloc 2 . 0)
       (push.iloc 2 . 1)
       (push.cddr.iloc (2 . 2) "../stdlib/core/destructuring.scm" . 181309)
       (push.iloc.0 . 0)
       (push.const . and)
       (push.const . pair?)
       (push.iloc 2 . 3)
       (push.subr.gloc.of \x2E;list 2 "../stdlib/core/destructuring.scm" . 182325)
       (push.const . set!)
       (push.iloc.0 . 0)
       (push.const . last-n-pair)
       (push.iloc.1 . 0)
       (push.iloc 2 . 3)
       (push.subr.gloc.of \x2E;list 3 "../stdlib/core/destructuring.scm" . 182325)
       (push.subr.gloc.of \x2E;list 3 "../stdlib/core/destructuring.scm" . 182325)
       (push.subr.gloc.of \x2E;list 3 "../stdlib/core/destructuring.scm" . 182325)
       (iloc 2 . 4)
       (push.cons)
       (push.const . drop-last-n-pair)
       (push.iloc.1 . 0)
       (push.iloc 2 . 3)
       (push.subr.gloc.of \x2E;list 3 "../stdlib/core/destructuring.scm" . 183349)
       (iloc 2 . 5)
       (push.cons)
       (push.car.iloc (2 . 2) "../stdlib/core/destructuring.scm" . 184379)
       (iloc 2 . 6)
       (push.cons)
       (apply.gloc.of
         core.destructuring\x27;compile-match
         "../stdlib/core/destructuring.scm"
         .
         181286))
     (push.const . #f)
     (push.const . #f)
     (push.const . #f)
     (ret.subr.gloc.of \x2E;values "../stdlib/core/destructuring.scm" . 186389))
   (call
     (push.iloc.0 . 2)
     (apply.gloc.of
       core.destructuring\x27;predicate-pair?
       "../stdlib/core/destructuring.scm"
       .
       187406))
   (if.true
     (call
       (push.iloc.0 . 0)
       (push.cadr.iloc (0 . 2) "../stdlib/core/destructuring.scm" . 188473)
       (push.const . #f)
       (subr.gloc.of \x2E;core-hashtable-ref 3 "../stdlib/core/destructuring.scm" . 188449)
       (if.true.ret)
       (apply.gloc.of \x2E;generate-temporary-symbol "../stdlib/core/destructuring.scm" . 188488))
     (push)
     (extend . 1)
     (push.iloc.1 . 0)
     (push.cadr.iloc (1 . 2) "../stdlib/core/destructuring.scm" . 189481)
     (push.iloc.0 . 0)
     (subr.gloc.of \x2E;core-hashtable-set! 3 "../stdlib/core/destructuring.scm" . 189456)
     (cddr.iloc (1 . 2) "../stdlib/core/destructuring.scm" . 190491)
     (if.null?
       (push.iloc.0 . 0)
       (push.iloc.1 . 3)
       (push.subr.gloc.of \x2E;list 2 "../stdlib/core/destructuring.scm" . 191516)
       (iloc.1 . 4)
       (push.cons)
       (push.iloc.1 . 5)
       (push.iloc.1 . 6)
       (ret.subr.gloc.of \x2E;values "../stdlib/core/destructuring.scm" . 191508))
     (push.iloc.1 . 0)
     (push.iloc.1 . 1)
     (push.iloc.1 . 2)
     (push.subr.gloc.of \x2E;caddr 1 "../stdlib/core/destructuring.scm" . 192555)
     (push.iloc.1 . 3)
     (push.iloc.0 . 0)
     (push.iloc.1 . 3)
     (push.subr.gloc.of \x2E;list 2 "../stdlib/core/destructuring.scm" . 192571)
     (iloc.1 . 4)
     (push.cons)
     (push.iloc.1 . 5)
     (push.iloc.1 . 6)
     (apply.gloc.of
       core.destructuring\x27;compile-match
       "../stdlib/core/destructuring.scm"
       .
       192532))
   (iloc.0 . 2)
   (if.pair?
     (push.close
       (0 0)
       (push.iloc.1 . 0)
       (push.iloc.1 . 1)
       (push.car.iloc (1 . 2) "../stdlib/core/destructuring.scm" . 196651)
       (call
         (push.iloc.1 . 3)
         (apply.gloc.of core.destructuring\x27;car+ "../stdlib/core/destructuring.scm" . 196661))
       (push)
       (push.const . pair?)
       (push.iloc.1 . 3)
       (push.subr.gloc.of \x2E;list 2 "../stdlib/core/destructuring.scm" . 196672)
       (iloc.1 . 4)
       (push.cons)
       (push.iloc.1 . 5)
       (push.iloc.1 . 6)
       (apply.gloc.of
         core.destructuring\x27;compile-match
         "../stdlib/core/destructuring.scm"
         .
         196628))
     (push.close
       (3 0)
       (iloc.0 . 0)
       (if.true
         (push.iloc.1 . 0)
         (push.iloc.1 . 1)
         (push.cdr.iloc (1 . 2) "../stdlib/core/destructuring.scm" . 197685)
         (call
           (push.iloc.1 . 3)
           (apply.gloc.of core.destructuring\x27;cdr+ "../stdlib/core/destructuring.scm" . 197695))
         (push)
         (push.iloc.0 . 0)
         (push.iloc.0 . 1)
         (push.iloc.0 . 2)
         (apply.gloc.of
           core.destructuring\x27;compile-match
           "../stdlib/core/destructuring.scm"
           .
           197662))
       (push.const . #f)
       (push.const . #f)
       (push.const . #f)
       (ret.subr.gloc.of \x2E;values "../stdlib/core/destructuring.scm" . 198684))
     (apply.gloc.of \x2E;call-with-values "../stdlib/core/destructuring.scm" . 141317))
   (push.iloc.0 . 2)
   (const . ...)
   (if.eq?
     (push.const . #f)
     (push.const . #f)
     (push.const . #f)
     (ret.subr.gloc.of \x2E;values "../stdlib/core/destructuring.scm" . 200718))
   (push.iloc.0 . 2)
   (const . _)
   (if.eq?
     (push.iloc.0 . 4)
     (push.iloc.0 . 5)
     (push.iloc.0 . 6)
     (ret.subr.gloc.of \x2E;values "../stdlib/core/destructuring.scm" . 202766))
   (iloc.0 . 2)
   (if.symbol?
     (push.iloc.0 . 4)
     (push.iloc.0 . 3)
     (iloc.0 . 5)
     (push.cons)
     (push.iloc.0 . 2)
     (iloc.0 . 6)
     (push.cons)
     (ret.subr.gloc.of \x2E;values "../stdlib/core/destructuring.scm" . 204814))
   (iloc.0 . 2)
   (if.null?
     (push.const . null?)
     (push.iloc.0 . 3)
     (push.subr.gloc.of \x2E;list 2 "../stdlib/core/destructuring.scm" . 206870)
     (iloc.0 . 4)
     (push.cons)
     (push.iloc.0 . 5)
     (push.iloc.0 . 6)
     (ret.subr.gloc.of \x2E;values "../stdlib/core/destructuring.scm" . 206862))
   (call
     (push.iloc.0 . 2)
     (apply.gloc.of core.destructuring\x27;choose-pred "../stdlib/core/destructuring.scm" . 208927))
   (push)
   (push.iloc.0 . 3)
   (push.iloc.0 . 2)
   (push.subr.gloc.of \x2E;list 3 "../stdlib/core/destructuring.scm" . 208918)
   (iloc.0 . 4)
   (push.cons)
   (push.iloc.0 . 5)
   (push.iloc.0 . 6)
   (ret.subr.gloc.of \x2E;values "../stdlib/core/destructuring.scm" . 208910))
 (set.gloc.of core.destructuring\x27;compile-match)
 (close
   (2 0 . core.destructuring\x27;reorder-tests)
   (touch.gloc.of loop\x60;199)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.const)
   (apply.gloc.of loop\x60;199 "../stdlib/core/destructuring.scm" . 212999))
 (set.gloc.of core.destructuring\x27;reorder-tests)
 (close
   (1 0 . core.destructuring\x27;reorder)
   (push.gloc.of \x2E;fn25.1\x60;25)
   (push.iloc.0 . 0)
   (apply.gloc.of \x2E;map "../stdlib/core/destructuring.scm" . 221191))
 (set.gloc.of core.destructuring\x27;reorder)
 (close
   (2 0 . core.destructuring\x27;cse-length)
   (touch.gloc.of loop\x60;215)
   (push.const . 0)
   (push.cadr.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 227356)
   (push.cadr.iloc (0 . 1) "../stdlib/core/destructuring.scm" . 227376)
   (apply.gloc.of loop\x60;215 "../stdlib/core/destructuring.scm" . 227335))
 (set.gloc.of core.destructuring\x27;cse-length)
 (close
   (2 0 . core.destructuring\x27;cse-1)
   (call
     (push.close
       (1 0)
       (push.iloc.0 . 0)
       (iloc.1 . 1)
       (if.eq?.ret.const . -1)
       (push.iloc.0 . 0)
       (push.iloc.1 . 1)
       (apply.gloc.of
         core.destructuring\x27;cse-length
         "../stdlib/core/destructuring.scm"
         .
         236578))
     (push.iloc.0 . 0)
     (apply.gloc.of \x2E;map "../stdlib/core/destructuring.scm" . 233479))
   (push)
   (extend . 1)
   (call
     (call
       (push.gloc.of \x2E;fn6.1\x60;6)
       (push.iloc.0 . 0)
       (apply.gloc.of core.lists\x27;filter "../stdlib/core/destructuring.scm" . 239642))
     (push)
     (extend . 1)
     (iloc.0 . 0)
     (if.null?.ret.const . 0)
     (push.gloc.of \x2E;min)
     (push.iloc.0 . 0)
     (apply.gloc.of \x2E;apply "../stdlib/core/destructuring.scm" . 241693))
   (push)
   (extend . 1)
   (>=n.iloc (0 . 0) 2 "../stdlib/core/destructuring.scm" . 242702)
   (if.false.ret)
   (call (apply.gloc.of \x2E;generate-temporary-symbol "../stdlib/core/destructuring.scm" . 243741))
   (push)
   (extend . 1)
   (push.cadr.iloc (3 . 1) "../stdlib/core/destructuring.scm" . 244777)
   (push.iloc.1 . 0)
   (push.subr.gloc.of \x2E;list-head 2 "../stdlib/core/destructuring.scm" . 244766)
   (extend . 1)
   (call
     (push.close
       (2 0)
       (call
         (=n.iloc (0 . 1) -1 "../stdlib/core/destructuring.scm" . 247848)
         (if.true.ret)
         (push.iloc.0 . 1)
         (push.iloc 3 . 0)
         (ret.subr.gloc.of \x2E;>= "../stdlib/core/destructuring.scm" . 247859))
       (if.true
         (push.car.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 248871)
         (push.iloc 2 . 0)
         (push.cadr.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 248909)
         (push.iloc 3 . 0)
         (subr.gloc.of \x2E;list-tail 2 "../stdlib/core/destructuring.scm" . 248898)
         (push.cons)
         (push.cddr.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 248934)
         (ret.subr.gloc.of \x2E;cons* "../stdlib/core/destructuring.scm" . 247843))
       (ret.iloc 0 . 0))
     (push.iloc 4 . 0)
     (push.iloc 3 . 0)
     (apply.gloc.of \x2E;map "../stdlib/core/destructuring.scm" . 243726))
   (push)
   (extend . 1)
   (car.iloc (1 . 0) "../stdlib/core/destructuring.scm" . 251933)
   (if.symbol?
     (push.iloc.0 . 0)
     (push.iloc 2 . 0)
     (push.iloc.1 . 0)
     (push.subr.gloc.of \x2E;list 2 "../stdlib/core/destructuring.scm" . 252970)
     (push.subr.gloc.of \x2E;list 1 "../stdlib/core/destructuring.scm" . 252964)
     (ret.subr.gloc.of \x2E;append "../stdlib/core/destructuring.scm" . 252948))
   (push.iloc 2 . 0)
   (push.iloc.1 . 0)
   (push.subr.gloc.of \x2E;list 2 "../stdlib/core/destructuring.scm" . 253978)
   (iloc.0 . 0)
   (ret.cons "../stdlib/core/destructuring.scm" . 253972))
 (set.gloc.of core.destructuring\x27;cse-1)
 (close
   (1 0 . core.destructuring\x27;cse)
   (extend.enclose+
     (1 0 . loop)
     (iloc.0 . 0)
     (if.null? (ret.iloc 2 . 0))
     (call
       (push.iloc 2 . 0)
       (push.car.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 261155)
       (apply.gloc.of core.destructuring\x27;cse-1 "../stdlib/core/destructuring.scm" . 261140))
     (push)
     (extend . 1)
     (iloc.0 . 0)
     (if.true
       (push.iloc.0 . 0)
       (apply.gloc.of core.destructuring\x27;cse "../stdlib/core/destructuring.scm" . 261133))
     (push.cdr.iloc (1 . 0) "../stdlib/core/destructuring.scm" . 262175)
     (apply.iloc+ (2 . 0) "../stdlib/core/destructuring.scm" . 262169))
   (push.iloc.1 . 0)
   (apply.iloc+ (0 . 0) "../stdlib/core/destructuring.scm" . 258055))
 (set.gloc.of core.destructuring\x27;cse)
 (call
   (push.gloc.of \x2E;fn7.1\x60;7)
   (push.const
     (car . caar)
     (cdr . cadr)
     (caar . caaar)
     (cadr . caadr)
     (cdar . cadar)
     (cddr . caddr)
     (caaar . caaaar)
     (caadr . caaadr)
     (cadar . caadar)
     (caddr . caaddr)
     (cdaar . cadaar)
     (cdadr . cadadr)
     (cddar . caddar)
     (cdddr . cadddr))
   (apply.gloc.of \x2E;for-each "../stdlib/core/destructuring.scm" . 362499))
 (call
   (push.gloc.of \x2E;fn31.1\x60;31)
   (push.const
     (car . cdar)
     (cdr . cddr)
     (caar . cdaar)
     (cadr . cdadr)
     (cdar . cddar)
     (cddr . cdddr)
     (caaar . cdaaar)
     (caadr . cdaadr)
     (cadar . cdadar)
     (caddr . cdaddr)
     (cdaar . cddaar)
     (cdadr . cddadr)
     (cddar . cdddar)
     (cdddr . cddddr))
   (apply.gloc.of \x2E;for-each "../stdlib/core/destructuring.scm" . 366595))
 (call
   (push.const
     (cond import . \x2E;cond)
     (datum->syntax import . \x2E;datum->syntax)
     (quote import . \x2E;quote)
     (destructuring-match import . core.destructuring\x27;destructuring-match)
     (and import . \x2E;and)
     (values import . \x2E;values)
     (_ import . \x2E;_)
     (else import . \x2E;else)
     (syntax import . \x2E;syntax)
     (car import . \x2E;car)
     (list import . \x2E;list)
     (core-hashtable->alist import . \x2E;core-hashtable->alist)
     (let import . \x2E;let)
     (destructuring-bind import . core.destructuring\x27;destructuring-bind)
     (let* import . \x2E;let*)
     (lambda import . \x2E;lambda)
     (apply import . \x2E;apply)
     (eq? import . \x2E;eq?)
     (vector-ref import . \x2E;vector-ref)
     (let-values import . \x2E;let-values)
     (map import . \x2E;map)
     (if import . \x2E;if)
     (begin import . \x2E;begin)
     (cdr import . \x2E;cdr)
     (... import . \x2E;...)
     (syntax->datum import . \x2E;syntax->datum)
     (with-syntax import . core.syntax-case\x27;with-syntax))
   (extend . 1)
   (call
     (push.const . syntax)
     (push.const . core.destructuring\x27;destructuring-bind)
     (call
       (push.gloc.of \x2E;fn42.1\x60;42)
       (apply.gloc.of \x2E;transformer-thunk "../stdlib/core/destructuring.scm" . 6145))
     (push)
     (push.iloc.0 . 0)
     (apply.gloc.of \x2E;set-top-level-macro! "../stdlib/core/destructuring.scm" . 6145))
   (push.const . syntax)
   (push.const . core.destructuring\x27;destructuring-match)
   (call
     (push.gloc.of \x2E;fn26.1\x60;26)
     (apply.gloc.of \x2E;transformer-thunk "../stdlib/core/destructuring.scm" . 6145))
   (push)
   (push.iloc.0 . 0)
   (apply.gloc.of \x2E;set-top-level-macro! "../stdlib/core/destructuring.scm" . 6145))
 (push.const . core.destructuring)
 (push.const . #f)
 (push.const
   (destructuring-match import . core.destructuring\x27;destructuring-match)
   (destructuring-bind import . core.destructuring\x27;destructuring-bind))
 (apply.gloc.of \x2E;intern-scheme-library "../stdlib/core/destructuring.scm" . 6145))

((close
   (1 0)
   (push.iloc.0 . 0)
   (push.const define name (record-mutator (record-type-rtd record-name) n))
   (push.const (n . 0) (record-name . 0) (name . 0))
   (apply.gloc.of \x2E;syntax/c1 "../stdlib/core/records.scm" . 151596))
 (set.gloc.of \x2E;fn25.1\x60;25)
 (close
   (1 0)
   (push.const . with-syntax)
   (push.const . "value does not match to pattern")
   (push.const
     (rtd-parent
       (cond ((stash-ref 'parent-rtd #f) => car)
             ((stash-ref 'parent #f) (syntax (record-type-rtd parent)))
             (else (syntax #f))))
     (rcd-parent
       (cond ((stash-ref 'parent-rtd #f) => cdr)
             ((stash-ref 'parent #f) (syntax (record-type-rcd parent)))
             (else (syntax #f))))
     (uid (stash-ref 'nongenerative (syntax #f)))
     (sealed (stash-ref 'sealed (syntax #f)))
     (opaque (stash-ref 'opaque (syntax #f)))
     (protocol (stash-ref 'protocol (syntax #f)))
     (((fields _ _) ...) (datum->syntax (syntax k) (stash-ref 'fields '()))))
   (apply.gloc.of \x2E;syntax-violation "../stdlib/core/records.scm" . 115760))
 (set.gloc.of \x2E;fn22.1\x60;22)
 (close
   (1 0)
   (call
     (call
       (push.iloc.0 . 0)
       (push.const . e1)
       (apply.gloc.of \x2E;syntax/i1 "../stdlib/core/records.scm" . 63517))
     (push)
     (apply.gloc.of \x2E;syntax->datum "../stdlib/core/records.scm" . 63517))
   (push)
   (ret.subr.gloc.of \x2E;boolean? "../stdlib/core/records.scm" . 63507))
 (set.gloc.of \x2E;fn11.1\x60;11)
 (close
   (1 0)
   (call
     (push.iloc.0 . 0)
     (push.const . e1)
     (apply.gloc.of \x2E;syntax/i1 "../stdlib/core/records.scm" . 56339))
   (push)
   (apply.gloc.of \x2E;identifier? "../stdlib/core/records.scm" . 56339))
 (set.gloc.of \x2E;fn23.1\x60;23)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (push.const record-type-rtd name)
   (push.const (name . 0))
   (apply.gloc.of \x2E;syntax/c1 "../stdlib/core/records.scm" . 165928))
 (set.gloc.of \x2E;fn4.1\x60;4)
 (close
   (1 0)
   (push.gloc.of \x2E;patvars)
   (push.iloc.0 . 0)
   (push.const)
   (push.const _ name)
   (push.gloc.of \x2E;fn21.1\x60;21)
   (push.gloc.of \x2E;fn13.1\x60;13)
   (push.subr.gloc.of \x2E;list 3 "../stdlib/core/records.scm" . 169991)
   (apply.gloc.of \x2E;syntax-dispatch "../stdlib/core/records.scm" . 169991))
 (set.gloc.of \x2E;fn6.1\x60;6)
 (close
   (1 0)
   (call
     (call
       (push.iloc.0 . 0)
       (push.const . record-name)
       (apply.gloc.of \x2E;syntax/i1 "../stdlib/core/records.scm" . 106513))
     (push)
     (apply.gloc.of \x2E;identifier? "../stdlib/core/records.scm" . 106513))
   (if.false.ret)
   (call
     (call
       (push.iloc.0 . 0)
       (push.const . constructor-name)
       (apply.gloc.of \x2E;syntax/i1 "../stdlib/core/records.scm" . 106541))
     (push)
     (apply.gloc.of \x2E;identifier? "../stdlib/core/records.scm" . 106541))
   (if.false.ret)
   (call
     (push.iloc.0 . 0)
     (push.const . predicate-name)
     (apply.gloc.of \x2E;syntax/i1 "../stdlib/core/records.scm" . 106574))
   (push)
   (apply.gloc.of \x2E;identifier? "../stdlib/core/records.scm" . 106574))
 (set.gloc.of \x2E;fn19.1\x60;19)
 (close
   (1 0)
   (push.const . with-syntax)
   (push.const . "value does not match to pattern")
   (push.const
     (record-type
       (with-syntax ((parent (stash-ref 'parent (syntax #f))))
         (with-syntax ((rtd-parent
                         (cond ((stash-ref 'parent-rtd #f) => car)
                               ((stash-ref 'parent #f) (syntax (record-type-rtd parent)))
                               (else (syntax #f))))
                       (rcd-parent
                         (cond ((stash-ref 'parent-rtd #f) => cdr)
                               ((stash-ref 'parent #f) (syntax (record-type-rcd parent)))
                               (else (syntax #f))))
                       (uid (stash-ref 'nongenerative (syntax #f)))
                       (sealed (stash-ref 'sealed (syntax #f)))
                       (opaque (stash-ref 'opaque (syntax #f)))
                       (protocol (stash-ref 'protocol (syntax #f)))
                       (((fields _ _) ...) (datum->syntax (syntax k) (stash-ref 'fields '()))))
           (syntax
             (define record-name
               (let* ((rtd
                        (make-record-type-descriptor
                          'record-name
                          rtd-parent
                          'uid
                          sealed
                          opaque
                          '#(fields ...)))
                      (rcd (make-record-constructor-descriptor rtd rcd-parent protocol)))
                 (make-record-type 'record-name rtd rcd)))))))
     (constructor
       (syntax (define constructor-name (record-constructor (record-type-rcd record-name)))))
     (predicate (syntax (define predicate-name (record-predicate (record-type-rtd record-name)))))
     ((accessors ...)
      (let ((index -1))
        (filter
          values
          (map (lambda (spec)
                 (set! index (+ index 1))
                 (and (cadr spec)
                      (with-syntax ((name (datum->syntax (syntax record-name) (cadr spec)))
                                    (n (datum->syntax (syntax k) index)))
                        (syntax (define name (record-accessor (record-type-rtd record-name) n))))))
               (stash-ref 'fields '())))))
     ((mutators ...)
      (let ((index -1))
        (filter
          values
          (map (lambda (spec)
                 (set! index (+ index 1))
                 (and (caddr spec)
                      (with-syntax ((name (datum->syntax (syntax record-name) (caddr spec)))
                                    (n (datum->syntax (syntax k) index)))
                        (syntax (define name (record-mutator (record-type-rtd record-name) n))))))
               (stash-ref 'fields '()))))))
   (apply.gloc.of \x2E;syntax-violation "../stdlib/core/records.scm" . 114721))
 (set.gloc.of \x2E;fn2.1\x60;2)
 (close
   (1 0)
   (call
     (push.iloc.0 . 0)
     (push.const . name)
     (apply.gloc.of \x2E;syntax/i1 "../stdlib/core/records.scm" . 171027))
   (push)
   (apply.gloc.of \x2E;identifier? "../stdlib/core/records.scm" . 171027))
 (set.gloc.of \x2E;fn21.1\x60;21)
 (close
   (1 0)
   (subr.gloc.of \x2E;make-core-hashtable 0)
   (push)
   (extend . 1)
   (extend.unbound . 3)
   (push.close
     (2 0)
     (call
       (push.iloc 2 . 0)
       (push.iloc.0 . 0)
       (push.const . #f)
       (subr.gloc.of \x2E;core-hashtable-ref 3 "../stdlib/core/records.scm" . 40978)
       (if.false.ret)
       (push.const . define-record-type)
       (push.const . "duplicate ~a clause")
       (push.iloc.0 . 0)
       (push.subr.gloc.of \x2E;format 2 "../stdlib/core/records.scm" . 42040)
       (push.iloc 3 . 0)
       (apply.gloc.of \x2E;syntax-violation "../stdlib/core/records.scm" . 42002))
     (push.iloc 2 . 0)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.subr.gloc.of \x2E;list 1 "../stdlib/core/records.scm" . 43052)
     (ret.subr.gloc.of \x2E;core-hashtable-set! "../stdlib/core/records.scm" . 43021))
   (push.close
     (2 0)
     (push.iloc 2 . 0)
     (push.iloc.0 . 0)
     (push.const . #f)
     (push.subr.gloc.of \x2E;core-hashtable-ref 3 "../stdlib/core/records.scm" . 47124)
     (extend . 1)
     (iloc.0 . 0)
     (if.true (push.iloc.0 . 0) (ret.subr.gloc.of \x2E;car "../stdlib/core/records.scm" . 47117))
     (ret.iloc 1 . 1))
   (push.close
     (2 0)
     (push.close
       (1 0)
       (push.gloc.of \x2E;patvars)
       (push.iloc.0 . 0)
       (push.const parent protocol parent-rtd sealed opaque nongenerative fields)
       (push.const parent e1)
       (push.gloc.of \x2E;fn23.1\x60;23)
       (push.close
         (1 0)
         (push.const . parent)
         (call
           (push.iloc.0 . 0)
           (push.const . e1)
           (apply.gloc.of \x2E;syntax/i1 "../stdlib/core/records.scm" . 57363))
         (push)
         (apply.iloc (3 . 0) "../stdlib/core/records.scm" . 57363))
       (push.subr.gloc.of \x2E;list 3 "../stdlib/core/records.scm" . 54288)
       (push.const protocol e1)
       (push.const . #f)
       (push.close
         (1 0)
         (push.const . protocol)
         (call
           (push.iloc.0 . 0)
           (push.const . e1)
           (apply.gloc.of \x2E;syntax/i1 "../stdlib/core/records.scm" . 59411))
         (push)
         (apply.iloc (3 . 0) "../stdlib/core/records.scm" . 59411))
       (push.subr.gloc.of \x2E;list 3 "../stdlib/core/records.scm" . 54288)
       (push.const parent-rtd e1 e2)
       (push.const . #f)
       (push.close
         (1 0)
         (push.const . parent-rtd)
         (call
           (push.iloc.0 . 0)
           (push.const . e1)
           (apply.gloc.of \x2E;syntax/i1 "../stdlib/core/records.scm" . 61483))
         (push)
         (call
           (push.iloc.0 . 0)
           (push.const . e2)
           (apply.gloc.of \x2E;syntax/i1 "../stdlib/core/records.scm" . 61483))
         (push.cons)
         (apply.iloc (3 . 0) "../stdlib/core/records.scm" . 61459))
       (push.subr.gloc.of \x2E;list 3 "../stdlib/core/records.scm" . 54288)
       (push.const sealed e1)
       (push.gloc.of \x2E;fn11.1\x60;11)
       (push.close
         (1 0)
         (push.const . sealed)
         (call
           (push.iloc.0 . 0)
           (push.const . e1)
           (apply.gloc.of \x2E;syntax/i1 "../stdlib/core/records.scm" . 64531))
         (push)
         (apply.iloc (3 . 0) "../stdlib/core/records.scm" . 64531))
       (push.subr.gloc.of \x2E;list 3 "../stdlib/core/records.scm" . 54288)
       (push.const opaque e1)
       (push.gloc.of \x2E;fn8.1\x60;8)
       (push.close
         (1 0)
         (push.const . opaque)
         (call
           (push.iloc.0 . 0)
           (push.const . e1)
           (apply.gloc.of \x2E;syntax/i1 "../stdlib/core/records.scm" . 67603))
         (push)
         (apply.iloc (3 . 0) "../stdlib/core/records.scm" . 67603))
       (push.subr.gloc.of \x2E;list 3 "../stdlib/core/records.scm" . 54288)
       (push.const nongenerative e1)
       (push.gloc.of \x2E;fn10.1\x60;10)
       (push.close
         (1 0)
         (push.const . nongenerative)
         (call
           (push.iloc.0 . 0)
           (push.const . e1)
           (apply.gloc.of \x2E;syntax/i1 "../stdlib/core/records.scm" . 70675))
         (push)
         (apply.iloc (3 . 0) "../stdlib/core/records.scm" . 70675))
       (push.subr.gloc.of \x2E;list 3 "../stdlib/core/records.scm" . 54288)
       (push.const nongenerative)
       (push.const . #f)
       (push.close
         (1 0)
         (push.const . nongenerative)
         (call
           (call
             (push.iloc.0 . 0)
             (push.const . k)
             (apply.gloc.of \x2E;syntax/i0 "../stdlib/core/records.scm" . 72750))
           (push)
           (push.const . "non-generative-record-type ~a")
           (subr.gloc.of \x2E;gensym 0)
           (push)
           (push.subr.gloc.of \x2E;format 2 "../stdlib/core/records.scm" . 72785)
           (push.subr.gloc.of \x2E;string->symbol 1 "../stdlib/core/records.scm" . 72769)
           (apply.gloc.of \x2E;datum->syntax "../stdlib/core/records.scm" . 72750))
         (push)
         (apply.iloc (3 . 0) "../stdlib/core/records.scm" . 72723))
       (push.subr.gloc.of \x2E;list 3 "../stdlib/core/records.scm" . 54288)
       (push.const fields specs ...)
       (push.const . #f)
       (push.close
         (1 0)
         (push.const . fields)
         (call
           (push.close
             (1 0)
             (call
               (iloc.0 . 0)
               (if.not.pair?.ret.const . #f)
               (cdr.iloc (0 . 0) "../stdlib/core/records.scm" . 77851)
               (ret.pair? "../stdlib/core/records.scm" . 77851))
             (push)
             (extend . 1)
             (call
               (iloc.0 . 0)
               (if.false.ret)
               (cddr.iloc (1 . 0) "../stdlib/core/records.scm" . 77851)
               (ret.pair? "../stdlib/core/records.scm" . 77851))
             (push)
             (extend . 1)
             (call
               (iloc.1 . 0)
               (if.false.ret)
               (cddr.iloc (2 . 0) "../stdlib/core/records.scm" . 77851)
               (ret.null? "../stdlib/core/records.scm" . 77851))
             (push)
             (extend . 1)
             (call
               (iloc.1 . 0)
               (if.false.ret)
               (push.iloc 3 . 0)
               (subr.gloc.of cdddr 1 "../stdlib/core/records.scm" . 77851)
               (if.not.null?.ret.const . #f)
               (push.car.iloc (3 . 0) "../stdlib/core/records.scm" . 77851)
               (const . immutable)
               (if.not.eq?.ret.const . #f)
               (cadr.iloc (3 . 0) "../stdlib/core/records.scm" . 77851)
               (if.not.symbol?.ret.const . #f)
               (push.iloc 3 . 0)
               (push.subr.gloc.of caddr 1 "../stdlib/core/records.scm" . 77851)
               (ret.subr.gloc.of \x2E;symbol? "../stdlib/core/records.scm" . 77851))
             (if.true
               (push.const . immutable)
               (push.cadr.iloc (3 . 0) "../stdlib/core/records.scm" . 77851)
               (push.subr.gloc.of \x2E;list 2 "../stdlib/core/records.scm" . 77851)
               (push.iloc 3 . 0)
               (push.subr.gloc.of caddr 1 "../stdlib/core/records.scm" . 77851)
               (push.const #f)
               (ret.subr.gloc.of \x2E;cons* "../stdlib/core/records.scm" . 77851))
             (call
               (iloc.1 . 0)
               (if.false.ret)
               (push.iloc 3 . 0)
               (subr.gloc.of cdddr 1 "../stdlib/core/records.scm" . 77851)
               (if.not.pair?.ret.const . #f)
               (push.iloc 3 . 0)
               (subr.gloc.of cddddr 1 "../stdlib/core/records.scm" . 77851)
               (if.not.null?.ret.const . #f)
               (push.car.iloc (3 . 0) "../stdlib/core/records.scm" . 77851)
               (const . mutable)
               (if.not.eq?.ret.const . #f)
               (cadr.iloc (3 . 0) "../stdlib/core/records.scm" . 77851)
               (if.not.symbol?.ret.const . #f)
               (push.iloc 3 . 0)
               (subr.gloc.of caddr 1 "../stdlib/core/records.scm" . 77851)
               (if.not.symbol?.ret.const . #f)
               (push.iloc 3 . 0)
               (push.subr.gloc.of cadddr 1 "../stdlib/core/records.scm" . 77851)
               (ret.subr.gloc.of \x2E;symbol? "../stdlib/core/records.scm" . 77851))
             (if.true
               (push.const . mutable)
               (push.cadr.iloc (3 . 0) "../stdlib/core/records.scm" . 77851)
               (push.subr.gloc.of \x2E;list 2 "../stdlib/core/records.scm" . 77851)
               (push.iloc 3 . 0)
               (push.subr.gloc.of caddr 1 "../stdlib/core/records.scm" . 77851)
               (push.iloc 3 . 0)
               (push.subr.gloc.of cadddr 1 "../stdlib/core/records.scm" . 77851)
               (ret.subr.gloc.of \x2E;list "../stdlib/core/records.scm" . 77851))
             (call
               (iloc.0 . 0)
               (if.false.ret)
               (push.car.iloc (3 . 0) "../stdlib/core/records.scm" . 77851)
               (const . immutable)
               (if.not.eq?.ret.const . #f)
               (push.cadr.iloc (3 . 0) "../stdlib/core/records.scm" . 77851)
               (ret.subr.gloc.of \x2E;symbol? "../stdlib/core/records.scm" . 77851))
             (if.true
               (push.const . immutable)
               (push.cadr.iloc (3 . 0) "../stdlib/core/records.scm" . 77851)
               (push.subr.gloc.of \x2E;list 2 "../stdlib/core/records.scm" . 77851)
               (push.const . "~a-~a")
               (push.iloc 6 . 0)
               (push.cadr.iloc (3 . 0) "../stdlib/core/records.scm" . 77851)
               (push.subr.gloc.of \x2E;format 3 "../stdlib/core/records.scm" . 77851)
               (push.subr.gloc.of \x2E;string->symbol 1 "../stdlib/core/records.scm" . 77851)
               (push.const #f)
               (ret.subr.gloc.of \x2E;cons* "../stdlib/core/records.scm" . 77851))
             (call
               (iloc.0 . 0)
               (if.false.ret)
               (push.car.iloc (3 . 0) "../stdlib/core/records.scm" . 77851)
               (const . mutable)
               (if.not.eq?.ret.const . #f)
               (push.cadr.iloc (3 . 0) "../stdlib/core/records.scm" . 77851)
               (ret.subr.gloc.of \x2E;symbol? "../stdlib/core/records.scm" . 77851))
             (if.true
               (push.cadr.iloc (3 . 0) "../stdlib/core/records.scm" . 77851)
               (extend . 1)
               (push.const . mutable)
               (push.iloc.0 . 0)
               (push.subr.gloc.of \x2E;list 2 "../stdlib/core/records.scm" . 77851)
               (push.const . "~a-~a")
               (push.iloc 7 . 0)
               (push.iloc.0 . 0)
               (push.subr.gloc.of \x2E;format 3 "../stdlib/core/records.scm" . 77851)
               (push.subr.gloc.of \x2E;string->symbol 1 "../stdlib/core/records.scm" . 77851)
               (push.const . "~a-~a-set!")
               (push.iloc 7 . 0)
               (push.iloc.0 . 0)
               (push.subr.gloc.of \x2E;format 3 "../stdlib/core/records.scm" . 77851)
               (push.subr.gloc.of \x2E;string->symbol 1 "../stdlib/core/records.scm" . 77851)
               (ret.subr.gloc.of \x2E;list "../stdlib/core/records.scm" . 77851))
             (iloc 3 . 0)
             (if.symbol?
               (push.const . immutable)
               (push.iloc 3 . 0)
               (push.subr.gloc.of \x2E;list 2 "../stdlib/core/records.scm" . 77851)
               (push.const . "~a-~a")
               (push.iloc 6 . 0)
               (push.iloc 3 . 0)
               (push.subr.gloc.of \x2E;format 3 "../stdlib/core/records.scm" . 77851)
               (push.subr.gloc.of \x2E;string->symbol 1 "../stdlib/core/records.scm" . 77851)
               (push.const #f)
               (ret.subr.gloc.of \x2E;cons* "../stdlib/core/records.scm" . 77851))
             (push.const . define-record-type)
             (push.const . "malformed field spec")
             (push.iloc 9 . 0)
             (push.iloc 3 . 0)
             (apply.gloc.of \x2E;syntax-violation "../stdlib/core/records.scm" . 77851))
           (call
             (call
               (push.iloc.0 . 0)
               (push.const specs ...)
               (push.const (specs . 1))
               (apply.gloc.of \x2E;syntax/c1 "../stdlib/core/records.scm" . 100392))
             (push)
             (apply.gloc.of \x2E;syntax->datum "../stdlib/core/records.scm" . 100377))
           (push)
           (apply.gloc.of \x2E;map "../stdlib/core/records.scm" . 74771))
         (push)
         (apply.iloc (3 . 0) "../stdlib/core/records.scm" . 74771))
       (push.subr.gloc.of \x2E;list 3 "../stdlib/core/records.scm" . 53262)
       (push.const . _)
       (push.const . #f)
       (push.close
         (1 0)
         (push.const . define-record-type)
         (push.const . "malformed record clauses")
         (push.iloc 5 . 0)
         (call
           (push.iloc.1 . 0)
           (apply.gloc.of \x2E;syntax->datum "../stdlib/core/records.scm" . 101464))
         (push)
         (apply.gloc.of \x2E;syntax-violation "../stdlib/core/records.scm" . 101397))
       (push.subr.gloc.of \x2E;list 3 "../stdlib/core/records.scm" . 54288)
       (apply.gloc.of \x2E;syntax-dispatch "../stdlib/core/records.scm" . 53262))
     (push.iloc.0 . 1)
     (apply.gloc.of \x2E;for-each "../stdlib/core/records.scm" . 51211))
   (enclose . 3)
   (push.gloc.of \x2E;patvars)
   (push.iloc 2 . 0)
   (push.const)
   (push.const _ (record-name constructor-name predicate-name) record-clauses ...)
   (push.gloc.of \x2E;fn19.1\x60;19)
   (push.close
     (1 0)
     (call
       (call
         (call
           (push.iloc.0 . 0)
           (push.const . record-name)
           (apply.gloc.of \x2E;syntax/i1 "../stdlib/core/records.scm" . 108580))
         (push)
         (apply.gloc.of \x2E;syntax->datum "../stdlib/core/records.scm" . 108580))
       (push)
       (call
         (push.iloc.0 . 0)
         (push.const record-clauses ...)
         (push.const (record-clauses . 1))
         (apply.gloc.of \x2E;syntax/c1 "../stdlib/core/records.scm" . 108558))
       (push)
       (apply.iloc (1 . 2) "../stdlib/core/records.scm" . 108558))
     (call
       (call
         (push.const . parent-rtd)
         (push.const . #f)
         (apply.iloc (1 . 1) "../stdlib/core/records.scm" . 109587))
       (if.false.ret)
       (call
         (push.const . parent)
         (push.const . #f)
         (apply.iloc (1 . 1) "../stdlib/core/records.scm" . 110611))
       (if.false.ret)
       (push.const . define-record-type)
       (push.const . "definition have both parent and parent-rtd clause")
       (push.iloc 3 . 0)
       (apply.gloc.of \x2E;syntax-violation "../stdlib/core/records.scm" . 111635))
     (push.iloc.0 . 0)
     (call
       (push.iloc.0 . 0)
       (call
         (push.const . parent)
         (call
           (push.iloc.0 . 0)
           (push.const . #f)
           (apply.gloc.of \x2E;syntax/c0 "../stdlib/core/records.scm" . 107532))
         (push)
         (apply.iloc (1 . 1) "../stdlib/core/records.scm" . 107532))
       (push)
       (push.subr.gloc.of \x2E;list 1 "../stdlib/core/records.scm" . 107532)
       (push.const)
       (push.const parent)
       (push.const . #f)
       (push.close
         (1 0)
         (push.iloc.0 . 0)
         (call
           (call
             (push.const . parent-rtd)
             (push.const . #f)
             (apply.iloc (2 . 1) "../stdlib/core/records.scm" . 115767))
           (push)
           (extend . 1)
           (iloc.0 . 0)
           (if.true
             (push.iloc.0 . 0)
             (ret.subr.gloc.of \x2E;car "../stdlib/core/records.scm" . 115760))
           (call
             (push.const . parent)
             (push.const . #f)
             (apply.iloc (3 . 1) "../stdlib/core/records.scm" . 116791))
           (if.true
             (push.iloc.1 . 0)
             (push.const record-type-rtd parent)
             (push.const (parent . 0))
             (apply.gloc.of \x2E;syntax/c1 "../stdlib/core/records.scm" . 116814))
           (push.iloc.1 . 0)
           (push.const . #f)
           (apply.gloc.of \x2E;syntax/c0 "../stdlib/core/records.scm" . 115760))
         (push)
         (call
           (call
             (push.const . parent-rtd)
             (push.const . #f)
             (apply.iloc (2 . 1) "../stdlib/core/records.scm" . 118839))
           (push)
           (extend . 1)
           (iloc.0 . 0)
           (if.true
             (push.iloc.0 . 0)
             (ret.subr.gloc.of \x2E;cdr "../stdlib/core/records.scm" . 118832))
           (call
             (push.const . parent)
             (push.const . #f)
             (apply.iloc (3 . 1) "../stdlib/core/records.scm" . 119863))
           (if.true
             (push.iloc.1 . 0)
             (push.const record-type-rcd parent)
             (push.const (parent . 0))
             (apply.gloc.of \x2E;syntax/c1 "../stdlib/core/records.scm" . 119886))
           (push.iloc.1 . 0)
           (push.const . #f)
           (apply.gloc.of \x2E;syntax/c0 "../stdlib/core/records.scm" . 118832))
         (push)
         (call
           (push.const . nongenerative)
           (call
             (push.iloc.0 . 0)
             (push.const . #f)
             (apply.gloc.of \x2E;syntax/c0 "../stdlib/core/records.scm" . 115747))
           (push)
           (apply.iloc (2 . 1) "../stdlib/core/records.scm" . 115747))
         (push)
         (call
           (push.const . sealed)
           (call
             (push.iloc.0 . 0)
             (push.const . #f)
             (apply.gloc.of \x2E;syntax/c0 "../stdlib/core/records.scm" . 115747))
           (push)
           (apply.iloc (2 . 1) "../stdlib/core/records.scm" . 115747))
         (push)
         (call
           (push.const . opaque)
           (call
             (push.iloc.0 . 0)
             (push.const . #f)
             (apply.gloc.of \x2E;syntax/c0 "../stdlib/core/records.scm" . 115747))
           (push)
           (apply.iloc (2 . 1) "../stdlib/core/records.scm" . 115747))
         (push)
         (call
           (push.const . protocol)
           (call
             (push.iloc.0 . 0)
             (push.const . #f)
             (apply.gloc.of \x2E;syntax/c0 "../stdlib/core/records.scm" . 115747))
           (push)
           (apply.iloc (2 . 1) "../stdlib/core/records.scm" . 115747))
         (push)
         (call
           (call
             (push.iloc.0 . 0)
             (push.const . k)
             (apply.gloc.of \x2E;syntax/i0 "../stdlib/core/records.scm" . 126008))
           (push)
           (call
             (push.const . fields)
             (push.const)
             (apply.iloc (2 . 1) "../stdlib/core/records.scm" . 126027))
           (push)
           (apply.gloc.of \x2E;datum->syntax "../stdlib/core/records.scm" . 126008))
         (push)
         (push.subr.gloc.of \x2E;list 7 "../stdlib/core/records.scm" . 115747)
         (push.const)
         (push.const rtd-parent rcd-parent uid sealed opaque protocol ((fields _ _) ...))
         (push.const . #f)
         (push.gloc.of \x2E;fn7.1\x60;7)
         (push.subr.gloc.of \x2E;list 3 "../stdlib/core/records.scm" . 115747)
         (push.const . _)
         (push.const . #f)
         (push.gloc.of \x2E;fn22.1\x60;22)
         (push.subr.gloc.of \x2E;list 3 "../stdlib/core/records.scm" . 115760)
         (apply.gloc.of \x2E;syntax-dispatch "../stdlib/core/records.scm" . 115747))
       (push.subr.gloc.of \x2E;list 3 "../stdlib/core/records.scm" . 107532)
       (push.const . _)
       (push.const . #f)
       (push.gloc.of \x2E;fn3.1\x60;3)
       (push.subr.gloc.of \x2E;list 3 "../stdlib/core/records.scm" . 114730)
       (apply.gloc.of \x2E;syntax-dispatch "../stdlib/core/records.scm" . 107532))
     (push)
     (call
       (push.iloc.0 . 0)
       (push.const define constructor-name (record-constructor (record-type-rcd record-name)))
       (push.const (record-name . 0) (constructor-name . 0))
       (apply.gloc.of \x2E;syntax/c1 "../stdlib/core/records.scm" . 132116))
     (push)
     (call
       (push.iloc.0 . 0)
       (push.const define predicate-name (record-predicate (record-type-rtd record-name)))
       (push.const (record-name . 0) (predicate-name . 0))
       (apply.gloc.of \x2E;syntax/c1 "../stdlib/core/records.scm" . 134164))
     (push)
     (call
       (push.const . -1)
       (extend . 1)
       (push.gloc.of \x2E;values)
       (call
         (push.close
           (1 0)
           (n+.iloc (1 . 0) 1 "../stdlib/core/records.scm" . 139313)
           (set.iloc 1 . 0)
           (cadr.iloc (0 . 0) "../stdlib/core/records.scm" . 140330)
           (if.false.ret)
           (push.iloc 2 . 0)
           (call
             (call
               (push.iloc 2 . 0)
               (push.const . record-name)
               (apply.gloc.of \x2E;syntax/i1 "../stdlib/core/records.scm" . 141374))
             (push)
             (push.cadr.iloc (0 . 0) "../stdlib/core/records.scm" . 141403)
             (apply.gloc.of \x2E;datum->syntax "../stdlib/core/records.scm" . 141374))
           (push)
           (call
             (call
               (push.iloc 2 . 0)
               (push.const . k)
               (apply.gloc.of \x2E;syntax/i0 "../stdlib/core/records.scm" . 141420))
             (push)
             (push.iloc.1 . 0)
             (apply.gloc.of \x2E;datum->syntax "../stdlib/core/records.scm" . 141420))
           (push)
           (push.subr.gloc.of \x2E;list 2 "../stdlib/core/records.scm" . 141374)
           (push.const)
           (push.const name n)
           (push.const . #f)
           (push.gloc.of \x2E;fn15.1\x60;15)
           (push.subr.gloc.of \x2E;list 3 "../stdlib/core/records.scm" . 140325)
           (push.const . _)
           (push.const . #f)
           (push.gloc.of \x2E;fn9.1\x60;9)
           (push.subr.gloc.of \x2E;list 3 "../stdlib/core/records.scm" . 141374)
           (apply.gloc.of \x2E;syntax-dispatch "../stdlib/core/records.scm" . 140325))
         (call
           (push.const . fields)
           (push.const)
           (apply.iloc (2 . 1) "../stdlib/core/records.scm" . 143395))
         (push)
         (apply.gloc.of \x2E;map "../stdlib/core/records.scm" . 136212))
       (push)
       (apply.gloc.of core.lists\x27;filter "../stdlib/core/records.scm" . 136212))
     (push)
     (call
       (push.const . -1)
       (extend . 1)
       (push.gloc.of \x2E;values)
       (call
         (push.close
           (1 0)
           (n+.iloc (1 . 0) 1 "../stdlib/core/records.scm" . 148529)
           (set.iloc 1 . 0)
           (push.iloc.0 . 0)
           (subr.gloc.of \x2E;caddr 1 "../stdlib/core/records.scm" . 149546)
           (if.false.ret)
           (push.iloc 2 . 0)
           (call
             (call
               (push.iloc 2 . 0)
               (push.const . record-name)
               (apply.gloc.of \x2E;syntax/i1 "../stdlib/core/records.scm" . 150590))
             (push)
             (push.iloc.0 . 0)
             (push.subr.gloc.of \x2E;caddr 1 "../stdlib/core/records.scm" . 150619)
             (apply.gloc.of \x2E;datum->syntax "../stdlib/core/records.scm" . 150590))
           (push)
           (call
             (call
               (push.iloc 2 . 0)
               (push.const . k)
               (apply.gloc.of \x2E;syntax/i0 "../stdlib/core/records.scm" . 150637))
             (push)
             (push.iloc.1 . 0)
             (apply.gloc.of \x2E;datum->syntax "../stdlib/core/records.scm" . 150637))
           (push)
           (push.subr.gloc.of \x2E;list 2 "../stdlib/core/records.scm" . 150590)
           (push.const)
           (push.const name n)
           (push.const . #f)
           (push.gloc.of \x2E;fn25.1\x60;25)
           (push.subr.gloc.of \x2E;list 3 "../stdlib/core/records.scm" . 149541)
           (push.const . _)
           (push.const . #f)
           (push.gloc.of \x2E;fn17.1\x60;17)
           (push.subr.gloc.of \x2E;list 3 "../stdlib/core/records.scm" . 150590)
           (apply.gloc.of \x2E;syntax-dispatch "../stdlib/core/records.scm" . 149541))
         (call
           (push.const . fields)
           (push.const)
           (apply.iloc (2 . 1) "../stdlib/core/records.scm" . 152611))
         (push)
         (apply.gloc.of \x2E;map "../stdlib/core/records.scm" . 145428))
       (push)
       (apply.gloc.of core.lists\x27;filter "../stdlib/core/records.scm" . 145428))
     (push)
     (push.subr.gloc.of \x2E;list 5 "../stdlib/core/records.scm" . 107532)
     (push.const)
     (push.const record-type constructor predicate (accessors ...) (mutators ...))
     (push.const . #f)
     (push.gloc.of \x2E;fn1.1\x60;1)
     (push.subr.gloc.of \x2E;list 3 "../stdlib/core/records.scm" . 107532)
     (push.const . _)
     (push.const . #f)
     (push.gloc.of \x2E;fn2.1\x60;2)
     (push.subr.gloc.of \x2E;list 3 "../stdlib/core/records.scm" . 114721)
     (apply.gloc.of \x2E;syntax-dispatch "../stdlib/core/records.scm" . 107532))
   (push.subr.gloc.of \x2E;list 3 "../stdlib/core/records.scm" . 38921)
   (push.const _ record-name record-clauses ...)
   (push.gloc.of \x2E;fn14.1\x60;14)
   (push.gloc.of \x2E;fn12.1\x60;12)
   (push.subr.gloc.of \x2E;list 3 "../stdlib/core/records.scm" . 38921)
   (apply.gloc.of \x2E;syntax-dispatch "../stdlib/core/records.scm" . 38921))
 (set.gloc.of \x2E;fn20.1\x60;20)
 (close
   (1 0)
   (push.const . with-syntax)
   (push.const . "value does not match to pattern")
   (push.const
     (name (datum->syntax (syntax record-name) (cadr spec)))
     (n (datum->syntax (syntax k) index)))
   (apply.gloc.of \x2E;syntax-violation "../stdlib/core/records.scm" . 141374))
 (set.gloc.of \x2E;fn9.1\x60;9)
 (close
   (1 0)
   (push.const . with-syntax)
   (push.const . "value does not match to pattern")
   (push.const
     (constructor-name
       (datum->syntax (syntax record-name) (string->symbol (string-append "make-" base-name))))
     (predicate-name
       (datum->syntax (syntax record-name) (string->symbol (string-append base-name "?")))))
   (apply.gloc.of \x2E;syntax-violation "../stdlib/core/records.scm" . 158766))
 (set.gloc.of \x2E;fn24.1\x60;24)
 (close
   (1 0)
   (call
     (call
       (push.iloc.0 . 0)
       (push.const . e1)
       (apply.gloc.of \x2E;syntax/i1 "../stdlib/core/records.scm" . 66589))
     (push)
     (apply.gloc.of \x2E;syntax->datum "../stdlib/core/records.scm" . 66589))
   (push)
   (ret.subr.gloc.of \x2E;boolean? "../stdlib/core/records.scm" . 66579))
 (set.gloc.of \x2E;fn8.1\x60;8)
 (close
   (1 0)
   (push.const . with-syntax)
   (push.const . "value does not match to pattern")
   (push.const (parent (stash-ref 'parent (syntax #f))))
   (apply.gloc.of \x2E;syntax-violation "../stdlib/core/records.scm" . 114730))
 (set.gloc.of \x2E;fn3.1\x60;3)
 (close
   (1 0)
   (push.gloc.of \x2E;patvars)
   (push.iloc.0 . 0)
   (push.const)
   (push.const _ name)
   (push.gloc.of \x2E;fn18.1\x60;18)
   (push.gloc.of \x2E;fn4.1\x60;4)
   (push.subr.gloc.of \x2E;list 3 "../stdlib/core/records.scm" . 164871)
   (apply.gloc.of \x2E;syntax-dispatch "../stdlib/core/records.scm" . 164871))
 (set.gloc.of \x2E;fn5.1\x60;5)
 (close
   (1 0)
   (call
     (call
       (push.iloc.0 . 0)
       (push.const . record-name)
       (apply.gloc.of \x2E;syntax/i1 "../stdlib/core/records.scm" . 157756))
     (push)
     (apply.gloc.of \x2E;syntax->datum "../stdlib/core/records.scm" . 157741))
   (push)
   (push.subr.gloc.of \x2E;symbol->string 1 "../stdlib/core/records.scm" . 157725)
   (extend . 1)
   (push.iloc.1 . 0)
   (call
     (call
       (push.iloc.1 . 0)
       (push.const . record-name)
       (apply.gloc.of \x2E;syntax/i1 "../stdlib/core/records.scm" . 158766))
     (push)
     (push.const . "make-")
     (push.iloc.0 . 0)
     (push.subr.gloc.of \x2E;string-append 2 "../stdlib/core/records.scm" . 158811)
     (push.subr.gloc.of \x2E;string->symbol 1 "../stdlib/core/records.scm" . 158795)
     (apply.gloc.of \x2E;datum->syntax "../stdlib/core/records.scm" . 158766))
   (push)
   (call
     (call
       (push.iloc.1 . 0)
       (push.const . record-name)
       (apply.gloc.of \x2E;syntax/i1 "../stdlib/core/records.scm" . 159788))
     (push)
     (push.iloc.0 . 0)
     (push.const . "?")
     (push.subr.gloc.of \x2E;string-append 2 "../stdlib/core/records.scm" . 159833)
     (push.subr.gloc.of \x2E;string->symbol 1 "../stdlib/core/records.scm" . 159817)
     (apply.gloc.of \x2E;datum->syntax "../stdlib/core/records.scm" . 159788))
   (push)
   (push.subr.gloc.of \x2E;list 2 "../stdlib/core/records.scm" . 158766)
   (push.const)
   (push.const constructor-name predicate-name)
   (push.const . #f)
   (push.gloc.of \x2E;fn16.1\x60;16)
   (push.subr.gloc.of \x2E;list 3 "../stdlib/core/records.scm" . 157708)
   (push.const . _)
   (push.const . #f)
   (push.gloc.of \x2E;fn24.1\x60;24)
   (push.subr.gloc.of \x2E;list 3 "../stdlib/core/records.scm" . 158766)
   (apply.gloc.of \x2E;syntax-dispatch "../stdlib/core/records.scm" . 157708))
 (set.gloc.of \x2E;fn12.1\x60;12)
 (close
   (1 0)
   (push.const . with-syntax)
   (push.const . "value does not match to pattern")
   (push.const
     (name (datum->syntax (syntax record-name) (caddr spec)))
     (n (datum->syntax (syntax k) index)))
   (apply.gloc.of \x2E;syntax-violation "../stdlib/core/records.scm" . 150590))
 (set.gloc.of \x2E;fn17.1\x60;17)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (push.const define-record-type (record-name constructor-name predicate-name) record-clauses ...)
   (push.const (record-clauses . 1) (predicate-name . 0) (constructor-name . 0) (record-name . 0))
   (apply.gloc.of \x2E;syntax/c1 "../stdlib/core/records.scm" . 160784))
 (set.gloc.of \x2E;fn16.1\x60;16)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (push.const
     define
     record-name
     (let* ((rtd
              (make-record-type-descriptor
                'record-name
                rtd-parent
                'uid
                sealed
                opaque
                '#(fields ...)))
            (rcd (make-record-constructor-descriptor rtd rcd-parent protocol)))
       (make-record-type 'record-name rtd rcd)))
   (push.const
     (protocol . 0)
     (rcd-parent . 0)
     (fields . 1)
     (opaque . 0)
     (sealed . 0)
     (uid . 0)
     (rtd-parent . 0)
     (record-name . 0))
   (apply.gloc.of \x2E;syntax/c1 "../stdlib/core/records.scm" . 128046))
 (set.gloc.of \x2E;fn7.1\x60;7)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (push.const begin record-type constructor predicate accessors ... mutators ...)
   (push.const (mutators . 1) (accessors . 1) (predicate . 0) (constructor . 0) (record-type . 0))
   (apply.gloc.of \x2E;syntax/c1 "../stdlib/core/records.scm" . 153616))
 (set.gloc.of \x2E;fn1.1\x60;1)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (push.const record-type-rcd name)
   (push.const (name . 0))
   (apply.gloc.of \x2E;syntax/c1 "../stdlib/core/records.scm" . 171048))
 (set.gloc.of \x2E;fn13.1\x60;13)
 (close
   (1 0)
   (call
     (push.iloc.0 . 0)
     (push.const . name)
     (apply.gloc.of \x2E;syntax/i1 "../stdlib/core/records.scm" . 165907))
   (push)
   (apply.gloc.of \x2E;identifier? "../stdlib/core/records.scm" . 165907))
 (set.gloc.of \x2E;fn18.1\x60;18)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (push.const define name (record-accessor (record-type-rtd record-name) n))
   (push.const (n . 0) (record-name . 0) (name . 0))
   (apply.gloc.of \x2E;syntax/c1 "../stdlib/core/records.scm" . 142380))
 (set.gloc.of \x2E;fn15.1\x60;15)
 (close
   (1 0)
   (call
     (push.iloc.0 . 0)
     (push.const . record-name)
     (apply.gloc.of \x2E;syntax/i1 "../stdlib/core/records.scm" . 156684))
   (push)
   (apply.gloc.of \x2E;identifier? "../stdlib/core/records.scm" . 156684))
 (set.gloc.of \x2E;fn14.1\x60;14)
 (close
   (1 0)
   (call
     (push.iloc.0 . 0)
     (push.const . e1)
     (apply.gloc.of \x2E;syntax/i1 "../stdlib/core/records.scm" . 69651))
   (push)
   (apply.gloc.of \x2E;identifier? "../stdlib/core/records.scm" . 69651))
 (set.gloc.of \x2E;fn10.1\x60;10)
 (call
   (push.const core destructuring)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core/records.scm" . 6145))
 (call
   (push.const core syntax-case)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core/records.scm" . 6145))
 (call
   (push.const core lists)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core/records.scm" . 6145))
 (call
   (push.const core primitives)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core/records.scm" . 6145))
 (call
   (push.const
     (define-record-type import . core.records\x27;define-record-type)
     (cond import . \x2E;cond)
     (cdddr import . \x2E;cdddr)
     (begin import . \x2E;begin)
     (make-record-constructor-descriptor import . \x2E;make-record-constructor-descriptor)
     (map import . \x2E;map)
     (+ import . \x2E;+)
     (string-append import . \x2E;string-append)
     (quote import . \x2E;quote)
     (car import . \x2E;car)
     (filter import . core.lists\x27;filter)
     (cddddr import . \x2E;cddddr)
     (record-predicate import . \x2E;record-predicate)
     (string->symbol import . \x2E;string->symbol)
     (define import . \x2E;define)
     (let* import . \x2E;let*)
     (make-record-type import . \x2E;make-record-type)
     (cadr import . \x2E;cadr)
     (caddr import . \x2E;caddr)
     (... import . \x2E;...)
     (record-type-rcd import . \x2E;record-type-rcd)
     (datum->syntax import . \x2E;datum->syntax)
     (else import . \x2E;else)
     (record-type-rtd import . \x2E;record-type-rtd)
     (make-record-type-descriptor import . \x2E;make-record-type-descriptor)
     (with-syntax import . core.syntax-case\x27;with-syntax)
     (syntax import . \x2E;syntax)
     (values import . \x2E;values)
     (=> import . \x2E;=>)
     (record-mutator import . \x2E;record-mutator)
     (cadddr import . \x2E;cadddr)
     (cddr import . \x2E;cddr)
     (and import . \x2E;and)
     (_ import . \x2E;_)
     (record-accessor import . \x2E;record-accessor)
     (eq? import . \x2E;eq?)
     (if import . \x2E;if)
     (letrec* import . \x2E;letrec*)
     (record-constructor import . \x2E;record-constructor)
     (lambda import . \x2E;lambda)
     (pair? import . \x2E;pair?)
     (cdr import . \x2E;cdr)
     (null? import . \x2E;null?)
     (set! import . \x2E;set!)
     (let import . \x2E;let))
   (extend . 1)
   (call
     (push.const . syntax)
     (push.const . core.records\x27;define-record-type)
     (call
       (push.gloc.of \x2E;fn20.1\x60;20)
       (apply.gloc.of \x2E;transformer-thunk "../stdlib/core/records.scm" . 6145))
     (push)
     (push.iloc.0 . 0)
     (apply.gloc.of \x2E;set-top-level-macro! "../stdlib/core/records.scm" . 6145))
   (call
     (push.const . syntax)
     (push.const . core.records\x27;record-type-descriptor)
     (call
       (push.gloc.of \x2E;fn5.1\x60;5)
       (apply.gloc.of \x2E;transformer-thunk "../stdlib/core/records.scm" . 6145))
     (push)
     (push.iloc.0 . 0)
     (apply.gloc.of \x2E;set-top-level-macro! "../stdlib/core/records.scm" . 6145))
   (push.const . syntax)
   (push.const . core.records\x27;record-constructor-descriptor)
   (call
     (push.gloc.of \x2E;fn6.1\x60;6)
     (apply.gloc.of \x2E;transformer-thunk "../stdlib/core/records.scm" . 6145))
   (push)
   (push.iloc.0 . 0)
   (apply.gloc.of \x2E;set-top-level-macro! "../stdlib/core/records.scm" . 6145))
 (push.const . core.records)
 (push.const . #f)
 (push.const
   (make-record-type-descriptor import . \x2E;make-record-type-descriptor)
   (record-type-descriptor? import . \x2E;record-type-descriptor?)
   (make-record-constructor-descriptor import . \x2E;make-record-constructor-descriptor)
   (record-constructor import . \x2E;record-constructor)
   (record-predicate import . \x2E;record-predicate)
   (record-accessor import . \x2E;record-accessor)
   (record-mutator import . \x2E;record-mutator)
   (record? import . \x2E;record?)
   (record-rtd import . \x2E;record-rtd)
   (record-type-name import . \x2E;record-type-name)
   (record-type-parent import . \x2E;record-type-parent)
   (record-type-uid import . \x2E;record-type-uid)
   (record-type-generative? import . \x2E;record-type-generative?)
   (record-type-sealed? import . \x2E;record-type-sealed?)
   (record-type-opaque? import . \x2E;record-type-opaque?)
   (record-type-field-names import . \x2E;record-type-field-names)
   (record-field-mutable? import . \x2E;record-field-mutable?)
   (record-type-descriptor import . core.records\x27;record-type-descriptor)
   (record-constructor-descriptor import . core.records\x27;record-constructor-descriptor)
   (define-record-type import . core.records\x27;define-record-type))
 (apply.gloc.of \x2E;intern-scheme-library "../stdlib/core/records.scm" . 6145))

((close
   (1 0)
   (push.iloc.0 . 0)
   (push.const
     begin
     (define-record-type
       (condition-type constructor temp)
       (parent supertype)
       (fields (immutable cond-fields rec-accessors) ...))
     (define predicate (condition-predicate (record-type-descriptor condition-type)))
     (define cond-accessors
       (condition-accessor (record-type-descriptor condition-type) rec-accessors))
     ...)
   (push.const
     (cond-accessors . 1)
     (predicate . 0)
     (rec-accessors . 1)
     (cond-fields . 1)
     (supertype . 0)
     (constructor . 0)
     (condition-type . 0))
   (apply.gloc.of \x2E;syntax/c1 "../stdlib/core/conditions.scm" . 37900))
 (set.gloc.of \x2E;fn4.1\x60;4)
 (close
   (1 0)
   (push.gloc.of \x2E;patvars)
   (push.iloc.0 . 0)
   (push.const)
   (push.const _ condition-type supertype constructor predicate (cond-fields cond-accessors) ...)
   (push.const . #f)
   (push.gloc.of \x2E;fn3.1\x60;3)
   (push.subr.gloc.of \x2E;list 3 "../stdlib/core/conditions.scm" . 31749)
   (apply.gloc.of \x2E;syntax-dispatch "../stdlib/core/conditions.scm" . 31749))
 (set.gloc.of \x2E;fn1.1\x60;1)
 (close
   (1 0)
   (push.const . with-syntax)
   (push.const . "value does not match to pattern")
   (push.const ((rec-accessors ...) (generate-temporaries (syntax (cond-fields ...)))))
   (apply.gloc.of \x2E;syntax-violation "../stdlib/core/conditions.scm" . 36889))
 (set.gloc.of \x2E;fn2.1\x60;2)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (call
     (call
       (push.iloc.0 . 0)
       (push.const cond-fields ...)
       (push.const (cond-fields . 1))
       (apply.gloc.of \x2E;syntax/c1 "../stdlib/core/conditions.scm" . 36931))
     (push)
     (apply.gloc.of \x2E;generate-temporaries "../stdlib/core/conditions.scm" . 36909))
   (push)
   (push.subr.gloc.of \x2E;list 1 "../stdlib/core/conditions.scm" . 36909)
   (push.const)
   (push.const (rec-accessors ...))
   (push.const . #f)
   (push.gloc.of \x2E;fn4.1\x60;4)
   (push.subr.gloc.of \x2E;list 3 "../stdlib/core/conditions.scm" . 36874)
   (push.const . _)
   (push.const . #f)
   (push.gloc.of \x2E;fn2.1\x60;2)
   (push.subr.gloc.of \x2E;list 3 "../stdlib/core/conditions.scm" . 36909)
   (apply.gloc.of \x2E;syntax-dispatch "../stdlib/core/conditions.scm" . 36874))
 (set.gloc.of \x2E;fn3.1\x60;3)
 (call
   (push.const core records)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core/conditions.scm" . 6145))
 (call
   (push.const core syntax-case)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core/conditions.scm" . 6145))
 (call
   (push.const core primitives)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core/conditions.scm" . 6145))
 (call
   (push.const . syntax)
   (push.const . core.conditions\x27;define-condition-type)
   (call
     (push.gloc.of \x2E;fn1.1\x60;1)
     (apply.gloc.of \x2E;transformer-thunk "../stdlib/core/conditions.scm" . 6145))
   (push)
   (push.const
     (define-record-type import . core.records\x27;define-record-type)
     (let import . \x2E;let)
     (generate-temporaries import . \x2E;generate-temporaries)
     (... import . \x2E;...)
     (begin import . \x2E;begin)
     (record-type-descriptor import . core.records\x27;record-type-descriptor)
     (_ import . \x2E;_)
     (syntax import . \x2E;syntax)
     (quote import . \x2E;quote)
     (define import . \x2E;define)
     (with-syntax import . core.syntax-case\x27;with-syntax)
     (condition-accessor import . \x2E;condition-accessor)
     (lambda import . \x2E;lambda)
     (condition-predicate import . \x2E;condition-predicate))
   (apply.gloc.of \x2E;set-top-level-macro! "../stdlib/core/conditions.scm" . 6145))
 (push.const . core.conditions)
 (push.const . #f)
 (push.const
   (define-condition-type import . core.conditions\x27;define-condition-type)
   (condition import . \x2E;condition)
   (simple-conditions import . \x2E;simple-conditions)
   (condition? import . \x2E;condition?)
   (condition-predicate import . \x2E;condition-predicate)
   (condition-accessor import . \x2E;condition-accessor)
   (&condition import . \x2E;&condition)
   (&message import . \x2E;&message)
   (make-message-condition import . \x2E;make-message-condition)
   (message-condition? import . \x2E;message-condition?)
   (condition-message import . \x2E;condition-message)
   (&warning import . \x2E;&warning)
   (make-warning import . \x2E;make-warning)
   (warning? import . \x2E;warning?)
   (&serious import . \x2E;&serious)
   (make-serious-condition import . \x2E;make-serious-condition)
   (serious-condition? import . \x2E;serious-condition?)
   (&error import . \x2E;&error)
   (make-error import . \x2E;make-error)
   (error? import . \x2E;error?)
   (&violation import . \x2E;&violation)
   (make-violation import . \x2E;make-violation)
   (violation? import . \x2E;violation?)
   (&assertion import . \x2E;&assertion)
   (make-assertion-violation import . \x2E;make-assertion-violation)
   (assertion-violation? import . \x2E;assertion-violation?)
   (&irritants import . \x2E;&irritants)
   (make-irritants-condition import . \x2E;make-irritants-condition)
   (irritants-condition? import . \x2E;irritants-condition?)
   (condition-irritants import . \x2E;condition-irritants)
   (&who import . \x2E;&who)
   (make-who-condition import . \x2E;make-who-condition)
   (who-condition? import . \x2E;who-condition?)
   (condition-who import . \x2E;condition-who)
   (&non-continuable import . \x2E;&non-continuable)
   (make-non-continuable-violation import . \x2E;make-non-continuable-violation)
   (non-continuable-violation? import . \x2E;non-continuable-violation?)
   (&implementation-restriction import . \x2E;&implementation-restriction)
   (make-implementation-restriction-violation
     import
     .
     \x2E;make-implementation-restriction-violation)
   (implementation-restriction-violation? import . \x2E;implementation-restriction-violation?)
   (&lexical import . \x2E;&lexical)
   (make-lexical-violation import . \x2E;make-lexical-violation)
   (lexical-violation? import . \x2E;lexical-violation?)
   (&syntax import . \x2E;&syntax)
   (make-syntax-violation import . \x2E;make-syntax-violation)
   (syntax-violation? import . \x2E;syntax-violation?)
   (syntax-violation-form import . \x2E;syntax-violation-form)
   (syntax-violation-subform import . \x2E;syntax-violation-subform)
   (&undefined import . \x2E;&undefined)
   (make-undefined-violation import . \x2E;make-undefined-violation)
   (undefined-violation? import . \x2E;undefined-violation?))
 (apply.gloc.of \x2E;intern-scheme-library "../stdlib/core/conditions.scm" . 6145))

((close
   (2 0)
   (push.cdr.iloc (0 . 0) "../stdlib/core/enums.scm" . 81962)
   (push.cdr.iloc (0 . 1) "../stdlib/core/enums.scm" . 81970)
   (ret.subr.gloc.of \x2E;< "../stdlib/core/enums.scm" . 81959))
 (set.gloc.of \x2E;fn7.1\x60;7)
 (close
   (1 0)
   (ret.close
     (1 0)
     (call
       (push.iloc.0 . 0)
       (apply.gloc.of core.lists\x27;remove-duplicate-symbols "../stdlib/core/enums.scm" . 40998))
     (push)
     (push.iloc.1 . 0)
     (push.const . 1)
     (push.subr.gloc.of \x2E;tuple-ref 2 "../stdlib/core/enums.scm" . 42047)
     (push.const . 1)
     (push.subr.gloc.of \x2E;tuple-ref 2 "../stdlib/core/enums.scm" . 42047)
     (extend . 2)
     (call
       (push.close
         (1 0)
         (push.iloc.0 . 0)
         (subr.gloc.of \x2E;symbol? 1 "../stdlib/core/enums.scm" . 44077)
         (if.false.call
           (push.const . "enum-set constructor")
           (push.const . "expected list of symbols as argument 1")
           (push.iloc 2 . 0)
           (apply.gloc.of \x2E;assertion-violation "../stdlib/core/enums.scm" . 45101))
         (push.iloc.1 . 1)
         (push.iloc.0 . 0)
         (push.const . #f)
         (subr.gloc.of \x2E;core-hashtable-ref 3 "../stdlib/core/enums.scm" . 46125)
         (if.true.ret)
         (push.const . "enum-set constructor")
         (push.const . "excpectd symbols which belong to the universe")
         (push.iloc 2 . 0)
         (apply.gloc.of \x2E;assertion-violation "../stdlib/core/enums.scm" . 47149))
       (push.iloc.0 . 0)
       (apply.gloc.of \x2E;for-each "../stdlib/core/enums.scm" . 43037))
     (push.const . type:enum-set)
     (push.iloc 2 . 0)
     (push.const . 1)
     (push.subr.gloc.of \x2E;tuple-ref 2 "../stdlib/core/enums.scm" . 49196)
     (push.iloc.0 . 0)
     (ret.subr.gloc.of \x2E;tuple "../stdlib/core/enums.scm" . 49196)))
 (set.gloc.of \x2E;fn9.1\x60;9)
 (close
   (1 0)
   (ret.close
     (1 0)
     (push.iloc.1 . 0)
     (push.const . 1)
     (push.subr.gloc.of \x2E;tuple-ref 2 "../stdlib/core/enums.scm" . 37955)
     (push.const . 1)
     (push.subr.gloc.of \x2E;tuple-ref 2 "../stdlib/core/enums.scm" . 37955)
     (push.iloc.0 . 0)
     (push.const . #f)
     (ret.subr.gloc.of \x2E;core-hashtable-ref "../stdlib/core/enums.scm" . 37915)))
 (set.gloc.of \x2E;fn4.1\x60;4)
 (call
   (push.const core sorting)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core/enums.scm" . 6145))
 (call
   (push.const core lists)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core/enums.scm" . 6145))
 (call
   (push.const core struct)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core/enums.scm" . 6145))
 (call
   (push.const core primitives)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core/enums.scm" . 6145))
 (close
   (2 0 . core.enums\x27;construct-enum-type)
   (push.const . type:enum-type)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.gloc.of \x2E;fn4.1\x60;4)
   (push.gloc.of \x2E;fn9.1\x60;9)
   (ret.subr.gloc.of \x2E;tuple "../stdlib/core/enums.scm" . 35863))
 (set.gloc.of core.enums\x27;construct-enum-type)
 (close
   (1 0 . core.enums\x27;make-enumeration)
   (call
     (push.iloc.0 . 0)
     (apply.gloc.of core.lists\x27;remove-duplicate-symbols "../stdlib/core/enums.scm" . 53274))
   (push)
   (extend . 1)
   (subr.gloc.of \x2E;make-core-hashtable 0)
   (push)
   (push.const . 0)
   (extend . 2)
   (call
     (push.close
       (1 0)
       (push.iloc.0 . 0)
       (subr.gloc.of \x2E;symbol? 1 "../stdlib/core/enums.scm" . 56347)
       (if.false.call
         (push.const . make-enumeration)
         (push.const . "expected list of symbols")
         (push.iloc 2 . 0)
         (apply.gloc.of \x2E;assertion-violation "../stdlib/core/enums.scm" . 57371))
       (push.iloc.1 . 0)
       (push.iloc.0 . 0)
       (push.iloc.1 . 1)
       (subr.gloc.of \x2E;core-hashtable-set! 3 "../stdlib/core/enums.scm" . 58391)
       (n+.iloc (1 . 1) 1 "../stdlib/core/enums.scm" . 59427)
       (set.iloc 1 . 1)
       (ret.const.unspec))
     (push.iloc.1 . 0)
     (apply.gloc.of \x2E;for-each "../stdlib/core/enums.scm" . 55307))
   (push.const . type:enum-set)
   (call
     (push.iloc.0 . 0)
     (push.iloc.1 . 0)
     (apply.gloc.of core.enums\x27;construct-enum-type "../stdlib/core/enums.scm" . 61463))
   (push)
   (push.iloc.1 . 0)
   (ret.subr.gloc.of \x2E;tuple "../stdlib/core/enums.scm" . 62477))
 (set.gloc.of core.enums\x27;make-enumeration)
 (close
   (1 0 . core.enums\x27;enum-set-universe)
   (push.const . type:enum-set)
   (push.iloc.0 . 0)
   (push.const . 1)
   (push.subr.gloc.of \x2E;tuple-ref 2 "../stdlib/core/enums.scm" . 66582)
   (push.iloc.0 . 0)
   (push.const . 1)
   (push.subr.gloc.of \x2E;tuple-ref 2 "../stdlib/core/enums.scm" . 67625)
   (push.const . 2)
   (push.subr.gloc.of \x2E;tuple-ref 2 "../stdlib/core/enums.scm" . 67625)
   (ret.subr.gloc.of \x2E;tuple "../stdlib/core/enums.scm" . 66582))
 (set.gloc.of core.enums\x27;enum-set-universe)
 (close
   (1 0 . core.enums\x27;enum-set-indexer)
   (push.iloc.0 . 0)
   (push.iloc.0 . 0)
   (push.const . 1)
   (push.subr.gloc.of \x2E;tuple-ref 2 "../stdlib/core/enums.scm" . 71707)
   (push.const . 3)
   (subr.gloc.of \x2E;tuple-ref 2 "../stdlib/core/enums.scm" . 71707)
   (apply))
 (set.gloc.of core.enums\x27;enum-set-indexer)
 (close
   (1 0 . core.enums\x27;enum-set-constructor)
   (push.iloc.0 . 0)
   (push.iloc.0 . 0)
   (push.const . 1)
   (push.subr.gloc.of \x2E;tuple-ref 2 "../stdlib/core/enums.scm" . 75807)
   (push.const . 4)
   (subr.gloc.of \x2E;tuple-ref 2 "../stdlib/core/enums.scm" . 75807)
   (apply))
 (set.gloc.of core.enums\x27;enum-set-constructor)
 (close
   (1 0 . core.enums\x27;enum-set->list)
   (push.iloc.0 . 0)
   (push.const . 1)
   (push.subr.gloc.of \x2E;tuple-ref 2 "../stdlib/core/enums.scm" . 79915)
   (push.const . 1)
   (push.subr.gloc.of \x2E;tuple-ref 2 "../stdlib/core/enums.scm" . 79915)
   (extend . 1)
   (push.gloc.of \x2E;car)
   (call
     (push.gloc.of \x2E;fn7.1\x60;7)
     (call
       (push.close
         (1 0)
         (push.iloc.0 . 0)
         (push.iloc.1 . 0)
         (push.iloc.0 . 0)
         (push.const . #f)
         (subr.gloc.of \x2E;core-hashtable-ref 3 "../stdlib/core/enums.scm" . 82994)
         (ret.cons "../stdlib/core/enums.scm" . 82986))
       (push.iloc.1 . 0)
       (push.const . 2)
       (push.subr.gloc.of \x2E;tuple-ref 2 "../stdlib/core/enums.scm" . 82969)
       (apply.gloc.of \x2E;map "../stdlib/core/enums.scm" . 82969))
     (push)
     (apply.gloc.of core.sorting\x27;list-sort "../stdlib/core/enums.scm" . 81934))
   (push)
   (apply.gloc.of \x2E;map "../stdlib/core/enums.scm" . 80905))
 (set.gloc.of core.enums\x27;enum-set->list)
 (close
   (2 0 . core.enums\x27;enum-set-member?)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.const . 2)
   (push.subr.gloc.of \x2E;tuple-ref 2 "../stdlib/core/enums.scm" . 88076)
   (subr.gloc.of \x2E;memq 2 "../stdlib/core/enums.scm" . 88076)
   (if.false.ret)
   (ret.const . #t))
 (set.gloc.of core.enums\x27;enum-set-member?)
 (close
   (2 0 . core.enums\x27;enum-set-subset?)
   (call
     (push.close
       (1 0)
       (push.iloc.0 . 0)
       (push.iloc.1 . 1)
       (apply.gloc.of core.enums\x27;enum-set-member? "../stdlib/core/enums.scm" . 92193))
     (push.iloc.0 . 0)
     (push.const . 2)
     (push.subr.gloc.of \x2E;tuple-ref 2 "../stdlib/core/enums.scm" . 92172)
     (apply.gloc.of core.lists\x27;for-all "../stdlib/core/enums.scm" . 92172))
   (if.false.ret)
   (call
     (push.iloc.0 . 1)
     (push.const . 1)
     (push.subr.gloc.of \x2E;tuple-ref 2 "../stdlib/core/enums.scm" . 93225)
     (push.const . 2)
     (push.subr.gloc.of \x2E;tuple-ref 2 "../stdlib/core/enums.scm" . 93225)
     (extend . 1)
     (push.close
       (1 0)
       (push.iloc.0 . 0)
       (push.iloc.1 . 0)
       (ret.subr.gloc.of \x2E;memq "../stdlib/core/enums.scm" . 94243))
     (push.iloc.1 . 0)
     (push.const . 1)
     (push.subr.gloc.of \x2E;tuple-ref 2 "../stdlib/core/enums.scm" . 94275)
     (push.const . 2)
     (push.subr.gloc.of \x2E;tuple-ref 2 "../stdlib/core/enums.scm" . 94275)
     (apply.gloc.of core.lists\x27;for-all "../stdlib/core/enums.scm" . 94222))
   (if.false.ret)
   (ret.const . #t))
 (set.gloc.of core.enums\x27;enum-set-subset?)
 (close
   (2 0 . core.enums\x27;enum-set=?)
   (call
     (push.iloc.0 . 1)
     (push.iloc.0 . 0)
     (apply.gloc.of core.enums\x27;enum-set-subset? "../stdlib/core/enums.scm" . 99340))
   (if.false.ret)
   (call
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (apply.gloc.of core.enums\x27;enum-set-subset? "../stdlib/core/enums.scm" . 100364))
   (if.false.ret)
   (ret.const . #t))
 (set.gloc.of core.enums\x27;enum-set=?)
 (close
   (2 0 . core.enums\x27;enum-set-union)
   (push.iloc.0 . 0)
   (push.const . 1)
   (push.subr.gloc.of \x2E;tuple-ref 2 "../stdlib/core/enums.scm" . 105483)
   (push.iloc.0 . 1)
   (push.const . 1)
   (push.subr.gloc.of \x2E;tuple-ref 2 "../stdlib/core/enums.scm" . 105483)
   (subr.gloc.of \x2E;eq? 2 "../stdlib/core/enums.scm" . 105483)
   (if.false.call
     (push.const . enum-set-union)
     (push.const . "expected same type enum-sets")
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (apply.gloc.of \x2E;assertion-violation "../stdlib/core/enums.scm" . 106507))
   (push.const . type:enum-set)
   (push.iloc.0 . 0)
   (push.const . 1)
   (push.subr.gloc.of \x2E;tuple-ref 2 "../stdlib/core/enums.scm" . 107542)
   (call
     (push.iloc.0 . 0)
     (push.const . 2)
     (push.subr.gloc.of \x2E;tuple-ref 2 "../stdlib/core/enums.scm" . 108592)
     (push.iloc.0 . 1)
     (push.const . 2)
     (push.subr.gloc.of \x2E;tuple-ref 2 "../stdlib/core/enums.scm" . 108592)
     (push.subr.gloc.of \x2E;append 2 "../stdlib/core/enums.scm" . 108592)
     (apply.gloc.of core.lists\x27;remove-duplicate-symbols "../stdlib/core/enums.scm" . 108566))
   (push)
   (ret.subr.gloc.of \x2E;tuple "../stdlib/core/enums.scm" . 107542))
 (set.gloc.of core.enums\x27;enum-set-union)
 (close
   (2 0 . core.enums\x27;enum-set-intersection)
   (push.iloc.0 . 0)
   (push.const . 1)
   (push.subr.gloc.of \x2E;tuple-ref 2 "../stdlib/core/enums.scm" . 112651)
   (push.iloc.0 . 1)
   (push.const . 1)
   (push.subr.gloc.of \x2E;tuple-ref 2 "../stdlib/core/enums.scm" . 112651)
   (subr.gloc.of \x2E;eq? 2 "../stdlib/core/enums.scm" . 112651)
   (if.false.call
     (push.const . enum-set-intersection)
     (push.const . "expected same type enum-sets")
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (apply.gloc.of \x2E;assertion-violation "../stdlib/core/enums.scm" . 113675))
   (push.iloc.0 . 1)
   (push.const . 2)
   (push.subr.gloc.of \x2E;tuple-ref 2 "../stdlib/core/enums.scm" . 114695)
   (extend . 1)
   (push.const . type:enum-set)
   (push.iloc.1 . 0)
   (push.const . 1)
   (push.subr.gloc.of \x2E;tuple-ref 2 "../stdlib/core/enums.scm" . 115736)
   (call
     (push.gloc.of \x2E;values)
     (call
       (push.close
         (1 0)
         (push.iloc.0 . 0)
         (push.iloc.1 . 0)
         (subr.gloc.of \x2E;memq 2 "../stdlib/core/enums.scm" . 116797)
         (if.false.ret)
         (ret.iloc 0 . 0))
       (push.iloc.1 . 0)
       (push.const . 2)
       (push.subr.gloc.of \x2E;tuple-ref 2 "../stdlib/core/enums.scm" . 116775)
       (apply.gloc.of \x2E;map "../stdlib/core/enums.scm" . 116775))
     (push)
     (apply.gloc.of core.lists\x27;filter "../stdlib/core/enums.scm" . 116760))
   (push)
   (ret.subr.gloc.of \x2E;tuple "../stdlib/core/enums.scm" . 115736))
 (set.gloc.of core.enums\x27;enum-set-intersection)
 (close
   (2 0 . core.enums\x27;enum-set-difference)
   (push.iloc.0 . 0)
   (push.const . 1)
   (push.subr.gloc.of \x2E;tuple-ref 2 "../stdlib/core/enums.scm" . 121867)
   (push.iloc.0 . 1)
   (push.const . 1)
   (push.subr.gloc.of \x2E;tuple-ref 2 "../stdlib/core/enums.scm" . 121867)
   (subr.gloc.of \x2E;eq? 2 "../stdlib/core/enums.scm" . 121867)
   (if.false.call
     (push.const . enum-set-difference)
     (push.const . "expected same type enum-sets")
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (apply.gloc.of \x2E;assertion-violation "../stdlib/core/enums.scm" . 122891))
   (push.iloc.0 . 1)
   (push.const . 2)
   (push.subr.gloc.of \x2E;tuple-ref 2 "../stdlib/core/enums.scm" . 123911)
   (extend . 1)
   (push.const . type:enum-set)
   (push.iloc.1 . 0)
   (push.const . 1)
   (push.subr.gloc.of \x2E;tuple-ref 2 "../stdlib/core/enums.scm" . 124952)
   (call
     (push.gloc.of \x2E;values)
     (call
       (push.close
         (1 0)
         (push.iloc.0 . 0)
         (push.iloc.1 . 0)
         (subr.gloc.of \x2E;memq 2 "../stdlib/core/enums.scm" . 126018)
         (if.true.ret.const . #f)
         (ret.iloc 0 . 0))
       (push.iloc.1 . 0)
       (push.const . 2)
       (push.subr.gloc.of \x2E;tuple-ref 2 "../stdlib/core/enums.scm" . 125991)
       (apply.gloc.of \x2E;map "../stdlib/core/enums.scm" . 125991))
     (push)
     (apply.gloc.of core.lists\x27;filter "../stdlib/core/enums.scm" . 125976))
   (push)
   (ret.subr.gloc.of \x2E;tuple "../stdlib/core/enums.scm" . 124952))
 (set.gloc.of core.enums\x27;enum-set-difference)
 (close
   (1 0 . core.enums\x27;enum-set-complement)
   (push.iloc.0 . 0)
   (push.const . 2)
   (push.subr.gloc.of \x2E;tuple-ref 2 "../stdlib/core/enums.scm" . 131079)
   (extend . 1)
   (push.const . type:enum-set)
   (push.iloc.1 . 0)
   (push.const . 1)
   (push.subr.gloc.of \x2E;tuple-ref 2 "../stdlib/core/enums.scm" . 132120)
   (call
     (push.gloc.of \x2E;values)
     (call
       (push.close
         (1 0)
         (push.iloc.0 . 0)
         (push.iloc.1 . 0)
         (subr.gloc.of \x2E;memq 2 "../stdlib/core/enums.scm" . 133186)
         (if.true.ret.const . #f)
         (ret.iloc 0 . 0))
       (push.iloc.1 . 0)
       (push.const . 1)
       (push.subr.gloc.of \x2E;tuple-ref 2 "../stdlib/core/enums.scm" . 134207)
       (push.const . 2)
       (push.subr.gloc.of \x2E;tuple-ref 2 "../stdlib/core/enums.scm" . 134207)
       (apply.gloc.of \x2E;map "../stdlib/core/enums.scm" . 133159))
     (push)
     (apply.gloc.of core.lists\x27;filter "../stdlib/core/enums.scm" . 133144))
   (push)
   (ret.subr.gloc.of \x2E;tuple "../stdlib/core/enums.scm" . 132120))
 (set.gloc.of core.enums\x27;enum-set-complement)
 (close
   (2 0 . core.enums\x27;enum-set-projection)
   (push.iloc.0 . 1)
   (push.const . 1)
   (push.subr.gloc.of \x2E;tuple-ref 2 "../stdlib/core/enums.scm" . 138295)
   (push.const . 2)
   (push.subr.gloc.of \x2E;tuple-ref 2 "../stdlib/core/enums.scm" . 138295)
   (extend . 1)
   (push.const . type:enum-set)
   (push.iloc.1 . 1)
   (push.const . 1)
   (push.subr.gloc.of \x2E;tuple-ref 2 "../stdlib/core/enums.scm" . 139288)
   (call
     (push.gloc.of \x2E;values)
     (call
       (push.close
         (1 0)
         (push.iloc.0 . 0)
         (push.iloc.1 . 0)
         (subr.gloc.of \x2E;memq 2 "../stdlib/core/enums.scm" . 140349)
         (if.false.ret)
         (ret.iloc 0 . 0))
       (push.iloc.1 . 0)
       (push.const . 2)
       (push.subr.gloc.of \x2E;tuple-ref 2 "../stdlib/core/enums.scm" . 140327)
       (apply.gloc.of \x2E;map "../stdlib/core/enums.scm" . 140327))
     (push)
     (apply.gloc.of core.lists\x27;filter "../stdlib/core/enums.scm" . 140312))
   (push)
   (ret.subr.gloc.of \x2E;tuple "../stdlib/core/enums.scm" . 139288))
 (set.gloc.of core.enums\x27;enum-set-projection)
 (call
   (push.const
     (quote import . \x2E;quote)
     (... import . \x2E;...)
     (and import . \x2E;and)
     (_ import . \x2E;_)
     (syntax import . \x2E;syntax)
     (enum-set-constructor import . core.enums\x27;enum-set-constructor)
     (or import . \x2E;or)
     (make-enumeration import . core.enums\x27;make-enumeration)
     (define-syntax import . \x2E;define-syntax)
     (lambda import . \x2E;lambda)
     (for-all import . core.lists\x27;for-all)
     (begin import . \x2E;begin)
     (syntax-case import . \x2E;syntax-case)
     (syntax-violation import . \x2E;syntax-violation)
     (syntax->datum import . \x2E;syntax->datum)
     (memq import . \x2E;memq))
   (extend . 1)
   (call
     (push.const . syntax)
     (push.const . core.enums\x27;make-enum-type)
     (push.const
       ()
       #f
       ((_ universe\x60;1 members\x60;1 indexer\x60;1 constructor\x60;1)
        (tuple\x60;1
          'type:enum-type\x60;1
          universe\x60;1
          members\x60;1
          indexer\x60;1
          constructor\x60;1)
        ((constructor\x60;1 . 0) (indexer\x60;1 . 0) (members\x60;1 . 0) (universe\x60;1 . 0))
        (type:enum-type\x60;1 quote tuple\x60;1))
       ((_)
        (tuple\x60;1
          'type:enum-type\x60;1
          (unspecified\x60;1)
          (unspecified\x60;1)
          (unspecified\x60;1)
          (unspecified\x60;1))
        ()
        (unspecified\x60;1 type:enum-type\x60;1 quote tuple\x60;1)))
     (push.iloc.0 . 0)
     (apply.gloc.of \x2E;set-top-level-macro! "../stdlib/core/enums.scm" . 6145))
   (call
     (push.const . syntax)
     (push.const . core.enums\x27;enum-type?)
     (push.const
       ()
       #f
       ((_ obj\x60;1)
        (and (tuple?\x60;1 obj\x60;1)
             (eq?\x60;1 (tuple-ref\x60;1 obj\x60;1 0) 'type:enum-type\x60;1))
        ((obj\x60;1 . 0))
        (type:enum-type\x60;1 quote tuple-ref\x60;1 eq?\x60;1 tuple?\x60;1 and)))
     (push.iloc.0 . 0)
     (apply.gloc.of \x2E;set-top-level-macro! "../stdlib/core/enums.scm" . 6145))
   (call
     (push.const . syntax)
     (push.const . core.enums\x27;enum-type-universe)
     (push.const
       ()
       #f
       ((_ obj\x60;1) (tuple-ref\x60;1 obj\x60;1 1) ((obj\x60;1 . 0)) (tuple-ref\x60;1)))
     (push.iloc.0 . 0)
     (apply.gloc.of \x2E;set-top-level-macro! "../stdlib/core/enums.scm" . 6145))
   (call
     (push.const . syntax)
     (push.const . core.enums\x27;enum-type-members)
     (push.const
       ()
       #f
       ((_ obj\x60;1) (tuple-ref\x60;1 obj\x60;1 2) ((obj\x60;1 . 0)) (tuple-ref\x60;1)))
     (push.iloc.0 . 0)
     (apply.gloc.of \x2E;set-top-level-macro! "../stdlib/core/enums.scm" . 6145))
   (call
     (push.const . syntax)
     (push.const . core.enums\x27;enum-type-indexer)
     (push.const
       ()
       #f
       ((_ obj\x60;1) (tuple-ref\x60;1 obj\x60;1 3) ((obj\x60;1 . 0)) (tuple-ref\x60;1)))
     (push.iloc.0 . 0)
     (apply.gloc.of \x2E;set-top-level-macro! "../stdlib/core/enums.scm" . 6145))
   (call
     (push.const . syntax)
     (push.const . core.enums\x27;enum-type-constructor)
     (push.const
       ()
       #f
       ((_ obj\x60;1) (tuple-ref\x60;1 obj\x60;1 4) ((obj\x60;1 . 0)) (tuple-ref\x60;1)))
     (push.iloc.0 . 0)
     (apply.gloc.of \x2E;set-top-level-macro! "../stdlib/core/enums.scm" . 6145))
   (call
     (push.const . syntax)
     (push.const . core.enums\x27;enum-type-universe-set!)
     (push.const
       ()
       #f
       ((_ obj\x60;1 value\x60;1)
        (tuple-set!\x60;1 obj\x60;1 1 value\x60;1)
        ((value\x60;1 . 0) (obj\x60;1 . 0))
        (tuple-set!\x60;1)))
     (push.iloc.0 . 0)
     (apply.gloc.of \x2E;set-top-level-macro! "../stdlib/core/enums.scm" . 6145))
   (call
     (push.const . syntax)
     (push.const . core.enums\x27;enum-type-members-set!)
     (push.const
       ()
       #f
       ((_ obj\x60;1 value\x60;1)
        (tuple-set!\x60;1 obj\x60;1 2 value\x60;1)
        ((value\x60;1 . 0) (obj\x60;1 . 0))
        (tuple-set!\x60;1)))
     (push.iloc.0 . 0)
     (apply.gloc.of \x2E;set-top-level-macro! "../stdlib/core/enums.scm" . 6145))
   (call
     (push.const . syntax)
     (push.const . core.enums\x27;enum-type-indexer-set!)
     (push.const
       ()
       #f
       ((_ obj\x60;1 value\x60;1)
        (tuple-set!\x60;1 obj\x60;1 3 value\x60;1)
        ((value\x60;1 . 0) (obj\x60;1 . 0))
        (tuple-set!\x60;1)))
     (push.iloc.0 . 0)
     (apply.gloc.of \x2E;set-top-level-macro! "../stdlib/core/enums.scm" . 6145))
   (call
     (push.const . syntax)
     (push.const . core.enums\x27;enum-type-constructor-set!)
     (push.const
       ()
       #f
       ((_ obj\x60;1 value\x60;1)
        (tuple-set!\x60;1 obj\x60;1 4 value\x60;1)
        ((value\x60;1 . 0) (obj\x60;1 . 0))
        (tuple-set!\x60;1)))
     (push.iloc.0 . 0)
     (apply.gloc.of \x2E;set-top-level-macro! "../stdlib/core/enums.scm" . 6145))
   (call
     (push.const . syntax)
     (push.const . core.enums\x27;make-enum-set)
     (push.const
       ()
       #f
       ((_ type\x60;2 members\x60;2)
        (tuple\x60;2 'type:enum-set\x60;2 type\x60;2 members\x60;2)
        ((members\x60;2 . 0) (type\x60;2 . 0))
        (type:enum-set\x60;2 quote tuple\x60;2))
       ((_)
        (tuple\x60;2 'type:enum-set\x60;2 (unspecified\x60;2) (unspecified\x60;2))
        ()
        (unspecified\x60;2 type:enum-set\x60;2 quote tuple\x60;2)))
     (push.iloc.0 . 0)
     (apply.gloc.of \x2E;set-top-level-macro! "../stdlib/core/enums.scm" . 6145))
   (call
     (push.const . syntax)
     (push.const . core.enums\x27;enum-set?)
     (push.const
       ()
       #f
       ((_ obj\x60;2)
        (and (tuple?\x60;2 obj\x60;2)
             (eq?\x60;2 (tuple-ref\x60;2 obj\x60;2 0) 'type:enum-set\x60;2))
        ((obj\x60;2 . 0))
        (type:enum-set\x60;2 quote tuple-ref\x60;2 eq?\x60;2 tuple?\x60;2 and)))
     (push.iloc.0 . 0)
     (apply.gloc.of \x2E;set-top-level-macro! "../stdlib/core/enums.scm" . 6145))
   (call
     (push.const . syntax)
     (push.const . core.enums\x27;enum-set-type)
     (push.const
       ()
       #f
       ((_ obj\x60;2) (tuple-ref\x60;2 obj\x60;2 1) ((obj\x60;2 . 0)) (tuple-ref\x60;2)))
     (push.iloc.0 . 0)
     (apply.gloc.of \x2E;set-top-level-macro! "../stdlib/core/enums.scm" . 6145))
   (call
     (push.const . syntax)
     (push.const . core.enums\x27;enum-set-members)
     (push.const
       ()
       #f
       ((_ obj\x60;2) (tuple-ref\x60;2 obj\x60;2 2) ((obj\x60;2 . 0)) (tuple-ref\x60;2)))
     (push.iloc.0 . 0)
     (apply.gloc.of \x2E;set-top-level-macro! "../stdlib/core/enums.scm" . 6145))
   (call
     (push.const . syntax)
     (push.const . core.enums\x27;enum-set-type-set!)
     (push.const
       ()
       #f
       ((_ obj\x60;2 value\x60;2)
        (tuple-set!\x60;2 obj\x60;2 1 value\x60;2)
        ((value\x60;2 . 0) (obj\x60;2 . 0))
        (tuple-set!\x60;2)))
     (push.iloc.0 . 0)
     (apply.gloc.of \x2E;set-top-level-macro! "../stdlib/core/enums.scm" . 6145))
   (call
     (push.const . syntax)
     (push.const . core.enums\x27;enum-set-members-set!)
     (push.const
       ()
       #f
       ((_ obj\x60;2 value\x60;2)
        (tuple-set!\x60;2 obj\x60;2 2 value\x60;2)
        ((value\x60;2 . 0) (obj\x60;2 . 0))
        (tuple-set!\x60;2)))
     (push.iloc.0 . 0)
     (apply.gloc.of \x2E;set-top-level-macro! "../stdlib/core/enums.scm" . 6145))
   (push.const . syntax)
   (push.const . core.enums\x27;define-enumeration)
   (push.const
     ()
     ("../stdlib/core/enums.scm" . 144389)
     ((_ type-name (symbol1 ...) constructor-syntax)
      (begin
        (define-syntax type-name
          (lambda (x)
            (syntax-case x
              ()
              ((_ symbol2)
               (or (memq (syntax->datum (syntax symbol2)) '(symbol1 ...))
                   (syntax-violation 'type-name "excpectd symbols which belong to the universe" x))
               (syntax 'symbol2)))))
        (define-syntax constructor-syntax
          (lambda (x)
            (syntax-case x
              ()
              ((_ symbol3 (... ...))
               (or (for-all (lambda (e) (memq e '(symbol1 ...)))
                            (syntax->datum (syntax (symbol3 (... ...)))))
                   (syntax-violation
                     'constructor-syntax
                     "excpectd symbols which belong to the universe"
                     x))
               (syntax
                 ((enum-set-constructor (make-enumeration '(symbol1 ...)))
                  '(symbol3 (... ...)))))))))
      ((constructor-syntax . 0) (symbol1 . 1) (type-name . 0))
      (make-enumeration
        enum-set-constructor
        e
        for-all
        symbol3
        syntax-violation
        quote
        syntax
        syntax->datum
        memq
        or
        symbol2
        _
        syntax-case
        x
        lambda
        define-syntax
        begin)))
   (push.iloc.0 . 0)
   (apply.gloc.of \x2E;set-top-level-macro! "../stdlib/core/enums.scm" . 6145))
 (push.const . core.enums)
 (push.const . #f)
 (push.const
   (make-enumeration import . core.enums\x27;make-enumeration)
   (enum-set-universe import . core.enums\x27;enum-set-universe)
   (enum-set-indexer import . core.enums\x27;enum-set-indexer)
   (enum-set-constructor import . core.enums\x27;enum-set-constructor)
   (enum-set->list import . core.enums\x27;enum-set->list)
   (enum-set-member? import . core.enums\x27;enum-set-member?)
   (enum-set-subset? import . core.enums\x27;enum-set-subset?)
   (enum-set=? import . core.enums\x27;enum-set=?)
   (enum-set-union import . core.enums\x27;enum-set-union)
   (enum-set-intersection import . core.enums\x27;enum-set-intersection)
   (enum-set-difference import . core.enums\x27;enum-set-difference)
   (enum-set-complement import . core.enums\x27;enum-set-complement)
   (enum-set-projection import . core.enums\x27;enum-set-projection)
   (define-enumeration import . core.enums\x27;define-enumeration))
 (apply.gloc.of \x2E;intern-scheme-library "../stdlib/core/enums.scm" . 6145))

((close
   (1 0)
   (call
     (push.iloc.0 . 0)
     (push.const . k)
     (apply.gloc.of \x2E;syntax/i0 "../stdlib/core/io.scm" . 70666))
   (push)
   (call
     (push.const . input)
     (push.gloc.of core.io.assistants\x27;direction-codes)
     (apply.gloc.of core.io.assistants\x27;lookup "../stdlib/core/io.scm" . 70685))
   (push)
   (apply.gloc.of \x2E;datum->syntax "../stdlib/core/io.scm" . 70666))
 (set.gloc.of \x2E;fn6.1\x60;6)
 (close
   (1 0)
   (push.gloc.of \x2E;patvars)
   (push.iloc.0 . 0)
   (push.const input output)
   (push.const _ input)
   (push.const . #f)
   (push.gloc.of \x2E;fn6.1\x60;6)
   (push.subr.gloc.of \x2E;list 3 "../stdlib/core/io.scm" . 68615)
   (push.const _ output)
   (push.const . #f)
   (push.gloc.of \x2E;fn12.1\x60;12)
   (push.subr.gloc.of \x2E;list 3 "../stdlib/core/io.scm" . 68615)
   (push.const _ input output)
   (push.const . #f)
   (push.gloc.of \x2E;fn10.1\x60;10)
   (push.subr.gloc.of \x2E;list 3 "../stdlib/core/io.scm" . 68615)
   (push.const . _)
   (push.const . #f)
   (push.close
     (1 0)
     (push.const . port-direction)
     (push.const . "invalid port direction")
     (push.iloc.1 . 0)
     (apply.gloc.of \x2E;syntax-violation "../stdlib/core/io.scm" . 76810))
   (push.subr.gloc.of \x2E;list 3 "../stdlib/core/io.scm" . 68615)
   (apply.gloc.of \x2E;syntax-dispatch "../stdlib/core/io.scm" . 68615))
 (set.gloc.of \x2E;fn14.1\x60;14)
 (close
   (1 0)
   (push.gloc.of \x2E;patvars)
   (push.iloc.0 . 0)
   (push.const)
   (push.const _ type)
   (push.const . #f)
   (push.close
     (1 0)
     (call
       (push.iloc.0 . 0)
       (push.const . k)
       (apply.gloc.of \x2E;syntax/i0 "../stdlib/core/io.scm" . 58378))
     (push)
     (call
       (call
         (call
           (push.iloc.0 . 0)
           (push.const . type)
           (apply.gloc.of \x2E;syntax/i1 "../stdlib/core/io.scm" . 60455))
         (push)
         (apply.gloc.of \x2E;syntax->datum "../stdlib/core/io.scm" . 60440))
       (push)
       (push.gloc.of core.io.assistants\x27;type-codes)
       (push.subr.gloc.of \x2E;assq 2 "../stdlib/core/io.scm" . 60434)
       (extend . 1)
       (iloc.0 . 0)
       (if.true (push.iloc.0 . 0) (ret.subr.gloc.of \x2E;cdr "../stdlib/core/io.scm" . 60427))
       (push.const . port-type)
       (push.const . "invalid port type")
       (push.iloc 2 . 0)
       (apply.gloc.of \x2E;syntax-violation "../stdlib/core/io.scm" . 62482))
     (push)
     (apply.gloc.of \x2E;datum->syntax "../stdlib/core/io.scm" . 58378))
   (push.subr.gloc.of \x2E;list 3 "../stdlib/core/io.scm" . 55301)
   (push.const . _)
   (push.const . #f)
   (push.close
     (1 0)
     (push.const . port-type)
     (push.const . "invalid port type")
     (push.iloc.1 . 0)
     (apply.gloc.of \x2E;syntax-violation "../stdlib/core/io.scm" . 64522))
   (push.subr.gloc.of \x2E;list 3 "../stdlib/core/io.scm" . 56327)
   (apply.gloc.of \x2E;syntax-dispatch "../stdlib/core/io.scm" . 55301))
 (set.gloc.of \x2E;fn4.1\x60;4)
 (close
   (1 0)
   (call
     (push.iloc.0 . 0)
     (push.const . k)
     (apply.gloc.of \x2E;syntax/i0 "../stdlib/core/io.scm" . 72714))
   (push)
   (call
     (push.const . output)
     (push.gloc.of core.io.assistants\x27;direction-codes)
     (apply.gloc.of core.io.assistants\x27;lookup "../stdlib/core/io.scm" . 72733))
   (push)
   (apply.gloc.of \x2E;datum->syntax "../stdlib/core/io.scm" . 72714))
 (set.gloc.of \x2E;fn12.1\x60;12)
 (close
   (1 0)
   (call
     (push.iloc.0 . 0)
     (push.const . k)
     (apply.gloc.of \x2E;syntax/i0 "../stdlib/core/io.scm" . 74762))
   (push)
   (call
     (push.const . input/output)
     (push.gloc.of core.io.assistants\x27;direction-codes)
     (apply.gloc.of core.io.assistants\x27;lookup "../stdlib/core/io.scm" . 74781))
   (push)
   (apply.gloc.of \x2E;datum->syntax "../stdlib/core/io.scm" . 74762))
 (set.gloc.of \x2E;fn10.1\x60;10)
 (close
   (1 0)
   (push.cdr.iloc (0 . 0) "../stdlib/core/io.scm" . 44085)
   (car.iloc (0 . 0) "../stdlib/core/io.scm" . 44093)
   (ret.cons "../stdlib/core/io.scm" . 44079))
 (set.gloc.of \x2E;fn9.1\x60;9)
 (call
   (push.const core enums)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core/io.scm" . 6145))
 (call
   (push.const core primitives)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core/io.scm" . 6145))
 (const (input . 1) (output . 2) (input/output . 3))
 (set.gloc.of core.io.assistants\x27;direction-codes)
 (const (file . 1) (bytevector . 2) (custom . 3))
 (set.gloc.of core.io.assistants\x27;type-codes)
 (const (no-create . 1) (no-fail . 2) (no-truncate . 4))
 (set.gloc.of core.io.assistants\x27;file-option-codes)
 (const (none . 1) (line . 2) (block . 3))
 (set.gloc.of core.io.assistants\x27;buffer-mode-codes)
 (const (latin-1 . 1) (utf-8 . 2) (utf-16 . 3))
 (set.gloc.of core.io.assistants\x27;codec-codes)
 (const (none . 1) (lf . 2) (cr . 3) (crlf . 4) (nel . 5) (crnel . 6) (ls . 7))
 (set.gloc.of core.io.assistants\x27;eol-style-codes)
 (const (ignore . 1) (raise . 2) (replace . 3))
 (set.gloc.of core.io.assistants\x27;error-handling-mode-codes)
 (close
   (1 0 . core.io.assistants\x27;flip)
   (push.gloc.of \x2E;fn9.1\x60;9)
   (push.iloc.0 . 0)
   (apply.gloc.of \x2E;map "../stdlib/core/io.scm" . 44062))
 (set.gloc.of core.io.assistants\x27;flip)
 (call
   (push.gloc.of core.io.assistants\x27;codec-codes)
   (apply.gloc.of core.io.assistants\x27;flip "../stdlib/core/io.scm" . 46111))
 (set.gloc.of core.io.assistants\x27;flipped-codec-codes)
 (call
   (push.gloc.of core.io.assistants\x27;eol-style-codes)
   (apply.gloc.of core.io.assistants\x27;flip "../stdlib/core/io.scm" . 48163))
 (set.gloc.of core.io.assistants\x27;flipped-eol-style-codes)
 (call
   (push.gloc.of core.io.assistants\x27;error-handling-mode-codes)
   (apply.gloc.of core.io.assistants\x27;flip "../stdlib/core/io.scm" . 50221))
 (set.gloc.of core.io.assistants\x27;flipped-error-handling-mode-codes)
 (close
   (2 0 . core.io.assistants\x27;lookup)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.subr.gloc.of \x2E;assq 2 "../stdlib/core/io.scm" . 52269)
   (extend . 1)
   (iloc.0 . 0)
   (if.true (push.iloc.0 . 0) (ret.subr.gloc.of \x2E;cdr "../stdlib/core/io.scm" . 52262))
   (ret.const . #f))
 (set.gloc.of core.io.assistants\x27;lookup)
 (close
   (1 0 . core.io.assistants\x27;port-lookup-file-option-code)
   (push.iloc.0 . 0)
   (push.gloc.of core.io.assistants\x27;file-option-codes)
   (apply.gloc.of core.io.assistants\x27;lookup "../stdlib/core/io.scm" . 78902))
 (set.gloc.of core.io.assistants\x27;port-lookup-file-option-code)
 (close
   (1 0 . core.io.assistants\x27;port-lookup-buffer-mode-code)
   (push.iloc.0 . 0)
   (push.gloc.of core.io.assistants\x27;buffer-mode-codes)
   (apply.gloc.of core.io.assistants\x27;lookup "../stdlib/core/io.scm" . 79926))
 (set.gloc.of core.io.assistants\x27;port-lookup-buffer-mode-code)
 (close
   (1 0 . core.io.assistants\x27;port-lookup-codec-code)
   (push.iloc.0 . 0)
   (push.gloc.of core.io.assistants\x27;codec-codes)
   (apply.gloc.of core.io.assistants\x27;lookup "../stdlib/core/io.scm" . 80944))
 (set.gloc.of core.io.assistants\x27;port-lookup-codec-code)
 (close
   (1 0 . core.io.assistants\x27;port-lookup-eol-style-code)
   (push.iloc.0 . 0)
   (push.gloc.of core.io.assistants\x27;eol-style-codes)
   (apply.gloc.of core.io.assistants\x27;lookup "../stdlib/core/io.scm" . 81972))
 (set.gloc.of core.io.assistants\x27;port-lookup-eol-style-code)
 (close
   (1 0 . core.io.assistants\x27;port-lookup-error-handling-mode-code)
   (push.iloc.0 . 0)
   (push.gloc.of core.io.assistants\x27;error-handling-mode-codes)
   (apply.gloc.of core.io.assistants\x27;lookup "../stdlib/core/io.scm" . 83006))
 (set.gloc.of core.io.assistants\x27;port-lookup-error-handling-mode-code)
 (close
   (1 0 . core.io.assistants\x27;port-reverse-lookup-codec-code)
   (push.iloc.0 . 0)
   (push.gloc.of core.io.assistants\x27;flipped-codec-codes)
   (apply.gloc.of core.io.assistants\x27;lookup "../stdlib/core/io.scm" . 84024))
 (set.gloc.of core.io.assistants\x27;port-reverse-lookup-codec-code)
 (close
   (1 0 . core.io.assistants\x27;port-reverse-lookup-eol-style-code)
   (push.iloc.0 . 0)
   (push.gloc.of core.io.assistants\x27;flipped-eol-style-codes)
   (apply.gloc.of core.io.assistants\x27;lookup "../stdlib/core/io.scm" . 85052))
 (set.gloc.of core.io.assistants\x27;port-reverse-lookup-eol-style-code)
 (close
   (1 0 . core.io.assistants\x27;port-reverse-lookup-error-handling-mode-code)
   (push.iloc.0 . 0)
   (push.gloc.of core.io.assistants\x27;flipped-error-handling-mode-codes)
   (apply.gloc.of core.io.assistants\x27;lookup "../stdlib/core/io.scm" . 86086))
 (set.gloc.of core.io.assistants\x27;port-reverse-lookup-error-handling-mode-code)
 (call
   (call
     (call
       (push.gloc.of \x2E;car)
       (push.gloc.of core.io.assistants\x27;file-option-codes)
       (apply.gloc.of \x2E;map "../stdlib/core/io.scm" . 88133))
     (push)
     (apply.gloc.of core.enums\x27;make-enumeration "../stdlib/core/io.scm" . 88115))
   (push)
   (apply.gloc.of core.enums\x27;enum-set-constructor "../stdlib/core/io.scm" . 88093))
 (set.gloc.of core.io.assistants\x27;make-file-options)
 (call
   (push.const
     (_ import . \x2E;_)
     (begin import . \x2E;begin)
     (let import . \x2E;let)
     (quote import . \x2E;quote)
     (port-type import . core.io.assistants\x27;port-type)
     (if import . \x2E;if)
     (port-direction import . core.io.assistants\x27;port-direction)
     (lambda import . \x2E;lambda))
   (extend . 1)
   (call
     (push.const . syntax)
     (push.const . core.io.assistants\x27;port-type)
     (call
       (push.gloc.of \x2E;fn4.1\x60;4)
       (apply.gloc.of \x2E;transformer-thunk "../stdlib/core/io.scm" . 6145))
     (push)
     (push.iloc.0 . 0)
     (apply.gloc.of \x2E;set-top-level-macro! "../stdlib/core/io.scm" . 6145))
   (push.const . syntax)
   (push.const . core.io.assistants\x27;port-direction)
   (call
     (push.gloc.of \x2E;fn14.1\x60;14)
     (apply.gloc.of \x2E;transformer-thunk "../stdlib/core/io.scm" . 6145))
   (push)
   (push.iloc.0 . 0)
   (apply.gloc.of \x2E;set-top-level-macro! "../stdlib/core/io.scm" . 6145))
 (push.const . core.io.assistants)
 (push.const . #f)
 (push.const
   (port-type import . core.io.assistants\x27;port-type)
   (port-direction import . core.io.assistants\x27;port-direction)
   (port-lookup-file-option-code import . core.io.assistants\x27;port-lookup-file-option-code)
   (port-lookup-buffer-mode-code import . core.io.assistants\x27;port-lookup-buffer-mode-code)
   (port-lookup-codec-code import . core.io.assistants\x27;port-lookup-codec-code)
   (port-lookup-eol-style-code import . core.io.assistants\x27;port-lookup-eol-style-code)
   (port-lookup-error-handling-mode-code
     import
     .
     core.io.assistants\x27;port-lookup-error-handling-mode-code)
   (port-reverse-lookup-codec-code import . core.io.assistants\x27;port-reverse-lookup-codec-code)
   (port-reverse-lookup-eol-style-code
     import
     .
     core.io.assistants\x27;port-reverse-lookup-eol-style-code)
   (port-reverse-lookup-error-handling-mode-code
     import
     .
     core.io.assistants\x27;port-reverse-lookup-error-handling-mode-code)
   (make-file-options import . core.io.assistants\x27;make-file-options))
 (apply.gloc.of \x2E;intern-scheme-library "../stdlib/core/io.scm" . 6145))
((close
   (1 0)
   (push.iloc.0 . 0)
   (push.const quote mode)
   (push.const (mode . 0))
   (apply.gloc.of \x2E;syntax/c1 "../stdlib/core/io.scm" . 248842))
 (set.gloc.of \x2E;fn35.1\x60;35)
 (close (0 0) (apply.gloc.of core.io\x27;open-string-output-port "../stdlib/core/io.scm" . 506918))
 (set.gloc.of \x2E;fn52.1\x60;52)
 (close (0 0) (ret.const . #f))
 (set.gloc.of \x2E;fn6.1\x60;6)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (push.const quote mode)
   (push.const (mode . 0))
   (apply.gloc.of \x2E;syntax/c1 "../stdlib/core/io.scm" . 283658))
 (set.gloc.of \x2E;fn15.1\x60;15)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (push.const quote style)
   (push.const (style . 0))
   (apply.gloc.of \x2E;syntax/c1 "../stdlib/core/io.scm" . 273418))
 (set.gloc.of \x2E;fn5.1\x60;5)
 (close
   (1 0)
   (push.gloc.of \x2E;patvars)
   (push.iloc.0 . 0)
   (push.const)
   (push.const _ style)
   (push.close
     (1 0)
     (call
       (call
         (call
           (push.iloc.0 . 0)
           (push.const . style)
           (apply.gloc.of \x2E;syntax/i1 "../stdlib/core/io.scm" . 271417))
         (push)
         (apply.gloc.of \x2E;syntax->datum "../stdlib/core/io.scm" . 271402))
       (push)
       (apply.gloc.of
         core.io.assistants\x27;port-lookup-eol-style-code
         "../stdlib/core/io.scm"
         .
         271374))
     (if.true.ret)
     (push.const . eol-style)
     (push.const . "invalid eol style")
     (push.iloc.1 . 0)
     (apply.gloc.of \x2E;syntax-violation "../stdlib/core/io.scm" . 272398))
   (push.gloc.of \x2E;fn5.1\x60;5)
   (push.subr.gloc.of \x2E;list 3 "../stdlib/core/io.scm" . 269319)
   (push.const . _)
   (push.const . #f)
   (push.close
     (1 0)
     (push.const . eol-style)
     (push.const . "invalid eol style")
     (push.iloc.1 . 0)
     (apply.gloc.of \x2E;syntax-violation "../stdlib/core/io.scm" . 275466))
   (push.subr.gloc.of \x2E;list 3 "../stdlib/core/io.scm" . 269319)
   (apply.gloc.of \x2E;syntax-dispatch "../stdlib/core/io.scm" . 269319))
 (set.gloc.of \x2E;fn56.1\x60;56)
 (close
   (1 0)
   (push.gloc.of \x2E;patvars)
   (push.iloc.0 . 0)
   (push.const)
   (push.const _ mode)
   (push.close
     (1 0)
     (call
       (call
         (call
           (push.iloc.0 . 0)
           (push.const . mode)
           (apply.gloc.of \x2E;syntax/i1 "../stdlib/core/io.scm" . 246843))
         (push)
         (apply.gloc.of \x2E;syntax->datum "../stdlib/core/io.scm" . 246828))
       (push)
       (apply.gloc.of
         core.io.assistants\x27;port-lookup-buffer-mode-code
         "../stdlib/core/io.scm"
         .
         246798))
     (if.true.ret)
     (push.const . buffer-mode)
     (push.const . "invalid buffer mode")
     (push.iloc.1 . 0)
     (apply.gloc.of \x2E;syntax-violation "../stdlib/core/io.scm" . 247822))
   (push.gloc.of \x2E;fn35.1\x60;35)
   (push.subr.gloc.of \x2E;list 3 "../stdlib/core/io.scm" . 244743)
   (push.const . _)
   (push.const . #f)
   (push.close
     (1 0)
     (push.const . buffer-mode)
     (push.const . "invalid buffer mode")
     (push.iloc.1 . 0)
     (apply.gloc.of \x2E;syntax-violation "../stdlib/core/io.scm" . 250890))
   (push.subr.gloc.of \x2E;list 3 "../stdlib/core/io.scm" . 244743)
   (apply.gloc.of \x2E;syntax-dispatch "../stdlib/core/io.scm" . 244743))
 (set.gloc.of \x2E;fn36.1\x60;36)
 (close
   (2 0)
   (push.iloc.0 . 0)
   (call
     (iloc.0 . 1)
     (if.false.ret)
     (push.iloc.0 . 1)
     (apply.gloc.of core.io\x27;transcoder-descriptor "../stdlib/core/io.scm" . 701496))
   (push)
   (ret.subr.gloc.of \x2E;make-temporary-file-port "../stdlib/core/io.scm" . 701449))
 (set.gloc.of \x2E;fn13.1\x60;13)
 (close (0 0) (apply.gloc.of core.io\x27;open-string-output-port "../stdlib/core/io.scm" . 324643))
 (set.gloc.of \x2E;fn8.1\x60;8)
 (close (0 0) (ret.const . #f))
 (set.gloc.of \x2E;fn43.1\x60;43)
 (close
   (1 0)
   (push.gloc.of \x2E;patvars)
   (push.iloc.0 . 0)
   (push.const)
   (push.const _ mode)
   (push.close
     (1 0)
     (call
       (call
         (call
           (push.iloc.0 . 0)
           (push.const . mode)
           (apply.gloc.of \x2E;syntax/i1 "../stdlib/core/io.scm" . 281667))
         (push)
         (apply.gloc.of \x2E;syntax->datum "../stdlib/core/io.scm" . 281652))
       (push)
       (apply.gloc.of
         core.io.assistants\x27;port-lookup-error-handling-mode-code
         "../stdlib/core/io.scm"
         .
         281614))
     (if.true.ret)
     (push.const . error-handling-mode)
     (push.const . "invalid directive")
     (push.iloc.1 . 0)
     (apply.gloc.of \x2E;syntax-violation "../stdlib/core/io.scm" . 282638))
   (push.gloc.of \x2E;fn15.1\x60;15)
   (push.subr.gloc.of \x2E;list 3 "../stdlib/core/io.scm" . 279559)
   (push.const . _)
   (push.const . #f)
   (push.close
     (1 0)
     (push.const . error-handling-mode)
     (push.const . "invalid directive")
     (push.iloc.1 . 0)
     (apply.gloc.of \x2E;syntax-violation "../stdlib/core/io.scm" . 285706))
   (push.subr.gloc.of \x2E;list 3 "../stdlib/core/io.scm" . 279559)
   (apply.gloc.of \x2E;syntax-dispatch "../stdlib/core/io.scm" . 279559))
 (set.gloc.of \x2E;fn16.1\x60;16)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (apply.gloc.of
     core.io.assistants\x27;port-lookup-file-option-code
     "../stdlib/core/io.scm"
     .
     238625))
 (set.gloc.of \x2E;fn47.1\x60;47)
 (close
   (1 0)
   (push.gloc.of \x2E;patvars)
   (push.iloc.0 . 0)
   (push.const)
   (push.const _ options ...)
   (push.const . #f)
   (push.close
     (1 0)
     (call
       (call
         (push.iloc.0 . 0)
         (push.const options ...)
         (push.const (options . 1))
         (apply.gloc.of \x2E;syntax/c1 "../stdlib/core/io.scm" . 229412))
       (push)
       (apply.gloc.of \x2E;syntax->datum "../stdlib/core/io.scm" . 229397))
     (push)
     (extend . 1)
     (call
       (call
         (call
           (push.iloc.0 . 0)
           (apply.gloc.of core.lists\x27;list-of-unique-symbols? "../stdlib/core/io.scm" . 230421))
         (if.false.ret)
         (push.gloc.of core.io.assistants\x27;port-lookup-file-option-code)
         (push.iloc.0 . 0)
         (apply.gloc.of core.lists\x27;for-all "../stdlib/core/io.scm" . 230451))
       (if.true.ret)
       (push.const . file-options)
       (push.const . "invalid option")
       (push.iloc 2 . 0)
       (apply.gloc.of \x2E;syntax-violation "../stdlib/core/io.scm" . 231440))
     (push.iloc.1 . 0)
     (push.const make-file-options '(options ...))
     (push.const (options . 1))
     (apply.gloc.of \x2E;syntax/c1 "../stdlib/core/io.scm" . 232460))
   (push.subr.gloc.of \x2E;list 3 "../stdlib/core/io.scm" . 227335)
   (push.const . _)
   (push.const . #f)
   (push.close
     (1 0)
     (push.const . file-options)
     (push.const . "invalid syntax")
     (push.iloc.1 . 0)
     (apply.gloc.of \x2E;syntax-violation "../stdlib/core/io.scm" . 234506))
   (push.subr.gloc.of \x2E;list 3 "../stdlib/core/io.scm" . 227335)
   (apply.gloc.of \x2E;syntax-dispatch "../stdlib/core/io.scm" . 227335))
 (set.gloc.of \x2E;fn49.1\x60;49)
 (call
   (push.const core enums)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core/io.scm" . 92161))
 (call
   (push.const core chkarg)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core/io.scm" . 92161))
 (call
   (push.const core optargs)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core/io.scm" . 92161))
 (call
   (push.const core bytevectors)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core/io.scm" . 92161))
 (call
   (push.const core conditions)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core/io.scm" . 92161))
 (call
   (push.const core lists)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core/io.scm" . 92161))
 (call
   (push.const core syntax-case)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core/io.scm" . 92161))
 (call
   (push.const core primitives)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core/io.scm" . 92161))
 (call
   (push.const core io assistants)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core/io.scm" . 92161))
 (close
   (1 0 . core.io\x27;file-options->bits)
   (push.gloc.of \x2E;+)
   (call
     (push.gloc.of \x2E;fn47.1\x60;47)
     (call
       (push.iloc.0 . 0)
       (apply.gloc.of core.enums\x27;enum-set->list "../stdlib/core/io.scm" . 238659))
     (push)
     (apply.gloc.of \x2E;map "../stdlib/core/io.scm" . 238608))
   (push)
   (apply.gloc.of \x2E;apply "../stdlib/core/io.scm" . 238599))
 (set.gloc.of core.io\x27;file-options->bits)
 (close
   (1 0 . core.io\x27;buffer-mode?)
   (call
     (push.iloc.0 . 0)
     (apply.gloc.of
       core.io.assistants\x27;port-lookup-buffer-mode-code
       "../stdlib/core/io.scm"
       .
       254988))
   (if.false.ret)
   (ret.const . #t))
 (set.gloc.of core.io\x27;buffer-mode?)
 (push.const . type:codec)
 (push.const . utf-8)
 (subr.gloc.of \x2E;tuple 2 "../stdlib/core/io.scm" . 259106)
 (set.gloc.of core.io\x27;predefined-utf-8-codec)
 (push.const . type:codec)
 (push.const . utf-16)
 (subr.gloc.of \x2E;tuple 2 "../stdlib/core/io.scm" . 260131)
 (set.gloc.of core.io\x27;predefined-utf-16-codec)
 (push.const . type:codec)
 (push.const . latin-1)
 (subr.gloc.of \x2E;tuple 2 "../stdlib/core/io.scm" . 261156)
 (set.gloc.of core.io\x27;predefined-latin-1-codec)
 (close (0 0 . core.io\x27;utf-8-codec) (ret.gloc.of core.io\x27;predefined-utf-8-codec))
 (set.gloc.of core.io\x27;utf-8-codec)
 (close (0 0 . core.io\x27;utf-16-codec) (ret.gloc.of core.io\x27;predefined-utf-16-codec))
 (set.gloc.of core.io\x27;utf-16-codec)
 (close (0 0 . core.io\x27;latin-1-codec) (ret.gloc.of core.io\x27;predefined-latin-1-codec))
 (set.gloc.of core.io\x27;latin-1-codec)
 (close
   (1 1 . core.io\x27;make-transcoder)
   (push.close
     (2 0)
     (push.const . 3)
     (push.subr.gloc.of \x2E;make-bytevector 1 "../stdlib/core/io.scm" . 290835)
     (extend . 1)
     (push.iloc.0 . 0)
     (push.const . 0)
     (call
       (push.iloc 2 . 0)
       (push.const . 1)
       (push.subr.gloc.of \x2E;tuple-ref 2 "../stdlib/core/io.scm" . 291900)
       (apply.gloc.of
         core.io.assistants\x27;port-lookup-codec-code
         "../stdlib/core/io.scm"
         .
         291876))
     (push)
     (subr.gloc.of \x2E;bytevector-u8-set! 3 "../stdlib/core/io.scm" . 291851)
     (push.iloc.0 . 0)
     (push.const . 1)
     (call
       (push.iloc.1 . 0)
       (apply.gloc.of
         core.io.assistants\x27;port-lookup-eol-style-code
         "../stdlib/core/io.scm"
         .
         292900))
     (push)
     (subr.gloc.of \x2E;bytevector-u8-set! 3 "../stdlib/core/io.scm" . 292875)
     (push.iloc.0 . 0)
     (push.const . 2)
     (call
       (push.iloc.1 . 1)
       (apply.gloc.of
         core.io.assistants\x27;port-lookup-error-handling-mode-code
         "../stdlib/core/io.scm"
         .
         293924))
     (push)
     (subr.gloc.of \x2E;bytevector-u8-set! 3 "../stdlib/core/io.scm" . 293899)
     (push.const . type:transcoder)
     (push.iloc.0 . 0)
     (ret.subr.gloc.of \x2E;tuple "../stdlib/core/io.scm" . 294923))
   (call
     (push.iloc.0 . 1)
     (push.subr.gloc.of \x2E;length 1 "../stdlib/core/io.scm" . 289834)
     (extend . 1)
     (=n.iloc (0 . 0) 2 "../stdlib/core/io.scm" . 289854)
     (if.true (ret.iloc 1 . 1))
     (=n.iloc (0 . 0) 1 "../stdlib/core/io.scm" . 289834)
     (if.true
       (push.iloc.1 . 1)
       (push.const . replace)
       (push.subr.gloc.of \x2E;list 1 "../stdlib/core/io.scm" . 289834)
       (ret.subr.gloc.of \x2E;append "../stdlib/core/io.scm" . 289834))
     (call (apply.gloc.of core.io\x27;native-eol-style "../stdlib/core/io.scm" . 289834))
     (push)
     (push.const . replace)
     (ret.subr.gloc.of \x2E;list "../stdlib/core/io.scm" . 289834))
   (push)
   (apply.gloc.of \x2E;apply "../stdlib/core/io.scm" . 92161))
 (set.gloc.of core.io\x27;make-transcoder)
 (close
   (1 0 . core.io\x27;transcoder-descriptor)
   (push.iloc.0 . 0)
   (push.const . 1)
   (ret.subr.gloc.of \x2E;tuple-ref "../stdlib/core/io.scm" . 299015))
 (set.gloc.of core.io\x27;transcoder-descriptor)
 (close
   (1 0 . core.io\x27;transcoder-codec)
   (call
     (call
       (push.iloc.0 . 0)
       (apply.gloc.of core.io\x27;transcoder-descriptor "../stdlib/core/io.scm" . 303168))
     (push)
     (push.const . 0)
     (push.subr.gloc.of \x2E;bytevector-u8-ref 2 "../stdlib/core/io.scm" . 303149)
     (apply.gloc.of
       core.io.assistants\x27;port-reverse-lookup-codec-code
       "../stdlib/core/io.scm"
       .
       303117))
   (push)
   (extend . 1)
   (push.iloc.0 . 0)
   (const . latin-1)
   (if.eq? (apply.gloc.of core.io\x27;latin-1-codec "../stdlib/core/io.scm" . 304148))
   (push.iloc.0 . 0)
   (const . utf-8)
   (if.eq? (apply.gloc.of core.io\x27;utf-8-codec "../stdlib/core/io.scm" . 305170))
   (push.iloc.0 . 0)
   (const . utf-16)
   (if.eq? (apply.gloc.of core.io\x27;utf-16-codec "../stdlib/core/io.scm" . 306195))
   (ret.const.unspec))
 (set.gloc.of core.io\x27;transcoder-codec)
 (close
   (1 0 . core.io\x27;transcoder-eol-style)
   (call
     (push.iloc.0 . 0)
     (apply.gloc.of core.io\x27;transcoder-descriptor "../stdlib/core/io.scm" . 310334))
   (push)
   (push.const . 1)
   (push.subr.gloc.of \x2E;bytevector-u8-ref 2 "../stdlib/core/io.scm" . 310315)
   (apply.gloc.of
     core.io.assistants\x27;port-reverse-lookup-eol-style-code
     "../stdlib/core/io.scm"
     .
     310279))
 (set.gloc.of core.io\x27;transcoder-eol-style)
 (close
   (1 0 . core.io\x27;transcoder-error-handling-mode)
   (call
     (push.iloc.0 . 0)
     (apply.gloc.of core.io\x27;transcoder-descriptor "../stdlib/core/io.scm" . 314440))
   (push)
   (push.const . 2)
   (push.subr.gloc.of \x2E;bytevector-u8-ref 2 "../stdlib/core/io.scm" . 314421)
   (apply.gloc.of
     core.io.assistants\x27;port-reverse-lookup-error-handling-mode-code
     "../stdlib/core/io.scm"
     .
     314375))
 (set.gloc.of core.io\x27;transcoder-error-handling-mode)
 (call
   (push.const . type:transcoder)
   (subr.gloc.of \x2E;native-transcoder-descriptor 0)
   (push)
   (push.subr.gloc.of \x2E;tuple 2 "../stdlib/core/io.scm" . 317463)
   (extend . 1)
   (ret.close (0 0) (ret.iloc 1 . 0)))
 (set.gloc.of core.io\x27;native-transcoder)
 (close
   (0 0 . core.io\x27;native-eol-style)
   (call (apply.gloc.of core.io\x27;native-transcoder "../stdlib/core/io.scm" . 320573))
   (push)
   (apply.gloc.of core.io\x27;transcoder-eol-style "../stdlib/core/io.scm" . 320551))
 (set.gloc.of core.io\x27;native-eol-style)
 (close
   (2 0 . core.io\x27;bytevector->string)
   (push.gloc.of \x2E;fn8.1\x60;8)
   (push.close
     (2 0)
     (call
       (push.iloc.1 . 0)
       (push.iloc.1 . 1)
       (apply.gloc.of core.io\x27;open-bytevector-input-port "../stdlib/core/io.scm" . 326668))
     (push)
     (push.close
       (1 0)
       (extend.enclose+
         (1 0 . loop)
         (push.iloc.0 . 0)
         (subr.gloc.of \x2E;eof-object? 1 "../stdlib/core/io.scm" . 329751)
         (if.true (apply.iloc (3 . 1) "../stdlib/core/io.scm" . 329767))
         (push.iloc 3 . 0)
         (push.iloc.0 . 0)
         (subr.gloc.of \x2E;put-char 2 "../stdlib/core/io.scm" . 331799)
         (push.iloc 2 . 0)
         (push.subr.gloc.of \x2E;get-char 1 "../stdlib/core/io.scm" . 332829)
         (apply.iloc+ (1 . 0) "../stdlib/core/io.scm" . 332823))
       (push.iloc.1 . 0)
       (push.subr.gloc.of \x2E;get-char 1 "../stdlib/core/io.scm" . 328732)
       (apply.iloc+ (0 . 0) "../stdlib/core/io.scm" . 328718))
     (apply.gloc.of \x2E;call-with-port "../stdlib/core/io.scm" . 324615))
   (apply.gloc.of \x2E;call-with-values "../stdlib/core/io.scm" . 92161))
 (set.gloc.of core.io\x27;bytevector->string)
 (close
   (2 0 . core.io\x27;string->bytevector)
   (push.close
     (0 0)
     (push.iloc.1 . 1)
     (apply.gloc.of core.io\x27;open-bytevector-output-port "../stdlib/core/io.scm" . 349219))
   (push.close
     (2 0)
     (push.iloc.1 . 0)
     (push.subr.gloc.of \x2E;make-string-input-port 1 "../stdlib/core/io.scm" . 351242)
     (push.close
       (1 0)
       (extend.enclose+
         (1 0 . loop)
         (push.iloc.0 . 0)
         (subr.gloc.of \x2E;eof-object? 1 "../stdlib/core/io.scm" . 354325)
         (if.true (apply.iloc (3 . 1) "../stdlib/core/io.scm" . 354341))
         (push.iloc 3 . 0)
         (push.iloc.0 . 0)
         (subr.gloc.of \x2E;put-char 2 "../stdlib/core/io.scm" . 356373)
         (push.iloc 2 . 0)
         (push.subr.gloc.of \x2E;get-char 1 "../stdlib/core/io.scm" . 357403)
         (apply.iloc+ (1 . 0) "../stdlib/core/io.scm" . 357397))
       (push.iloc.1 . 0)
       (push.subr.gloc.of \x2E;get-char 1 "../stdlib/core/io.scm" . 353306)
       (apply.iloc+ (0 . 0) "../stdlib/core/io.scm" . 353292))
     (apply.gloc.of \x2E;call-with-port "../stdlib/core/io.scm" . 349191))
   (apply.gloc.of \x2E;call-with-values "../stdlib/core/io.scm" . 92161))
 (set.gloc.of core.io\x27;string->bytevector)
 (close
   (1 0 . core.io\x27;port-transcoder)
   (push.iloc.0 . 0)
   (push.subr.gloc.of \x2E;port-transcoder-descriptor 1 "../stdlib/core/io.scm" . 363539)
   (extend . 1)
   (iloc.0 . 0)
   (if.false.ret)
   (push.iloc.0 . 0)
   (const . #t)
   (if.eq? (apply.gloc.of core.io\x27;native-transcoder "../stdlib/core/io.scm" . 366610))
   (push.const . type:transcoder)
   (push.iloc.0 . 0)
   (ret.subr.gloc.of \x2E;tuple "../stdlib/core/io.scm" . 367634))
 (set.gloc.of core.io\x27;port-transcoder)
 (close
   (1 0 . core.io\x27;textual-port?)
   (push.iloc.0 . 0)
   (subr.gloc.of \x2E;port-transcoder-descriptor 1 "../stdlib/core/io.scm" . 371724)
   (if.false.ret)
   (ret.const . #t))
 (set.gloc.of core.io\x27;textual-port?)
 (close
   (1 0 . core.io\x27;binary-port?)
   (push.iloc.0 . 0)
   (push.subr.gloc.of \x2E;port-transcoder-descriptor 1 "../stdlib/core/io.scm" . 375820)
   (ret.subr.gloc.of \x2E;not "../stdlib/core/io.scm" . 375815))
 (set.gloc.of core.io\x27;binary-port?)
 (close
   (2 0 . core.io\x27;transcoded-port)
   (push.iloc.0 . 0)
   (call
     (push.iloc.0 . 1)
     (apply.gloc.of core.io\x27;transcoder-descriptor "../stdlib/core/io.scm" . 379938))
   (push)
   (ret.subr.gloc.of \x2E;make-transcoded-port "../stdlib/core/io.scm" . 379911))
 (set.gloc.of core.io\x27;transcoded-port)
 (close
   (1 1 . core.io\x27;open-file-input-port)
   (push.close
     (3 0)
     (push.const . 1)
     (push.const . 1)
     (push.iloc.1 . 0)
     (call
       (push.iloc.0 . 0)
       (apply.gloc.of core.io\x27;file-options->bits "../stdlib/core/io.scm" . 393236))
     (push)
     (call
       (push.iloc.0 . 1)
       (apply.gloc.of
         core.io.assistants\x27;port-lookup-buffer-mode-code
         "../stdlib/core/io.scm"
         .
         394260))
     (push)
     (call
       (iloc.0 . 2)
       (if.false.ret)
       (push.iloc.0 . 2)
       (apply.gloc.of core.io\x27;transcoder-descriptor "../stdlib/core/io.scm" . 395300))
     (push)
     (ret.subr.gloc.of \x2E;open-port "../stdlib/core/io.scm" . 390153))
   (call
     (push.iloc.0 . 1)
     (push.subr.gloc.of \x2E;length 1 "../stdlib/core/io.scm" . 387098)
     (extend . 1)
     (=n.iloc (0 . 0) 3 "../stdlib/core/io.scm" . 387098)
     (if.true (ret.iloc 1 . 1))
     (=n.iloc (0 . 0) 2 "../stdlib/core/io.scm" . 388108)
     (if.true
       (push.iloc.1 . 1)
       (push.const . #f)
       (push.subr.gloc.of \x2E;list 1 "../stdlib/core/io.scm" . 387098)
       (ret.subr.gloc.of \x2E;append "../stdlib/core/io.scm" . 387098))
     (=n.iloc (0 . 0) 1 "../stdlib/core/io.scm" . 387098)
     (if.true
       (push.iloc.1 . 1)
       (push.const . block)
       (push.const . #f)
       (push.subr.gloc.of \x2E;list 2 "../stdlib/core/io.scm" . 387098)
       (ret.subr.gloc.of \x2E;append "../stdlib/core/io.scm" . 387098))
     (call
       (push.const)
       (apply.gloc.of core.io.assistants\x27;make-file-options "../stdlib/core/io.scm" . 387098))
     (push)
     (push.const . block)
     (push.const . #f)
     (ret.subr.gloc.of \x2E;list "../stdlib/core/io.scm" . 387098))
   (push)
   (apply.gloc.of \x2E;apply "../stdlib/core/io.scm" . 92161))
 (set.gloc.of core.io\x27;open-file-input-port)
 (close
   (1 1 . core.io\x27;open-bytevector-input-port)
   (call
     (iloc.0 . 1)
     (if.pair? (push.iloc.0 . 1) (ret.subr.gloc.of \x2E;car "../stdlib/core/io.scm" . 400393))
     (ret.const . #f))
   (push)
   (extend . 1)
   (push.const . 2)
   (push.const . 1)
   (push.const . bytevector)
   (push.iloc.1 . 0)
   (push.const . #f)
   (call
     (iloc.0 . 0)
     (if.false.ret)
     (push.iloc.0 . 0)
     (apply.gloc.of core.io\x27;transcoder-descriptor "../stdlib/core/io.scm" . 405540))
   (push)
   (ret.subr.gloc.of \x2E;open-port "../stdlib/core/io.scm" . 400393))
 (set.gloc.of core.io\x27;open-bytevector-input-port)
 (close
   (1 0 . core.io\x27;open-string-input-port)
   (push.iloc.0 . 0)
   (ret.subr.gloc.of \x2E;make-string-input-port "../stdlib/core/io.scm" . 409607))
 (set.gloc.of core.io\x27;open-string-input-port)
 (close
   (5 0 . core.io\x27;make-custom-binary-input-port)
   (push.const . 3)
   (push.const . 1)
   (push.iloc.0 . 0)
   (push.const . #f)
   (push.iloc.0 . 1)
   (push.const . #f)
   (push.iloc.0 . 2)
   (push.iloc.0 . 3)
   (push.iloc.0 . 4)
   (push.subr.gloc.of \x2E;vector 6 "../stdlib/core/io.scm" . 416786)
   (push.const . #f)
   (push.const . #f)
   (ret.subr.gloc.of \x2E;open-port "../stdlib/core/io.scm" . 413703))
 (set.gloc.of core.io\x27;make-custom-binary-input-port)
 (close
   (5 0 . core.io\x27;make-custom-textual-input-port)
   (extend.unbound . 5)
   (push.close
     (3 0)
     (=n.iloc (0 . 2) 0 "../stdlib/core/io.scm" . 429074)
     (if.true.ret.const . 0)
     (push.iloc.0 . 2)
     (push.const . 4)
     (push.subr.gloc.of \x2E;div 2 "../stdlib/core/io.scm" . 431134)
     (extend . 1)
     (push.iloc.0 . 0)
     (push.const . #\nul)
     (push.subr.gloc.of \x2E;make-string 2 "../stdlib/core/io.scm" . 432158)
     (extend . 1)
     (call
       (push.iloc.0 . 0)
       (push.const . 0)
       (push.iloc.1 . 0)
       (apply.iloc (4 . 1) "../stdlib/core/io.scm" . 433184))
     (push)
     (extend . 1)
     (=n.iloc (0 . 0) 0 "../stdlib/core/io.scm" . 434203)
     (if.true.ret.const . 0)
     (push.iloc.1 . 0)
     (push.const . 0)
     (push.iloc.0 . 0)
     (push.subr.gloc.of \x2E;substring 3 "../stdlib/core/io.scm" . 436281)
     (push.subr.gloc.of \x2E;string->utf8 1 "../stdlib/core/io.scm" . 436267)
     (extend . 1)
     (push.iloc.0 . 0)
     (push.subr.gloc.of \x2E;bytevector-length 1 "../stdlib/core/io.scm" . 437289)
     (extend . 1)
     (push.iloc.1 . 0)
     (push.const . 0)
     (push.iloc 5 . 0)
     (push.iloc 5 . 1)
     (push.iloc.0 . 0)
     (subr.gloc.of \x2E;bytevector-copy! 5 "../stdlib/core/io.scm" . 438301)
     (ret.iloc 0 . 0))
   (push.close
     (1 0)
     (push.iloc.1 . 4)
     (push.iloc.0 . 0)
     (call (apply.iloc (2 . 2) "../stdlib/core/io.scm" . 443439))
     (push)
     (subr.gloc.of \x2E;core-hashtable-set! 3 "../stdlib/core/io.scm" . 443403)
     (ret.iloc 0 . 0))
   (push.close
     (1 0)
     (push.iloc.1 . 4)
     (push.iloc.0 . 0)
     (push.const . #f)
     (push.subr.gloc.of \x2E;core-hashtable-ref 3 "../stdlib/core/io.scm" . 448530)
     (extend . 1)
     (iloc.0 . 0)
     (if.true (push.iloc.0 . 0) (apply.iloc (3 . 3) "../stdlib/core/io.scm" . 449571))
     (subr.gloc.of \x2E;warning-level 0 "../stdlib/core/io.scm" . 450578)
     (if.true
       (subr.gloc.of \x2E;current-error-port 0)
       (push)
       (push.const
         .
         "~&warning in set-port-position: expected return value of a call to get-position, but got ~u~%~!")
       (push.iloc.1 . 0)
       (subr.gloc.of \x2E;format 3 "../stdlib/core/io.scm" . 451602)
       (push.iloc.1 . 0)
       (apply.iloc (3 . 3) "../stdlib/core/io.scm" . 452626))
     (push.iloc.1 . 0)
     (apply.iloc (3 . 3) "../stdlib/core/io.scm" . 454674))
   (enclose . 3)
   (const.unspec)
   (set.iloc 0 . 3)
   (push.const . eqv?)
   (subr.gloc.of \x2E;make-core-hashtable 1 "../stdlib/core/io.scm" . 424984)
   (set.iloc 0 . 4)
   (push.const . 3)
   (push.const . 1)
   (push.iloc.1 . 0)
   (push.const . #t)
   (call (iloc.1 . 1) (if.false.ret) (ret.iloc 0 . 0))
   (push)
   (push.const . #f)
   (call (iloc.1 . 2) (if.false.ret) (ret.iloc 0 . 1))
   (push)
   (call (iloc.1 . 3) (if.false.ret) (ret.iloc 0 . 2))
   (push)
   (push.iloc.1 . 4)
   (push.subr.gloc.of \x2E;vector 6 "../stdlib/core/io.scm" . 459805)
   (push.const . #f)
   (push.const . #t)
   (subr.gloc.of \x2E;open-port 6 "../stdlib/core/io.scm" . 456722)
   (set.iloc 0 . 3)
   (ret.iloc 0 . 3))
 (set.gloc.of core.io\x27;make-custom-textual-input-port)
 (close
   (1 1 . core.io\x27;open-file-output-port)
   (push.close
     (3 0)
     (push.const . 1)
     (push.const . 2)
     (push.iloc.1 . 0)
     (call
       (push.iloc.0 . 0)
       (apply.gloc.of core.io\x27;file-options->bits "../stdlib/core/io.scm" . 476180))
     (push)
     (call
       (push.iloc.0 . 1)
       (apply.gloc.of
         core.io.assistants\x27;port-lookup-buffer-mode-code
         "../stdlib/core/io.scm"
         .
         477204))
     (push)
     (call
       (iloc.0 . 2)
       (if.false.ret)
       (push.iloc.0 . 2)
       (apply.gloc.of core.io\x27;transcoder-descriptor "../stdlib/core/io.scm" . 478244))
     (push)
     (ret.subr.gloc.of \x2E;open-port "../stdlib/core/io.scm" . 473097))
   (call
     (push.iloc.0 . 1)
     (push.subr.gloc.of \x2E;length 1 "../stdlib/core/io.scm" . 470042)
     (extend . 1)
     (=n.iloc (0 . 0) 3 "../stdlib/core/io.scm" . 470042)
     (if.true (ret.iloc 1 . 1))
     (=n.iloc (0 . 0) 2 "../stdlib/core/io.scm" . 471052)
     (if.true
       (push.iloc.1 . 1)
       (push.const . #f)
       (push.subr.gloc.of \x2E;list 1 "../stdlib/core/io.scm" . 470042)
       (ret.subr.gloc.of \x2E;append "../stdlib/core/io.scm" . 470042))
     (=n.iloc (0 . 0) 1 "../stdlib/core/io.scm" . 470042)
     (if.true
       (push.iloc.1 . 1)
       (push.const . block)
       (push.const . #f)
       (push.subr.gloc.of \x2E;list 2 "../stdlib/core/io.scm" . 470042)
       (ret.subr.gloc.of \x2E;append "../stdlib/core/io.scm" . 470042))
     (call
       (push.const)
       (apply.gloc.of core.io.assistants\x27;make-file-options "../stdlib/core/io.scm" . 470042))
     (push)
     (push.const . block)
     (push.const . #f)
     (ret.subr.gloc.of \x2E;list "../stdlib/core/io.scm" . 470042))
   (push)
   (apply.gloc.of \x2E;apply "../stdlib/core/io.scm" . 92161))
 (set.gloc.of core.io\x27;open-file-output-port)
 (close
   (1 0 . core.io\x27;bytevector-output-port-values)
   (push.iloc.0 . 0)
   (push.close
     (0 0)
     (push.iloc.1 . 0)
     (ret.subr.gloc.of \x2E;extract-accumulated-bytevector "../stdlib/core/io.scm" . 482335))
   (ret.subr.gloc.of \x2E;values "../stdlib/core/io.scm" . 482311))
 (set.gloc.of core.io\x27;bytevector-output-port-values)
 (close
   (0 1 . core.io\x27;open-bytevector-output-port)
   (call
     (iloc.0 . 0)
     (if.pair? (push.iloc.0 . 0) (ret.subr.gloc.of \x2E;car "../stdlib/core/io.scm" . 487433))
     (ret.const . #f))
   (push)
   (extend . 1)
   (push.const . 2)
   (push.const . 2)
   (push.const . bytevector)
   (push.const . #f)
   (push.const . #f)
   (call
     (iloc.0 . 0)
     (if.false.ret)
     (push.iloc.0 . 0)
     (apply.gloc.of core.io\x27;transcoder-descriptor "../stdlib/core/io.scm" . 493605))
   (push)
   (push.subr.gloc.of \x2E;open-port 6 "../stdlib/core/io.scm" . 488458)
   (apply.gloc.of core.io\x27;bytevector-output-port-values "../stdlib/core/io.scm" . 487433))
 (set.gloc.of core.io\x27;open-bytevector-output-port)
 (close
   (1 1 . core.io\x27;call-with-bytevector-output-port)
   (call
     (iloc.0 . 1)
     (if.pair? (push.iloc.0 . 1) (ret.subr.gloc.of \x2E;car "../stdlib/core/io.scm" . 498697))
     (ret.const . #f))
   (push)
   (extend . 1)
   (push.close
     (0 0)
     (push.iloc.1 . 0)
     (apply.gloc.of core.io\x27;open-bytevector-output-port "../stdlib/core/io.scm" . 498728))
   (push.close
     (2 0)
     (push.gloc.of \x2E;fn43.1\x60;43)
     (push.close
       (0 0)
       (call (push.iloc.1 . 0) (apply.iloc (3 . 0) "../stdlib/core/io.scm" . 501783))
       (apply.iloc (1 . 1) "../stdlib/core/io.scm" . 501795))
     (push.close
       (0 0)
       (push.iloc.1 . 0)
       (ret.subr.gloc.of \x2E;close-port "../stdlib/core/io.scm" . 502807))
     (apply.gloc.of \x2E;dynamic-wind "../stdlib/core/io.scm" . 499723))
   (apply.gloc.of \x2E;call-with-values "../stdlib/core/io.scm" . 498697))
 (set.gloc.of core.io\x27;call-with-bytevector-output-port)
 (close
   (1 0 . core.io\x27;call-with-string-output-port)
   (push.gloc.of \x2E;fn52.1\x60;52)
   (push.close
     (2 0)
     (push.gloc.of \x2E;fn6.1\x60;6)
     (push.close
       (0 0)
       (call (push.iloc.1 . 0) (apply.iloc (2 . 0) "../stdlib/core/io.scm" . 509973))
       (apply.iloc (1 . 1) "../stdlib/core/io.scm" . 509985))
     (push.close
       (0 0)
       (push.iloc.1 . 0)
       (ret.subr.gloc.of \x2E;close-port "../stdlib/core/io.scm" . 510997))
     (apply.gloc.of \x2E;dynamic-wind "../stdlib/core/io.scm" . 507913))
   (apply.gloc.of \x2E;call-with-values "../stdlib/core/io.scm" . 505861))
 (set.gloc.of core.io\x27;call-with-string-output-port)
 (close
   (1 0 . core.io\x27;string-output-port-values)
   (push.iloc.0 . 0)
   (push.close
     (0 0)
     (push.iloc.1 . 0)
     (ret.subr.gloc.of \x2E;extract-accumulated-string "../stdlib/core/io.scm" . 515103))
   (ret.subr.gloc.of \x2E;values "../stdlib/core/io.scm" . 515079))
 (set.gloc.of core.io\x27;string-output-port-values)
 (close
   (0 0 . core.io\x27;open-string-output-port)
   (subr.gloc.of \x2E;make-string-output-port 0)
   (push)
   (apply.gloc.of core.io\x27;string-output-port-values "../stdlib/core/io.scm" . 519175))
 (set.gloc.of core.io\x27;open-string-output-port)
 (close
   (5 0 . core.io\x27;make-custom-binary-output-port)
   (push.const . 3)
   (push.const . 2)
   (push.iloc.0 . 0)
   (push.const . #f)
   (push.const . #f)
   (push.iloc.0 . 1)
   (push.iloc.0 . 2)
   (push.iloc.0 . 3)
   (push.iloc.0 . 4)
   (push.subr.gloc.of \x2E;vector 6 "../stdlib/core/io.scm" . 526354)
   (push.const . #f)
   (push.const . #f)
   (ret.subr.gloc.of \x2E;open-port "../stdlib/core/io.scm" . 523271))
 (set.gloc.of core.io\x27;make-custom-binary-output-port)
 (close
   (5 0 . core.io\x27;make-custom-textual-output-port)
   (extend.unbound . 5)
   (push.close
     (3 0)
     (=n.iloc (0 . 2) 0 "../stdlib/core/io.scm" . 539666)
     (if.true
       (call
         (push.const . "")
         (push.const . 0)
         (push.const . 0)
         (apply.iloc (2 . 1) "../stdlib/core/io.scm" . 539678))
       (ret.const . 0))
     (push.iloc.0 . 2)
     (push.subr.gloc.of \x2E;make-bytevector 1 "../stdlib/core/io.scm" . 541729)
     (extend . 1)
     (push.iloc.1 . 0)
     (push.iloc.1 . 1)
     (push.iloc.0 . 0)
     (push.const . 0)
     (push.iloc.1 . 2)
     (subr.gloc.of \x2E;bytevector-copy! 5 "../stdlib/core/io.scm" . 542740)
     (push.iloc.0 . 0)
     (push.subr.gloc.of \x2E;utf8->string 1 "../stdlib/core/io.scm" . 543776)
     (extend . 1)
     (push.iloc.0 . 0)
     (push.const . 0)
     (call
       (push.iloc.0 . 0)
       (push.const . 0)
       (push.iloc.0 . 0)
       (push.subr.gloc.of \x2E;string-length 1 "../stdlib/core/io.scm" . 544800)
       (apply.iloc (4 . 1) "../stdlib/core/io.scm" . 545829))
     (push)
     (push.subr.gloc.of \x2E;substring 3 "../stdlib/core/io.scm" . 546873)
     (push.subr.gloc.of \x2E;string->utf8 1 "../stdlib/core/io.scm" . 546859)
     (ret.subr.gloc.of \x2E;bytevector-length "../stdlib/core/io.scm" . 546840))
   (push.close
     (1 0)
     (push.iloc.1 . 4)
     (push.iloc.0 . 0)
     (call (apply.iloc (2 . 2) "../stdlib/core/io.scm" . 550959))
     (push)
     (subr.gloc.of \x2E;core-hashtable-set! 3 "../stdlib/core/io.scm" . 550923)
     (ret.iloc 0 . 0))
   (push.close
     (1 0)
     (push.iloc.1 . 4)
     (push.iloc.0 . 0)
     (push.const . #f)
     (push.subr.gloc.of \x2E;core-hashtable-ref 3 "../stdlib/core/io.scm" . 556050)
     (extend . 1)
     (iloc.0 . 0)
     (if.true (push.iloc.0 . 0) (apply.iloc (3 . 3) "../stdlib/core/io.scm" . 557091))
     (subr.gloc.of \x2E;warning-level 0 "../stdlib/core/io.scm" . 558098)
     (if.true
       (subr.gloc.of \x2E;current-error-port 0)
       (push)
       (push.const
         .
         "~&warning in set-port-position: expected return value of a call to get-position, but got ~u~%~!")
       (push.iloc.1 . 0)
       (subr.gloc.of \x2E;format 3 "../stdlib/core/io.scm" . 559122)
       (push.iloc.1 . 0)
       (apply.iloc (3 . 3) "../stdlib/core/io.scm" . 560146))
     (push.iloc.1 . 0)
     (apply.iloc (3 . 3) "../stdlib/core/io.scm" . 562194))
   (enclose . 3)
   (const.unspec)
   (set.iloc 0 . 3)
   (push.const . eqv?)
   (subr.gloc.of \x2E;make-core-hashtable 1 "../stdlib/core/io.scm" . 535576)
   (set.iloc 0 . 4)
   (push.const . 3)
   (push.const . 2)
   (push.iloc.1 . 0)
   (push.const . #t)
   (push.const . #f)
   (call (iloc.1 . 1) (if.false.ret) (ret.iloc 0 . 0))
   (push)
   (call (iloc.1 . 2) (if.false.ret) (ret.iloc 0 . 1))
   (push)
   (call (iloc.1 . 3) (if.false.ret) (ret.iloc 0 . 2))
   (push)
   (push.iloc.1 . 4)
   (push.subr.gloc.of \x2E;vector 6 "../stdlib/core/io.scm" . 567325)
   (push.const . #f)
   (push.const . #t)
   (subr.gloc.of \x2E;open-port 6 "../stdlib/core/io.scm" . 564242)
   (set.iloc 0 . 3)
   (ret.iloc 0 . 3))
 (set.gloc.of core.io\x27;make-custom-textual-output-port)
 (close
   (1 1 . core.io\x27;open-file-input/output-port)
   (push.close
     (3 0)
     (push.const . 1)
     (push.const . 3)
     (push.iloc.1 . 0)
     (call
       (push.iloc.0 . 0)
       (apply.gloc.of core.io\x27;file-options->bits "../stdlib/core/io.scm" . 583700))
     (push)
     (call
       (push.iloc.0 . 1)
       (apply.gloc.of
         core.io.assistants\x27;port-lookup-buffer-mode-code
         "../stdlib/core/io.scm"
         .
         584724))
     (push)
     (call
       (iloc.0 . 2)
       (if.false.ret)
       (push.iloc.0 . 2)
       (apply.gloc.of core.io\x27;transcoder-descriptor "../stdlib/core/io.scm" . 585764))
     (push)
     (ret.subr.gloc.of \x2E;open-port "../stdlib/core/io.scm" . 580617))
   (call
     (push.iloc.0 . 1)
     (push.subr.gloc.of \x2E;length 1 "../stdlib/core/io.scm" . 577562)
     (extend . 1)
     (=n.iloc (0 . 0) 3 "../stdlib/core/io.scm" . 577562)
     (if.true (ret.iloc 1 . 1))
     (=n.iloc (0 . 0) 2 "../stdlib/core/io.scm" . 578572)
     (if.true
       (push.iloc.1 . 1)
       (push.const . #f)
       (push.subr.gloc.of \x2E;list 1 "../stdlib/core/io.scm" . 577562)
       (ret.subr.gloc.of \x2E;append "../stdlib/core/io.scm" . 577562))
     (=n.iloc (0 . 0) 1 "../stdlib/core/io.scm" . 577562)
     (if.true
       (push.iloc.1 . 1)
       (push.const . block)
       (push.const . #f)
       (push.subr.gloc.of \x2E;list 2 "../stdlib/core/io.scm" . 577562)
       (ret.subr.gloc.of \x2E;append "../stdlib/core/io.scm" . 577562))
     (call
       (push.const)
       (apply.gloc.of core.io.assistants\x27;make-file-options "../stdlib/core/io.scm" . 577562))
     (push)
     (push.const . block)
     (push.const . #f)
     (ret.subr.gloc.of \x2E;list "../stdlib/core/io.scm" . 577562))
   (push)
   (apply.gloc.of \x2E;apply "../stdlib/core/io.scm" . 92161))
 (set.gloc.of core.io\x27;open-file-input/output-port)
 (close
   (6 0 . core.io\x27;make-custom-binary-input/output-port)
   (push.const . 3)
   (push.const . 3)
   (push.iloc.0 . 0)
   (push.const . #f)
   (push.iloc.0 . 1)
   (push.iloc.0 . 2)
   (push.iloc.0 . 3)
   (push.iloc.0 . 4)
   (push.iloc.0 . 5)
   (push.subr.gloc.of \x2E;vector 6 "../stdlib/core/io.scm" . 592914)
   (push.const . #f)
   (push.const . #f)
   (ret.subr.gloc.of \x2E;open-port "../stdlib/core/io.scm" . 589831))
 (set.gloc.of core.io\x27;make-custom-binary-input/output-port)
 (close
   (6 0 . core.io\x27;make-custom-textual-input/output-port)
   (extend.unbound . 6)
   (push.close
     (3 0)
     (=n.iloc (0 . 2) 0 "../stdlib/core/io.scm" . 606226)
     (if.true.ret.const . 0)
     (push.iloc.0 . 2)
     (push.const . 4)
     (push.subr.gloc.of \x2E;div 2 "../stdlib/core/io.scm" . 608286)
     (extend . 1)
     (push.iloc.0 . 0)
     (push.const . #\nul)
     (push.subr.gloc.of \x2E;make-string 2 "../stdlib/core/io.scm" . 609310)
     (extend . 1)
     (call
       (push.iloc.0 . 0)
       (push.const . 0)
       (push.iloc.1 . 0)
       (apply.iloc (4 . 1) "../stdlib/core/io.scm" . 610336))
     (push)
     (extend . 1)
     (=n.iloc (0 . 0) 0 "../stdlib/core/io.scm" . 611355)
     (if.true.ret.const . 0)
     (push.iloc.1 . 0)
     (push.const . 0)
     (push.iloc.0 . 0)
     (push.subr.gloc.of \x2E;substring 3 "../stdlib/core/io.scm" . 613433)
     (push.subr.gloc.of \x2E;string->utf8 1 "../stdlib/core/io.scm" . 613419)
     (extend . 1)
     (push.iloc.0 . 0)
     (push.subr.gloc.of \x2E;bytevector-length 1 "../stdlib/core/io.scm" . 614441)
     (extend . 1)
     (push.iloc.1 . 0)
     (push.const . 0)
     (push.iloc 5 . 0)
     (push.iloc 5 . 1)
     (push.iloc.0 . 0)
     (subr.gloc.of \x2E;bytevector-copy! 5 "../stdlib/core/io.scm" . 615453)
     (ret.iloc 0 . 0))
   (push.close
     (3 0)
     (=n.iloc (0 . 2) 0 "../stdlib/core/io.scm" . 620562)
     (if.true
       (call
         (push.const . "")
         (push.const . 0)
         (push.const . 0)
         (apply.iloc (2 . 2) "../stdlib/core/io.scm" . 620574))
       (ret.const . 0))
     (push.iloc.0 . 2)
     (push.subr.gloc.of \x2E;make-bytevector 1 "../stdlib/core/io.scm" . 622625)
     (extend . 1)
     (push.iloc.1 . 0)
     (push.iloc.1 . 1)
     (push.iloc.0 . 0)
     (push.const . 0)
     (push.iloc.1 . 2)
     (subr.gloc.of \x2E;bytevector-copy! 5 "../stdlib/core/io.scm" . 623636)
     (push.iloc.0 . 0)
     (push.subr.gloc.of \x2E;utf8->string 1 "../stdlib/core/io.scm" . 624672)
     (extend . 1)
     (push.iloc.0 . 0)
     (push.const . 0)
     (call
       (push.iloc.0 . 0)
       (push.const . 0)
       (push.iloc.0 . 0)
       (push.subr.gloc.of \x2E;string-length 1 "../stdlib/core/io.scm" . 625696)
       (apply.iloc (4 . 2) "../stdlib/core/io.scm" . 626725))
     (push)
     (push.subr.gloc.of \x2E;substring 3 "../stdlib/core/io.scm" . 627769)
     (push.subr.gloc.of \x2E;string->utf8 1 "../stdlib/core/io.scm" . 627755)
     (ret.subr.gloc.of \x2E;bytevector-length "../stdlib/core/io.scm" . 627736))
   (push.close
     (1 0)
     (push.iloc.1 . 5)
     (push.iloc.0 . 0)
     (call (apply.iloc (2 . 3) "../stdlib/core/io.scm" . 631855))
     (push)
     (subr.gloc.of \x2E;core-hashtable-set! 3 "../stdlib/core/io.scm" . 631819)
     (ret.iloc 0 . 0))
   (push.close
     (1 0)
     (push.iloc.1 . 5)
     (push.iloc.0 . 0)
     (push.const . #f)
     (push.subr.gloc.of \x2E;core-hashtable-ref 3 "../stdlib/core/io.scm" . 636946)
     (extend . 1)
     (iloc.0 . 0)
     (if.true (push.iloc.0 . 0) (apply.iloc (3 . 4) "../stdlib/core/io.scm" . 637987))
     (subr.gloc.of \x2E;warning-level 0 "../stdlib/core/io.scm" . 638994)
     (if.true
       (subr.gloc.of \x2E;current-error-port 0)
       (push)
       (push.const
         .
         "~&warning in set-port-position: expected return value of a call to get-position, but got ~u~%~!")
       (push.iloc.1 . 0)
       (subr.gloc.of \x2E;format 3 "../stdlib/core/io.scm" . 640018)
       (push.iloc.1 . 0)
       (apply.iloc (3 . 4) "../stdlib/core/io.scm" . 641042))
     (push.iloc.1 . 0)
     (apply.iloc (3 . 4) "../stdlib/core/io.scm" . 643090))
   (enclose . 4)
   (const.unspec)
   (set.iloc 0 . 4)
   (push.const . eqv?)
   (subr.gloc.of \x2E;make-core-hashtable 1 "../stdlib/core/io.scm" . 602136)
   (set.iloc 0 . 5)
   (push.const . 3)
   (push.const . 3)
   (push.iloc.1 . 0)
   (push.const . #t)
   (call (iloc.1 . 1) (if.false.ret) (ret.iloc 0 . 0))
   (push)
   (call (iloc.1 . 2) (if.false.ret) (ret.iloc 0 . 1))
   (push)
   (call (iloc.1 . 3) (if.false.ret) (ret.iloc 0 . 2))
   (push)
   (call (iloc.1 . 4) (if.false.ret) (ret.iloc 0 . 3))
   (push)
   (push.iloc.1 . 5)
   (push.subr.gloc.of \x2E;vector 6 "../stdlib/core/io.scm" . 648221)
   (push.const . #f)
   (push.const . #t)
   (subr.gloc.of \x2E;open-port 6 "../stdlib/core/io.scm" . 645138)
   (set.iloc 0 . 4)
   (ret.iloc 0 . 4))
 (set.gloc.of core.io\x27;make-custom-textual-input/output-port)
 (close
   (2 0 . core.io\x27;call-with-input-file)
   (call
     (push.iloc.0 . 0)
     (apply.gloc.of core.io\x27;open-input-file "../stdlib/core/io.scm" . 657431))
   (push)
   (push.iloc.0 . 1)
   (apply.gloc.of \x2E;call-with-port "../stdlib/core/io.scm" . 657415))
 (set.gloc.of core.io\x27;call-with-input-file)
 (close
   (2 0 . core.io\x27;call-with-output-file)
   (call
     (push.iloc.0 . 0)
     (apply.gloc.of core.io\x27;open-output-file "../stdlib/core/io.scm" . 661527))
   (push)
   (push.iloc.0 . 1)
   (apply.gloc.of \x2E;call-with-port "../stdlib/core/io.scm" . 661511))
 (set.gloc.of core.io\x27;call-with-output-file)
 (close
   (2 0 . core.io\x27;with-input-from-file)
   (call
     (push.iloc.0 . 0)
     (apply.gloc.of core.io\x27;open-input-file "../stdlib/core/io.scm" . 665619))
   (push)
   (subr.gloc.of \x2E;current-input-port 0)
   (push)
   (extend . 2)
   (push.close
     (0 0)
     (push.iloc.1 . 0)
     (ret.subr.gloc.of \x2E;set-current-input-port! "../stdlib/core/io.scm" . 667669))
   (push.close
     (0 0)
     (call (apply.iloc (2 . 1) "../stdlib/core/io.scm" . 668704))
     (push)
     (extend . 1)
     (call
       (push.iloc 2 . 0)
       (apply.gloc.of core.io\x27;close-input-port "../stdlib/core/io.scm" . 668714))
     (ret.iloc 0 . 0))
   (push.close
     (0 0)
     (push.iloc.1 . 1)
     (ret.subr.gloc.of \x2E;set-current-input-port! "../stdlib/core/io.scm" . 669717))
   (apply.gloc.of \x2E;dynamic-wind "../stdlib/core/io.scm" . 666633))
 (set.gloc.of core.io\x27;with-input-from-file)
 (close
   (2 0 . core.io\x27;with-output-to-file)
   (call
     (push.iloc.0 . 0)
     (apply.gloc.of core.io\x27;open-output-file "../stdlib/core/io.scm" . 673811))
   (push)
   (subr.gloc.of \x2E;current-output-port 0)
   (push)
   (extend . 2)
   (push.close
     (0 0)
     (push.iloc.1 . 0)
     (ret.subr.gloc.of \x2E;set-current-output-port! "../stdlib/core/io.scm" . 675861))
   (push.close
     (0 0)
     (call (apply.iloc (2 . 1) "../stdlib/core/io.scm" . 676896))
     (push)
     (extend . 1)
     (call
       (push.iloc 2 . 0)
       (apply.gloc.of core.io\x27;close-output-port "../stdlib/core/io.scm" . 676906))
     (ret.iloc 0 . 0))
   (push.close
     (0 0)
     (push.iloc.1 . 1)
     (ret.subr.gloc.of \x2E;set-current-output-port! "../stdlib/core/io.scm" . 677909))
   (apply.gloc.of \x2E;dynamic-wind "../stdlib/core/io.scm" . 674825))
 (set.gloc.of core.io\x27;with-output-to-file)
 (close
   (1 0 . core.io\x27;open-input-file)
   (push.iloc.0 . 0)
   (call
     (push.const)
     (apply.gloc.of core.io.assistants\x27;make-file-options "../stdlib/core/io.scm" . 681991))
   (push)
   (push.const . block)
   (call (apply.gloc.of core.io\x27;native-transcoder "../stdlib/core/io.scm" . 682057))
   (push)
   (apply.gloc.of core.io\x27;open-file-input-port "../stdlib/core/io.scm" . 681991))
 (set.gloc.of core.io\x27;open-input-file)
 (close
   (1 0 . core.io\x27;open-output-file)
   (push.iloc.0 . 0)
   (call
     (push.const)
     (apply.gloc.of core.io.assistants\x27;make-file-options "../stdlib/core/io.scm" . 686087))
   (push)
   (push.const . block)
   (call (apply.gloc.of core.io\x27;native-transcoder "../stdlib/core/io.scm" . 686154))
   (push)
   (apply.gloc.of core.io\x27;open-file-output-port "../stdlib/core/io.scm" . 686087))
 (set.gloc.of core.io\x27;open-output-file)
 (close
   (1 0 . core.io\x27;close-input-port)
   (push.iloc.0 . 0)
   (ret.subr.gloc.of \x2E;close-port "../stdlib/core/io.scm" . 690183))
 (set.gloc.of core.io\x27;close-input-port)
 (close
   (1 0 . core.io\x27;close-output-port)
   (push.iloc.0 . 0)
   (ret.subr.gloc.of \x2E;close-port "../stdlib/core/io.scm" . 694279))
 (set.gloc.of core.io\x27;close-output-port)
 (close
   (0 1 . core.io\x27;open-temporary-file-port)
   (push.gloc.of \x2E;fn13.1\x60;13)
   (call
     (push.iloc.0 . 0)
     (push.subr.gloc.of \x2E;length 1 "../stdlib/core/io.scm" . 701449)
     (extend . 1)
     (=n.iloc (0 . 0) 2 "../stdlib/core/io.scm" . 701449)
     (if.true (ret.iloc 1 . 0))
     (=n.iloc (0 . 0) 1 "../stdlib/core/io.scm" . 701449)
     (if.true
       (push.iloc.1 . 0)
       (push.const . #f)
       (push.subr.gloc.of \x2E;list 1 "../stdlib/core/io.scm" . 701449)
       (ret.subr.gloc.of \x2E;append "../stdlib/core/io.scm" . 701449))
     (push.const . "temporary file")
     (push.const . #f)
     (ret.subr.gloc.of \x2E;list "../stdlib/core/io.scm" . 701449))
   (push)
   (apply.gloc.of \x2E;apply "../stdlib/core/io.scm" . 92161))
 (set.gloc.of core.io\x27;open-temporary-file-port)
 (call
   (push.const
     (error-handling-mode import . core.io\x27;error-handling-mode)
     (_ import . \x2E;_)
     (... import . \x2E;...)
     (and import . \x2E;and)
     (eol-style import . core.io\x27;eol-style)
     (make-file-options import . core.io.assistants\x27;make-file-options)
     (or import . \x2E;or)
     (quote import . \x2E;quote)
     (file-options import . core.io\x27;file-options)
     (let import . \x2E;let)
     (buffer-mode import . core.io\x27;buffer-mode)
     (lambda import . \x2E;lambda))
   (extend . 1)
   (call
     (push.const . syntax)
     (push.const . core.io\x27;file-options)
     (call
       (push.gloc.of \x2E;fn49.1\x60;49)
       (apply.gloc.of \x2E;transformer-thunk "../stdlib/core/io.scm" . 92161))
     (push)
     (push.iloc.0 . 0)
     (apply.gloc.of \x2E;set-top-level-macro! "../stdlib/core/io.scm" . 92161))
   (call
     (push.const . syntax)
     (push.const . core.io\x27;buffer-mode)
     (call
       (push.gloc.of \x2E;fn36.1\x60;36)
       (apply.gloc.of \x2E;transformer-thunk "../stdlib/core/io.scm" . 92161))
     (push)
     (push.iloc.0 . 0)
     (apply.gloc.of \x2E;set-top-level-macro! "../stdlib/core/io.scm" . 92161))
   (call
     (push.const . syntax)
     (push.const . core.io\x27;eol-style)
     (call
       (push.gloc.of \x2E;fn56.1\x60;56)
       (apply.gloc.of \x2E;transformer-thunk "../stdlib/core/io.scm" . 92161))
     (push)
     (push.iloc.0 . 0)
     (apply.gloc.of \x2E;set-top-level-macro! "../stdlib/core/io.scm" . 92161))
   (push.const . syntax)
   (push.const . core.io\x27;error-handling-mode)
   (call
     (push.gloc.of \x2E;fn16.1\x60;16)
     (apply.gloc.of \x2E;transformer-thunk "../stdlib/core/io.scm" . 92161))
   (push)
   (push.iloc.0 . 0)
   (apply.gloc.of \x2E;set-top-level-macro! "../stdlib/core/io.scm" . 92161))
 (push.const . core.io)
 (push.const . #f)
 (push.const
   (file-options import . core.io\x27;file-options)
   (buffer-mode import . core.io\x27;buffer-mode)
   (buffer-mode? import . core.io\x27;buffer-mode?)
   (utf-8-codec import . core.io\x27;utf-8-codec)
   (utf-16-codec import . core.io\x27;utf-16-codec)
   (latin-1-codec import . core.io\x27;latin-1-codec)
   (eol-style import . core.io\x27;eol-style)
   (error-handling-mode import . core.io\x27;error-handling-mode)
   (make-transcoder import . core.io\x27;make-transcoder)
   (transcoder-codec import . core.io\x27;transcoder-codec)
   (transcoder-eol-style import . core.io\x27;transcoder-eol-style)
   (transcoder-error-handling-mode import . core.io\x27;transcoder-error-handling-mode)
   (native-transcoder import . core.io\x27;native-transcoder)
   (native-eol-style import . core.io\x27;native-eol-style)
   (bytevector->string import . core.io\x27;bytevector->string)
   (string->bytevector import . core.io\x27;string->bytevector)
   (eof-object import . \x2E;eof-object)
   (eof-object? import . \x2E;eof-object?)
   (port? import . \x2E;port?)
   (port-transcoder import . core.io\x27;port-transcoder)
   (textual-port? import . core.io\x27;textual-port?)
   (binary-port? import . core.io\x27;binary-port?)
   (transcoded-port import . core.io\x27;transcoded-port)
   (port-has-port-position? import . \x2E;port-has-port-position?)
   (port-position import . \x2E;port-position)
   (port-has-set-port-position!? import . \x2E;port-has-set-port-position!?)
   (set-port-position! import . \x2E;set-port-position!)
   (close-port import . \x2E;close-port)
   (call-with-port import . \x2E;call-with-port)
   (input-port? import . \x2E;input-port?)
   (port-eof? import . \x2E;port-eof?)
   (open-file-input-port import . core.io\x27;open-file-input-port)
   (open-bytevector-input-port import . core.io\x27;open-bytevector-input-port)
   (open-string-input-port import . core.io\x27;open-string-input-port)
   (standard-input-port import . \x2E;standard-input-port)
   (current-input-port import . \x2E;current-input-port)
   (get-u8 import . \x2E;get-u8)
   (lookahead-u8 import . \x2E;lookahead-u8)
   (get-bytevector-n import . \x2E;get-bytevector-n)
   (get-bytevector-n! import . \x2E;get-bytevector-n!)
   (get-bytevector-some import . \x2E;get-bytevector-some)
   (get-bytevector-all import . \x2E;get-bytevector-all)
   (get-char import . \x2E;get-char)
   (lookahead-char import . \x2E;lookahead-char)
   (get-string-n import . \x2E;get-string-n)
   (get-string-n! import . \x2E;get-string-n!)
   (get-string-all import . \x2E;get-string-all)
   (get-line import . \x2E;get-line)
   (get-datum import . \x2E;get-datum)
   (output-port? import . \x2E;output-port?)
   (flush-output-port import . \x2E;flush-output-port)
   (output-port-buffer-mode import . \x2E;output-port-buffer-mode)
   (open-file-output-port import . core.io\x27;open-file-output-port)
   (open-bytevector-output-port import . core.io\x27;open-bytevector-output-port)
   (call-with-bytevector-output-port import . core.io\x27;call-with-bytevector-output-port)
   (open-string-output-port import . core.io\x27;open-string-output-port)
   (call-with-string-output-port import . core.io\x27;call-with-string-output-port)
   (standard-output-port import . \x2E;standard-output-port)
   (standard-error-port import . \x2E;standard-error-port)
   (current-output-port import . \x2E;current-output-port)
   (current-error-port import . \x2E;current-error-port)
   (put-u8 import . \x2E;put-u8)
   (put-bytevector import . \x2E;put-bytevector)
   (put-char import . \x2E;put-char)
   (put-string import . \x2E;put-string)
   (put-datum import . \x2E;put-datum)
   (open-file-input/output-port import . core.io\x27;open-file-input/output-port)
   (call-with-input-file import . core.io\x27;call-with-input-file)
   (call-with-output-file import . core.io\x27;call-with-output-file)
   (with-input-from-file import . core.io\x27;with-input-from-file)
   (with-output-to-file import . core.io\x27;with-output-to-file)
   (open-input-file import . core.io\x27;open-input-file)
   (open-output-file import . core.io\x27;open-output-file)
   (close-input-port import . core.io\x27;close-input-port)
   (close-output-port import . core.io\x27;close-output-port)
   (read-char import . \x2E;read-char)
   (peek-char import . \x2E;peek-char)
   (read import . \x2E;read)
   (write-char import . \x2E;write-char)
   (newline import . \x2E;newline)
   (display import . \x2E;display)
   (write import . \x2E;write)
   (make-custom-binary-input-port import . core.io\x27;make-custom-binary-input-port)
   (make-custom-textual-input-port import . core.io\x27;make-custom-textual-input-port)
   (make-custom-binary-output-port import . core.io\x27;make-custom-binary-output-port)
   (make-custom-textual-output-port import . core.io\x27;make-custom-textual-output-port)
   (make-custom-binary-input/output-port import . core.io\x27;make-custom-binary-input/output-port)
   (make-custom-textual-input/output-port
     import
     .
     core.io\x27;make-custom-textual-input/output-port)
   (&i/o import . \x2E;&i/o)
   (make-i/o-error import . \x2E;make-i/o-error)
   (i/o-error? import . \x2E;i/o-error?)
   (&i/o-read import . \x2E;&i/o-read)
   (make-i/o-read-error import . \x2E;make-i/o-read-error)
   (i/o-read-error? import . \x2E;i/o-read-error?)
   (&i/o-write import . \x2E;&i/o-write)
   (make-i/o-write-error import . \x2E;make-i/o-write-error)
   (i/o-write-error? import . \x2E;i/o-write-error?)
   (&i/o-invalid-position import . \x2E;&i/o-invalid-position)
   (make-i/o-invalid-position-error import . \x2E;make-i/o-invalid-position-error)
   (i/o-invalid-position-error? import . \x2E;i/o-invalid-position-error?)
   (i/o-error-position import . \x2E;i/o-error-position)
   (&i/o-filename import . \x2E;&i/o-filename)
   (make-i/o-filename-error import . \x2E;make-i/o-filename-error)
   (i/o-filename-error? import . \x2E;i/o-filename-error?)
   (i/o-error-filename import . \x2E;i/o-error-filename)
   (&i/o-file-protection import . \x2E;&i/o-file-protection)
   (make-i/o-file-protection-error import . \x2E;make-i/o-file-protection-error)
   (i/o-file-protection-error? import . \x2E;i/o-file-protection-error?)
   (&i/o-file-is-read-only import . \x2E;&i/o-file-is-read-only)
   (make-i/o-file-is-read-only-error import . \x2E;make-i/o-file-is-read-only-error)
   (i/o-file-is-read-only-error? import . \x2E;i/o-file-is-read-only-error?)
   (&i/o-file-already-exists import . \x2E;&i/o-file-already-exists)
   (make-i/o-file-already-exists-error import . \x2E;make-i/o-file-already-exists-error)
   (i/o-file-already-exists-error? import . \x2E;i/o-file-already-exists-error?)
   (&i/o-file-does-not-exist import . \x2E;&i/o-file-does-not-exist)
   (make-i/o-file-does-not-exist-error import . \x2E;make-i/o-file-does-not-exist-error)
   (i/o-file-does-not-exist-error? import . \x2E;i/o-file-does-not-exist-error?)
   (&i/o-port import . \x2E;&i/o-port)
   (make-i/o-port-error import . \x2E;make-i/o-port-error)
   (i/o-port-error? import . \x2E;i/o-port-error?)
   (i/o-error-port import . \x2E;i/o-error-port)
   (&i/o-decoding import . \x2E;&i/o-decoding)
   (make-i/o-decoding-error import . \x2E;make-i/o-decoding-error)
   (i/o-decoding-error? import . \x2E;i/o-decoding-error?)
   (&i/o-encoding import . \x2E;&i/o-encoding)
   (make-i/o-encoding-error import . \x2E;make-i/o-encoding-error)
   (i/o-encoding-error? import . \x2E;i/o-encoding-error?)
   (i/o-encoding-error-char import . \x2E;i/o-encoding-error-char)
   (open-temporary-file-port import . core.io\x27;open-temporary-file-port)
   (format import . \x2E;format))
 (apply.gloc.of \x2E;intern-scheme-library "../stdlib/core/io.scm" . 92161))

((call
   (push.const core optargs)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core/files.scm" . 6145))
 (call
   (push.const core lists)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core/files.scm" . 6145))
 (call
   (push.const core io)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core/files.scm" . 6145))
 (call
   (push.const core primitives)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core/files.scm" . 6145))
 (push.const . core.files)
 (push.const . #f)
 (push.const
   (file-exists? import . \x2E;file-exists?)
   (delete-file import . \x2E;delete-file)
   (directory-list import . \x2E;directory-list)
   (current-directory import . \x2E;current-directory)
   (&i/o import . \x2E;&i/o)
   (make-i/o-error import . \x2E;make-i/o-error)
   (i/o-error? import . \x2E;i/o-error?)
   (&i/o-read import . \x2E;&i/o-read)
   (make-i/o-read-error import . \x2E;make-i/o-read-error)
   (i/o-read-error? import . \x2E;i/o-read-error?)
   (&i/o-write import . \x2E;&i/o-write)
   (make-i/o-write-error import . \x2E;make-i/o-write-error)
   (i/o-write-error? import . \x2E;i/o-write-error?)
   (&i/o-invalid-position import . \x2E;&i/o-invalid-position)
   (make-i/o-invalid-position-error import . \x2E;make-i/o-invalid-position-error)
   (i/o-invalid-position-error? import . \x2E;i/o-invalid-position-error?)
   (i/o-error-position import . \x2E;i/o-error-position)
   (&i/o-filename import . \x2E;&i/o-filename)
   (make-i/o-filename-error import . \x2E;make-i/o-filename-error)
   (i/o-filename-error? import . \x2E;i/o-filename-error?)
   (i/o-error-filename import . \x2E;i/o-error-filename)
   (&i/o-file-protection import . \x2E;&i/o-file-protection)
   (make-i/o-file-protection-error import . \x2E;make-i/o-file-protection-error)
   (i/o-file-protection-error? import . \x2E;i/o-file-protection-error?)
   (&i/o-file-is-read-only import . \x2E;&i/o-file-is-read-only)
   (make-i/o-file-is-read-only-error import . \x2E;make-i/o-file-is-read-only-error)
   (i/o-file-is-read-only-error? import . \x2E;i/o-file-is-read-only-error?)
   (&i/o-file-already-exists import . \x2E;&i/o-file-already-exists)
   (make-i/o-file-already-exists-error import . \x2E;make-i/o-file-already-exists-error)
   (i/o-file-already-exists-error? import . \x2E;i/o-file-already-exists-error?)
   (&i/o-file-does-not-exist import . \x2E;&i/o-file-does-not-exist)
   (make-i/o-file-does-not-exist-error import . \x2E;make-i/o-file-does-not-exist-error)
   (i/o-file-does-not-exist-error? import . \x2E;i/o-file-does-not-exist-error?)
   (&i/o-port import . \x2E;&i/o-port)
   (make-i/o-port-error import . \x2E;make-i/o-port-error)
   (i/o-port-error? import . \x2E;i/o-port-error?)
   (i/o-error-port import . \x2E;i/o-error-port))
 (apply.gloc.of \x2E;intern-scheme-library "../stdlib/core/files.scm" . 6145))

((close
   (0 0)
   (apply.gloc.of
     core.io\x27;open-bytevector-output-port
     "../stdlib/core/bytevector-transcoders.scm"
     .
     100398))
 (set.gloc.of \x2E;fn5.1\x60;5)
 (close
   (0 0)
   (apply.gloc.of
     core.io\x27;open-bytevector-output-port
     "../stdlib/core/bytevector-transcoders.scm"
     .
     25646))
 (set.gloc.of \x2E;fn11.1\x60;11)
 (call
   (push.const core bytevectors)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core/bytevector-transcoders.scm" . 6145))
 (call
   (push.const core primitives)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core/bytevector-transcoders.scm" . 6145))
 (call
   (push.const core io)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core/bytevector-transcoders.scm" . 6145))
 (call
   (push.const core optargs)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core/bytevector-transcoders.scm" . 6145))
 (call
   (push.const core intrinsics)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core/bytevector-transcoders.scm" . 6145))
 (close
   (1 1 . core.bytevector-transcoders\x27;string->utf32)
   (call
     (iloc.0 . 1)
     (if.pair?
       (push.iloc.0 . 1)
       (ret.subr.gloc.of \x2E;car "../stdlib/core/bytevector-transcoders.scm" . 20515))
     (ret.const . big))
   (push)
   (extend . 1)
   (push.iloc.1 . 0)
   (push.subr.gloc.of \x2E;string-length 1 "../stdlib/core/bytevector-transcoders.scm" . 21520)
   (push.const . 0)
   (subr.gloc.of \x2E;= 2 "../stdlib/core/bytevector-transcoders.scm" . 21517)
   (if.true.ret.const . #vu8())
   (push.iloc.1 . 0)
   (push.subr.gloc.of
     \x2E;make-string-input-port
     1
     "../stdlib/core/bytevector-transcoders.scm"
     .
     23578)
   (push.const . 4)
   (push.subr.gloc.of \x2E;make-bytevector 1 "../stdlib/core/bytevector-transcoders.scm" . 24600)
   (extend . 2)
   (push.gloc.of \x2E;fn11.1\x60;11)
   (push.close
     (2 0)
     (extend.enclose+
       (1 0 . loop)
       (push.iloc.0 . 0)
       (subr.gloc.of \x2E;eof-object? 1 "../stdlib/core/bytevector-transcoders.scm" . 27674)
       (if.true (apply.iloc (2 . 1) "../stdlib/core/bytevector-transcoders.scm" . 27691))
       (push.iloc 3 . 1)
       (push.const . 0)
       (push.iloc.0 . 0)
       (push.subr.gloc.of \x2E;char->integer 1 "../stdlib/core/bytevector-transcoders.scm" . 29749)
       (push.iloc 4 . 0)
       (subr.gloc.of \x2E;bytevector-u32-set! 4 "../stdlib/core/bytevector-transcoders.scm" . 29722)
       (push.iloc 2 . 0)
       (push.iloc 3 . 1)
       (subr.gloc.of \x2E;put-bytevector 2 "../stdlib/core/bytevector-transcoders.scm" . 30746)
       (push.iloc 3 . 0)
       (push.subr.gloc.of \x2E;get-char 1 "../stdlib/core/bytevector-transcoders.scm" . 31776)
       (apply.iloc+ (1 . 0) "../stdlib/core/bytevector-transcoders.scm" . 31770))
     (push.iloc 2 . 0)
     (push.subr.gloc.of \x2E;get-char 1 "../stdlib/core/bytevector-transcoders.scm" . 26656)
     (apply.iloc+ (0 . 0) "../stdlib/core/bytevector-transcoders.scm" . 26641))
   (apply.gloc.of \x2E;call-with-values "../stdlib/core/bytevector-transcoders.scm" . 23565))
 (set.gloc.of core.bytevector-transcoders\x27;string->utf32)
 (close
   (1 0 . core.bytevector-transcoders\x27;test-utf32-bom)
   (push.iloc.0 . 0)
   (push.subr.gloc.of \x2E;bytevector-length 1 "../stdlib/core/bytevector-transcoders.scm" . 35856)
   (push.const . 4)
   (subr.gloc.of \x2E;>= 2 "../stdlib/core/bytevector-transcoders.scm" . 35852)
   (if.false.ret)
   (push.const . 4)
   (push.subr.gloc.of \x2E;make-bytevector 1 "../stdlib/core/bytevector-transcoders.scm" . 36887)
   (extend . 1)
   (push.iloc.1 . 0)
   (push.const . 0)
   (push.iloc.0 . 0)
   (push.const . 0)
   (push.const . 4)
   (subr.gloc.of \x2E;bytevector-copy! 5 "../stdlib/core/bytevector-transcoders.scm" . 37902)
   (push.iloc.0 . 0)
   (push.const . #vu8(0 0 254 255))
   (subr.gloc.of \x2E;equal? 2 "../stdlib/core/bytevector-transcoders.scm" . 38933)
   (if.true.ret.const . big)
   (push.iloc.0 . 0)
   (push.const . #vu8(255 254 0 0))
   (subr.gloc.of \x2E;equal? 2 "../stdlib/core/bytevector-transcoders.scm" . 39957)
   (if.true.ret.const . little)
   (ret.const . #f))
 (set.gloc.of core.bytevector-transcoders\x27;test-utf32-bom)
 (close
   (4 0 . core.bytevector-transcoders\x27;transcode-utf32->string)
   (subr.gloc.of \x2E;make-string-output-port 0)
   (push)
   (extend . 1)
   (extend.enclose+
     (2 0 . loop)
     (=n.iloc (0 . 1) 0 "../stdlib/core/bytevector-transcoders.scm" . 47122)
     (if.true
       (push.iloc 2 . 0)
       (ret.subr.gloc.of
         \x2E;extract-accumulated-string
         "../stdlib/core/bytevector-transcoders.scm"
         .
         47133))
     (>=n.iloc (0 . 1) 4 "../stdlib/core/bytevector-transcoders.scm" . 48146)
     (if.true
       (call
         (push.iloc 3 . 2)
         (push.iloc.0 . 0)
         (push.iloc 3 . 3)
         (push.subr.gloc.of
           \x2E;bytevector-u32-ref
           3
           "../stdlib/core/bytevector-transcoders.scm"
           .
           49180)
         (extend . 1)
         (>n.iloc (0 . 0) 1114111 "../stdlib/core/bytevector-transcoders.scm" . 50203)
         (if.true
           (push.iloc 3 . 0)
           (push.const . #\�)
           (ret.subr.gloc.of \x2E;put-char "../stdlib/core/bytevector-transcoders.scm" . 50219))
         (push.const . 55296)
         (push.iloc.0 . 0)
         (push.const . 57343)
         (subr.gloc.of \x2E;<= 3 "../stdlib/core/bytevector-transcoders.scm" . 51227)
         (if.true
           (push.iloc 3 . 0)
           (push.const . #\�)
           (ret.subr.gloc.of \x2E;put-char "../stdlib/core/bytevector-transcoders.scm" . 51249))
         (push.iloc 3 . 0)
         (push.iloc.0 . 0)
         (push.subr.gloc.of
           \x2E;integer->char
           1
           "../stdlib/core/bytevector-transcoders.scm"
           .
           52273)
         (ret.subr.gloc.of \x2E;put-char "../stdlib/core/bytevector-transcoders.scm" . 52256))
       (push.n+.iloc (0 . 0) 4 "../stdlib/core/bytevector-transcoders.scm" . 53272)
       (push.n+.iloc (0 . 1) -4 "../stdlib/core/bytevector-transcoders.scm" . 53280)
       (apply.iloc+ (1 . 0) "../stdlib/core/bytevector-transcoders.scm" . 53266))
     (push.iloc 2 . 0)
     (push.const . #\�)
     (subr.gloc.of \x2E;put-char 2 "../stdlib/core/bytevector-transcoders.scm" . 55314)
     (push.iloc 2 . 0)
     (ret.subr.gloc.of
       \x2E;extract-accumulated-string
       "../stdlib/core/bytevector-transcoders.scm"
       .
       56338))
   (push.iloc 2 . 0)
   (push.iloc 2 . 1)
   (apply.iloc+ (0 . 0) "../stdlib/core/bytevector-transcoders.scm" . 46089))
 (set.gloc.of core.bytevector-transcoders\x27;transcode-utf32->string)
 (close
   (2 1 . core.bytevector-transcoders\x27;utf32->string)
   (call
     (iloc.0 . 2)
     (if.pair?
       (push.iloc.0 . 2)
       (ret.subr.gloc.of \x2E;car "../stdlib/core/bytevector-transcoders.scm" . 61449))
     (ret.const . #f))
   (if.true
     (push.const . 0)
     (push.iloc.0 . 0)
     (push.subr.gloc.of
       \x2E;bytevector-length
       1
       "../stdlib/core/bytevector-transcoders.scm"
       .
       62507)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (apply.gloc.of
       core.bytevector-transcoders\x27;transcode-utf32->string
       "../stdlib/core/bytevector-transcoders.scm"
       .
       62480))
   (call
     (push.iloc.0 . 0)
     (apply.gloc.of
       core.bytevector-transcoders\x27;test-utf32-bom
       "../stdlib/core/bytevector-transcoders.scm"
       .
       63504))
   (push)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (push.const . 4)
     (push.iloc.1 . 0)
     (push.subr.gloc.of
       \x2E;bytevector-length
       1
       "../stdlib/core/bytevector-transcoders.scm"
       .
       65587)
     (push.const . 4)
     (push.subr.gloc.of \x2E;- 2 "../stdlib/core/bytevector-transcoders.scm" . 65584)
     (push.iloc.1 . 0)
     (push.iloc.0 . 0)
     (apply.gloc.of
       core.bytevector-transcoders\x27;transcode-utf32->string
       "../stdlib/core/bytevector-transcoders.scm"
       .
       65557))
   (push.const . 0)
   (push.iloc.1 . 0)
   (push.subr.gloc.of \x2E;bytevector-length 1 "../stdlib/core/bytevector-transcoders.scm" . 67627)
   (push.iloc.1 . 0)
   (push.iloc.1 . 1)
   (apply.gloc.of
     core.bytevector-transcoders\x27;transcode-utf32->string
     "../stdlib/core/bytevector-transcoders.scm"
     .
     67600))
 (set.gloc.of core.bytevector-transcoders\x27;utf32->string)
 (close
   (1 0 . core.bytevector-transcoders\x27;encode-surrogates)
   (push.n+.iloc (0 . 0) -65536 "../stdlib/core/bytevector-transcoders.scm" . 71696)
   (extend . 1)
   (push.iloc.0 . 0)
   (push.const . 1024)
   (push.subr.gloc.of \x2E;div 2 "../stdlib/core/bytevector-transcoders.scm" . 72725)
   (push.const . 55296)
   (push.subr.gloc.of \x2E;+ 2 "../stdlib/core/bytevector-transcoders.scm" . 72722)
   (call
     (push.iloc.0 . 0)
     (push.const . 1024)
     (apply.gloc.of \x2E;mod "../stdlib/core/bytevector-transcoders.scm" . 73749))
   (push)
   (push.const . 56320)
   (push.subr.gloc.of \x2E;+ 2 "../stdlib/core/bytevector-transcoders.scm" . 73746)
   (ret.subr.gloc.of \x2E;values "../stdlib/core/bytevector-transcoders.scm" . 74763))
 (set.gloc.of core.bytevector-transcoders\x27;encode-surrogates)
 (close
   (2 0 . core.bytevector-transcoders\x27;decode-surrogates)
   (push.n+.iloc (0 . 0) -55296 "../stdlib/core/bytevector-transcoders.scm" . 78871)
   (push.const . 1024)
   (push.subr.gloc.of \x2E;* 2 "../stdlib/core/bytevector-transcoders.scm" . 78868)
   (push.n+.iloc (0 . 1) -56320 "../stdlib/core/bytevector-transcoders.scm" . 78893)
   (push.const . 65536)
   (push.subr.gloc.of \x2E;+ 3 "../stdlib/core/bytevector-transcoders.scm" . 78865)
   (extend . 1)
   (>n.iloc (0 . 0) 1114111 "../stdlib/core/bytevector-transcoders.scm" . 79888)
   (if.true.ret.const . #\�)
   (push.const . 55296)
   (push.iloc.0 . 0)
   (push.const . 57343)
   (subr.gloc.of \x2E;<= 3 "../stdlib/core/bytevector-transcoders.scm" . 80912)
   (if.true.ret.const . #\�)
   (push.iloc.0 . 0)
   (ret.subr.gloc.of \x2E;integer->char "../stdlib/core/bytevector-transcoders.scm" . 81941))
 (set.gloc.of core.bytevector-transcoders\x27;decode-surrogates)
 (close
   (1 0 . core.bytevector-transcoders\x27;test-utf16-bom)
   (push.iloc.0 . 0)
   (push.subr.gloc.of \x2E;bytevector-length 1 "../stdlib/core/bytevector-transcoders.scm" . 86032)
   (push.const . 2)
   (subr.gloc.of \x2E;>= 2 "../stdlib/core/bytevector-transcoders.scm" . 86028)
   (if.false.ret)
   (push.const . 2)
   (push.subr.gloc.of \x2E;make-bytevector 1 "../stdlib/core/bytevector-transcoders.scm" . 87063)
   (extend . 1)
   (push.iloc.1 . 0)
   (push.const . 0)
   (push.iloc.0 . 0)
   (push.const . 0)
   (push.const . 2)
   (subr.gloc.of \x2E;bytevector-copy! 5 "../stdlib/core/bytevector-transcoders.scm" . 88078)
   (push.iloc.0 . 0)
   (push.const . #vu8(254 255))
   (subr.gloc.of \x2E;equal? 2 "../stdlib/core/bytevector-transcoders.scm" . 89109)
   (if.true.ret.const . big)
   (push.iloc.0 . 0)
   (push.const . #vu8(255 254))
   (subr.gloc.of \x2E;equal? 2 "../stdlib/core/bytevector-transcoders.scm" . 90133)
   (if.true.ret.const . little)
   (ret.const . #f))
 (set.gloc.of core.bytevector-transcoders\x27;test-utf16-bom)
 (close
   (1 1 . core.bytevector-transcoders\x27;string->utf16)
   (call
     (iloc.0 . 1)
     (if.pair?
       (push.iloc.0 . 1)
       (ret.subr.gloc.of \x2E;car "../stdlib/core/bytevector-transcoders.scm" . 95267))
     (ret.const . big))
   (push)
   (extend . 1)
   (push.iloc.1 . 0)
   (push.subr.gloc.of \x2E;string-length 1 "../stdlib/core/bytevector-transcoders.scm" . 96272)
   (push.const . 0)
   (subr.gloc.of \x2E;= 2 "../stdlib/core/bytevector-transcoders.scm" . 96269)
   (if.true.ret.const . #vu8())
   (push.iloc.1 . 0)
   (push.subr.gloc.of
     \x2E;make-string-input-port
     1
     "../stdlib/core/bytevector-transcoders.scm"
     .
     98330)
   (push.const . 2)
   (push.subr.gloc.of \x2E;make-bytevector 1 "../stdlib/core/bytevector-transcoders.scm" . 99352)
   (extend . 2)
   (push.gloc.of \x2E;fn5.1\x60;5)
   (push.close
     (2 0)
     (extend.enclose+
       (1 0 . loop)
       (push.iloc.0 . 0)
       (subr.gloc.of \x2E;eof-object? 1 "../stdlib/core/bytevector-transcoders.scm" . 102426)
       (if.true (apply.iloc (2 . 1) "../stdlib/core/bytevector-transcoders.scm" . 102443))
       (push.iloc.0 . 0)
       (push.subr.gloc.of \x2E;char->integer 1 "../stdlib/core/bytevector-transcoders.scm" . 104484)
       (extend . 1)
       (>=n.iloc (0 . 0) 65536 "../stdlib/core/bytevector-transcoders.scm" . 105507)
       (if.true
         (call
           (push.close
             (0 0)
             (push.iloc.1 . 0)
             (apply.gloc.of
               core.bytevector-transcoders\x27;encode-surrogates
               "../stdlib/core/bytevector-transcoders.scm"
               .
               106558))
           (push.close
             (2 0)
             (push.iloc 5 . 1)
             (push.const . 0)
             (push.iloc.0 . 0)
             (push.iloc 6 . 0)
             (subr.gloc.of
               \x2E;bytevector-u16-set!
               4
               "../stdlib/core/bytevector-transcoders.scm"
               .
               107557)
             (push.iloc 4 . 0)
             (push.iloc 5 . 1)
             (subr.gloc.of
               \x2E;put-bytevector
               2
               "../stdlib/core/bytevector-transcoders.scm"
               .
               108581)
             (push.iloc 5 . 1)
             (push.const . 0)
             (push.iloc.0 . 1)
             (push.iloc 6 . 0)
             (subr.gloc.of
               \x2E;bytevector-u16-set!
               4
               "../stdlib/core/bytevector-transcoders.scm"
               .
               109605)
             (push.iloc 4 . 0)
             (push.iloc 5 . 1)
             (ret.subr.gloc.of
               \x2E;put-bytevector
               "../stdlib/core/bytevector-transcoders.scm"
               .
               110629))
           (apply.gloc.of
             \x2E;call-with-values
             "../stdlib/core/bytevector-transcoders.scm"
             .
             105500))
         (push.iloc 4 . 0)
         (push.subr.gloc.of \x2E;get-char 1 "../stdlib/core/bytevector-transcoders.scm" . 111657)
         (apply.iloc+ (2 . 0) "../stdlib/core/bytevector-transcoders.scm" . 111651))
       (push.iloc 4 . 1)
       (push.const . 0)
       (push.iloc.0 . 0)
       (push.iloc 5 . 0)
       (subr.gloc.of
         \x2E;bytevector-u16-set!
         4
         "../stdlib/core/bytevector-transcoders.scm"
         .
         113699)
       (push.iloc 3 . 0)
       (push.iloc 4 . 1)
       (subr.gloc.of \x2E;put-bytevector 2 "../stdlib/core/bytevector-transcoders.scm" . 114723)
       (push.iloc 4 . 0)
       (push.subr.gloc.of \x2E;get-char 1 "../stdlib/core/bytevector-transcoders.scm" . 115753)
       (apply.iloc+ (2 . 0) "../stdlib/core/bytevector-transcoders.scm" . 115747))
     (push.iloc 2 . 0)
     (push.subr.gloc.of \x2E;get-char 1 "../stdlib/core/bytevector-transcoders.scm" . 101408)
     (apply.iloc+ (0 . 0) "../stdlib/core/bytevector-transcoders.scm" . 101393))
   (apply.gloc.of \x2E;call-with-values "../stdlib/core/bytevector-transcoders.scm" . 98317))
 (set.gloc.of core.bytevector-transcoders\x27;string->utf16)
 (close
   (4 0 . core.bytevector-transcoders\x27;transcode-utf16->string)
   (subr.gloc.of \x2E;make-string-output-port 0)
   (push)
   (extend . 1)
   (extend.enclose+
     (2 0 . loop)
     (=n.iloc (0 . 1) 0 "../stdlib/core/bytevector-transcoders.scm" . 121874)
     (if.true
       (push.iloc 2 . 0)
       (ret.subr.gloc.of
         \x2E;extract-accumulated-string
         "../stdlib/core/bytevector-transcoders.scm"
         .
         121885))
     (>=n.iloc (0 . 1) 2 "../stdlib/core/bytevector-transcoders.scm" . 122898)
     (if.true
       (push.iloc 3 . 2)
       (push.iloc.0 . 0)
       (push.iloc 3 . 3)
       (push.subr.gloc.of
         \x2E;bytevector-u16-ref
         3
         "../stdlib/core/bytevector-transcoders.scm"
         .
         123932)
       (extend . 1)
       (push.const . 55296)
       (push.iloc.0 . 0)
       (push.const . 56319)
       (subr.gloc.of \x2E;<= 3 "../stdlib/core/bytevector-transcoders.scm" . 124955)
       (if.true
         (>=n.iloc (1 . 1) 4 "../stdlib/core/bytevector-transcoders.scm" . 125986)
         (if.true
           (push.iloc 4 . 2)
           (push.n+.iloc (1 . 0) 2 "../stdlib/core/bytevector-transcoders.scm" . 127049)
           (push.iloc 4 . 3)
           (push.subr.gloc.of
             \x2E;bytevector-u16-ref
             3
             "../stdlib/core/bytevector-transcoders.scm"
             .
             127023)
           (extend . 1)
           (push.const . 56320)
           (push.iloc.0 . 0)
           (push.const . 57343)
           (subr.gloc.of \x2E;<= 3 "../stdlib/core/bytevector-transcoders.scm" . 128043)
           (if.true
             (push.iloc 4 . 0)
             (call
               (push.iloc.1 . 0)
               (push.iloc.0 . 0)
               (apply.gloc.of
                 core.bytevector-transcoders\x27;decode-surrogates
                 "../stdlib/core/bytevector-transcoders.scm"
                 .
                 129084))
             (push)
             (subr.gloc.of \x2E;put-char 2 "../stdlib/core/bytevector-transcoders.scm" . 129067)
             (push.n+.iloc (2 . 0) 4 "../stdlib/core/bytevector-transcoders.scm" . 130097)
             (push.n+.iloc (2 . 1) -4 "../stdlib/core/bytevector-transcoders.scm" . 130105)
             (apply.iloc+ (3 . 0) "../stdlib/core/bytevector-transcoders.scm" . 130091))
           (push.iloc 4 . 0)
           (push.const . #\�)
           (subr.gloc.of \x2E;put-char 2 "../stdlib/core/bytevector-transcoders.scm" . 132139)
           (push.n+.iloc (2 . 0) 2 "../stdlib/core/bytevector-transcoders.scm" . 133169)
           (push.n+.iloc (2 . 1) -2 "../stdlib/core/bytevector-transcoders.scm" . 133177)
           (apply.iloc+ (3 . 0) "../stdlib/core/bytevector-transcoders.scm" . 133163))
         (push.iloc 3 . 0)
         (push.const . #\�)
         (subr.gloc.of \x2E;put-char 2 "../stdlib/core/bytevector-transcoders.scm" . 135202)
         (push.iloc 3 . 0)
         (ret.subr.gloc.of
           \x2E;extract-accumulated-string
           "../stdlib/core/bytevector-transcoders.scm"
           .
           136226))
       (push.const . 56320)
       (push.iloc.0 . 0)
       (push.const . 57343)
       (subr.gloc.of \x2E;<= 3 "../stdlib/core/bytevector-transcoders.scm" . 137243)
       (if.true
         (push.iloc 3 . 0)
         (push.const . #\�)
         (subr.gloc.of \x2E;put-char 2 "../stdlib/core/bytevector-transcoders.scm" . 138267)
         (push.n+.iloc (1 . 0) 2 "../stdlib/core/bytevector-transcoders.scm" . 139297)
         (push.n+.iloc (1 . 1) -2 "../stdlib/core/bytevector-transcoders.scm" . 139305)
         (apply.iloc+ (2 . 0) "../stdlib/core/bytevector-transcoders.scm" . 139291))
       (push.iloc 3 . 0)
       (push.iloc.0 . 0)
       (push.subr.gloc.of \x2E;integer->char 1 "../stdlib/core/bytevector-transcoders.scm" . 141356)
       (subr.gloc.of \x2E;put-char 2 "../stdlib/core/bytevector-transcoders.scm" . 141339)
       (push.n+.iloc (1 . 0) 2 "../stdlib/core/bytevector-transcoders.scm" . 142369)
       (push.n+.iloc (1 . 1) -2 "../stdlib/core/bytevector-transcoders.scm" . 142377)
       (apply.iloc+ (2 . 0) "../stdlib/core/bytevector-transcoders.scm" . 142363))
     (push.iloc 2 . 0)
     (push.const . #\�)
     (subr.gloc.of \x2E;put-char 2 "../stdlib/core/bytevector-transcoders.scm" . 144402)
     (push.iloc 2 . 0)
     (ret.subr.gloc.of
       \x2E;extract-accumulated-string
       "../stdlib/core/bytevector-transcoders.scm"
       .
       145426))
   (push.iloc 2 . 0)
   (push.iloc 2 . 1)
   (apply.iloc+ (0 . 0) "../stdlib/core/bytevector-transcoders.scm" . 120841))
 (set.gloc.of core.bytevector-transcoders\x27;transcode-utf16->string)
 (close
   (2 1 . core.bytevector-transcoders\x27;utf16->string)
   (call
     (iloc.0 . 2)
     (if.pair?
       (push.iloc.0 . 2)
       (ret.subr.gloc.of \x2E;car "../stdlib/core/bytevector-transcoders.scm" . 150537))
     (ret.const . #f))
   (if.true
     (push.const . 0)
     (push.iloc.0 . 0)
     (push.subr.gloc.of
       \x2E;bytevector-length
       1
       "../stdlib/core/bytevector-transcoders.scm"
       .
       151595)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (apply.gloc.of
       core.bytevector-transcoders\x27;transcode-utf16->string
       "../stdlib/core/bytevector-transcoders.scm"
       .
       151568))
   (call
     (push.iloc.0 . 0)
     (apply.gloc.of
       core.bytevector-transcoders\x27;test-utf16-bom
       "../stdlib/core/bytevector-transcoders.scm"
       .
       152592))
   (push)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (push.const . 2)
     (push.iloc.1 . 0)
     (push.subr.gloc.of
       \x2E;bytevector-length
       1
       "../stdlib/core/bytevector-transcoders.scm"
       .
       154675)
     (push.const . 2)
     (push.subr.gloc.of \x2E;- 2 "../stdlib/core/bytevector-transcoders.scm" . 154672)
     (push.iloc.1 . 0)
     (push.iloc.0 . 0)
     (apply.gloc.of
       core.bytevector-transcoders\x27;transcode-utf16->string
       "../stdlib/core/bytevector-transcoders.scm"
       .
       154645))
   (push.const . 0)
   (push.iloc.1 . 0)
   (push.subr.gloc.of \x2E;bytevector-length 1 "../stdlib/core/bytevector-transcoders.scm" . 156715)
   (push.iloc.1 . 0)
   (push.iloc.1 . 1)
   (apply.gloc.of
     core.bytevector-transcoders\x27;transcode-utf16->string
     "../stdlib/core/bytevector-transcoders.scm"
     .
     156688))
 (set.gloc.of core.bytevector-transcoders\x27;utf16->string)
 (push.const . core.bytevector-transcoders)
 (push.const . #f)
 (push.const
   (string->utf8 import . \x2E;string->utf8)
   (utf8->string import . \x2E;utf8->string)
   (string->utf16 import . core.bytevector-transcoders\x27;string->utf16)
   (utf16->string import . core.bytevector-transcoders\x27;utf16->string)
   (string->utf32 import . core.bytevector-transcoders\x27;string->utf32)
   (utf32->string import . core.bytevector-transcoders\x27;utf32->string))
 (apply.gloc.of \x2E;intern-scheme-library "../stdlib/core/bytevector-transcoders.scm" . 6145))

((close
   (1 0)
   (push.iloc.0 . 0)
   (ret.subr.gloc.of \x2E;get-datum "../stdlib/core/unicode-assistants.scm" . 52237))
 (set.gloc.of \x2E;fn29.1\x60;29)
 (call
   (push.const core bytevector-transcoders)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core/unicode-assistants.scm" . 6145))
 (call
   (push.const core bytevectors)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core/unicode-assistants.scm" . 6145))
 (call
   (push.const core lists)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core/unicode-assistants.scm" . 6145))
 (call
   (push.const core files)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core/unicode-assistants.scm" . 6145))
 (call
   (push.const core io)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core/unicode-assistants.scm" . 6145))
 (call
   (push.const core primitives)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core/unicode-assistants.scm" . 6145))
 (close
   (2 0 . core.unicode-assistants\x27;load-unicode-table-file)
   (push.iloc.0 . 0)
   (push.subr.gloc.of
     \x2E;open-builtin-data-input-port
     1
     "../stdlib/core/unicode-assistants.scm"
     .
     36875)
   (push.close
     (1 0)
     (push.const . eqv?)
     (push.iloc.1 . 1)
     (push.subr.gloc.of \x2E;make-core-hashtable 2 "../stdlib/core/unicode-assistants.scm" . 38935)
     (extend . 1)
     (call
       (extend.enclose+
         (1 0 . loop)
         (iloc.0 . 0)
         (if.null?.ret.const . #t)
         (push.iloc 2 . 0)
         (push.iloc.0 . 0)
         (push.subr.gloc.of \x2E;caar 1 "../stdlib/core/unicode-assistants.scm" . 43056)
         (push.iloc.0 . 0)
         (push.subr.gloc.of \x2E;cdar 1 "../stdlib/core/unicode-assistants.scm" . 43067)
         (subr.gloc.of \x2E;core-hashtable-set! 3 "../stdlib/core/unicode-assistants.scm" . 43032)
         (push.cdr.iloc (0 . 0) "../stdlib/core/unicode-assistants.scm" . 44062)
         (apply.iloc+ (1 . 0) "../stdlib/core/unicode-assistants.scm" . 44056))
       (push.iloc 2 . 0)
       (push.subr.gloc.of \x2E;get-datum 1 "../stdlib/core/unicode-assistants.scm" . 39967)
       (apply.iloc+ (0 . 0) "../stdlib/core/unicode-assistants.scm" . 39951))
     (push.iloc.0 . 0)
     (ret.subr.gloc.of \x2E;core-hashtable-copy "../stdlib/core/unicode-assistants.scm" . 45071))
   (apply.gloc.of \x2E;call-with-port "../stdlib/core/unicode-assistants.scm" . 6145))
 (set.gloc.of core.unicode-assistants\x27;load-unicode-table-file)
 (close
   (1 0 . core.unicode-assistants\x27;load-unicode-list-file)
   (push.iloc.0 . 0)
   (push.subr.gloc.of
     \x2E;open-builtin-data-input-port
     1
     "../stdlib/core/unicode-assistants.scm"
     .
     50187)
   (push.gloc.of \x2E;fn29.1\x60;29)
   (apply.gloc.of \x2E;call-with-port "../stdlib/core/unicode-assistants.scm" . 49159))
 (set.gloc.of core.unicode-assistants\x27;load-unicode-list-file)
 (close
   (0 0 . core.unicode-assistants\x27;general-category-table-1)
   (call
     (push.const . "general-category-1")
     (push.const . 1000)
     (apply.gloc.of
       core.unicode-assistants\x27;load-unicode-table-file
       "../stdlib/core/unicode-assistants.scm"
       .
       64516))
   (push)
   (extend . 1)
   (close (0 0 . core.unicode-assistants\x27;general-category-table-1) (ret.iloc 1 . 0))
   (set.gloc.of core.unicode-assistants\x27;general-category-table-1)
   (ret.iloc 0 . 0))
 (set.gloc.of core.unicode-assistants\x27;general-category-table-1)
 (close
   (0 0 . core.unicode-assistants\x27;general-category-table-2)
   (call
     (push.const . "general-category-2")
     (push.const . 170000)
     (apply.gloc.of
       core.unicode-assistants\x27;load-unicode-table-file
       "../stdlib/core/unicode-assistants.scm"
       .
       68612))
   (push)
   (extend . 1)
   (close (0 0 . core.unicode-assistants\x27;general-category-table-2) (ret.iloc 1 . 0))
   (set.gloc.of core.unicode-assistants\x27;general-category-table-2)
   (ret.iloc 0 . 0))
 (set.gloc.of core.unicode-assistants\x27;general-category-table-2)
 (close
   (0 0 . core.unicode-assistants\x27;simple-uppercase-table)
   (call
     (push.const . "simple-uppercase")
     (push.const . 1500)
     (apply.gloc.of
       core.unicode-assistants\x27;load-unicode-table-file
       "../stdlib/core/unicode-assistants.scm"
       .
       72708))
   (push)
   (extend . 1)
   (close (0 0 . core.unicode-assistants\x27;simple-uppercase-table) (ret.iloc 1 . 0))
   (set.gloc.of core.unicode-assistants\x27;simple-uppercase-table)
   (ret.iloc 0 . 0))
 (set.gloc.of core.unicode-assistants\x27;simple-uppercase-table)
 (close
   (0 0 . core.unicode-assistants\x27;simple-lowercase-table)
   (call
     (push.const . "simple-lowercase")
     (push.const . 1500)
     (apply.gloc.of
       core.unicode-assistants\x27;load-unicode-table-file
       "../stdlib/core/unicode-assistants.scm"
       .
       76804))
   (push)
   (extend . 1)
   (close (0 0 . core.unicode-assistants\x27;simple-lowercase-table) (ret.iloc 1 . 0))
   (set.gloc.of core.unicode-assistants\x27;simple-lowercase-table)
   (ret.iloc 0 . 0))
 (set.gloc.of core.unicode-assistants\x27;simple-lowercase-table)
 (close
   (0 0 . core.unicode-assistants\x27;simple-titlecase-table)
   (call
     (push.const . "simple-titlecase")
     (push.const . 1500)
     (apply.gloc.of
       core.unicode-assistants\x27;load-unicode-table-file
       "../stdlib/core/unicode-assistants.scm"
       .
       80900))
   (push)
   (extend . 1)
   (close (0 0 . core.unicode-assistants\x27;simple-titlecase-table) (ret.iloc 1 . 0))
   (set.gloc.of core.unicode-assistants\x27;simple-titlecase-table)
   (ret.iloc 0 . 0))
 (set.gloc.of core.unicode-assistants\x27;simple-titlecase-table)
 (close
   (0 0 . core.unicode-assistants\x27;numeric-property-table)
   (call
     (push.const . "numeric-property")
     (push.const . 1500)
     (apply.gloc.of
       core.unicode-assistants\x27;load-unicode-table-file
       "../stdlib/core/unicode-assistants.scm"
       .
       84996))
   (push)
   (extend . 1)
   (close (0 0 . core.unicode-assistants\x27;numeric-property-table) (ret.iloc 1 . 0))
   (set.gloc.of core.unicode-assistants\x27;numeric-property-table)
   (ret.iloc 0 . 0))
 (set.gloc.of core.unicode-assistants\x27;numeric-property-table)
 (close
   (0 0 . core.unicode-assistants\x27;special-casing-lower-table)
   (call
     (push.const . "special-casing-lower")
     (push.const . 300)
     (apply.gloc.of
       core.unicode-assistants\x27;load-unicode-table-file
       "../stdlib/core/unicode-assistants.scm"
       .
       89092))
   (push)
   (extend . 1)
   (close (0 0 . core.unicode-assistants\x27;special-casing-lower-table) (ret.iloc 1 . 0))
   (set.gloc.of core.unicode-assistants\x27;special-casing-lower-table)
   (ret.iloc 0 . 0))
 (set.gloc.of core.unicode-assistants\x27;special-casing-lower-table)
 (close
   (0 0 . core.unicode-assistants\x27;special-casing-title-table)
   (call
     (push.const . "special-casing-title")
     (push.const . 300)
     (apply.gloc.of
       core.unicode-assistants\x27;load-unicode-table-file
       "../stdlib/core/unicode-assistants.scm"
       .
       93188))
   (push)
   (extend . 1)
   (close (0 0 . core.unicode-assistants\x27;special-casing-title-table) (ret.iloc 1 . 0))
   (set.gloc.of core.unicode-assistants\x27;special-casing-title-table)
   (ret.iloc 0 . 0))
 (set.gloc.of core.unicode-assistants\x27;special-casing-title-table)
 (close
   (0 0 . core.unicode-assistants\x27;special-casing-upper-table)
   (call
     (push.const . "special-casing-upper")
     (push.const . 300)
     (apply.gloc.of
       core.unicode-assistants\x27;load-unicode-table-file
       "../stdlib/core/unicode-assistants.scm"
       .
       97284))
   (push)
   (extend . 1)
   (close (0 0 . core.unicode-assistants\x27;special-casing-upper-table) (ret.iloc 1 . 0))
   (set.gloc.of core.unicode-assistants\x27;special-casing-upper-table)
   (ret.iloc 0 . 0))
 (set.gloc.of core.unicode-assistants\x27;special-casing-upper-table)
 (close
   (0 0 . core.unicode-assistants\x27;case-folding-table)
   (call
     (push.const . "case-folding")
     (push.const . 1500)
     (apply.gloc.of
       core.unicode-assistants\x27;load-unicode-table-file
       "../stdlib/core/unicode-assistants.scm"
       .
       101380))
   (push)
   (extend . 1)
   (close (0 0 . core.unicode-assistants\x27;case-folding-table) (ret.iloc 1 . 0))
   (set.gloc.of core.unicode-assistants\x27;case-folding-table)
   (ret.iloc 0 . 0))
 (set.gloc.of core.unicode-assistants\x27;case-folding-table)
 (close
   (0 0 . core.unicode-assistants\x27;other-uppercase-list)
   (call
     (push.const . "other-uppercase")
     (apply.gloc.of
       core.unicode-assistants\x27;load-unicode-list-file
       "../stdlib/core/unicode-assistants.scm"
       .
       105476))
   (push)
   (extend . 1)
   (close (0 0 . core.unicode-assistants\x27;other-uppercase-list) (ret.iloc 1 . 0))
   (set.gloc.of core.unicode-assistants\x27;other-uppercase-list)
   (ret.iloc 0 . 0))
 (set.gloc.of core.unicode-assistants\x27;other-uppercase-list)
 (close
   (0 0 . core.unicode-assistants\x27;other-lowercase-list)
   (call
     (push.const . "other-lowercase")
     (apply.gloc.of
       core.unicode-assistants\x27;load-unicode-list-file
       "../stdlib/core/unicode-assistants.scm"
       .
       109572))
   (push)
   (extend . 1)
   (close (0 0 . core.unicode-assistants\x27;other-lowercase-list) (ret.iloc 1 . 0))
   (set.gloc.of core.unicode-assistants\x27;other-lowercase-list)
   (ret.iloc 0 . 0))
 (set.gloc.of core.unicode-assistants\x27;other-lowercase-list)
 (close
   (0 0 . core.unicode-assistants\x27;other-alphabetic-list)
   (call
     (push.const . "other-alphabetic")
     (apply.gloc.of
       core.unicode-assistants\x27;load-unicode-list-file
       "../stdlib/core/unicode-assistants.scm"
       .
       113668))
   (push)
   (extend . 1)
   (close (0 0 . core.unicode-assistants\x27;other-alphabetic-list) (ret.iloc 1 . 0))
   (set.gloc.of core.unicode-assistants\x27;other-alphabetic-list)
   (ret.iloc 0 . 0))
 (set.gloc.of core.unicode-assistants\x27;other-alphabetic-list)
 (close
   (1 0 . core.unicode-assistants\x27;general-category)
   (push.iloc.0 . 0)
   (push.subr.gloc.of \x2E;char->integer 1 "../stdlib/core/unicode-assistants.scm" . 117777)
   (extend . 1)
   (call
     (apply.gloc.of
       core.unicode-assistants\x27;general-category-table-1
       "../stdlib/core/unicode-assistants.scm"
       .
       118817))
   (push)
   (push.iloc.0 . 0)
   (push.const . #f)
   (subr.gloc.of \x2E;core-hashtable-ref 3 "../stdlib/core/unicode-assistants.scm" . 118797)
   (if.true.ret)
   (call
     (apply.gloc.of
       core.unicode-assistants\x27;general-category-table-2
       "../stdlib/core/unicode-assistants.scm"
       .
       119841))
   (push)
   (push.iloc.0 . 0)
   (push.const . #f)
   (subr.gloc.of \x2E;core-hashtable-ref 3 "../stdlib/core/unicode-assistants.scm" . 119821)
   (if.true.ret)
   (push.const . 13312)
   (push.iloc.0 . 0)
   (push.const . 19893)
   (subr.gloc.of \x2E;<= 3 "../stdlib/core/unicode-assistants.scm" . 123919)
   (if.true.ret.const . Lo)
   (push.const . 19968)
   (push.iloc.0 . 0)
   (push.const . 40891)
   (subr.gloc.of \x2E;<= 3 "../stdlib/core/unicode-assistants.scm" . 126991)
   (if.true.ret.const . Lo)
   (push.const . 44032)
   (push.iloc.0 . 0)
   (push.const . 55203)
   (subr.gloc.of \x2E;<= 3 "../stdlib/core/unicode-assistants.scm" . 130063)
   (if.true.ret.const . Lo)
   (push.const . 55296)
   (push.iloc.0 . 0)
   (push.const . 56191)
   (subr.gloc.of \x2E;<= 3 "../stdlib/core/unicode-assistants.scm" . 133135)
   (if.true.ret.const . Cs)
   (push.const . 56192)
   (push.iloc.0 . 0)
   (push.const . 56319)
   (subr.gloc.of \x2E;<= 3 "../stdlib/core/unicode-assistants.scm" . 136207)
   (if.true.ret.const . Cs)
   (push.const . 56320)
   (push.iloc.0 . 0)
   (push.const . 57343)
   (subr.gloc.of \x2E;<= 3 "../stdlib/core/unicode-assistants.scm" . 139279)
   (if.true.ret.const . Cs)
   (push.const . 57344)
   (push.iloc.0 . 0)
   (push.const . 63743)
   (subr.gloc.of \x2E;<= 3 "../stdlib/core/unicode-assistants.scm" . 142351)
   (if.true.ret.const . Co)
   (push.const . 131072)
   (push.iloc.0 . 0)
   (push.const . 173782)
   (subr.gloc.of \x2E;<= 3 "../stdlib/core/unicode-assistants.scm" . 145423)
   (if.true.ret.const . Lo)
   (push.const . 983040)
   (push.iloc.0 . 0)
   (push.const . 1048573)
   (subr.gloc.of \x2E;<= 3 "../stdlib/core/unicode-assistants.scm" . 148495)
   (if.true.ret.const . Co)
   (push.const . 1048576)
   (push.iloc.0 . 0)
   (push.const . 1114109)
   (subr.gloc.of \x2E;<= 3 "../stdlib/core/unicode-assistants.scm" . 151567)
   (if.true.ret.const . Co)
   (ret.const . Cn))
 (set.gloc.of core.unicode-assistants\x27;general-category)
 (close
   (1 0 . core.unicode-assistants\x27;numeric-property?)
   (call
     (apply.gloc.of
       core.unicode-assistants\x27;numeric-property-table
       "../stdlib/core/unicode-assistants.scm"
       .
       156704))
   (push)
   (push.iloc.0 . 0)
   (push.subr.gloc.of \x2E;char->integer 1 "../stdlib/core/unicode-assistants.scm" . 156729)
   (push.const . #f)
   (subr.gloc.of \x2E;core-hashtable-ref 3 "../stdlib/core/unicode-assistants.scm" . 156684)
   (if.false.ret)
   (ret.const . #t))
 (set.gloc.of core.unicode-assistants\x27;numeric-property?)
 (close
   (1 0 . core.unicode-assistants\x27;simple-uppercase)
   (call
     (apply.gloc.of
       core.unicode-assistants\x27;simple-uppercase-table
       "../stdlib/core/unicode-assistants.scm"
       .
       160802))
   (push)
   (push.iloc.0 . 0)
   (push.subr.gloc.of \x2E;char->integer 1 "../stdlib/core/unicode-assistants.scm" . 160827)
   (push.const . #f)
   (push.subr.gloc.of \x2E;core-hashtable-ref 3 "../stdlib/core/unicode-assistants.scm" . 160782)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (push.iloc.0 . 0)
     (ret.subr.gloc.of \x2E;integer->char "../stdlib/core/unicode-assistants.scm" . 161821))
   (ret.iloc 1 . 0))
 (set.gloc.of core.unicode-assistants\x27;simple-uppercase)
 (close
   (1 0 . core.unicode-assistants\x27;simple-lowercase)
   (call
     (apply.gloc.of
       core.unicode-assistants\x27;simple-lowercase-table
       "../stdlib/core/unicode-assistants.scm"
       .
       166946))
   (push)
   (push.iloc.0 . 0)
   (push.subr.gloc.of \x2E;char->integer 1 "../stdlib/core/unicode-assistants.scm" . 166971)
   (push.const . #f)
   (push.subr.gloc.of \x2E;core-hashtable-ref 3 "../stdlib/core/unicode-assistants.scm" . 166926)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (push.iloc.0 . 0)
     (ret.subr.gloc.of \x2E;integer->char "../stdlib/core/unicode-assistants.scm" . 167965))
   (ret.iloc 1 . 0))
 (set.gloc.of core.unicode-assistants\x27;simple-lowercase)
 (close
   (1 0 . core.unicode-assistants\x27;simple-titlecase)
   (call
     (apply.gloc.of
       core.unicode-assistants\x27;simple-titlecase-table
       "../stdlib/core/unicode-assistants.scm"
       .
       173090))
   (push)
   (push.iloc.0 . 0)
   (push.subr.gloc.of \x2E;char->integer 1 "../stdlib/core/unicode-assistants.scm" . 173115)
   (push.const . #f)
   (push.subr.gloc.of \x2E;core-hashtable-ref 3 "../stdlib/core/unicode-assistants.scm" . 173070)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (push.iloc.0 . 0)
     (ret.subr.gloc.of \x2E;integer->char "../stdlib/core/unicode-assistants.scm" . 174109))
   (push.iloc.1 . 0)
   (apply.gloc.of
     core.unicode-assistants\x27;simple-uppercase
     "../stdlib/core/unicode-assistants.scm"
     .
     175123))
 (set.gloc.of core.unicode-assistants\x27;simple-titlecase)
 (close
   (1 0 . core.unicode-assistants\x27;other-uppercase-property?)
   (push.iloc.0 . 0)
   (push.subr.gloc.of \x2E;char->integer 1 "../stdlib/core/unicode-assistants.scm" . 179217)
   (extend . 1)
   (push.const . 8544)
   (push.iloc.0 . 0)
   (push.const . 9423)
   (subr.gloc.of \x2E;<= 3 "../stdlib/core/unicode-assistants.scm" . 180238)
   (if.false.ret)
   (push.close
     (1 0)
     (push.car.iloc (0 . 0) "../stdlib/core/unicode-assistants.scm" . 181286)
     (push.iloc.1 . 0)
     (push.cdr.iloc (0 . 0) "../stdlib/core/unicode-assistants.scm" . 181297)
     (ret.subr.gloc.of \x2E;<= "../stdlib/core/unicode-assistants.scm" . 181282))
   (call
     (apply.gloc.of
       core.unicode-assistants\x27;other-uppercase-list
       "../stdlib/core/unicode-assistants.scm"
       .
       181307))
   (push)
   (apply.gloc.of core.lists\x27;exists "../stdlib/core/unicode-assistants.scm" . 181262))
 (set.gloc.of core.unicode-assistants\x27;other-uppercase-property?)
 (close
   (1 0 . core.unicode-assistants\x27;other-lowercase-property?)
   (push.iloc.0 . 0)
   (push.subr.gloc.of \x2E;char->integer 1 "../stdlib/core/unicode-assistants.scm" . 185361)
   (extend . 1)
   (push.const . 688)
   (push.iloc.0 . 0)
   (push.const . 9449)
   (subr.gloc.of \x2E;<= 3 "../stdlib/core/unicode-assistants.scm" . 186382)
   (if.false.ret)
   (push.close
     (1 0)
     (push.car.iloc (0 . 0) "../stdlib/core/unicode-assistants.scm" . 187430)
     (push.iloc.1 . 0)
     (push.cdr.iloc (0 . 0) "../stdlib/core/unicode-assistants.scm" . 187441)
     (ret.subr.gloc.of \x2E;<= "../stdlib/core/unicode-assistants.scm" . 187426))
   (call
     (apply.gloc.of
       core.unicode-assistants\x27;other-lowercase-list
       "../stdlib/core/unicode-assistants.scm"
       .
       187451))
   (push)
   (apply.gloc.of core.lists\x27;exists "../stdlib/core/unicode-assistants.scm" . 187406))
 (set.gloc.of core.unicode-assistants\x27;other-lowercase-property?)
 (close
   (1 0 . core.unicode-assistants\x27;other-alphabetic-property?)
   (push.iloc.0 . 0)
   (push.subr.gloc.of \x2E;char->integer 1 "../stdlib/core/unicode-assistants.scm" . 191505)
   (extend . 1)
   (push.const . 837)
   (push.iloc.0 . 0)
   (push.const . 68111)
   (subr.gloc.of \x2E;<= 3 "../stdlib/core/unicode-assistants.scm" . 192526)
   (if.false.ret)
   (push.close
     (1 0)
     (push.car.iloc (0 . 0) "../stdlib/core/unicode-assistants.scm" . 193574)
     (push.iloc.1 . 0)
     (push.cdr.iloc (0 . 0) "../stdlib/core/unicode-assistants.scm" . 193585)
     (ret.subr.gloc.of \x2E;<= "../stdlib/core/unicode-assistants.scm" . 193570))
   (call
     (apply.gloc.of
       core.unicode-assistants\x27;other-alphabetic-list
       "../stdlib/core/unicode-assistants.scm"
       .
       193595))
   (push)
   (apply.gloc.of core.lists\x27;exists "../stdlib/core/unicode-assistants.scm" . 193550))
 (set.gloc.of core.unicode-assistants\x27;other-alphabetic-property?)
 (close
   (1 0 . core.unicode-assistants\x27;special-casing-lower)
   (call
     (apply.gloc.of
       core.unicode-assistants\x27;special-casing-lower-table
       "../stdlib/core/unicode-assistants.scm"
       .
       197659))
   (push)
   (push.iloc.0 . 0)
   (push.subr.gloc.of \x2E;char->integer 1 "../stdlib/core/unicode-assistants.scm" . 197688)
   (push.const . #f)
   (ret.subr.gloc.of \x2E;core-hashtable-ref "../stdlib/core/unicode-assistants.scm" . 197639))
 (set.gloc.of core.unicode-assistants\x27;special-casing-lower)
 (close
   (1 0 . core.unicode-assistants\x27;special-casing-title)
   (call
     (apply.gloc.of
       core.unicode-assistants\x27;special-casing-title-table
       "../stdlib/core/unicode-assistants.scm"
       .
       201755))
   (push)
   (push.iloc.0 . 0)
   (push.subr.gloc.of \x2E;char->integer 1 "../stdlib/core/unicode-assistants.scm" . 201784)
   (push.const . #f)
   (ret.subr.gloc.of \x2E;core-hashtable-ref "../stdlib/core/unicode-assistants.scm" . 201735))
 (set.gloc.of core.unicode-assistants\x27;special-casing-title)
 (close
   (1 0 . core.unicode-assistants\x27;special-casing-upper)
   (call
     (apply.gloc.of
       core.unicode-assistants\x27;special-casing-upper-table
       "../stdlib/core/unicode-assistants.scm"
       .
       205851))
   (push)
   (push.iloc.0 . 0)
   (push.subr.gloc.of \x2E;char->integer 1 "../stdlib/core/unicode-assistants.scm" . 205880)
   (push.const . #f)
   (ret.subr.gloc.of \x2E;core-hashtable-ref "../stdlib/core/unicode-assistants.scm" . 205831))
 (set.gloc.of core.unicode-assistants\x27;special-casing-upper)
 (close
   (1 0 . core.unicode-assistants\x27;foldcase)
   (call
     (apply.gloc.of
       core.unicode-assistants\x27;case-folding-table
       "../stdlib/core/unicode-assistants.scm"
       .
       209947))
   (push)
   (push.iloc.0 . 0)
   (push.subr.gloc.of \x2E;char->integer 1 "../stdlib/core/unicode-assistants.scm" . 209968)
   (push.const . #f)
   (ret.subr.gloc.of \x2E;core-hashtable-ref "../stdlib/core/unicode-assistants.scm" . 209927))
 (set.gloc.of core.unicode-assistants\x27;foldcase)
 (close
   (0 0 . core.unicode-assistants\x27;canonical-class-table)
   (call
     (push.const . "canonical-class")
     (push.const . 1500)
     (apply.gloc.of
       core.unicode-assistants\x27;load-unicode-table-file
       "../stdlib/core/unicode-assistants.scm"
       .
       214020))
   (push)
   (extend . 1)
   (close (0 0 . core.unicode-assistants\x27;canonical-class-table) (ret.iloc 1 . 0))
   (set.gloc.of core.unicode-assistants\x27;canonical-class-table)
   (ret.iloc 0 . 0))
 (set.gloc.of core.unicode-assistants\x27;canonical-class-table)
 (close
   (0 0 . core.unicode-assistants\x27;decompose-table)
   (call
     (push.const . "decompose")
     (push.const . 80000)
     (apply.gloc.of
       core.unicode-assistants\x27;load-unicode-table-file
       "../stdlib/core/unicode-assistants.scm"
       .
       218116))
   (push)
   (extend . 1)
   (close (0 0 . core.unicode-assistants\x27;decompose-table) (ret.iloc 1 . 0))
   (set.gloc.of core.unicode-assistants\x27;decompose-table)
   (ret.iloc 0 . 0))
 (set.gloc.of core.unicode-assistants\x27;decompose-table)
 (close
   (0 0 . core.unicode-assistants\x27;compose-table)
   (call
     (push.const . "compose")
     (push.const . 5000)
     (apply.gloc.of
       core.unicode-assistants\x27;load-unicode-table-file
       "../stdlib/core/unicode-assistants.scm"
       .
       222212))
   (push)
   (extend . 1)
   (close (0 0 . core.unicode-assistants\x27;compose-table) (ret.iloc 1 . 0))
   (set.gloc.of core.unicode-assistants\x27;compose-table)
   (ret.iloc 0 . 0))
 (set.gloc.of core.unicode-assistants\x27;compose-table)
 (close
   (0 0 . core.unicode-assistants\x27;compatibility-table)
   (call
     (push.const . "compatibility")
     (push.const . 5000)
     (apply.gloc.of
       core.unicode-assistants\x27;load-unicode-table-file
       "../stdlib/core/unicode-assistants.scm"
       .
       226308))
   (push)
   (extend . 1)
   (close (0 0 . core.unicode-assistants\x27;compatibility-table) (ret.iloc 1 . 0))
   (set.gloc.of core.unicode-assistants\x27;compatibility-table)
   (ret.iloc 0 . 0))
 (set.gloc.of core.unicode-assistants\x27;compatibility-table)
 (const . 44032)
 (set.gloc.of core.unicode-assistants\x27;SBase)
 (const . 4352)
 (set.gloc.of core.unicode-assistants\x27;LBase)
 (const . 4449)
 (set.gloc.of core.unicode-assistants\x27;VBase)
 (const . 4519)
 (set.gloc.of core.unicode-assistants\x27;TBase)
 (const . 19)
 (set.gloc.of core.unicode-assistants\x27;LCount)
 (const . 21)
 (set.gloc.of core.unicode-assistants\x27;VCount)
 (const . 28)
 (set.gloc.of core.unicode-assistants\x27;TCount)
 (push.gloc.of core.unicode-assistants\x27;VCount)
 (push.gloc.of core.unicode-assistants\x27;TCount)
 (subr.gloc.of \x2E;* 2 "../stdlib/core/unicode-assistants.scm" . 235538)
 (set.gloc.of core.unicode-assistants\x27;NCount)
 (push.gloc.of core.unicode-assistants\x27;LCount)
 (push.gloc.of core.unicode-assistants\x27;NCount)
 (subr.gloc.of \x2E;* 2 "../stdlib/core/unicode-assistants.scm" . 236562)
 (set.gloc.of core.unicode-assistants\x27;SCount)
 (close
   (2 0 . core.unicode-assistants\x27;pair-wise-composition)
   (call
     (<n.iloc (0 . 0) 0 "../stdlib/core/unicode-assistants.scm" . 240658)
     (if.true.ret)
     (>n.iloc (0 . 0) 1114111 "../stdlib/core/unicode-assistants.scm" . 240670)
     (if.true.ret)
     (<n.iloc (0 . 1) 0 "../stdlib/core/unicode-assistants.scm" . 240689)
     (if.true.ret)
     (push.iloc.0 . 1)
     (push.const . 1114111)
     (ret.subr.gloc.of \x2E;> "../stdlib/core/unicode-assistants.scm" . 240702))
   (if.true.ret.const . #f)
   (push.iloc.0 . 0)
   (push.gloc.of core.unicode-assistants\x27;LBase)
   (push.subr.gloc.of \x2E;- 2 "../stdlib/core/unicode-assistants.scm" . 242716)
   (push.iloc.0 . 1)
   (push.gloc.of core.unicode-assistants\x27;VBase)
   (push.subr.gloc.of \x2E;- 2 "../stdlib/core/unicode-assistants.scm" . 242741)
   (push.iloc.0 . 0)
   (push.gloc.of core.unicode-assistants\x27;SBase)
   (push.subr.gloc.of \x2E;- 2 "../stdlib/core/unicode-assistants.scm" . 242767)
   (push.iloc.0 . 1)
   (push.gloc.of core.unicode-assistants\x27;TBase)
   (push.subr.gloc.of \x2E;- 2 "../stdlib/core/unicode-assistants.scm" . 242792)
   (extend . 4)
   (call
     (push.const . -1)
     (push.iloc.0 . 0)
     (push.gloc.of core.unicode-assistants\x27;LCount)
     (subr.gloc.of \x2E;< 3 "../stdlib/core/unicode-assistants.scm" . 243740)
     (if.false.ret)
     (push.const . -1)
     (push.iloc.0 . 1)
     (push.gloc.of core.unicode-assistants\x27;VCount)
     (ret.subr.gloc.of \x2E;< "../stdlib/core/unicode-assistants.scm" . 243761))
   (if.true
     (push.gloc.of core.unicode-assistants\x27;SBase)
     (push.gloc.of core.unicode-assistants\x27;TCount)
     (push.iloc.0 . 1)
     (push.iloc.0 . 0)
     (push.gloc.of core.unicode-assistants\x27;VCount)
     (push.subr.gloc.of \x2E;* 2 "../stdlib/core/unicode-assistants.scm" . 244788)
     (push.subr.gloc.of \x2E;+ 2 "../stdlib/core/unicode-assistants.scm" . 244778)
     (push.subr.gloc.of \x2E;* 2 "../stdlib/core/unicode-assistants.scm" . 244768)
     (ret.subr.gloc.of \x2E;+ "../stdlib/core/unicode-assistants.scm" . 244759))
   (call
     (push.const . -1)
     (push.iloc.0 . 2)
     (push.gloc.of core.unicode-assistants\x27;SCount)
     (subr.gloc.of \x2E;< 3 "../stdlib/core/unicode-assistants.scm" . 245788)
     (if.false.ret)
     (push.const . -1)
     (push.iloc.0 . 3)
     (push.gloc.of core.unicode-assistants\x27;TCount)
     (subr.gloc.of \x2E;< 3 "../stdlib/core/unicode-assistants.scm" . 245809)
     (if.false.ret)
     (push.const . 0)
     (call
       (push.iloc.0 . 2)
       (push.gloc.of core.unicode-assistants\x27;TCount)
       (apply.gloc.of \x2E;mod "../stdlib/core/unicode-assistants.scm" . 245835))
     (push)
     (ret.subr.gloc.of \x2E;= "../stdlib/core/unicode-assistants.scm" . 245830))
   (if.true
     (push.iloc.1 . 0)
     (push.iloc.0 . 3)
     (ret.subr.gloc.of \x2E;+ "../stdlib/core/unicode-assistants.scm" . 246807))
   (call
     (apply.gloc.of
       core.unicode-assistants\x27;compose-table
       "../stdlib/core/unicode-assistants.scm"
       .
       248875))
   (push)
   (push.iloc.1 . 0)
   (push.const . 65536)
   (push.subr.gloc.of \x2E;* 2 "../stdlib/core/unicode-assistants.scm" . 248894)
   (push.iloc.1 . 1)
   (push.subr.gloc.of \x2E;+ 2 "../stdlib/core/unicode-assistants.scm" . 248891)
   (push.const . #f)
   (ret.subr.gloc.of \x2E;core-hashtable-ref "../stdlib/core/unicode-assistants.scm" . 248855))
 (set.gloc.of core.unicode-assistants\x27;pair-wise-composition)
 (close
   (3 0 . core.unicode-assistants\x27;recursive-decomposition)
   (call
     (apply.gloc.of
       core.unicode-assistants\x27;decompose-table
       "../stdlib/core/unicode-assistants.scm"
       .
       252966))
   (push)
   (push.iloc.0 . 1)
   (push.const . #f)
   (push.subr.gloc.of \x2E;core-hashtable-ref 3 "../stdlib/core/unicode-assistants.scm" . 252946)
   (extend . 1)
   (push.iloc.1 . 1)
   (push.gloc.of core.unicode-assistants\x27;SBase)
   (push.subr.gloc.of \x2E;- 2 "../stdlib/core/unicode-assistants.scm" . 253975)
   (extend . 1)
   (call
     (iloc.1 . 0)
     (if.false.ret)
     (call
       (iloc 2 . 0)
       (if.false.ret)
       (call
         (apply.gloc.of
           core.unicode-assistants\x27;compatibility-table
           "../stdlib/core/unicode-assistants.scm"
           .
           255043))
       (push)
       (push.iloc 2 . 1)
       (push.const . #f)
       (ret.subr.gloc.of \x2E;core-hashtable-ref "../stdlib/core/unicode-assistants.scm" . 255023))
     (push)
     (ret.subr.gloc.of \x2E;not "../stdlib/core/unicode-assistants.scm" . 255003))
   (if.true
     (push.close
       (1 0)
       (push.iloc 3 . 0)
       (push.iloc.0 . 0)
       (push.iloc 3 . 2)
       (apply.gloc.of
         core.unicode-assistants\x27;recursive-decomposition
         "../stdlib/core/unicode-assistants.scm"
         .
         256041))
     (push.iloc.1 . 0)
     (apply.gloc.of \x2E;for-each "../stdlib/core/unicode-assistants.scm" . 256018))
   (push.const . -1)
   (push.iloc.0 . 0)
   (push.gloc.of core.unicode-assistants\x27;SCount)
   (subr.gloc.of \x2E;< 3 "../stdlib/core/unicode-assistants.scm" . 257042)
   (if.true
     (push.gloc.of core.unicode-assistants\x27;VBase)
     (call
       (push.iloc.0 . 0)
       (push.gloc.of core.unicode-assistants\x27;NCount)
       (apply.gloc.of \x2E;mod "../stdlib/core/unicode-assistants.scm" . 259113))
     (push)
     (push.gloc.of core.unicode-assistants\x27;TCount)
     (push.subr.gloc.of \x2E;div 2 "../stdlib/core/unicode-assistants.scm" . 259108)
     (push.subr.gloc.of \x2E;+ 2 "../stdlib/core/unicode-assistants.scm" . 259099)
     (push.gloc.of core.unicode-assistants\x27;TBase)
     (call
       (push.iloc.0 . 0)
       (push.gloc.of core.unicode-assistants\x27;TCount)
       (apply.gloc.of \x2E;mod "../stdlib/core/unicode-assistants.scm" . 260132))
     (push)
     (push.subr.gloc.of \x2E;+ 2 "../stdlib/core/unicode-assistants.scm" . 260123)
     (extend . 2)
     (push.iloc 3 . 2)
     (push.gloc.of core.unicode-assistants\x27;LBase)
     (push.iloc.1 . 0)
     (push.gloc.of core.unicode-assistants\x27;NCount)
     (push.subr.gloc.of \x2E;div 2 "../stdlib/core/unicode-assistants.scm" . 258084)
     (push.subr.gloc.of \x2E;+ 2 "../stdlib/core/unicode-assistants.scm" . 258075)
     (push.subr.gloc.of \x2E;integer->char 1 "../stdlib/core/unicode-assistants.scm" . 261157)
     (subr.gloc.of \x2E;put-char 2 "../stdlib/core/unicode-assistants.scm" . 261140)
     (push.iloc 3 . 2)
     (push.iloc.0 . 0)
     (push.subr.gloc.of \x2E;integer->char 1 "../stdlib/core/unicode-assistants.scm" . 262181)
     (subr.gloc.of \x2E;put-char 2 "../stdlib/core/unicode-assistants.scm" . 262164)
     (gloc.of core.unicode-assistants\x27;TBase)
     (=.iloc (0 . 1) "../stdlib/core/unicode-assistants.scm" . 263192)
     (if.true.ret)
     (push.iloc 3 . 2)
     (push.iloc.0 . 1)
     (push.subr.gloc.of \x2E;integer->char 1 "../stdlib/core/unicode-assistants.scm" . 263221)
     (ret.subr.gloc.of \x2E;put-char "../stdlib/core/unicode-assistants.scm" . 263204))
   (push.iloc 2 . 2)
   (push.iloc 2 . 1)
   (push.subr.gloc.of \x2E;integer->char 1 "../stdlib/core/unicode-assistants.scm" . 265251)
   (ret.subr.gloc.of \x2E;put-char "../stdlib/core/unicode-assistants.scm" . 265234))
 (set.gloc.of core.unicode-assistants\x27;recursive-decomposition)
 (close
   (2 0 . core.unicode-assistants\x27;decompose)
   (subr.gloc.of \x2E;make-string-output-port 0)
   (push)
   (extend . 1)
   (extend.enclose+
     (1 0 . loop)
     (push.iloc.0 . 0)
     (subr.gloc.of \x2E;eof-object? 1 "../stdlib/core/unicode-assistants.scm" . 271378)
     (if.true
       (push.iloc 2 . 0)
       (push.subr.gloc.of
         \x2E;extract-accumulated-string
         1
         "../stdlib/core/unicode-assistants.scm"
         .
         272417)
       (subr.gloc.of \x2E;native-endianness 0)
       (push)
       (apply.gloc.of
         core.bytevector-transcoders\x27;string->utf32
         "../stdlib/core/unicode-assistants.scm"
         .
         272402))
     (call
       (push.iloc 3 . 1)
       (push.iloc.0 . 0)
       (push.subr.gloc.of \x2E;char->integer 1 "../stdlib/core/unicode-assistants.scm" . 274485)
       (push.iloc 2 . 0)
       (apply.gloc.of
         core.unicode-assistants\x27;recursive-decomposition
         "../stdlib/core/unicode-assistants.scm"
         .
         274450))
     (push.iloc 3 . 0)
     (push.subr.gloc.of \x2E;get-char 1 "../stdlib/core/unicode-assistants.scm" . 275480)
     (apply.iloc+ (1 . 0) "../stdlib/core/unicode-assistants.scm" . 275474))
   (push.iloc 2 . 0)
   (push.subr.gloc.of \x2E;get-char 1 "../stdlib/core/unicode-assistants.scm" . 270360)
   (apply.iloc+ (0 . 0) "../stdlib/core/unicode-assistants.scm" . 270345))
 (set.gloc.of core.unicode-assistants\x27;decompose)
 (close
   (1 0 . core.unicode-assistants\x27;canonical-class)
   (call
     (apply.gloc.of
       core.unicode-assistants\x27;canonical-class-table
       "../stdlib/core/unicode-assistants.scm"
       .
       279579))
   (push)
   (push.iloc.0 . 0)
   (push.const . 0)
   (ret.subr.gloc.of \x2E;core-hashtable-ref "../stdlib/core/unicode-assistants.scm" . 279559))
 (set.gloc.of core.unicode-assistants\x27;canonical-class)
 (close
   (1 0 . core.unicode-assistants\x27;sort-combining-marks!)
   (push.iloc.0 . 0)
   (push.subr.gloc.of \x2E;bytevector-length 1 "../stdlib/core/unicode-assistants.scm" . 283670)
   (push.const . 4)
   (push.subr.gloc.of \x2E;- 2 "../stdlib/core/unicode-assistants.scm" . 283667)
   (extend . 1)
   (extend.enclose+
     (1 0 . loop)
     (iloc.0 . 0)
     (>=.iloc (2 . 0) "../stdlib/core/unicode-assistants.scm" . 285714)
     (if.true (ret.iloc 3 . 0))
     (push.iloc 3 . 0)
     (push.iloc.0 . 0)
     (push.subr.gloc.of
       \x2E;bytevector-u32-native-ref
       2
       "../stdlib/core/unicode-assistants.scm"
       .
       287774)
     (push.iloc 3 . 0)
     (push.n+.iloc (0 . 0) 4 "../stdlib/core/unicode-assistants.scm" . 288828)
     (push.subr.gloc.of
       \x2E;bytevector-u32-native-ref
       2
       "../stdlib/core/unicode-assistants.scm"
       .
       288798)
     (extend . 2)
     (call
       (push.iloc.0 . 0)
       (apply.gloc.of
         core.unicode-assistants\x27;canonical-class
         "../stdlib/core/unicode-assistants.scm"
         .
         289827))
     (push)
     (call
       (push.iloc.0 . 1)
       (apply.gloc.of
         core.unicode-assistants\x27;canonical-class
         "../stdlib/core/unicode-assistants.scm"
         .
         290851))
     (push)
     (extend . 2)
     (call
       (>n.iloc (0 . 0) 0 "../stdlib/core/unicode-assistants.scm" . 291874)
       (if.false.ret)
       (>n.iloc (0 . 1) 0 "../stdlib/core/unicode-assistants.scm" . 291888)
       (if.false.ret)
       (push.iloc.0 . 0)
       (push.iloc.0 . 1)
       (ret.subr.gloc.of \x2E;> "../stdlib/core/unicode-assistants.scm" . 291902))
     (if.true
       (push.iloc 5 . 0)
       (push.iloc 2 . 0)
       (push.iloc.1 . 1)
       (subr.gloc.of
         \x2E;bytevector-u32-native-set!
         3
         "../stdlib/core/unicode-assistants.scm"
         .
         292893)
       (push.iloc 5 . 0)
       (push.n+.iloc (2 . 0) 4 "../stdlib/core/unicode-assistants.scm" . 293948)
       (push.iloc.1 . 0)
       (subr.gloc.of
         \x2E;bytevector-u32-native-set!
         3
         "../stdlib/core/unicode-assistants.scm"
         .
         293917)
       (call
         (>=n.iloc (2 . 0) 4 "../stdlib/core/unicode-assistants.scm" . 294951)
         (if.true
           (push.iloc 2 . 0)
           (push.const . 4)
           (ret.subr.gloc.of \x2E;- "../stdlib/core/unicode-assistants.scm" . 294960))
         (ret.const . 4))
       (push)
       (apply.iloc+ (3 . 0) "../stdlib/core/unicode-assistants.scm" . 294941))
     (push.n+.iloc (2 . 0) 4 "../stdlib/core/unicode-assistants.scm" . 296995)
     (apply.iloc+ (3 . 0) "../stdlib/core/unicode-assistants.scm" . 296989))
   (push.const . 0)
   (apply.iloc+ (0 . 0) "../stdlib/core/unicode-assistants.scm" . 284681))
 (set.gloc.of core.unicode-assistants\x27;sort-combining-marks!)
 (close
   (1 0 . core.unicode-assistants\x27;compose)
   (push.iloc.0 . 0)
   (push.subr.gloc.of \x2E;bytevector-length 1 "../stdlib/core/unicode-assistants.scm" . 301074)
   (extend . 1)
   (push.iloc.1 . 0)
   (push.const . 0)
   (push.subr.gloc.of
     \x2E;bytevector-u32-native-ref
     2
     "../stdlib/core/unicode-assistants.scm"
     .
     302103)
   (extend . 1)
   (extend.enclose+
     (5 0 . loop)
     (iloc.0 . 0)
     (>=.iloc (3 . 0) "../stdlib/core/unicode-assistants.scm" . 305172)
     (if.true
       (push.iloc.0 . 4)
       (push.subr.gloc.of \x2E;make-bytevector 1 "../stdlib/core/unicode-assistants.scm" . 306210)
       (extend . 1)
       (push.iloc 5 . 0)
       (push.const . 0)
       (push.iloc.0 . 0)
       (push.const . 0)
       (push.iloc.1 . 4)
       (subr.gloc.of \x2E;bytevector-copy! 5 "../stdlib/core/unicode-assistants.scm" . 307222)
       (push.iloc.0 . 0)
       (subr.gloc.of \x2E;native-endianness 0)
       (push)
       (push.const . #t)
       (apply.gloc.of
         core.bytevector-transcoders\x27;utf32->string
         "../stdlib/core/unicode-assistants.scm"
         .
         308246))
     (push.iloc 4 . 0)
     (push.iloc.0 . 0)
     (push.subr.gloc.of
       \x2E;bytevector-u32-native-ref
       2
       "../stdlib/core/unicode-assistants.scm"
       .
       310305)
     (extend . 1)
     (call
       (push.iloc.0 . 0)
       (apply.gloc.of
         core.unicode-assistants\x27;canonical-class
         "../stdlib/core/unicode-assistants.scm"
         .
         311332))
     (push)
     (extend . 1)
     (call
       (call
         (=n.iloc (2 . 2) 0 "../stdlib/core/unicode-assistants.scm" . 312358)
         (if.true.ret)
         (push.iloc 2 . 2)
         (push.iloc.0 . 0)
         (ret.subr.gloc.of \x2E;< "../stdlib/core/unicode-assistants.scm" . 312375))
       (if.false.ret)
       (push.iloc 2 . 1)
       (push.iloc.1 . 0)
       (apply.gloc.of
         core.unicode-assistants\x27;pair-wise-composition
         "../stdlib/core/unicode-assistants.scm"
         .
         313378))
     (push)
     (extend . 1)
     (iloc.0 . 0)
     (if.true
       (push.iloc 7 . 0)
       (push.iloc 3 . 3)
       (push.iloc.0 . 0)
       (subr.gloc.of
         \x2E;bytevector-u32-native-set!
         3
         "../stdlib/core/unicode-assistants.scm"
         .
         315426)
       (push.n+.iloc (3 . 0) 4 "../stdlib/core/unicode-assistants.scm" . 316456)
       (push.iloc.0 . 0)
       (call
         (push.iloc.0 . 0)
         (apply.gloc.of
           core.unicode-assistants\x27;canonical-class
           "../stdlib/core/unicode-assistants.scm"
           .
           316473))
       (push)
       (push.iloc 3 . 3)
       (push.iloc 3 . 4)
       (apply.iloc+ (4 . 0) "../stdlib/core/unicode-assistants.scm" . 316450))
     (push.iloc 7 . 0)
     (push.iloc 3 . 4)
     (push.iloc 2 . 0)
     (subr.gloc.of
       \x2E;bytevector-u32-native-set!
       3
       "../stdlib/core/unicode-assistants.scm"
       .
       318493)
     (=n.iloc (1 . 0) 0 "../stdlib/core/unicode-assistants.scm" . 319521)
     (if.true
       (push.n+.iloc (3 . 0) 4 "../stdlib/core/unicode-assistants.scm" . 320551)
       (push.iloc 2 . 0)
       (push.iloc.1 . 0)
       (push.iloc 3 . 4)
       (push.n+.iloc (3 . 4) 4 "../stdlib/core/unicode-assistants.scm" . 320581)
       (apply.iloc+ (4 . 0) "../stdlib/core/unicode-assistants.scm" . 320545))
     (push.n+.iloc (3 . 0) 4 "../stdlib/core/unicode-assistants.scm" . 321575)
     (push.iloc 3 . 1)
     (push.iloc.1 . 0)
     (push.iloc 3 . 3)
     (push.n+.iloc (3 . 4) 4 "../stdlib/core/unicode-assistants.scm" . 321611)
     (apply.iloc+ (4 . 0) "../stdlib/core/unicode-assistants.scm" . 321569))
   (push.const . 4)
   (push.iloc.1 . 0)
   (call
     (call
       (push.iloc.1 . 0)
       (apply.gloc.of
         core.unicode-assistants\x27;canonical-class
         "../stdlib/core/unicode-assistants.scm"
         .
         303141))
     (push)
     (subr.gloc.of \x2E;zero? 1 "../stdlib/core/unicode-assistants.scm" . 303134)
     (if.true (ret.const . 0))
     (ret.const . 256))
   (push)
   (push.const . 0)
   (push.const . 4)
   (apply.iloc+ (0 . 0) "../stdlib/core/unicode-assistants.scm" . 304139))
 (set.gloc.of core.unicode-assistants\x27;compose)
 (call
   (push.const . syntax)
   (push.const . core.unicode-assistants\x27;autoload)
   (push.const
     ()
     ("../stdlib/core/unicode-assistants.scm" . 55301)
     ((_ var init)
      (define var (lambda () (let ((memo init)) (begin (set! var (lambda () memo)) memo))))
      ((init . 0) (var . 0))
      (set! begin memo let lambda define)))
   (push.const
     (let import . \x2E;let)
     (begin import . \x2E;begin)
     (_ import . \x2E;_)
     (define import . \x2E;define)
     (lambda import . \x2E;lambda)
     (set! import . \x2E;set!))
   (apply.gloc.of \x2E;set-top-level-macro! "../stdlib/core/unicode-assistants.scm" . 6145))
 (push.const . core.unicode-assistants)
 (push.const . #f)
 (push.const
   (general-category import . core.unicode-assistants\x27;general-category)
   (simple-uppercase import . core.unicode-assistants\x27;simple-uppercase)
   (simple-lowercase import . core.unicode-assistants\x27;simple-lowercase)
   (simple-titlecase import . core.unicode-assistants\x27;simple-titlecase)
   (numeric-property? import . core.unicode-assistants\x27;numeric-property?)
   (other-uppercase-property? import . core.unicode-assistants\x27;other-uppercase-property?)
   (other-lowercase-property? import . core.unicode-assistants\x27;other-lowercase-property?)
   (other-alphabetic-property? import . core.unicode-assistants\x27;other-alphabetic-property?)
   (special-casing-lower import . core.unicode-assistants\x27;special-casing-lower)
   (special-casing-title import . core.unicode-assistants\x27;special-casing-title)
   (special-casing-upper import . core.unicode-assistants\x27;special-casing-upper)
   (foldcase import . core.unicode-assistants\x27;foldcase)
   (pair-wise-composition import . core.unicode-assistants\x27;pair-wise-composition)
   (recursive-decomposition import . core.unicode-assistants\x27;recursive-decomposition)
   (decompose import . core.unicode-assistants\x27;decompose)
   (sort-combining-marks! import . core.unicode-assistants\x27;sort-combining-marks!)
   (compose import . core.unicode-assistants\x27;compose))
 (apply.gloc.of \x2E;intern-scheme-library "../stdlib/core/unicode-assistants.scm" . 6145))

((call
   (push.const core bytevector-transcoders)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core/unicode.scm" . 6145))
 (call
   (push.const core bytevectors)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core/unicode.scm" . 6145))
 (call
   (push.const core unicode-assistants)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core/unicode.scm" . 6145))
 (call
   (push.const core io)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core/unicode.scm" . 6145))
 (call
   (push.const core lists)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core/unicode.scm" . 6145))
 (call
   (push.const core primitives)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core/unicode.scm" . 6145))
 (close
   (1 0 . core.unicode\x27;char-upcase)
   (push.iloc.0 . 0)
   (push.const . #\a)
   (subr.gloc.of \x2E;char<? 2 "../stdlib/core/unicode.scm" . 48142)
   (if.true (ret.iloc 0 . 0))
   (push.iloc.0 . 0)
   (push.const . #\z)
   (subr.gloc.of \x2E;char>? 2 "../stdlib/core/unicode.scm" . 49166)
   (if.true
     (push.iloc.0 . 0)
     (apply.gloc.of
       core.unicode-assistants\x27;simple-uppercase
       "../stdlib/core/unicode.scm"
       .
       50190))
   (push.iloc.0 . 0)
   (push.subr.gloc.of \x2E;char->integer 1 "../stdlib/core/unicode.scm" . 52256)
   (push.const . 32)
   (push.subr.gloc.of \x2E;- 2 "../stdlib/core/unicode.scm" . 52253)
   (ret.subr.gloc.of \x2E;integer->char "../stdlib/core/unicode.scm" . 52238))
 (set.gloc.of core.unicode\x27;char-upcase)
 (close
   (1 0 . core.unicode\x27;char-downcase)
   (push.iloc.0 . 0)
   (push.const . #\A)
   (subr.gloc.of \x2E;char<? 2 "../stdlib/core/unicode.scm" . 56334)
   (if.true (ret.iloc 0 . 0))
   (push.iloc.0 . 0)
   (push.const . #\Z)
   (subr.gloc.of \x2E;char<=? 2 "../stdlib/core/unicode.scm" . 57358)
   (if.true
     (push.iloc.0 . 0)
     (push.subr.gloc.of \x2E;char->integer 1 "../stdlib/core/unicode.scm" . 58400)
     (push.const . 32)
     (push.subr.gloc.of \x2E;+ 2 "../stdlib/core/unicode.scm" . 58397)
     (ret.subr.gloc.of \x2E;integer->char "../stdlib/core/unicode.scm" . 58382))
   (push.iloc.0 . 0)
   (push.const . #\z)
   (subr.gloc.of \x2E;char>? 2 "../stdlib/core/unicode.scm" . 59406)
   (if.true
     (push.iloc.0 . 0)
     (apply.gloc.of
       core.unicode-assistants\x27;simple-lowercase
       "../stdlib/core/unicode.scm"
       .
       60430))
   (ret.iloc 0 . 0))
 (set.gloc.of core.unicode\x27;char-downcase)
 (close
   (1 0 . core.unicode\x27;char-titlecase)
   (push.iloc.0 . 0)
   (apply.gloc.of
     core.unicode-assistants\x27;simple-titlecase
     "../stdlib/core/unicode.scm"
     .
     65543))
 (set.gloc.of core.unicode\x27;char-titlecase)
 (close
   (1 0 . core.unicode\x27;char-foldcase)
   (push.iloc.0 . 0)
   (push.const . #\z)
   (subr.gloc.of \x2E;char<=? 2 "../stdlib/core/unicode.scm" . 69646)
   (if.true
     (push.iloc.0 . 0)
     (apply.gloc.of core.unicode\x27;char-downcase "../stdlib/core/unicode.scm" . 70670))
   (call
     (push.iloc.0 . 0)
     (push.const . #\İ)
     (subr.gloc.of \x2E;char=? 2 "../stdlib/core/unicode.scm" . 71698)
     (if.true.ret)
     (push.iloc.0 . 0)
     (push.const . #\ı)
     (ret.subr.gloc.of \x2E;char=? "../stdlib/core/unicode.scm" . 72722))
   (if.true (ret.iloc 0 . 0))
   (call
     (push.iloc.0 . 0)
     (apply.gloc.of core.unicode\x27;char-upcase "../stdlib/core/unicode.scm" . 75805))
   (push)
   (apply.gloc.of core.unicode\x27;char-downcase "../stdlib/core/unicode.scm" . 75790))
 (set.gloc.of core.unicode\x27;char-foldcase)
 (close
   (2 0 . core.unicode\x27;char-ci=?)
   (call
     (push.iloc.0 . 0)
     (apply.gloc.of core.unicode\x27;char-foldcase "../stdlib/core/unicode.scm" . 79887))
   (push)
   (call
     (push.iloc.0 . 1)
     (apply.gloc.of core.unicode\x27;char-foldcase "../stdlib/core/unicode.scm" . 80911))
   (push)
   (ret.subr.gloc.of \x2E;char=? "../stdlib/core/unicode.scm" . 79879))
 (set.gloc.of core.unicode\x27;char-ci=?)
 (close
   (2 0 . core.unicode\x27;char-ci<?)
   (call
     (push.iloc.0 . 0)
     (apply.gloc.of core.unicode\x27;char-foldcase "../stdlib/core/unicode.scm" . 85007))
   (push)
   (call
     (push.iloc.0 . 1)
     (apply.gloc.of core.unicode\x27;char-foldcase "../stdlib/core/unicode.scm" . 86031))
   (push)
   (ret.subr.gloc.of \x2E;char<? "../stdlib/core/unicode.scm" . 84999))
 (set.gloc.of core.unicode\x27;char-ci<?)
 (close
   (2 0 . core.unicode\x27;char-ci>?)
   (call
     (push.iloc.0 . 0)
     (apply.gloc.of core.unicode\x27;char-foldcase "../stdlib/core/unicode.scm" . 90127))
   (push)
   (call
     (push.iloc.0 . 1)
     (apply.gloc.of core.unicode\x27;char-foldcase "../stdlib/core/unicode.scm" . 91151))
   (push)
   (ret.subr.gloc.of \x2E;char>? "../stdlib/core/unicode.scm" . 90119))
 (set.gloc.of core.unicode\x27;char-ci>?)
 (close
   (2 0 . core.unicode\x27;char-ci<=?)
   (call
     (push.iloc.0 . 0)
     (apply.gloc.of core.unicode\x27;char-foldcase "../stdlib/core/unicode.scm" . 95248))
   (push)
   (call
     (push.iloc.0 . 1)
     (apply.gloc.of core.unicode\x27;char-foldcase "../stdlib/core/unicode.scm" . 96272))
   (push)
   (ret.subr.gloc.of \x2E;char<=? "../stdlib/core/unicode.scm" . 95239))
 (set.gloc.of core.unicode\x27;char-ci<=?)
 (close
   (2 0 . core.unicode\x27;char-ci>=?)
   (call
     (push.iloc.0 . 0)
     (apply.gloc.of core.unicode\x27;char-foldcase "../stdlib/core/unicode.scm" . 100368))
   (push)
   (call
     (push.iloc.0 . 1)
     (apply.gloc.of core.unicode\x27;char-foldcase "../stdlib/core/unicode.scm" . 101392))
   (push)
   (ret.subr.gloc.of \x2E;char>=? "../stdlib/core/unicode.scm" . 100359))
 (set.gloc.of core.unicode\x27;char-ci>=?)
 (close
   (1 0 . core.unicode\x27;char-alphabetic?)
   (call
     (push.const . #\a)
     (push.iloc.0 . 0)
     (subr.gloc.of \x2E;char<=? 2 "../stdlib/core/unicode.scm" . 105488)
     (if.false.ret)
     (push.iloc.0 . 0)
     (push.const . #\z)
     (ret.subr.gloc.of \x2E;char<=? "../stdlib/core/unicode.scm" . 105505))
   (if.true.ret)
   (call
     (push.const . #\A)
     (push.iloc.0 . 0)
     (subr.gloc.of \x2E;char<=? 2 "../stdlib/core/unicode.scm" . 106512)
     (if.false.ret)
     (push.iloc.0 . 0)
     (push.const . #\Z)
     (ret.subr.gloc.of \x2E;char<=? "../stdlib/core/unicode.scm" . 106529))
   (if.true.ret)
   (push.const . #\)
   (push.iloc.0 . 0)
   (subr.gloc.of \x2E;char<=? 2 "../stdlib/core/unicode.scm" . 107536)
   (if.false.ret)
   (call
     (push.iloc.0 . 0)
     (apply.gloc.of
       core.unicode-assistants\x27;general-category
       "../stdlib/core/unicode.scm"
       .
       108566))
   (push)
   (extend . 1)
   (push.iloc.0 . 0)
   (push.const Lu Ll Lt Lm Lo Nl)
   (subr.gloc.of \x2E;memq 2 "../stdlib/core/unicode.scm" . 108560)
   (if.true.ret.const . #t)
   (push.iloc.0 . 0)
   (push.const Mn Mc So)
   (subr.gloc.of \x2E;memq 2 "../stdlib/core/unicode.scm" . 108560)
   (if.true
     (push.iloc.1 . 0)
     (apply.gloc.of
       core.unicode-assistants\x27;other-alphabetic-property?
       "../stdlib/core/unicode.scm"
       .
       111635))
   (ret.const . #f))
 (set.gloc.of core.unicode\x27;char-alphabetic?)
 (close
   (1 0 . core.unicode\x27;char-numeric?)
   (call
     (push.const . #\0)
     (push.iloc.0 . 0)
     (subr.gloc.of \x2E;char<=? 2 "../stdlib/core/unicode.scm" . 116752)
     (if.false.ret)
     (push.iloc.0 . 0)
     (push.const . #\9)
     (ret.subr.gloc.of \x2E;char<=? "../stdlib/core/unicode.scm" . 116769))
   (if.true.ret)
   (push.const . #\)
   (push.iloc.0 . 0)
   (subr.gloc.of \x2E;char<=? 2 "../stdlib/core/unicode.scm" . 117776)
   (if.false.ret)
   (call
     (push.iloc.0 . 0)
     (apply.gloc.of
       core.unicode-assistants\x27;general-category
       "../stdlib/core/unicode.scm"
       .
       118805))
   (push)
   (const . Nd)
   (ret.eq? "../stdlib/core/unicode.scm" . 118800))
 (set.gloc.of core.unicode\x27;char-numeric?)
 (close
   (1 0 . core.unicode\x27;char-upper-case?)
   (call
     (push.const . #\A)
     (push.iloc.0 . 0)
     (subr.gloc.of \x2E;char<=? 2 "../stdlib/core/unicode.scm" . 122896)
     (if.false.ret)
     (push.iloc.0 . 0)
     (push.const . #\Z)
     (ret.subr.gloc.of \x2E;char<=? "../stdlib/core/unicode.scm" . 122913))
   (if.true.ret)
   (push.const . #\)
   (push.iloc.0 . 0)
   (subr.gloc.of \x2E;char<=? 2 "../stdlib/core/unicode.scm" . 123920)
   (if.false.ret)
   (call
     (push.iloc.0 . 0)
     (apply.gloc.of
       core.unicode-assistants\x27;general-category
       "../stdlib/core/unicode.scm"
       .
       124950))
   (push)
   (extend . 1)
   (push.iloc.0 . 0)
   (const . Lu)
   (if.eq?.ret.const . #t)
   (push.iloc.0 . 0)
   (push.const Nl So)
   (subr.gloc.of \x2E;memq 2 "../stdlib/core/unicode.scm" . 124944)
   (if.true
     (push.iloc.1 . 0)
     (apply.gloc.of
       core.unicode-assistants\x27;other-uppercase-property?
       "../stdlib/core/unicode.scm"
       .
       128019))
   (ret.const . #f))
 (set.gloc.of core.unicode\x27;char-upper-case?)
 (close
   (1 0 . core.unicode\x27;char-lower-case?)
   (call
     (push.const . #\a)
     (push.iloc.0 . 0)
     (subr.gloc.of \x2E;char<=? 2 "../stdlib/core/unicode.scm" . 133136)
     (if.false.ret)
     (push.iloc.0 . 0)
     (push.const . #\z)
     (ret.subr.gloc.of \x2E;char<=? "../stdlib/core/unicode.scm" . 133153))
   (if.true.ret)
   (push.const . #\)
   (push.iloc.0 . 0)
   (subr.gloc.of \x2E;char<=? 2 "../stdlib/core/unicode.scm" . 134160)
   (if.false.ret)
   (call
     (push.iloc.0 . 0)
     (apply.gloc.of
       core.unicode-assistants\x27;general-category
       "../stdlib/core/unicode.scm"
       .
       135190))
   (push)
   (extend . 1)
   (push.iloc.0 . 0)
   (const . Ll)
   (if.eq?.ret.const . #t)
   (push.iloc.0 . 0)
   (push.const Lm Mn Nl So)
   (subr.gloc.of \x2E;memq 2 "../stdlib/core/unicode.scm" . 135184)
   (if.true
     (push.iloc.1 . 0)
     (apply.gloc.of
       core.unicode-assistants\x27;other-lowercase-property?
       "../stdlib/core/unicode.scm"
       .
       138259))
   (ret.const . #f))
 (set.gloc.of core.unicode\x27;char-lower-case?)
 (close
   (1 0 . core.unicode\x27;char-title-case?)
   (call
     (push.iloc.0 . 0)
     (apply.gloc.of
       core.unicode-assistants\x27;general-category
       "../stdlib/core/unicode.scm"
       .
       143372))
   (push)
   (const . Lt)
   (ret.eq? "../stdlib/core/unicode.scm" . 143367))
 (set.gloc.of core.unicode\x27;char-title-case?)
 (close
   (1 0 . core.unicode\x27;char-general-category)
   (push.iloc.0 . 0)
   (apply.gloc.of
     core.unicode-assistants\x27;general-category
     "../stdlib/core/unicode.scm"
     .
     147463))
 (set.gloc.of core.unicode\x27;char-general-category)
 (close
   (1 0 . core.unicode\x27;string-upcase)
   (call
     (push.iloc.0 . 0)
     (apply.gloc.of core.io\x27;open-string-input-port "../stdlib/core/unicode.scm" . 151572))
   (push)
   (subr.gloc.of \x2E;make-string-output-port 0)
   (push)
   (extend . 2)
   (call
     (extend.enclose+
       (1 0 . loop)
       (push.iloc.0 . 0)
       (subr.gloc.of \x2E;eof-object? 1 "../stdlib/core/unicode.scm" . 155673)
       (if.true
         (push.iloc 2 . 1)
         (ret.subr.gloc.of \x2E;extract-accumulated-string "../stdlib/core/unicode.scm" . 155690))
       (call
         (push.iloc.0 . 0)
         (apply.gloc.of
           core.unicode-assistants\x27;special-casing-upper
           "../stdlib/core/unicode.scm"
           .
           156697))
       (push)
       (extend . 1)
       (iloc.0 . 0)
       (if.true
         (call
           (push.close
             (1 0)
             (push.iloc 4 . 1)
             (call
               (push.iloc.0 . 0)
               (push.subr.gloc.of \x2E;integer->char 1 "../stdlib/core/unicode.scm" . 158802)
               (apply.gloc.of core.unicode\x27;char-upcase "../stdlib/core/unicode.scm" . 158789))
             (push)
             (ret.subr.gloc.of \x2E;put-char "../stdlib/core/unicode.scm" . 158772))
           (push.iloc.0 . 0)
           (apply.gloc.of \x2E;for-each "../stdlib/core/unicode.scm" . 158750))
         (push.iloc 3 . 0)
         (push.subr.gloc.of \x2E;get-char 1 "../stdlib/core/unicode.scm" . 159780)
         (apply.iloc+ (2 . 0) "../stdlib/core/unicode.scm" . 159774))
       (push.iloc 3 . 1)
       (call
         (push.iloc.1 . 0)
         (apply.gloc.of core.unicode\x27;char-upcase "../stdlib/core/unicode.scm" . 161834))
       (push)
       (subr.gloc.of \x2E;put-char 2 "../stdlib/core/unicode.scm" . 161817)
       (push.iloc 3 . 0)
       (push.subr.gloc.of \x2E;get-char 1 "../stdlib/core/unicode.scm" . 162847)
       (apply.iloc+ (2 . 0) "../stdlib/core/unicode.scm" . 162841))
     (push.iloc.1 . 0)
     (push.subr.gloc.of \x2E;get-char 1 "../stdlib/core/unicode.scm" . 154655)
     (apply.iloc+ (0 . 0) "../stdlib/core/unicode.scm" . 154640))
   (push)
   (extend . 1)
   (push.iloc 2 . 0)
   (push.iloc.0 . 0)
   (subr.gloc.of \x2E;string=? 2 "../stdlib/core/unicode.scm" . 163855)
   (if.true (ret.iloc 2 . 0))
   (ret.iloc 0 . 0))
 (set.gloc.of core.unicode\x27;string-upcase)
 (close
   (2 0 . core.unicode\x27;final-sigma?)
   (push.iloc.0 . 0)
   (push.subr.gloc.of \x2E;lookahead-char 1 "../stdlib/core/unicode.scm" . 167953)
   (extend . 1)
   (push.iloc.0 . 0)
   (subr.gloc.of \x2E;eof-object? 1 "../stdlib/core/unicode.scm" . 168976)
   (if.true
     (push.iloc.1 . 1)
     (push.subr.gloc.of \x2E;port-position 1 "../stdlib/core/unicode.scm" . 170008)
     (push.const . 0)
     (push.subr.gloc.of \x2E;= 2 "../stdlib/core/unicode.scm" . 170005)
     (ret.subr.gloc.of \x2E;not "../stdlib/core/unicode.scm" . 170000))
   (call
     (push.iloc.0 . 0)
     (apply.gloc.of core.unicode\x27;char-alphabetic? "../stdlib/core/unicode.scm" . 171024))
   (if.true.ret.const . #f)
   (push.iloc.0 . 0)
   (subr.gloc.of \x2E;char-whitespace? 1 "../stdlib/core/unicode.scm" . 172048)
   (if.true.ret.const . #t)
   (call
     (push.iloc.0 . 0)
     (apply.gloc.of
       core.unicode-assistants\x27;general-category
       "../stdlib/core/unicode.scm"
       .
       173077))
   (push)
   (const . Pd)
   (if.eq?.ret.const . #t)
   (push.iloc.1 . 0)
   (push.subr.gloc.of \x2E;port-position 1 "../stdlib/core/unicode.scm" . 175131)
   (extend . 1)
   (push.iloc 2 . 0)
   (subr.gloc.of \x2E;get-char 1 "../stdlib/core/unicode.scm" . 176146)
   (call
     (extend.enclose+
       (1 0 . loop)
       (push.iloc.0 . 0)
       (subr.gloc.of \x2E;eof-object? 1 "../stdlib/core/unicode.scm" . 179234)
       (if.true
         (push.iloc 4 . 1)
         (push.subr.gloc.of \x2E;port-position 1 "../stdlib/core/unicode.scm" . 180266)
         (push.const . 0)
         (push.subr.gloc.of \x2E;= 2 "../stdlib/core/unicode.scm" . 180263)
         (ret.subr.gloc.of \x2E;not "../stdlib/core/unicode.scm" . 180258))
       (call
         (push.iloc.0 . 0)
         (apply.gloc.of core.unicode\x27;char-alphabetic? "../stdlib/core/unicode.scm" . 181282))
       (if.true.ret.const . #f)
       (push.iloc.0 . 0)
       (subr.gloc.of \x2E;char-whitespace? 1 "../stdlib/core/unicode.scm" . 182306)
       (if.true.ret.const . #t)
       (call
         (push.iloc.0 . 0)
         (apply.gloc.of
           core.unicode-assistants\x27;general-category
           "../stdlib/core/unicode.scm"
           .
           183335))
       (push)
       (const . Pd)
       (if.eq?.ret.const . #t)
       (push.iloc 4 . 0)
       (push.subr.gloc.of \x2E;get-char 1 "../stdlib/core/unicode.scm" . 185384)
       (apply.iloc+ (1 . 0) "../stdlib/core/unicode.scm" . 185378))
     (push.iloc 3 . 0)
     (push.subr.gloc.of \x2E;get-char 1 "../stdlib/core/unicode.scm" . 178216)
     (apply.iloc+ (0 . 0) "../stdlib/core/unicode.scm" . 178201))
   (push)
   (extend . 1)
   (push.iloc 3 . 0)
   (push.iloc.1 . 0)
   (subr.gloc.of \x2E;set-port-position! 2 "../stdlib/core/unicode.scm" . 186388)
   (ret.iloc 0 . 0))
 (set.gloc.of core.unicode\x27;final-sigma?)
 (close
   (1 0 . core.unicode\x27;string-downcase)
   (call
     (push.iloc.0 . 0)
     (apply.gloc.of core.io\x27;open-string-input-port "../stdlib/core/unicode.scm" . 191508))
   (push)
   (subr.gloc.of \x2E;make-string-output-port 0)
   (push)
   (extend . 2)
   (call
     (extend.enclose+
       (2 0 . loop)
       (push.iloc.0 . 0)
       (subr.gloc.of \x2E;eof-object? 1 "../stdlib/core/unicode.scm" . 195609)
       (if.true
         (push.iloc 2 . 1)
         (ret.subr.gloc.of \x2E;extract-accumulated-string "../stdlib/core/unicode.scm" . 195626))
       (push.iloc.0 . 0)
       (push.const . #\Σ)
       (subr.gloc.of \x2E;char=? 2 "../stdlib/core/unicode.scm" . 196633)
       (if.true
         (push.iloc.0 . 1)
         (subr.gloc.of \x2E;char-whitespace? 1 "../stdlib/core/unicode.scm" . 197664)
         (if.true
           (push.iloc 2 . 1)
           (push.const . #\σ)
           (subr.gloc.of \x2E;put-char 2 "../stdlib/core/unicode.scm" . 198688)
           (push.iloc 2 . 0)
           (push.subr.gloc.of \x2E;get-char 1 "../stdlib/core/unicode.scm" . 199718)
           (push.iloc.0 . 0)
           (apply.iloc+ (1 . 0) "../stdlib/core/unicode.scm" . 199712))
         (call
           (call
             (push.iloc 2 . 0)
             (push.iloc 2 . 1)
             (apply.gloc.of core.unicode\x27;final-sigma? "../stdlib/core/unicode.scm" . 201764))
           (if.true
             (push.iloc 2 . 1)
             (push.const . #\ς)
             (ret.subr.gloc.of \x2E;put-char "../stdlib/core/unicode.scm" . 202788))
           (push.iloc 2 . 1)
           (push.const . #\σ)
           (ret.subr.gloc.of \x2E;put-char "../stdlib/core/unicode.scm" . 203812))
         (push.iloc 2 . 0)
         (push.subr.gloc.of \x2E;get-char 1 "../stdlib/core/unicode.scm" . 204838)
         (push.iloc.0 . 0)
         (apply.iloc+ (1 . 0) "../stdlib/core/unicode.scm" . 204832))
       (call
         (push.iloc.0 . 0)
         (apply.gloc.of
           core.unicode-assistants\x27;special-casing-lower
           "../stdlib/core/unicode.scm"
           .
           205849))
       (push)
       (extend . 1)
       (iloc.0 . 0)
       (if.true
         (call
           (push.close
             (1 0)
             (push.iloc 4 . 1)
             (call
               (push.iloc.0 . 0)
               (push.subr.gloc.of \x2E;integer->char 1 "../stdlib/core/unicode.scm" . 207956)
               (apply.gloc.of core.unicode\x27;char-downcase "../stdlib/core/unicode.scm" . 207941))
             (push)
             (ret.subr.gloc.of \x2E;put-char "../stdlib/core/unicode.scm" . 207924))
           (push.iloc.0 . 0)
           (apply.gloc.of \x2E;for-each "../stdlib/core/unicode.scm" . 207902))
         (push.iloc 3 . 0)
         (push.subr.gloc.of \x2E;get-char 1 "../stdlib/core/unicode.scm" . 208932)
         (push.iloc.1 . 0)
         (apply.iloc+ (2 . 0) "../stdlib/core/unicode.scm" . 208926))
       (push.iloc 3 . 1)
       (call
         (push.iloc.1 . 0)
         (apply.gloc.of core.unicode\x27;char-downcase "../stdlib/core/unicode.scm" . 210986))
       (push)
       (subr.gloc.of \x2E;put-char 2 "../stdlib/core/unicode.scm" . 210969)
       (push.iloc 3 . 0)
       (push.subr.gloc.of \x2E;get-char 1 "../stdlib/core/unicode.scm" . 211999)
       (push.iloc.1 . 0)
       (apply.iloc+ (2 . 0) "../stdlib/core/unicode.scm" . 211993))
     (push.iloc.1 . 0)
     (push.subr.gloc.of \x2E;get-char 1 "../stdlib/core/unicode.scm" . 194591)
     (push.const . #\space)
     (apply.iloc+ (0 . 0) "../stdlib/core/unicode.scm" . 194576))
   (push)
   (extend . 1)
   (push.iloc 2 . 0)
   (push.iloc.0 . 0)
   (subr.gloc.of \x2E;string=? 2 "../stdlib/core/unicode.scm" . 213007)
   (if.true (ret.iloc 2 . 0))
   (ret.iloc 0 . 0))
 (set.gloc.of core.unicode\x27;string-downcase)
 (close
   (1 0 . core.unicode\x27;string-foldcase)
   (call
     (push.iloc.0 . 0)
     (apply.gloc.of core.io\x27;open-string-input-port "../stdlib/core/unicode.scm" . 217108))
   (push)
   (subr.gloc.of \x2E;make-string-output-port 0)
   (push)
   (extend . 2)
   (call
     (extend.enclose+
       (1 0 . loop)
       (push.iloc.0 . 0)
       (subr.gloc.of \x2E;eof-object? 1 "../stdlib/core/unicode.scm" . 221209)
       (if.true
         (push.iloc 2 . 1)
         (ret.subr.gloc.of \x2E;extract-accumulated-string "../stdlib/core/unicode.scm" . 221226))
       (call
         (push.iloc.0 . 0)
         (apply.gloc.of core.unicode-assistants\x27;foldcase "../stdlib/core/unicode.scm" . 222233))
       (push)
       (extend . 1)
       (iloc.0 . 0)
       (if.true
         (call
           (push.close
             (1 0)
             (push.iloc 4 . 1)
             (push.iloc.0 . 0)
             (push.subr.gloc.of \x2E;integer->char 1 "../stdlib/core/unicode.scm" . 224325)
             (ret.subr.gloc.of \x2E;put-char "../stdlib/core/unicode.scm" . 224308))
           (push.iloc.0 . 0)
           (apply.gloc.of \x2E;for-each "../stdlib/core/unicode.scm" . 224286))
         (push.iloc 3 . 0)
         (push.subr.gloc.of \x2E;get-char 1 "../stdlib/core/unicode.scm" . 225316)
         (apply.iloc+ (2 . 0) "../stdlib/core/unicode.scm" . 225310))
       (push.iloc 3 . 1)
       (push.iloc.1 . 0)
       (subr.gloc.of \x2E;put-char 2 "../stdlib/core/unicode.scm" . 227353)
       (push.iloc 3 . 0)
       (push.subr.gloc.of \x2E;get-char 1 "../stdlib/core/unicode.scm" . 228383)
       (apply.iloc+ (2 . 0) "../stdlib/core/unicode.scm" . 228377))
     (push.iloc.1 . 0)
     (push.subr.gloc.of \x2E;get-char 1 "../stdlib/core/unicode.scm" . 220191)
     (apply.iloc+ (0 . 0) "../stdlib/core/unicode.scm" . 220176))
   (push)
   (extend . 1)
   (push.iloc 2 . 0)
   (push.iloc.0 . 0)
   (subr.gloc.of \x2E;string=? 2 "../stdlib/core/unicode.scm" . 229391)
   (if.true (ret.iloc 2 . 0))
   (ret.iloc 0 . 0))
 (set.gloc.of core.unicode\x27;string-foldcase)
 (close
   (1 0 . core.unicode\x27;string-titlecase)
   (call
     (push.iloc.0 . 0)
     (apply.gloc.of core.io\x27;open-string-input-port "../stdlib/core/unicode.scm" . 233492))
   (push)
   (subr.gloc.of \x2E;make-string-output-port 0)
   (push)
   (extend . 2)
   (extend.unbound . 2)
   (push.close
     (0 0 . titlecase-first-char)
     (extend.enclose+
       (1 0 . loop)
       (push.iloc.0 . 0)
       (subr.gloc.of \x2E;eof-object? 1 "../stdlib/core/unicode.scm" . 238622)
       (if.true
         (push.iloc 4 . 1)
         (ret.subr.gloc.of \x2E;extract-accumulated-string "../stdlib/core/unicode.scm" . 239646))
       (call
         (push.iloc.0 . 0)
         (apply.gloc.of
           core.unicode-assistants\x27;general-category
           "../stdlib/core/unicode.scm"
           .
           241700))
       (push)
       (push.const Ll Lu Lt)
       (subr.gloc.of \x2E;memq 2 "../stdlib/core/unicode.scm" . 241694)
       (if.true
         (push.iloc 4 . 1)
         (call
           (push.iloc.0 . 0)
           (apply.gloc.of core.unicode\x27;char-titlecase "../stdlib/core/unicode.scm" . 243762))
         (push)
         (subr.gloc.of \x2E;put-char 2 "../stdlib/core/unicode.scm" . 243745)
         (apply.iloc (3 . 1) "../stdlib/core/unicode.scm" . 244769))
       (push.iloc 4 . 1)
       (push.iloc.0 . 0)
       (subr.gloc.of \x2E;put-char 2 "../stdlib/core/unicode.scm" . 246817)
       (push.iloc 4 . 0)
       (push.subr.gloc.of \x2E;get-char 1 "../stdlib/core/unicode.scm" . 247847)
       (apply.iloc+ (1 . 0) "../stdlib/core/unicode.scm" . 247841))
     (push.iloc 3 . 0)
     (push.subr.gloc.of \x2E;get-char 1 "../stdlib/core/unicode.scm" . 237604)
     (apply.iloc+ (0 . 0) "../stdlib/core/unicode.scm" . 237589))
   (push.close
     (0 0 . downcase-subsequence)
     (extend.enclose+
       (1 0 . loop)
       (push.iloc.0 . 0)
       (subr.gloc.of \x2E;eof-object? 1 "../stdlib/core/unicode.scm" . 251934)
       (if.true
         (push.iloc 4 . 1)
         (ret.subr.gloc.of \x2E;extract-accumulated-string "../stdlib/core/unicode.scm" . 252958))
       (call
         (push.iloc.0 . 0)
         (apply.gloc.of
           core.unicode-assistants\x27;general-category
           "../stdlib/core/unicode.scm"
           .
           255012))
       (push)
       (extend . 1)
       (push.iloc.0 . 0)
       (push.const Ll Lu Lt)
       (subr.gloc.of \x2E;memq 2 "../stdlib/core/unicode.scm" . 255006)
       (if.true
         (push.iloc 5 . 1)
         (call
           (push.iloc.1 . 0)
           (apply.gloc.of core.unicode\x27;char-downcase "../stdlib/core/unicode.scm" . 257074))
         (push)
         (subr.gloc.of \x2E;put-char 2 "../stdlib/core/unicode.scm" . 257057)
         (push.iloc 5 . 0)
         (push.subr.gloc.of \x2E;get-char 1 "../stdlib/core/unicode.scm" . 258087)
         (apply.iloc+ (2 . 0) "../stdlib/core/unicode.scm" . 258081))
       (push.iloc.0 . 0)
       (push.const Po Pf)
       (subr.gloc.of \x2E;memq 2 "../stdlib/core/unicode.scm" . 255006)
       (if.true
         (push.iloc.1 . 0)
         (push.const #\' #\: #\· #\״ #\’ #\‧)
         (subr.gloc.of \x2E;memq 2 "../stdlib/core/unicode.scm" . 260129)
         (if.true
           (push.iloc 5 . 1)
           (push.iloc.1 . 0)
           (subr.gloc.of \x2E;put-char 2 "../stdlib/core/unicode.scm" . 268324)
           (push.iloc 5 . 0)
           (push.subr.gloc.of \x2E;get-char 1 "../stdlib/core/unicode.scm" . 269354)
           (apply.iloc+ (2 . 0) "../stdlib/core/unicode.scm" . 269348))
         (push.iloc 5 . 1)
         (push.iloc.1 . 0)
         (subr.gloc.of \x2E;put-char 2 "../stdlib/core/unicode.scm" . 271396)
         (apply.iloc (4 . 0) "../stdlib/core/unicode.scm" . 272420))
       (push.iloc 5 . 1)
       (push.iloc.1 . 0)
       (subr.gloc.of \x2E;put-char 2 "../stdlib/core/unicode.scm" . 274465)
       (apply.iloc (4 . 0) "../stdlib/core/unicode.scm" . 275489))
     (push.iloc 3 . 0)
     (push.subr.gloc.of \x2E;get-char 1 "../stdlib/core/unicode.scm" . 250916)
     (apply.iloc+ (0 . 0) "../stdlib/core/unicode.scm" . 250901))
   (enclose . 2)
   (call (apply.iloc (0 . 0) "../stdlib/core/unicode.scm" . 276502))
   (push)
   (extend . 1)
   (push.iloc 3 . 0)
   (push.iloc.0 . 0)
   (subr.gloc.of \x2E;string=? 2 "../stdlib/core/unicode.scm" . 277521)
   (if.true (ret.iloc 3 . 0))
   (ret.iloc 0 . 0))
 (set.gloc.of core.unicode\x27;string-titlecase)
 (close
   (0 1 . core.unicode\x27;string-ci=?)
   (push.gloc.of \x2E;string=?)
   (call
     (push.gloc.of core.unicode\x27;string-foldcase)
     (push.iloc.0 . 0)
     (apply.gloc.of \x2E;map "../stdlib/core/unicode.scm" . 281623))
   (push)
   (apply.gloc.of \x2E;apply "../stdlib/core/unicode.scm" . 281607))
 (set.gloc.of core.unicode\x27;string-ci=?)
 (close
   (0 1 . core.unicode\x27;string-ci<?)
   (push.gloc.of \x2E;string<?)
   (call
     (push.gloc.of core.unicode\x27;string-foldcase)
     (push.iloc.0 . 0)
     (apply.gloc.of \x2E;map "../stdlib/core/unicode.scm" . 285719))
   (push)
   (apply.gloc.of \x2E;apply "../stdlib/core/unicode.scm" . 285703))
 (set.gloc.of core.unicode\x27;string-ci<?)
 (close
   (0 1 . core.unicode\x27;string-ci>?)
   (push.gloc.of \x2E;string>?)
   (call
     (push.gloc.of core.unicode\x27;string-foldcase)
     (push.iloc.0 . 0)
     (apply.gloc.of \x2E;map "../stdlib/core/unicode.scm" . 289815))
   (push)
   (apply.gloc.of \x2E;apply "../stdlib/core/unicode.scm" . 289799))
 (set.gloc.of core.unicode\x27;string-ci>?)
 (close
   (0 1 . core.unicode\x27;string-ci<=?)
   (push.gloc.of \x2E;string<=?)
   (call
     (push.gloc.of core.unicode\x27;string-foldcase)
     (push.iloc.0 . 0)
     (apply.gloc.of \x2E;map "../stdlib/core/unicode.scm" . 293912))
   (push)
   (apply.gloc.of \x2E;apply "../stdlib/core/unicode.scm" . 293895))
 (set.gloc.of core.unicode\x27;string-ci<=?)
 (close
   (0 1 . core.unicode\x27;string-ci>=?)
   (push.gloc.of \x2E;string>=?)
   (call
     (push.gloc.of core.unicode\x27;string-foldcase)
     (push.iloc.0 . 0)
     (apply.gloc.of \x2E;map "../stdlib/core/unicode.scm" . 298008))
   (push)
   (apply.gloc.of \x2E;apply "../stdlib/core/unicode.scm" . 297991))
 (set.gloc.of core.unicode\x27;string-ci>=?)
 (close
   (1 0 . core.unicode\x27;string-normalize-nfd)
   (call
     (call
       (call
         (push.iloc.0 . 0)
         (apply.gloc.of core.io\x27;open-string-input-port "../stdlib/core/unicode.scm" . 303146))
       (push)
       (push.const . #t)
       (apply.gloc.of core.unicode-assistants\x27;decompose "../stdlib/core/unicode.scm" . 303135))
     (push)
     (apply.gloc.of
       core.unicode-assistants\x27;sort-combining-marks!
       "../stdlib/core/unicode.scm"
       .
       303112))
   (push)
   (subr.gloc.of \x2E;native-endianness 0)
   (push)
   (push.const . #t)
   (apply.gloc.of
     core.bytevector-transcoders\x27;utf32->string
     "../stdlib/core/unicode.scm"
     .
     302087))
 (set.gloc.of core.unicode\x27;string-normalize-nfd)
 (close
   (1 0 . core.unicode\x27;string-normalize-nfkd)
   (call
     (call
       (call
         (push.iloc.0 . 0)
         (apply.gloc.of core.io\x27;open-string-input-port "../stdlib/core/unicode.scm" . 309290))
       (push)
       (push.const . #f)
       (apply.gloc.of core.unicode-assistants\x27;decompose "../stdlib/core/unicode.scm" . 309279))
     (push)
     (apply.gloc.of
       core.unicode-assistants\x27;sort-combining-marks!
       "../stdlib/core/unicode.scm"
       .
       309256))
   (push)
   (subr.gloc.of \x2E;native-endianness 0)
   (push)
   (push.const . #t)
   (apply.gloc.of
     core.bytevector-transcoders\x27;utf32->string
     "../stdlib/core/unicode.scm"
     .
     308231))
 (set.gloc.of core.unicode\x27;string-normalize-nfkd)
 (close
   (1 0 . core.unicode\x27;string-normalize-nfc)
   (call
     (call
       (call
         (push.iloc.0 . 0)
         (apply.gloc.of core.io\x27;open-string-input-port "../stdlib/core/unicode.scm" . 316436))
       (push)
       (push.const . #t)
       (apply.gloc.of core.unicode-assistants\x27;decompose "../stdlib/core/unicode.scm" . 316425))
     (push)
     (apply.gloc.of
       core.unicode-assistants\x27;sort-combining-marks!
       "../stdlib/core/unicode.scm"
       .
       315400))
   (push)
   (apply.gloc.of core.unicode-assistants\x27;compose "../stdlib/core/unicode.scm" . 314375))
 (set.gloc.of core.unicode\x27;string-normalize-nfc)
 (close
   (1 0 . core.unicode\x27;string-normalize-nfkc)
   (call
     (call
       (call
         (push.iloc.0 . 0)
         (apply.gloc.of core.io\x27;open-string-input-port "../stdlib/core/unicode.scm" . 322580))
       (push)
       (push.const . #f)
       (apply.gloc.of core.unicode-assistants\x27;decompose "../stdlib/core/unicode.scm" . 322569))
     (push)
     (apply.gloc.of
       core.unicode-assistants\x27;sort-combining-marks!
       "../stdlib/core/unicode.scm"
       .
       321544))
   (push)
   (apply.gloc.of core.unicode-assistants\x27;compose "../stdlib/core/unicode.scm" . 320519))
 (set.gloc.of core.unicode\x27;string-normalize-nfkc)
 (push.const . core.unicode)
 (push.const . #f)
 (push.const
   (char-upcase import . core.unicode\x27;char-upcase)
   (char-downcase import . core.unicode\x27;char-downcase)
   (char-titlecase import . core.unicode\x27;char-titlecase)
   (char-foldcase import . core.unicode\x27;char-foldcase)
   (char-ci=? import . core.unicode\x27;char-ci=?)
   (char-ci<? import . core.unicode\x27;char-ci<?)
   (char-ci>? import . core.unicode\x27;char-ci>?)
   (char-ci<=? import . core.unicode\x27;char-ci<=?)
   (char-ci>=? import . core.unicode\x27;char-ci>=?)
   (char-alphabetic? import . core.unicode\x27;char-alphabetic?)
   (char-numeric? import . core.unicode\x27;char-numeric?)
   (char-whitespace? import . \x2E;char-whitespace?)
   (char-upper-case? import . core.unicode\x27;char-upper-case?)
   (char-lower-case? import . core.unicode\x27;char-lower-case?)
   (char-title-case? import . core.unicode\x27;char-title-case?)
   (char-general-category import . core.unicode\x27;char-general-category)
   (string-upcase import . core.unicode\x27;string-upcase)
   (string-downcase import . core.unicode\x27;string-downcase)
   (string-foldcase import . core.unicode\x27;string-foldcase)
   (string-titlecase import . core.unicode\x27;string-titlecase)
   (string-ci=? import . core.unicode\x27;string-ci=?)
   (string-ci<? import . core.unicode\x27;string-ci<?)
   (string-ci>? import . core.unicode\x27;string-ci>?)
   (string-ci<=? import . core.unicode\x27;string-ci<=?)
   (string-ci>=? import . core.unicode\x27;string-ci>=?)
   (string-normalize-nfd import . core.unicode\x27;string-normalize-nfd)
   (string-normalize-nfkd import . core.unicode\x27;string-normalize-nfkd)
   (string-normalize-nfc import . core.unicode\x27;string-normalize-nfc)
   (string-normalize-nfkc import . core.unicode\x27;string-normalize-nfkc))
 (apply.gloc.of \x2E;intern-scheme-library "../stdlib/core/unicode.scm" . 6145))

((close
   (2 0 . loop)
   (iloc.0 . 0)
   (if.null? (ret.iloc 0 . 1))
   (touch.gloc.of loop\x60;75)
   (push.cdr.iloc (0 . 0) "../stdlib/core/hashtables.scm" . 136218)
   (push.iloc.0 . 0)
   (push.subr.gloc.of \x2E;cdar 1 "../stdlib/core/hashtables.scm" . 136236)
   (push.iloc.0 . 1)
   (push.subr.gloc.of \x2E;append 2 "../stdlib/core/hashtables.scm" . 136228)
   (apply.gloc.of loop\x60;75 "../stdlib/core/hashtables.scm" . 136212))
 (set.gloc.of loop\x60;75)
 (close
   (1 0)
   (push.car.iloc (0 . 0) "../stdlib/core/hashtables.scm" . 116801)
   (cdr.iloc (0 . 0) "../stdlib/core/hashtables.scm" . 116809)
   (ret.cons "../stdlib/core/hashtables.scm" . 116795))
 (set.gloc.of \x2E;fn4.1\x60;4)
 (call
   (push.const core optargs)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core/hashtables.scm" . 6145))
 (call
   (push.const core unicode)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core/hashtables.scm" . 6145))
 (call
   (push.const core lists)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core/hashtables.scm" . 6145))
 (call
   (push.const core primitives)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core/hashtables.scm" . 6145))
 (call
   (push.const core intrinsics)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core/hashtables.scm" . 6145))
 (close
   (5 0 . core.hashtables\x27;make-generic-hashtable)
   (extend.unbound . 11)
   (push.close (1 0) (ret.iloc 2 . 3))
   (push.close
     (3 0)
     (push.close
       (1 0 . equiv?)
       (push.iloc.0 . 0)
       (push.iloc.1 . 1)
       (apply.iloc (3 . 1) "../stdlib/core/hashtables.scm" . 63525))
     (extend . 1)
     (push.iloc 3 . 2)
     (call (push.iloc.1 . 1) (apply.iloc (3 . 0) "../stdlib/core/hashtables.scm" . 62487))
     (push)
     (push.const . #f)
     (push.subr.gloc.of \x2E;core-hashtable-ref 3 "../stdlib/core/hashtables.scm" . 64532)
     (extend . 1)
     (iloc.0 . 0)
     (if.true
       (call
         (push.iloc.1 . 0)
         (push.iloc.0 . 0)
         (apply.gloc.of core.lists\x27;assp "../stdlib/core/hashtables.scm" . 66592))
       (push)
       (extend . 1)
       (iloc.0 . 0)
       (if.true
         (push.iloc.0 . 0)
         (ret.subr.gloc.of \x2E;cdr "../stdlib/core/hashtables.scm" . 66585))
       (ret.iloc 3 . 2))
     (ret.iloc 2 . 2))
   (push.close
     (3 0)
     (iloc 2 . 4)
     (if.false.call
       (push.const . hashtable-set!)
       (push.const . "expected mutable hashtable, but ~s is not")
       (push.iloc.0 . 0)
       (push.subr.gloc.of \x2E;format 2 "../stdlib/core/hashtables.scm" . 72765)
       (push.iloc.0 . 0)
       (push.iloc.0 . 1)
       (push.iloc.0 . 2)
       (push.subr.gloc.of \x2E;list 3 "../stdlib/core/hashtables.scm" . 72828)
       (apply.gloc.of \x2E;assertion-violation "../stdlib/core/hashtables.scm" . 72728))
     (call (push.iloc.0 . 1) (apply.iloc (2 . 0) "../stdlib/core/hashtables.scm" . 73751))
     (push)
     (push.close
       (1 0 . equiv?)
       (push.iloc.0 . 0)
       (push.iloc.1 . 1)
       (apply.iloc (3 . 1) "../stdlib/core/hashtables.scm" . 74789))
     (extend . 2)
     (push.iloc 3 . 2)
     (push.iloc.0 . 0)
     (push.const . #f)
     (push.subr.gloc.of \x2E;core-hashtable-ref 3 "../stdlib/core/hashtables.scm" . 75796)
     (extend . 1)
     (iloc.0 . 0)
     (if.true
       (call
         (push.iloc.1 . 1)
         (push.iloc.0 . 0)
         (apply.gloc.of core.lists\x27;assp "../stdlib/core/hashtables.scm" . 77856))
       (push)
       (extend . 1)
       (iloc.0 . 0)
       (if.true
         (push.iloc.0 . 0)
         (push.iloc 3 . 2)
         (ret.subr.gloc.of \x2E;set-cdr! "../stdlib/core/hashtables.scm" . 78895))
       (n+.iloc (5 . 3) 1 "../stdlib/core/hashtables.scm" . 80939)
       (set.iloc 5 . 3)
       (push.iloc 5 . 2)
       (push.iloc 2 . 0)
       (push.iloc 3 . 1)
       (iloc 3 . 2)
       (push.cons)
       (iloc.1 . 0)
       (push.cons)
       (ret.subr.gloc.of \x2E;core-hashtable-set! "../stdlib/core/hashtables.scm" . 81952))
     (n+.iloc (4 . 3) 1 "../stdlib/core/hashtables.scm" . 83999)
     (set.iloc 4 . 3)
     (push.iloc 4 . 2)
     (push.iloc.1 . 0)
     (push.iloc 2 . 1)
     (iloc 2 . 2)
     (push.cons)
     (push.subr.gloc.of \x2E;list 1 "../stdlib/core/hashtables.scm" . 85046)
     (ret.subr.gloc.of \x2E;core-hashtable-set! "../stdlib/core/hashtables.scm" . 85012))
   (push.close
     (2 0)
     (iloc 2 . 4)
     (if.false.call
       (push.const . hashtable-delete!)
       (push.const . "expected mutable hashtable, but ~s is not")
       (push.iloc.0 . 0)
       (push.subr.gloc.of \x2E;format 2 "../stdlib/core/hashtables.scm" . 89152)
       (push.iloc.0 . 0)
       (push.iloc.0 . 1)
       (push.subr.gloc.of \x2E;list 2 "../stdlib/core/hashtables.scm" . 89215)
       (apply.gloc.of \x2E;assertion-violation "../stdlib/core/hashtables.scm" . 89112))
     (call
       (call (push.iloc.0 . 1) (apply.iloc (2 . 0) "../stdlib/core/hashtables.scm" . 90135))
       (push)
       (push.close
         (1 0 . equiv?)
         (push.iloc.0 . 0)
         (push.iloc.1 . 1)
         (apply.iloc (3 . 1) "../stdlib/core/hashtables.scm" . 91173))
       (extend . 2)
       (push.iloc 3 . 2)
       (push.iloc.0 . 0)
       (push.const . #f)
       (push.subr.gloc.of \x2E;core-hashtable-ref 3 "../stdlib/core/hashtables.scm" . 92180)
       (extend . 1)
       (iloc.0 . 0)
       (if.true
         (call
           (push.iloc.1 . 1)
           (push.iloc.0 . 0)
           (apply.gloc.of core.lists\x27;assp "../stdlib/core/hashtables.scm" . 94240))
         (push)
         (extend . 1)
         (iloc.0 . 0)
         (if.true
           (push.iloc 5 . 2)
           (push.iloc 2 . 0)
           (call
             (push.iloc.0 . 0)
             (push.iloc.1 . 0)
             (apply.gloc.of core.lists\x27;remq "../stdlib/core/hashtables.scm" . 96327))
           (push)
           (ret.subr.gloc.of \x2E;core-hashtable-set! "../stdlib/core/hashtables.scm" . 96293))
         (ret.const.unspec))
       (ret.const.unspec))
     (ret.const.unspec))
   (push.close
     (2 0)
     (push.close
       (1 0 . equiv?)
       (push.iloc.0 . 0)
       (push.iloc.1 . 1)
       (apply.iloc (3 . 1) "../stdlib/core/hashtables.scm" . 102437))
     (extend . 1)
     (push.iloc 3 . 2)
     (call (push.iloc.1 . 1) (apply.iloc (3 . 0) "../stdlib/core/hashtables.scm" . 101399))
     (push)
     (push.const . #f)
     (push.subr.gloc.of \x2E;core-hashtable-ref 3 "../stdlib/core/hashtables.scm" . 103444)
     (extend . 1)
     (iloc.0 . 0)
     (if.true
       (call
         (push.iloc.1 . 0)
         (push.iloc.0 . 0)
         (apply.gloc.of core.lists\x27;assp "../stdlib/core/hashtables.scm" . 105502))
       (if.false.ret)
       (ret.const . #t))
     (ret.const . #f))
   (push.close
     (1 1)
     (call
       (iloc.0 . 1)
       (if.pair?
         (push.iloc.0 . 1)
         (ret.subr.gloc.of \x2E;car "../stdlib/core/hashtables.scm" . 111629))
       (ret.const . #f))
     (push)
     (extend . 1)
     (iloc 3 . 4)
     (if.true
       (subr.gloc.of \x2E;make-core-hashtable 0)
       (push)
       (extend . 1)
       (call
         (push.close
           (1 0)
           (push.iloc.1 . 0)
           (push.car.iloc (0 . 0) "../stdlib/core/hashtables.scm" . 115754)
           (call
             (push.gloc.of \x2E;fn4.1\x60;4)
             (push.cdr.iloc (0 . 0) "../stdlib/core/hashtables.scm" . 116819)
             (apply.gloc.of \x2E;map "../stdlib/core/hashtables.scm" . 116778))
           (push)
           (ret.subr.gloc.of \x2E;core-hashtable-set! "../stdlib/core/hashtables.scm" . 113705))
         (push.iloc 4 . 2)
         (push.subr.gloc.of \x2E;core-hashtable->alist 1 "../stdlib/core/hashtables.scm" . 117789)
         (apply.gloc.of \x2E;for-each "../stdlib/core/hashtables.scm" . 113683))
       (iloc.1 . 0)
       (if.true
         (push.iloc 4 . 0)
         (push.iloc 4 . 1)
         (push.iloc.0 . 0)
         (push.iloc 4 . 3)
         (push.iloc.1 . 0)
         (apply.gloc.of
           core.hashtables\x27;make-generic-hashtable
           "../stdlib/core/hashtables.scm"
           .
           119831))
       (push.iloc 4 . 0)
       (push.iloc 4 . 1)
       (push.iloc.0 . 0)
       (push.subr.gloc.of \x2E;core-hashtable-copy 1 "../stdlib/core/hashtables.scm" . 120908)
       (push.iloc 4 . 3)
       (push.iloc.1 . 0)
       (apply.gloc.of
         core.hashtables\x27;make-generic-hashtable
         "../stdlib/core/hashtables.scm"
         .
         120855))
     (push.iloc 3 . 0)
     (push.iloc 3 . 1)
     (push.iloc 3 . 2)
     (push.iloc.0 . 0)
     (push.subr.gloc.of \x2E;core-hashtable-copy 2 "../stdlib/core/hashtables.scm" . 121926)
     (push.iloc 3 . 3)
     (push.iloc.0 . 0)
     (apply.gloc.of
       core.hashtables\x27;make-generic-hashtable
       "../stdlib/core/hashtables.scm"
       .
       121873))
   (push.close
     (1 1)
     (call
       (iloc.0 . 1)
       (if.pair?
         (push.iloc.0 . 1)
         (ret.subr.gloc.of \x2E;car "../stdlib/core/hashtables.scm" . 126989))
       (ret.const . 0))
     (push)
     (extend . 1)
     (iloc 3 . 4)
     (if.false.call
       (push.const . hashtable-clear!)
       (push.const . "expected mutable hashtable, but ~s is not")
       (push.iloc.1 . 0)
       (push.subr.gloc.of \x2E;format 2 "../stdlib/core/hashtables.scm" . 127041)
       (push.iloc.1 . 0)
       (iloc.1 . 1)
       (push.cons)
       (apply.gloc.of \x2E;assertion-violation "../stdlib/core/hashtables.scm" . 127002))
     (push.iloc 3 . 2)
     (push.iloc.0 . 0)
     (subr.gloc.of \x2E;core-hashtable-clear! 2 "../stdlib/core/hashtables.scm" . 128013)
     (const . 0)
     (set.iloc 3 . 3)
     (ret.const.unspec))
   (push.close
     (1 0)
     (touch.gloc.of loop\x60;75)
     (push.iloc 2 . 2)
     (push.subr.gloc.of \x2E;core-hashtable->alist 1 "../stdlib/core/hashtables.scm" . 133147)
     (push.const)
     (apply.gloc.of loop\x60;75 "../stdlib/core/hashtables.scm" . 133131))
   (push.close (1 0) (ret.iloc 2 . 1))
   (push.close (1 0) (ret.iloc 2 . 0))
   (push.close (1 0) (ret.iloc 2 . 4))
   (enclose . 11)
   (push.const . generic)
   (push.const . hashtable-handler)
   (push.iloc.1 . 0)
   (push.iloc.1 . 1)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.iloc.0 . 2)
   (push.iloc.0 . 3)
   (push.iloc.0 . 4)
   (push.iloc.0 . 5)
   (push.iloc.0 . 6)
   (push.iloc.0 . 9)
   (push.iloc.0 . 8)
   (push.iloc.0 . 10)
   (push.iloc.0 . 7)
   (push.subr.gloc.of \x2E;vector 14 "../stdlib/core/hashtables.scm" . 145436)
   (ret.subr.gloc.of \x2E;make-core-hashtable "../stdlib/core/hashtables.scm" . 144391))
 (set.gloc.of core.hashtables\x27;make-generic-hashtable)
 (close
   (2 1 . core.hashtables\x27;make-hashtable)
   (call
     (iloc.0 . 2)
     (if.pair?
       (push.iloc.0 . 2)
       (ret.subr.gloc.of \x2E;car "../stdlib/core/hashtables.scm" . 163849))
     (ret.const . 0))
   (push)
   (extend . 1)
   (push.iloc.1 . 0)
   (subr.gloc.of \x2E;procedure? 1 "../stdlib/core/hashtables.scm" . 163853)
   (if.false.call
     (push.const . make-hashtable)
     (push.const . "expected procedure, but got ~r, as argument 1")
     (push.iloc.1 . 0)
     (push.subr.gloc.of \x2E;format 2 "../stdlib/core/hashtables.scm" . 164914)
     (apply.gloc.of \x2E;assertion-violation "../stdlib/core/hashtables.scm" . 164877))
   (push.iloc.1 . 1)
   (subr.gloc.of \x2E;procedure? 1 "../stdlib/core/hashtables.scm" . 165901)
   (if.false.call
     (push.const . make-hashtable)
     (push.const . "expected procedure, but got ~r, as argument 2")
     (push.iloc.1 . 1)
     (push.subr.gloc.of \x2E;format 2 "../stdlib/core/hashtables.scm" . 166962)
     (apply.gloc.of \x2E;assertion-violation "../stdlib/core/hashtables.scm" . 166925))
   (push.iloc.1 . 0)
   (push.iloc.1 . 1)
   (push.const . eq?)
   (push.iloc.0 . 0)
   (push.subr.gloc.of \x2E;make-core-hashtable 2 "../stdlib/core/hashtables.scm" . 167998)
   (push.const . 0)
   (push.const . #t)
   (apply.gloc.of
     core.hashtables\x27;make-generic-hashtable
     "../stdlib/core/hashtables.scm"
     .
     167945))
 (set.gloc.of core.hashtables\x27;make-hashtable)
 (close
   (0 1 . core.hashtables\x27;make-eq-hashtable)
   (push.const . eq?)
   (call
     (iloc.0 . 0)
     (if.pair?
       (push.iloc.0 . 0)
       (ret.subr.gloc.of \x2E;car "../stdlib/core/hashtables.scm" . 173065))
     (ret.const . 0))
   (push)
   (ret.subr.gloc.of \x2E;make-core-hashtable "../stdlib/core/hashtables.scm" . 173065))
 (set.gloc.of core.hashtables\x27;make-eq-hashtable)
 (close
   (0 1 . core.hashtables\x27;make-eqv-hashtable)
   (push.const . eqv?)
   (call
     (iloc.0 . 0)
     (if.pair?
       (push.iloc.0 . 0)
       (ret.subr.gloc.of \x2E;car "../stdlib/core/hashtables.scm" . 178185))
     (ret.const . 0))
   (push)
   (ret.subr.gloc.of \x2E;make-core-hashtable "../stdlib/core/hashtables.scm" . 178185))
 (set.gloc.of core.hashtables\x27;make-eqv-hashtable)
 (close
   (0 1 . core.hashtables\x27;make-string-hashtable)
   (push.const . string=?)
   (call
     (iloc.0 . 0)
     (if.pair?
       (push.iloc.0 . 0)
       (ret.subr.gloc.of \x2E;car "../stdlib/core/hashtables.scm" . 183305))
     (ret.const . 0))
   (push)
   (ret.subr.gloc.of \x2E;make-core-hashtable "../stdlib/core/hashtables.scm" . 183305))
 (set.gloc.of core.hashtables\x27;make-string-hashtable)
 (close
   (4 0 . core.hashtables\x27;hashtable-update!)
   (push.iloc.0 . 0)
   (subr.gloc.of \x2E;core-hashtable-mutable? 1 "../stdlib/core/hashtables.scm" . 187403)
   (if.false.call
     (push.const . hashtable-update!)
     (push.const . "expected mutable hashtable")
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.iloc.0 . 2)
     (push.iloc.0 . 3)
     (push.subr.gloc.of \x2E;list 4 "../stdlib/core/hashtables.scm" . 188496)
     (apply.gloc.of \x2E;assertion-violation "../stdlib/core/hashtables.scm" . 188427))
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (call
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.iloc.0 . 3)
     (push.subr.gloc.of \x2E;core-hashtable-ref 3 "../stdlib/core/hashtables.scm" . 189481)
     (apply.iloc (0 . 2) "../stdlib/core/hashtables.scm" . 189475))
   (push)
   (ret.subr.gloc.of \x2E;core-hashtable-set! "../stdlib/core/hashtables.scm" . 189447))
 (set.gloc.of core.hashtables\x27;hashtable-update!)
 (close
   (1 0 . core.hashtables\x27;hashtable-keys)
   (call
     (push.gloc.of \x2E;car)
     (push.iloc.0 . 0)
     (push.subr.gloc.of \x2E;core-hashtable->alist 1 "../stdlib/core/hashtables.scm" . 193566)
     (apply.gloc.of \x2E;map "../stdlib/core/hashtables.scm" . 193557))
   (push)
   (ret.subr.gloc.of \x2E;list->vector "../stdlib/core/hashtables.scm" . 193543))
 (set.gloc.of core.hashtables\x27;hashtable-keys)
 (close
   (1 0 . core.hashtables\x27;hashtable-entries)
   (push.iloc.0 . 0)
   (push.subr.gloc.of \x2E;core-hashtable->alist 1 "../stdlib/core/hashtables.scm" . 197650)
   (extend . 1)
   (call
     (push.gloc.of \x2E;car)
     (push.iloc.0 . 0)
     (apply.gloc.of \x2E;map "../stdlib/core/hashtables.scm" . 198687))
   (push)
   (push.subr.gloc.of \x2E;list->vector 1 "../stdlib/core/hashtables.scm" . 198673)
   (call
     (push.gloc.of \x2E;cdr)
     (push.iloc.0 . 0)
     (apply.gloc.of \x2E;map "../stdlib/core/hashtables.scm" . 199711))
   (push)
   (push.subr.gloc.of \x2E;list->vector 1 "../stdlib/core/hashtables.scm" . 199697)
   (ret.subr.gloc.of \x2E;values "../stdlib/core/hashtables.scm" . 198665))
 (set.gloc.of core.hashtables\x27;hashtable-entries)
 (close
   (1 0 . core.hashtables\x27;string-ci-hash)
   (call
     (push.iloc.0 . 0)
     (apply.gloc.of core.unicode\x27;string-foldcase "../stdlib/core/hashtables.scm" . 203796))
   (push)
   (ret.subr.gloc.of \x2E;string-hash "../stdlib/core/hashtables.scm" . 203783))
 (set.gloc.of core.hashtables\x27;string-ci-hash)
 (push.const . core.hashtables)
 (push.const . #f)
 (push.const
   (make-eq-hashtable import . core.hashtables\x27;make-eq-hashtable)
   (make-eqv-hashtable import . core.hashtables\x27;make-eqv-hashtable)
   (make-string-hashtable import . core.hashtables\x27;make-string-hashtable)
   (make-hashtable import . core.hashtables\x27;make-hashtable)
   (weak-hashtable? import . \x2E;weak-core-hashtable?)
   (make-weak-hashtable import . \x2E;make-weak-core-hashtable)
   (hashtable-contains? import . \x2E;core-hashtable-contains?)
   (hashtable-delete! import . \x2E;core-hashtable-delete!)
   (hashtable-set! import . \x2E;core-hashtable-set!)
   (hashtable-ref import . \x2E;core-hashtable-ref)
   (hashtable-size import . \x2E;core-hashtable-size)
   (hashtable? import . \x2E;core-hashtable?)
   (hashtable-update! import . core.hashtables\x27;hashtable-update!)
   (hashtable-clear! import . \x2E;core-hashtable-clear!)
   (hashtable-copy import . \x2E;core-hashtable-copy)
   (hashtable-keys import . core.hashtables\x27;hashtable-keys)
   (hashtable-entries import . core.hashtables\x27;hashtable-entries)
   (hashtable-mutable? import . \x2E;core-hashtable-mutable?)
   (hashtable-hash-function import . \x2E;core-hashtable-hash-function)
   (hashtable-equivalence-function import . \x2E;core-hashtable-equivalence-function)
   (equal-hash import . \x2E;equal-hash)
   (string-hash import . \x2E;string-hash)
   (string-ci-hash import . core.hashtables\x27;string-ci-hash)
   (symbol-hash import . \x2E;symbol-hash)
   (hashtable->alist import . \x2E;core-hashtable->alist))
 (apply.gloc.of \x2E;intern-scheme-library "../stdlib/core/hashtables.scm" . 6145))

((close
   (1 0)
   (push.iloc.0 . 0)
   (push.const
     begin
     (define-syntax ?make-name ?make-rules)
     (define-syntax ?pred-name ?pred-rules)
     (define-syntax ?getter-name ?getter-rules)
     ...
     (define-syntax ?setter-name ?setter-rules)
     ...)
   (push.const
     (?setter-rules . 1)
     (?setter-name . 1)
     (?getter-rules . 1)
     (?getter-name . 1)
     (?pred-rules . 0)
     (?pred-name . 0)
     (?make-rules . 0)
     (?make-name . 0))
   (apply.gloc.of \x2E;syntax/c1 "../stdlib/core/struct.scm" . 63506))
 (set.gloc.of \x2E;fn2.1\x60;2)
 (close
   (1 0)
   (push.const . with-syntax)
   (push.const . "value does not match to pattern")
   (push.const
     (?make-name (datum->syntax (syntax ?_) make-name))
     (?pred-name (datum->syntax (syntax ?_) pred-name))
     (?make-rules
       (datum->syntax
         (syntax k)
         `(syntax-rules ()
            ((_ ,@field-names) (tuple ',desc-name ,@field-names))
            ((_) (tuple ',desc-name ,@(make-list field-count '(unspecified)))))))
     (?pred-rules
       (datum->syntax
         (syntax k)
         `(syntax-rules () ((_ obj) (and (tuple? obj) (eq? (tuple-ref obj 0) ',desc-name))))))
     ((?getter-name ...)
      (map (lambda (field-name)
             (datum->syntax (syntax ?_) (string->symbol (format "~a-~a" struct-name field-name))))
           field-names))
     ((?setter-name ...)
      (map (lambda (field-name)
             (datum->syntax
               (syntax ?_)
               (string->symbol (format "~a-~a-set!" struct-name field-name))))
           field-names))
     ((?getter-rules ...)
      (map (lambda (field-ref)
             (datum->syntax (syntax k) `(syntax-rules () ((_ obj) (tuple-ref obj ,field-ref)))))
           field-refs))
     ((?setter-rules ...)
      (map (lambda (field-ref)
             (datum->syntax
               (syntax k)
               `(syntax-rules () ((_ obj value) (tuple-set! obj ,field-ref value)))))
           field-refs)))
   (apply.gloc.of \x2E;syntax-violation "../stdlib/core/struct.scm" . 36886))
 (set.gloc.of \x2E;fn1.1\x60;1)
 (close
   (1 0)
   (push.gloc.of \x2E;patvars)
   (push.iloc.0 . 0)
   (push.const)
   (push.const ?_ ?struct-name ?field-names)
   (push.const . #f)
   (push.close
     (1 0)
     (call
       (call
         (push.iloc.0 . 0)
         (push.const . ?struct-name)
         (apply.gloc.of \x2E;syntax/i1 "../stdlib/core/struct.scm" . 18461))
       (push)
       (apply.gloc.of \x2E;syntax->datum "../stdlib/core/struct.scm" . 18461))
     (push)
     (call
       (call
         (push.iloc.0 . 0)
         (push.const . ?field-names)
         (apply.gloc.of \x2E;syntax/i1 "../stdlib/core/struct.scm" . 19485))
       (push)
       (apply.gloc.of \x2E;syntax->datum "../stdlib/core/struct.scm" . 19485))
     (push)
     (extend . 2)
     (call
       (iloc.0 . 0)
       (if.symbol?.ret.const . #t)
       (push.const . define-struct)
       (push.const . "expected symbol for struct name")
       (push.iloc 2 . 0)
       (push.iloc.0 . 0)
       (apply.gloc.of \x2E;syntax-violation "../stdlib/core/struct.scm" . 21520))
     (call
       (extend.enclose+
         (1 0 . loop)
         (iloc.0 . 0)
         (if.not.pair?.ret.const . #f)
         (car.iloc (0 . 0) "../stdlib/core/struct.scm" . 24608)
         (if.symbol?
           (push.car.iloc (0 . 0) "../stdlib/core/struct.scm" . 25633)
           (push.cdr.iloc (0 . 0) "../stdlib/core/struct.scm" . 25645)
           (subr.gloc.of \x2E;memq 2 "../stdlib/core/struct.scm" . 25627)
           (if.true
             (push.const . define-struct)
             (push.const . "duplicate field name")
             (push.iloc 4 . 0)
             (push.iloc 2 . 1)
             (apply.gloc.of \x2E;syntax-violation "../stdlib/core/struct.scm" . 26651))
           (push.cdr.iloc (0 . 0) "../stdlib/core/struct.scm" . 27681)
           (apply.iloc+ (1 . 0) "../stdlib/core/struct.scm" . 27675))
         (push.const . define-struct)
         (push.const . "expected symbol for field name")
         (push.iloc 4 . 0)
         (push.iloc 2 . 1)
         (apply.gloc.of \x2E;syntax-violation "../stdlib/core/struct.scm" . 28695))
       (push.iloc.1 . 1)
       (apply.iloc+ (0 . 0) "../stdlib/core/struct.scm" . 22540))
     (push.const . "make-~a")
     (push.iloc.0 . 0)
     (push.subr.gloc.of \x2E;format 2 "../stdlib/core/struct.scm" . 29741)
     (push.subr.gloc.of \x2E;string->symbol 1 "../stdlib/core/struct.scm" . 29725)
     (push.const . "~a?")
     (push.iloc.0 . 0)
     (push.subr.gloc.of \x2E;format 2 "../stdlib/core/struct.scm" . 30765)
     (push.subr.gloc.of \x2E;string->symbol 1 "../stdlib/core/struct.scm" . 30749)
     (push.const . "type:~a")
     (push.iloc.0 . 0)
     (push.subr.gloc.of \x2E;format 2 "../stdlib/core/struct.scm" . 31789)
     (push.subr.gloc.of \x2E;string->symbol 1 "../stdlib/core/struct.scm" . 31773)
     (push.iloc.0 . 1)
     (push.subr.gloc.of \x2E;length 1 "../stdlib/core/struct.scm" . 32799)
     (extend . 4)
     (call
       (push.iloc.0 . 3)
       (push.const . 1)
       (apply.gloc.of core.lists\x27;iota "../stdlib/core/struct.scm" . 33824))
     (push)
     (extend . 1)
     (push.iloc 3 . 0)
     (call
       (call
         (push.iloc 3 . 0)
         (push.const . ?_)
         (apply.gloc.of \x2E;syntax/i1 "../stdlib/core/struct.scm" . 36886))
       (push)
       (push.iloc.1 . 0)
       (apply.gloc.of \x2E;datum->syntax "../stdlib/core/struct.scm" . 36886))
     (push)
     (call
       (call
         (push.iloc 3 . 0)
         (push.const . ?_)
         (apply.gloc.of \x2E;syntax/i1 "../stdlib/core/struct.scm" . 38934))
       (push)
       (push.iloc.1 . 1)
       (apply.gloc.of \x2E;datum->syntax "../stdlib/core/struct.scm" . 38934))
     (push)
     (call
       (call
         (push.iloc 3 . 0)
         (push.const . k)
         (apply.gloc.of \x2E;syntax/i0 "../stdlib/core/struct.scm" . 40982))
       (push)
       (push.const . syntax-rules)
       (push.const)
       (push.const . _)
       (iloc 2 . 1)
       (push.cons)
       (push.const . tuple)
       (push.const . quote)
       (push.iloc.1 . 2)
       (push.subr.gloc.of \x2E;list 2 "../stdlib/core/struct.scm" . 40982)
       (push.iloc 2 . 1)
       (push.subr.gloc.of \x2E;cons* 3 "../stdlib/core/struct.scm" . 40982)
       (push.subr.gloc.of \x2E;list 2 "../stdlib/core/struct.scm" . 40982)
       (push.const _)
       (push.const . tuple)
       (push.const . quote)
       (push.iloc.1 . 2)
       (push.subr.gloc.of \x2E;list 2 "../stdlib/core/struct.scm" . 40982)
       (call
         (push.iloc.1 . 3)
         (push.const unspecified)
         (apply.gloc.of core.lists\x27;make-list "../stdlib/core/struct.scm" . 43078))
       (push)
       (push.subr.gloc.of \x2E;cons* 3 "../stdlib/core/struct.scm" . 40982)
       (push.subr.gloc.of \x2E;list 2 "../stdlib/core/struct.scm" . 40982)
       (push.subr.gloc.of \x2E;list 4 "../stdlib/core/struct.scm" . 40982)
       (apply.gloc.of \x2E;datum->syntax "../stdlib/core/struct.scm" . 40982))
     (push)
     (call
       (call
         (push.iloc 3 . 0)
         (push.const . k)
         (apply.gloc.of \x2E;syntax/i0 "../stdlib/core/struct.scm" . 45078))
       (push)
       (push.const . syntax-rules)
       (push.const)
       (push.const _ obj)
       (push.const . and)
       (push.const tuple? obj)
       (push.const . eq?)
       (push.const tuple-ref obj 0)
       (push.const . quote)
       (push.iloc.1 . 2)
       (push.subr.gloc.of \x2E;list 2 "../stdlib/core/struct.scm" . 45078)
       (push.subr.gloc.of \x2E;list 3 "../stdlib/core/struct.scm" . 45078)
       (push.subr.gloc.of \x2E;list 3 "../stdlib/core/struct.scm" . 45078)
       (push.subr.gloc.of \x2E;list 2 "../stdlib/core/struct.scm" . 45078)
       (push.subr.gloc.of \x2E;list 3 "../stdlib/core/struct.scm" . 45078)
       (apply.gloc.of \x2E;datum->syntax "../stdlib/core/struct.scm" . 45078))
     (push)
     (call
       (push.close
         (1 0)
         (call
           (push.iloc 4 . 0)
           (push.const . ?_)
           (apply.gloc.of \x2E;syntax/i1 "../stdlib/core/struct.scm" . 49181))
         (push)
         (push.const . "~a-~a")
         (push.iloc 3 . 0)
         (push.iloc.0 . 0)
         (push.subr.gloc.of \x2E;format 3 "../stdlib/core/struct.scm" . 49217)
         (push.subr.gloc.of \x2E;string->symbol 1 "../stdlib/core/struct.scm" . 49201)
         (apply.gloc.of \x2E;datum->syntax "../stdlib/core/struct.scm" . 49181))
       (push.iloc 2 . 1)
       (apply.gloc.of \x2E;map "../stdlib/core/struct.scm" . 48150))
     (push)
     (call
       (push.close
         (1 0)
         (call
           (push.iloc 4 . 0)
           (push.const . ?_)
           (apply.gloc.of \x2E;syntax/i1 "../stdlib/core/struct.scm" . 53277))
         (push)
         (push.const . "~a-~a-set!")
         (push.iloc 3 . 0)
         (push.iloc.0 . 0)
         (push.subr.gloc.of \x2E;format 3 "../stdlib/core/struct.scm" . 53313)
         (push.subr.gloc.of \x2E;string->symbol 1 "../stdlib/core/struct.scm" . 53297)
         (apply.gloc.of \x2E;datum->syntax "../stdlib/core/struct.scm" . 53277))
       (push.iloc 2 . 1)
       (apply.gloc.of \x2E;map "../stdlib/core/struct.scm" . 52246))
     (push)
     (call
       (push.close
         (1 0)
         (call
           (push.iloc 4 . 0)
           (push.const . k)
           (apply.gloc.of \x2E;syntax/i0 "../stdlib/core/struct.scm" . 57373))
         (push)
         (push.const . syntax-rules)
         (push.const)
         (push.const _ obj)
         (push.const . tuple-ref)
         (push.const . obj)
         (push.iloc.0 . 0)
         (push.subr.gloc.of \x2E;list 3 "../stdlib/core/struct.scm" . 57373)
         (push.subr.gloc.of \x2E;list 2 "../stdlib/core/struct.scm" . 57373)
         (push.subr.gloc.of \x2E;list 3 "../stdlib/core/struct.scm" . 57373)
         (apply.gloc.of \x2E;datum->syntax "../stdlib/core/struct.scm" . 57373))
       (push.iloc.0 . 0)
       (apply.gloc.of \x2E;map "../stdlib/core/struct.scm" . 56342))
     (push)
     (call
       (push.close
         (1 0)
         (call
           (push.iloc 4 . 0)
           (push.const . k)
           (apply.gloc.of \x2E;syntax/i0 "../stdlib/core/struct.scm" . 61469))
         (push)
         (push.const . syntax-rules)
         (push.const)
         (push.const _ obj value)
         (push.const . tuple-set!)
         (push.const . obj)
         (push.iloc.0 . 0)
         (push.const value)
         (push.subr.gloc.of \x2E;cons* 4 "../stdlib/core/struct.scm" . 61469)
         (push.subr.gloc.of \x2E;list 2 "../stdlib/core/struct.scm" . 61469)
         (push.subr.gloc.of \x2E;list 3 "../stdlib/core/struct.scm" . 61469)
         (apply.gloc.of \x2E;datum->syntax "../stdlib/core/struct.scm" . 61469))
       (push.iloc.0 . 0)
       (apply.gloc.of \x2E;map "../stdlib/core/struct.scm" . 60438))
     (push)
     (push.subr.gloc.of \x2E;list 8 "../stdlib/core/struct.scm" . 36886)
     (push.const)
     (push.const
       ?make-name
       ?pred-name
       ?make-rules
       ?pred-rules
       (?getter-name ...)
       (?setter-name ...)
       (?getter-rules ...)
       (?setter-rules ...))
     (push.const . #f)
     (push.gloc.of \x2E;fn2.1\x60;2)
     (push.subr.gloc.of \x2E;list 3 "../stdlib/core/struct.scm" . 33806)
     (push.const . _)
     (push.const . #f)
     (push.gloc.of \x2E;fn1.1\x60;1)
     (push.subr.gloc.of \x2E;list 3 "../stdlib/core/struct.scm" . 36886)
     (apply.gloc.of \x2E;syntax-dispatch "../stdlib/core/struct.scm" . 33806))
   (push.subr.gloc.of \x2E;list 3 "../stdlib/core/struct.scm" . 63506)
   (apply.gloc.of \x2E;syntax-dispatch "../stdlib/core/struct.scm" . 63506))
 (set.gloc.of \x2E;fn3.1\x60;3)
 (call
   (push.const core lists)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core/struct.scm" . 6145))
 (call
   (push.const core syntax-case)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core/struct.scm" . 6145))
 (call
   (push.const core primitives)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core/struct.scm" . 6145))
 (call
   (push.const . syntax)
   (push.const . core.struct\x27;define-struct)
   (call
     (push.gloc.of \x2E;fn3.1\x60;3)
     (apply.gloc.of \x2E;transformer-thunk "../stdlib/core/struct.scm" . 6145))
   (push)
   (push.const
     (tuple import . \x2E;tuple)
     (unquote-splicing import . \x2E;unquote-splicing)
     (begin import . \x2E;begin)
     (tuple-set! import . \x2E;tuple-set!)
     (let import . \x2E;let)
     (quote import . \x2E;quote)
     (unspecified import . \x2E;unspecified)
     (datum->syntax import . \x2E;datum->syntax)
     (tuple-ref import . \x2E;tuple-ref)
     (make-list import . core.lists\x27;make-list)
     (letrec* import . \x2E;letrec*)
     (syntax-rules import . \x2E;syntax-rules)
     (unquote import . \x2E;unquote)
     (... import . \x2E;...)
     (and import . \x2E;and)
     (define-syntax import . \x2E;define-syntax)
     (with-syntax import . core.syntax-case\x27;with-syntax)
     (syntax import . \x2E;syntax)
     (lambda import . \x2E;lambda)
     (tuple? import . \x2E;tuple?)
     (map import . \x2E;map)
     (define-struct import . core.struct\x27;define-struct)
     (quasiquote import . \x2E;quasiquote)
     (if import . \x2E;if)
     (string->symbol import . \x2E;string->symbol)
     (format import . \x2E;format)
     (or import . \x2E;or)
     (eq? import . \x2E;eq?)
     (_ import . \x2E;_))
   (apply.gloc.of \x2E;set-top-level-macro! "../stdlib/core/struct.scm" . 6145))
 (push.const . core.struct)
 (push.const . #f)
 (push.const (define-struct import . core.struct\x27;define-struct))
 (apply.gloc.of \x2E;intern-scheme-library "../stdlib/core/struct.scm" . 6145))

((close
   (1 0)
   (push.gloc.of core.optimize\x27;ht-variable-stackables)
   (push.iloc.0 . 0)
   (ret.subr.gloc.of \x2E;core-hashtable-contains? "../stdlib/core/optimize.scm" . 1059893))
 (set.gloc.of \x2E;fn20.1\x60;20)
 (close
   (1 0)
   (call
     (push.iloc.0 . 0)
     (apply.gloc.of core.optimize\x27;process-stackable "../stdlib/core/optimize.scm" . 1126411))
   (call
     (push.gloc.of \x2E;fn64.1\x60;64)
     (push.gloc.of core.optimize\x27;ht-variable-stackables)
     (push.subr.gloc.of \x2E;core-hashtable->alist 1 "../stdlib/core/optimize.scm" . 1128469)
     (apply.gloc.of \x2E;for-each "../stdlib/core/optimize.scm" . 1127435))
   (ret.iloc 0 . 0))
 (set.gloc.of post-transform\x60;675)
 (close
   (2 0)
   (push.gloc.of core.optimize\x27;ht-lambda-node)
   (push.cdr.iloc (0 . 1) "../stdlib/core/optimize.scm" . 470082)
   (push.const . #f)
   (push.subr.gloc.of \x2E;core-hashtable-ref 3 "../stdlib/core/optimize.scm" . 470047)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (iloc.0 . 0)
     (if.null?
       (push.gloc.of core.optimize\x27;ht-lambda-node)
       (push.cdr.iloc (1 . 1) "../stdlib/core/optimize.scm" . 473167)
       (push.const . functable)
       (subr.gloc.of \x2E;core-hashtable-set! 3 "../stdlib/core/optimize.scm" . 473131)
       (ret.const . #t))
     (push.iloc.0 . 0)
     (push.subr.gloc.of \x2E;pair? 1 "../stdlib/core/optimize.scm" . 475184)
     (subr.gloc.of \x2E;not 1 "../stdlib/core/optimize.scm" . 475179)
     (if.true (ret.iloc 1 . 0))
     (call
       (cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 476215)
       (if.not.null?.ret.const . #f)
       (push.car.iloc (1 . 1) "../stdlib/core/optimize.scm" . 476232)
       (car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 476240)
       (ret.eq? "../stdlib/core/optimize.scm" . 476227))
     (if.true
       (push.gloc.of core.optimize\x27;ht-lambda-node)
       (push.cdr.iloc (1 . 1) "../stdlib/core/optimize.scm" . 477263)
       (push.const . functable)
       (subr.gloc.of \x2E;core-hashtable-set! 3 "../stdlib/core/optimize.scm" . 477227)
       (ret.const . #t))
     (call
       (push.close
         (1 0)
         (push.car.iloc (2 . 1) "../stdlib/core/optimize.scm" . 479306)
         (iloc.0 . 0)
         (if.eq?.ret.const . #t)
         (push.iloc.0 . 0)
         (apply.gloc.of
           core.optimize\x27;variable-functional?
           "../stdlib/core/optimize.scm"
           .
           479318))
       (push.iloc.0 . 0)
       (apply.gloc.of core.lists\x27;for-all "../stdlib/core/optimize.scm" . 479275))
     (if.true
       (push.gloc.of core.optimize\x27;ht-lambda-node)
       (push.cdr.iloc (1 . 1) "../stdlib/core/optimize.scm" . 480335)
       (push.const . functable)
       (subr.gloc.of \x2E;core-hashtable-set! 3 "../stdlib/core/optimize.scm" . 480299)
       (ret.const . #t))
     (call
       (push.close
         (1 0)
         (push.car.iloc (2 . 1) "../stdlib/core/optimize.scm" . 482378)
         (iloc.0 . 0)
         (if.eq?.ret.const . #t)
         (push.iloc.0 . 0)
         (apply.gloc.of
           core.optimize\x27;variable-top-level?
           "../stdlib/core/optimize.scm"
           .
           482390))
       (push.iloc.0 . 0)
       (apply.gloc.of core.lists\x27;for-all "../stdlib/core/optimize.scm" . 482347))
     (if.true
       (push.gloc.of core.optimize\x27;ht-lambda-node)
       (push.cdr.iloc (1 . 1) "../stdlib/core/optimize.scm" . 483407)
       (push.const . liftable)
       (subr.gloc.of \x2E;core-hashtable-set! 3 "../stdlib/core/optimize.scm" . 483371)
       (ret.const . #t))
     (ret.iloc 1 . 0))
   (ret.iloc 1 . 0))
 (set.gloc.of \x2E;fn62.1\x60;62)
 (close
   (0 0)
   (push.gloc.of \x2E;fn21.1\x60;21)
   (push.gloc.of core.optimize\x27;ht-lambda-node)
   (push.subr.gloc.of \x2E;core-hashtable->alist 1 "../stdlib/core/optimize.scm" . 502805)
   (apply.gloc.of \x2E;for-each "../stdlib/core/optimize.scm" . 491529))
 (set.gloc.of traverse-lambda-node\x60;165)
 (close
   (1 0)
   (push.gloc.of core.optimize\x27;ht-variable-pinned)
   (push.iloc.0 . 0)
   (push.const . #t)
   (ret.subr.gloc.of \x2E;core-hashtable-set! "../stdlib/core/optimize.scm" . 387089))
 (set.gloc.of \x2E;fn59.1\x60;59)
 (close
   (1 0)
   (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1127481)
   (push.const . stack)
   (apply.gloc.of core.optimize\x27;closure-attribute-set! "../stdlib/core/optimize.scm" . 1127457))
 (set.gloc.of \x2E;fn64.1\x60;64)
 (close
   (1 0)
   (cadr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 387089)
   (if.true.ret)
   (ret.const begin #f))
 (set.gloc.of \x2E;fn39.1\x60;39)
 (close
   (1 0)
   (car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 349207)
   (if.not.pair?.ret.const . #f)
   (call
     (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 350235)
     (subr.gloc.of \x2E;list? 1 "../stdlib/core/optimize.scm" . 350228)
     (if.true.ret)
     (push.const . #f)
     (push.const . "expression is not a proper list")
     (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 351307)
     (apply.gloc.of \x2E;syntax-violation "../stdlib/core/optimize.scm" . 351252))
   (if.false.ret)
   (push.const . begin)
   (push.iloc.0 . 0)
   (subr.gloc.of \x2E;caar 1 "../stdlib/core/optimize.scm" . 352284)
   (ret.eq? "../stdlib/core/optimize.scm" . 352272))
 (set.gloc.of concatenate?\x60;85)
 (close
   (1 0)
   (call
     (push.iloc.0 . 0)
     (apply.gloc.of core.optimize\x27;get-free-variables "../stdlib/core/optimize.scm" . 519190))
   (push)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (push.iloc.0 . 0)
     (subr.gloc.of \x2E;list? 1 "../stdlib/core/optimize.scm" . 521248)
     (if.false.ret)
     (call
       (push.gloc.of core.optimize\x27;variable-top-level?)
       (push.iloc.0 . 0)
       (apply.gloc.of core.lists\x27;remp "../stdlib/core/optimize.scm" . 522284))
     (push)
     (extend . 1)
     (iloc.0 . 0)
     (if.not.pair?.ret.const . #f)
     (push.iloc 2 . 0)
     (iloc.0 . 0)
     (ret.cons "../stdlib/core/optimize.scm" . 524327))
   (ret.const . #f))
 (set.gloc.of make-depend-list\x60;191)
 (close
   (0 0)
   (push.gloc.of \x2E;fn62.1\x60;62)
   (push.const . #f)
   (push.gloc.of core.optimize\x27;ht-variable-binding)
   (push.subr.gloc.of \x2E;core-hashtable->alist 1 "../stdlib/core/optimize.scm" . 488470)
   (apply.gloc.of core.lists\x27;fold-left "../stdlib/core/optimize.scm" . 467977))
 (set.gloc.of traverse-variable-binding\x60;165)
 (close
   (1 0)
   (push.gloc.of core.optimize\x27;ht-variable-binding)
   (push.iloc.0 . 0)
   (subr.gloc.of \x2E;core-hashtable-contains? 2 "../stdlib/core/optimize.scm" . 387089)
   (if.true.ret)
   (call
     (push.iloc.0 . 0)
     (subr.gloc.of \x2E;top-level-bound? 1 "../stdlib/core/optimize.scm" . 387089)
     (if.false.ret)
     (push.iloc.0 . 0)
     (push.subr.gloc.of \x2E;top-level-value 1 "../stdlib/core/optimize.scm" . 387089)
     (gloc.of core.optimize\x27;denote-call/cc)
     (ret.eq? "../stdlib/core/optimize.scm" . 387089))
   (push)
   (ret.subr.gloc.of \x2E;not "../stdlib/core/optimize.scm" . 387089))
 (set.gloc.of \x2E;fn61.1\x60;61)
 (close (2 0) (ret.iloc 0 . 0))
 (set.gloc.of \x2E;fn54.1\x60;54)
 (close
   (1 0)
   (call
     (push.iloc.0 . 0)
     (const . #f)
     (if.eq?
       (push.gloc.of \x2E;fn6.1\x60;6)
       (apply.gloc.of \x2E;current-after-expansion-hook "../stdlib/core/optimize.scm" . 1215504))
     (push.gloc.of core.optimize\x27;optimize)
     (apply.gloc.of \x2E;current-after-expansion-hook "../stdlib/core/optimize.scm" . 1216528))
   (ret.iloc 0 . 0))
 (set.gloc.of \x2E;fn35.1\x60;35)
 (close
   (2 0)
   (push.iloc.0 . 0)
   (push.subr.gloc.of \x2E;length 1 "../stdlib/core/optimize.scm" . 546839)
   (push.iloc.0 . 1)
   (push.subr.gloc.of \x2E;length 1 "../stdlib/core/optimize.scm" . 546853)
   (subr.gloc.of \x2E;= 2 "../stdlib/core/optimize.scm" . 546836)
   (if.false.ret)
   (push.close
     (1 0)
     (push.iloc.0 . 0)
     (push.iloc.1 . 1)
     (ret.subr.gloc.of \x2E;memq "../stdlib/core/optimize.scm" . 547881))
   (push.iloc.0 . 0)
   (apply.gloc.of core.lists\x27;for-all "../stdlib/core/optimize.scm" . 547860))
 (set.gloc.of list-elts=?\x60;191)
 (close
   (1 0)
   (push.gloc.of core.optimize\x27;ht-variable-pinned)
   (push.iloc.0 . 0)
   (push.const . #t)
   (ret.subr.gloc.of \x2E;core-hashtable-set! "../stdlib/core/optimize.scm" . 387089))
 (set.gloc.of \x2E;fn32.1\x60;32)
 (close
   (1 0)
   (push.const . \x2E;list)
   (iloc.0 . 0)
   (ret.cons "../stdlib/core/optimize.scm" . 920624))
 (set.gloc.of \x2E;fn67.1\x60;67)
 (close
   (1 0)
   (push.gloc.of core.optimize\x27;ht-lambda-node)
   (push.gloc.of core.optimize\x27;ht-variable-binding)
   (push.iloc.0 . 0)
   (push.const . #f)
   (push.subr.gloc.of \x2E;core-hashtable-ref 3 "../stdlib/core/optimize.scm" . 513052)
   (push.const . liftable)
   (ret.subr.gloc.of \x2E;core-hashtable-set! "../stdlib/core/optimize.scm" . 511003))
 (set.gloc.of \x2E;fn34.1\x60;34)
 (close
   (2 0 . loop)
   (iloc.0 . 0)
   (if.null? (ret.iloc 0 . 1))
   (call
     (touch.gloc.of concatenate?\x60;85)
     (push.iloc.0 . 0)
     (apply.gloc.of concatenate?\x60;85 "../stdlib/core/optimize.scm" . 357393))
   (if.true
     (touch.gloc.of loop\x60;90)
     (push.iloc.0 . 0)
     (push.subr.gloc.of \x2E;cdar 1 "../stdlib/core/optimize.scm" . 358423)
     (call
       (touch.gloc.of loop\x60;90)
       (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 359453)
       (push.iloc.0 . 1)
       (apply.gloc.of loop\x60;90 "../stdlib/core/optimize.scm" . 359447))
     (push)
     (apply.gloc.of loop\x60;90 "../stdlib/core/optimize.scm" . 358417))
   (iloc.0 . 1)
   (if.null? (ret.iloc 0 . 0))
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (ret.subr.gloc.of \x2E;append "../stdlib/core/optimize.scm" . 363544))
 (set.gloc.of loop\x60;90)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (apply.gloc.of core.optimize\x27;variable-functional? "../stdlib/core/optimize.scm" . 498752))
 (set.gloc.of \x2E;fn45.1\x60;45)
 (close (3 0) (ret.iloc 0 . 0))
 (set.gloc.of \x2E;fn6.1\x60;6)
 (close
   (0 0 . loop)
   (call
     (touch.gloc.of traverse-variable-binding\x60;165)
     (apply.gloc.of traverse-variable-binding\x60;165 "../stdlib/core/optimize.scm" . 601104))
   (if.true
     (touch.gloc.of loop\x60;257)
     (apply.gloc.of loop\x60;257 "../stdlib/core/optimize.scm" . 601132))
   (call
     (touch.gloc.of resolve-mutual-recursion\x60;165)
     (apply.gloc.of resolve-mutual-recursion\x60;165 "../stdlib/core/optimize.scm" . 602128))
   (if.true
     (touch.gloc.of loop\x60;257)
     (apply.gloc.of loop\x60;257 "../stdlib/core/optimize.scm" . 602155))
   (ret.const.unspec))
 (set.gloc.of loop\x60;257)
 (close (2 0) (ret.iloc 0 . 0))
 (set.gloc.of \x2E;fn69.1\x60;69)
 (close
   (1 0 . loop)
   (call
     (push.iloc.0 . 0)
     (apply.gloc.of core.optimize\x27;pretty "../stdlib/core/optimize.scm" . 1187860))
   (push)
   (extend . 1)
   (push.iloc.0 . 0)
   (iloc.1 . 0)
   (if.eq? (ret.iloc 1 . 0))
   (touch.gloc.of loop\x60;715)
   (push.iloc.0 . 0)
   (apply.gloc.of loop\x60;715 "../stdlib/core/optimize.scm" . 1189911))
 (set.gloc.of loop\x60;715)
 (close
   (1 0)
   (push.const . #t)
   (push.const . "  expr: ~s~%")
   (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 215085)
   (subr.gloc.of \x2E;format 3 "../stdlib/core/optimize.scm" . 215059)
   (push.const . #t)
   (push.const . "  free: ~s~%---~%")
   (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 216114)
   (ret.subr.gloc.of \x2E;format "../stdlib/core/optimize.scm" . 216083))
 (set.gloc.of \x2E;fn5.1\x60;5)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (apply.gloc.of core.optimize\x27;variable-top-level? "../stdlib/core/optimize.scm" . 500800))
 (set.gloc.of \x2E;fn66.1\x60;66)
 (close
   (1 0)
   (car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1167424)
   (if.symbol?
     (push.const . define)
     (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1167424)
     (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1167438)
     (ret.subr.gloc.of \x2E;list "../stdlib/core/optimize.scm" . 1168439))
   (push.const . define)
   (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1167438)
   (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1167424)
   (ret.subr.gloc.of \x2E;list "../stdlib/core/optimize.scm" . 1168439))
 (set.gloc.of \x2E;fn30.1\x60;30)
 (close
   (1 0)
   (push.gloc.of core.optimize\x27;ht-lambda-node)
   (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 493633)
   (push.const . #f)
   (push.subr.gloc.of \x2E;core-hashtable-ref 3 "../stdlib/core/optimize.scm" . 493598)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (iloc.0 . 0)
     (if.null?
       (push.gloc.of core.optimize\x27;ht-lambda-node)
       (push.car.iloc (1 . 0) "../stdlib/core/optimize.scm" . 496718)
       (push.const . functable)
       (ret.subr.gloc.of \x2E;core-hashtable-set! "../stdlib/core/optimize.scm" . 496682))
     (iloc.0 . 0)
     (if.not.pair?.ret.const . #t)
     (call
       (push.gloc.of \x2E;fn45.1\x60;45)
       (push.iloc.0 . 0)
       (apply.gloc.of core.lists\x27;for-all "../stdlib/core/optimize.scm" . 498730))
     (if.true
       (push.gloc.of core.optimize\x27;ht-lambda-node)
       (push.car.iloc (1 . 0) "../stdlib/core/optimize.scm" . 499790)
       (push.const . functable)
       (ret.subr.gloc.of \x2E;core-hashtable-set! "../stdlib/core/optimize.scm" . 499754))
     (call
       (push.gloc.of \x2E;fn66.1\x60;66)
       (push.iloc.0 . 0)
       (apply.gloc.of core.lists\x27;for-all "../stdlib/core/optimize.scm" . 500778))
     (if.true
       (push.gloc.of core.optimize\x27;ht-lambda-node)
       (push.car.iloc (1 . 0) "../stdlib/core/optimize.scm" . 501838)
       (push.const . liftable)
       (ret.subr.gloc.of \x2E;core-hashtable-set! "../stdlib/core/optimize.scm" . 501802))
     (ret.const.unspec))
   (ret.const.unspec))
 (set.gloc.of \x2E;fn21.1\x60;21)
 (close
   (2 0 . loop)
   (call (apply.gloc.of core.optimize\x27;clear-context "../stdlib/core/optimize.scm" . 1142793))
   (call
     (push.iloc.0 . 0)
     (push.const)
     (push.const)
     (push.const . #f)
     (apply.gloc.of core.optimize\x27;collect-context "../stdlib/core/optimize.scm" . 1143817))
   (call
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (apply.gloc.of core.optimize\x27;crawl-lambda-lifting "../stdlib/core/optimize.scm" . 1144862))
   (push)
   (call
     (push.iloc.0 . 0)
     (apply.gloc.of core.optimize\x27;crawl-beta-subst "../stdlib/core/optimize.scm" . 1145892))
   (push)
   (extend . 2)
   (call
     (gloc.of core.optimize\x27;max-transform-pass)
     (>=.iloc (1 . 1) "../stdlib/core/optimize.scm" . 1159191)
     (if.false.ret)
     (push.iloc.0 . 0)
     (push.subr.gloc.of \x2E;core-hashtable-size 1 "../stdlib/core/optimize.scm" . 1160222)
     (push.const . 0)
     (subr.gloc.of \x2E;> 2 "../stdlib/core/optimize.scm" . 1160219)
     (if.true.ret)
     (push.iloc.0 . 1)
     (push.subr.gloc.of \x2E;core-hashtable-size 1 "../stdlib/core/optimize.scm" . 1161246)
     (push.const . 0)
     (subr.gloc.of \x2E;> 2 "../stdlib/core/optimize.scm" . 1161243)
     (if.true.ret)
     (=n.iloc (1 . 1) 1 "../stdlib/core/optimize.scm" . 1162272)
     (if.false.ret)
     (push.gloc.of \x2E;fn46.1\x60;46)
     (push.gloc.of core.optimize\x27;ht-variable-binding)
     (push.subr.gloc.of \x2E;core-hashtable->alist 1 "../stdlib/core/optimize.scm" . 1164328)
     (apply.gloc.of core.lists\x27;exists "../stdlib/core/optimize.scm" . 1163296))
   (if.true
     (touch.gloc.of loop\x60;684)
     (push.const . begin)
     (call
       (push.close
         (1 0)
         (extend.enclose+
           (1 0 . loop)
           (call
             (push.iloc.0 . 0)
             (push.iloc 3 . 0)
             (push.iloc 3 . 1)
             (apply.gloc.of core.optimize\x27;transcribe "../stdlib/core/optimize.scm" . 1176634))
           (push)
           (extend . 1)
           (push.iloc.0 . 0)
           (iloc.1 . 0)
           (if.eq? (ret.iloc 1 . 0))
           (push.iloc.0 . 0)
           (apply.iloc+ (2 . 0) "../stdlib/core/optimize.scm" . 1178685))
         (push.iloc.1 . 0)
         (apply.iloc+ (0 . 0) "../stdlib/core/optimize.scm" . 1174573))
       (call
         (push.const . begin)
         (call
           (push.gloc.of \x2E;fn30.1\x60;30)
           (push.iloc.0 . 0)
           (push.subr.gloc.of \x2E;core-hashtable->alist 1 "../stdlib/core/optimize.scm" . 1171507)
           (apply.gloc.of \x2E;map "../stdlib/core/optimize.scm" . 1166382))
         (push.cons)
         (push.iloc.1 . 0)
         (push.subr.gloc.of \x2E;list 2 "../stdlib/core/optimize.scm" . 1179691)
         (apply.gloc.of core.optimize\x27;flatten-begin "../stdlib/core/optimize.scm" . 1179691))
       (push)
       (apply.gloc.of \x2E;map "../stdlib/core/optimize.scm" . 1144841))
     (push.cons)
     (push.n+.iloc (1 . 1) 1 "../stdlib/core/optimize.scm" . 1180705)
     (apply.gloc.of loop\x60;684 "../stdlib/core/optimize.scm" . 1144841))
   (touch.gloc.of post-transform\x60;675)
   (push.iloc.1 . 0)
   (apply.gloc.of post-transform\x60;675 "../stdlib/core/optimize.scm" . 1182738))
 (set.gloc.of loop\x60;684)
 (close
   (2 0)
   (call
     (extend.enclose+
       (2 0 . loop)
       (iloc.0 . 0)
       (if.null? (ret.iloc 0 . 1))
       (call
         (car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 899105)
         (if.not.pair?.ret.const . #f)
         (push.iloc 2 . 1)
         (push.iloc.0 . 0)
         (subr.gloc.of \x2E;caar 1 "../stdlib/core/optimize.scm" . 899125)
         (ret.eq? "../stdlib/core/optimize.scm" . 899116))
       (if.true
         (push.iloc.0 . 0)
         (push.subr.gloc.of \x2E;cdar 1 "../stdlib/core/optimize.scm" . 900123)
         (call
           (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 901153)
           (push.iloc.0 . 1)
           (apply.iloc+ (1 . 0) "../stdlib/core/optimize.scm" . 901147))
         (push)
         (apply.iloc+ (1 . 0) "../stdlib/core/optimize.scm" . 900117))
       (call
         (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 903205)
         (push.iloc.0 . 1)
         (apply.iloc+ (1 . 0) "../stdlib/core/optimize.scm" . 903199))
       (push)
       (extend . 1)
       (push.iloc.0 . 0)
       (cdr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 904227)
       (if.eq? (ret.iloc 1 . 0))
       (push.car.iloc (1 . 0) "../stdlib/core/optimize.scm" . 906273)
       (iloc.0 . 0)
       (ret.cons "../stdlib/core/optimize.scm" . 906267))
     (push.iloc.1 . 0)
     (push.const)
     (apply.iloc+ (0 . 0) "../stdlib/core/optimize.scm" . 897036))
   (push)
   (push.iloc.0 . 0)
   (call (apply.gloc.of core.optimize\x27;annotate-hook "../stdlib/core/optimize.scm" . 896012))
   (apply))
 (set.gloc.of flatten-expression\x60;443)
 (close
   (1 0)
   (push.gloc.of core.optimize\x27;ht-variable-stackables)
   (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1104990)
   (ret.subr.gloc.of \x2E;core-hashtable-contains? "../stdlib/core/optimize.scm" . 1104941))
 (set.gloc.of \x2E;fn7.1\x60;7)
 (close
   (1 0)
   (push.gloc.of core.optimize\x27;ht-variable-binding)
   (push.iloc.0 . 0)
   (subr.gloc.of \x2E;core-hashtable-contains? 2 "../stdlib/core/optimize.scm" . 387089)
   (if.true.ret)
   (call
     (push.iloc.0 . 0)
     (subr.gloc.of \x2E;top-level-bound? 1 "../stdlib/core/optimize.scm" . 387089)
     (if.false.ret)
     (push.iloc.0 . 0)
     (push.subr.gloc.of \x2E;top-level-value 1 "../stdlib/core/optimize.scm" . 387089)
     (gloc.of core.optimize\x27;denote-call/cc)
     (ret.eq? "../stdlib/core/optimize.scm" . 387089))
   (push)
   (ret.subr.gloc.of \x2E;not "../stdlib/core/optimize.scm" . 387089))
 (set.gloc.of \x2E;fn52.1\x60;52)
 (close
   (1 0)
   (push.gloc.of core.optimize\x27;ht-variable-formals)
   (push.iloc.0 . 0)
   (push.const . #t)
   (ret.subr.gloc.of \x2E;core-hashtable-set! "../stdlib/core/optimize.scm" . 387089))
 (set.gloc.of \x2E;fn63.1\x60;63)
 (close
   (4 0)
   (push.iloc.0 . 0)
   (push.iloc.0 . 2)
   (subr.gloc.of \x2E;memq 2 "../stdlib/core/optimize.scm" . 529430)
   (if.true (ret.iloc 0 . 3))
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.subr.gloc.of \x2E;assq 2 "../stdlib/core/optimize.scm" . 530454)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (extend.enclose+
       (2 0 . loop)
       (iloc.0 . 0)
       (if.null? (ret.iloc 0 . 1))
       (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 535597)
       (extend . 1)
       (push.iloc 4 . 0)
       (iloc.0 . 0)
       (if.eq?
         (push.cdr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 537651)
         (push.iloc.1 . 1)
         (apply.iloc+ (2 . 0) "../stdlib/core/optimize.scm" . 537645))
       (push.cdr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 539699)
       (call
         (touch.gloc.of make-mutual-list\x60;191)
         (push.iloc.0 . 0)
         (push.iloc 4 . 1)
         (push.iloc 4 . 0)
         (iloc 4 . 2)
         (push.cons)
         (push.iloc.0 . 0)
         (iloc.1 . 1)
         (push.cons)
         (apply.gloc.of make-mutual-list\x60;191 "../stdlib/core/optimize.scm" . 540723))
       (push)
       (apply.iloc+ (2 . 0) "../stdlib/core/optimize.scm" . 539693))
     (push.iloc.1 . 0)
     (push.iloc 2 . 3)
     (apply.iloc+ (0 . 0) "../stdlib/core/optimize.scm" . 532507))
   (push.iloc.1 . 0)
   (iloc.1 . 3)
   (ret.cons "../stdlib/core/optimize.scm" . 542742))
 (set.gloc.of make-mutual-list\x60;191)
 (close
   (1 0 . loop)
   (iloc.0 . 0)
   (if.null?.ret.const)
   (call
     (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 875554)
     (apply.gloc.of core.optimize\x27;pretty "../stdlib/core/optimize.scm" . 875546))
   (push)
   (call
     (touch.gloc.of loop\x60;436)
     (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 875576)
     (apply.gloc.of loop\x60;436 "../stdlib/core/optimize.scm" . 875570))
   (push)
   (extend . 2)
   (call
     (push.iloc.0 . 0)
     (car.iloc (1 . 0) "../stdlib/core/optimize.scm" . 876579)
     (if.not.eq?.ret.const . #f)
     (push.iloc.0 . 1)
     (cdr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 876598)
     (ret.eq? "../stdlib/core/optimize.scm" . 876590))
   (if.true (ret.iloc 1 . 0))
   (push.iloc.0 . 0)
   (iloc.0 . 1)
   (ret.cons "../stdlib/core/optimize.scm" . 878614))
 (set.gloc.of loop\x60;436)
 (close
   (1 0)
   (push.const . \x2E;list)
   (iloc.0 . 0)
   (ret.cons "../stdlib/core/optimize.scm" . 921668))
 (set.gloc.of \x2E;fn75.1\x60;75)
 (close
   (0 0)
   (call
     (push.gloc.of \x2E;values)
     (call
       (push.gloc.of \x2E;fn53.1\x60;53)
       (push.gloc.of core.optimize\x27;ht-variable-binding)
       (push.subr.gloc.of \x2E;core-hashtable->alist 1 "../stdlib/core/optimize.scm" . 554015)
       (apply.gloc.of \x2E;map "../stdlib/core/optimize.scm" . 552986))
     (push)
     (apply.gloc.of core.lists\x27;filter "../stdlib/core/optimize.scm" . 551954))
   (push)
   (extend . 1)
   (iloc.0 . 0)
   (if.not.pair?.ret.const . #f)
   (call
     (push.close
       (1 0)
       (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 559142)
       (call
         (call
           (touch.gloc.of make-mutual-list\x60;191)
           (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 561209)
           (push.iloc.1 . 0)
           (push.const)
           (push.const)
           (apply.gloc.of make-mutual-list\x60;191 "../stdlib/core/optimize.scm" . 561191))
         (push)
         (apply.gloc.of
           core.lists\x27;remove-duplicate-symbols
           "../stdlib/core/optimize.scm"
           .
           560166))
       (ret.cons "../stdlib/core/optimize.scm" . 559136))
     (push.iloc.0 . 0)
     (apply.gloc.of \x2E;map "../stdlib/core/optimize.scm" . 558105))
   (push)
   (extend . 1)
   (push.close
     (1 0)
     (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 565288)
     (extend . 1)
     (iloc.0 . 0)
     (if.not.pair?.ret.const . #f)
     (call
       (push.close
         (1 0)
         (push.iloc.0 . 0)
         (push.iloc 3 . 0)
         (push.subr.gloc.of \x2E;assq 2 "../stdlib/core/optimize.scm" . 568382)
         (extend . 1)
         (iloc.0 . 0)
         (if.true
           (touch.gloc.of list-elts=?\x60;191)
           (push.iloc 2 . 0)
           (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 568436)
           (apply.gloc.of list-elts=?\x60;191 "../stdlib/core/optimize.scm" . 568420))
         (push.iloc.1 . 0)
         (apply.gloc.of
           core.optimize\x27;variable-top-level?
           "../stdlib/core/optimize.scm"
           .
           569411))
       (push.iloc.0 . 0)
       (apply.gloc.of core.lists\x27;for-all "../stdlib/core/optimize.scm" . 566304))
     (if.true
       (call
         (touch.gloc.of lift-variables\x60;191)
         (push.iloc.0 . 0)
         (apply.gloc.of lift-variables\x60;191 "../stdlib/core/optimize.scm" . 572467))
       (ret.const . #t))
     (ret.const . #f))
   (push.iloc.0 . 0)
   (apply.gloc.of core.lists\x27;exists "../stdlib/core/optimize.scm" . 557074))
 (set.gloc.of resolve-mutual-recursion\x60;165)
 (close
   (1 0)
   (touch.gloc.of make-depend-list\x60;191)
   (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 553021)
   (apply.gloc.of make-depend-list\x60;191 "../stdlib/core/optimize.scm" . 553003))
 (set.gloc.of \x2E;fn53.1\x60;53)
 (close
   (1 0)
   (call
     (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1108017)
     (push.iloc.0 . 0)
     (push.subr.gloc.of \x2E;cdddr 1 "../stdlib/core/optimize.scm" . 1108025)
     (push.const . #t)
     (apply.gloc.of core.optimize\x27;check-stackable-seq "../stdlib/core/optimize.scm" . 1107996))
   (if.false.ret)
   (call
     (push.gloc.of core.optimize\x27;ht-binding-body-mutual)
     (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1109070)
     (push.const . #f)
     (push.subr.gloc.of \x2E;core-hashtable-ref 3 "../stdlib/core/optimize.scm" . 1109027)
     (extend . 1)
     (iloc.0 . 0)
     (if.true
       (push.close
         (1 0)
         (push.car.iloc (2 . 0) "../stdlib/core/optimize.scm" . 1111121)
         (push.iloc.0 . 0)
         (push.const . #f)
         (apply.gloc.of core.optimize\x27;check-stackable "../stdlib/core/optimize.scm" . 1111104))
       (call
         (push.cdr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 1112119)
         (push.iloc.0 . 0)
         (apply.gloc.of core.lists\x27;remq "../stdlib/core/optimize.scm" . 1112113))
       (push)
       (apply.gloc.of core.lists\x27;for-all "../stdlib/core/optimize.scm" . 1111080))
     (ret.const . #t))
   (if.false.ret)
   (call
     (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1114161)
     (push.gloc.of core.optimize\x27;ht-binding-body-common)
     (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1114212)
     (push.const)
     (push.subr.gloc.of \x2E;core-hashtable-ref 3 "../stdlib/core/optimize.scm" . 1114169)
     (push.const . #t)
     (apply.gloc.of core.optimize\x27;check-stackable-seq "../stdlib/core/optimize.scm" . 1114140))
   (if.false.ret)
   (push.gloc.of core.optimize\x27;ht-variable-stackables)
   (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1117258)
   (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1117266)
   (ret.subr.gloc.of \x2E;core-hashtable-set! "../stdlib/core/optimize.scm" . 1117214))
 (set.gloc.of \x2E;fn73.1\x60;73)
 (close
   (1 0)
   (push.gloc.of core.optimize\x27;ht-variable-refc)
   (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1163364)
   (push.subr.gloc.of \x2E;core-hashtable-contains? 2 "../stdlib/core/optimize.scm" . 1163321)
   (ret.subr.gloc.of \x2E;not "../stdlib/core/optimize.scm" . 1163316))
 (set.gloc.of \x2E;fn46.1\x60;46)
 (close
   (1 0)
   (push.gloc.of core.optimize\x27;ht-variable-operands-refc)
   (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1070169)
   (subr.gloc.of \x2E;core-hashtable-contains? 2 "../stdlib/core/optimize.scm" . 1070117)
   (if.true.ret)
   (push.gloc.of core.optimize\x27;ht-variable-defined)
   (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1071187)
   (subr.gloc.of \x2E;core-hashtable-contains? 2 "../stdlib/core/optimize.scm" . 1071141)
   (if.true.ret)
   (push.gloc.of core.optimize\x27;ht-variable-pinned)
   (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1072210)
   (subr.gloc.of \x2E;core-hashtable-contains? 2 "../stdlib/core/optimize.scm" . 1072165)
   (if.true.ret)
   (push.gloc.of core.optimize\x27;ht-variable-letrec)
   (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1073239)
   (subr.gloc.of \x2E;core-hashtable-contains? 2 "../stdlib/core/optimize.scm" . 1073194)
   (if.false.ret.const . #t)
   (push.gloc.of core.optimize\x27;ht-lambda-node)
   (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1074260)
   (push.const . #f)
   (push.subr.gloc.of \x2E;core-hashtable-ref 3 "../stdlib/core/optimize.scm" . 1074225)
   (subr.gloc.of \x2E;list? 1 "../stdlib/core/optimize.scm" . 1074218)
   (if.false.ret.const . #t)
   (push.iloc.0 . 0)
   (push.subr.gloc.of \x2E;caddr 1 "../stdlib/core/optimize.scm" . 1075249)
   (subr.gloc.of \x2E;list? 1 "../stdlib/core/optimize.scm" . 1075242)
   (if.false.ret.const . #t)
   (push.iloc.0 . 0)
   (push.subr.gloc.of \x2E;caddr 1 "../stdlib/core/optimize.scm" . 1076283)
   (push.subr.gloc.of \x2E;length 1 "../stdlib/core/optimize.scm" . 1076275)
   (push.const . 1)
   (push.subr.gloc.of \x2E;+ 2 "../stdlib/core/optimize.scm" . 1076272)
   (extend . 1)
   (push.close
     (1 0)
     (push.iloc.0 . 0)
     (push.subr.gloc.of \x2E;length 1 "../stdlib/core/optimize.scm" . 1077315)
     (push.iloc.1 . 0)
     (push.subr.gloc.of \x2E;= 2 "../stdlib/core/optimize.scm" . 1077312)
     (ret.subr.gloc.of \x2E;not "../stdlib/core/optimize.scm" . 1077307))
   (push.gloc.of core.optimize\x27;ht-variable-callsites)
   (push.car.iloc (1 . 0) "../stdlib/core/optimize.scm" . 1078361)
   (push.const)
   (push.subr.gloc.of \x2E;core-hashtable-ref 3 "../stdlib/core/optimize.scm" . 1078319)
   (apply.gloc.of core.lists\x27;exists "../stdlib/core/optimize.scm" . 1077287))
 (set.gloc.of \x2E;fn72.1\x60;72)
 (close
   (1 0)
   (push.gloc.of core.optimize\x27;ht-lambda-node)
   (push.cadr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1036402)
   (subr.gloc.of \x2E;core-hashtable-contains? 2 "../stdlib/core/optimize.scm" . 1036361)
   (if.false.ret)
   (push.iloc.0 . 0)
   (ret.subr.gloc.of \x2E;car "../stdlib/core/optimize.scm" . 1036412))
 (set.gloc.of \x2E;fn36.1\x60;36)
 (close
   (1 0)
   (push.const . #t)
   (push.const . "  variable: ~s~%")
   (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 223281)
   (subr.gloc.of \x2E;format 3 "../stdlib/core/optimize.scm" . 223251)
   (push.const . #t)
   (push.const . "  expr: ~s~%")
   (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 224301)
   (subr.gloc.of \x2E;format 3 "../stdlib/core/optimize.scm" . 224275)
   (push.const . #t)
   (push.const . "  stat: ~s~%---~%")
   (push.gloc.of core.optimize\x27;ht-lambda-node)
   (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 225365)
   (push.const . #f)
   (push.subr.gloc.of \x2E;core-hashtable-ref 3 "../stdlib/core/optimize.scm" . 225330)
   (ret.subr.gloc.of \x2E;format "../stdlib/core/optimize.scm" . 225299))
 (set.gloc.of \x2E;fn22.1\x60;22)
 (close
   (1 0)
   (push.gloc.of \x2E;fn34.1\x60;34)
   (push.iloc.0 . 0)
   (apply.gloc.of \x2E;for-each "../stdlib/core/optimize.scm" . 509967))
 (set.gloc.of lift-variables\x60;191)
 (call
   (push.const core parameters)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core/optimize.scm" . 6145))
 (call
   (push.const core destructuring)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core/optimize.scm" . 6145))
 (call
   (push.const core lists)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core/optimize.scm" . 6145))
 (call
   (push.const core primitives)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core/optimize.scm" . 6145))
 (const . 5)
 (set.gloc.of core.optimize\x27;max-transform-pass)
 (const . 200)
 (set.gloc.of core.optimize\x27;limit-arguments)
 (call
   (subr.gloc.of \x2E;make-core-hashtable 0)
   (push)
   (extend . 1)
   (call
     (push.close
       (1 0)
       (push.iloc.1 . 0)
       (push.iloc.0 . 0)
       (push.subr.gloc.of \x2E;top-level-value 1 "../stdlib/core/optimize.scm" . 42037)
       (push.const . #t)
       (ret.subr.gloc.of \x2E;core-hashtable-set! "../stdlib/core/optimize.scm" . 42013))
     (push.const
       \x2E;eq?
       \x2E;eqv?
       \x2E;equal?
       \x2E;procedure?
       \x2E;number?
       \x2E;complex?
       \x2E;real?
       \x2E;rational?
       \x2E;integer?
       \x2E;real-valued?
       \x2E;rational-valued?
       \x2E;integer-valued?
       \x2E;exact?
       \x2E;inexact?
       \x2E;=
       \x2E;<
       \x2E;>
       \x2E;<=
       \x2E;>=
       \x2E;zero?
       \x2E;positive?
       \x2E;negative?
       \x2E;odd?
       \x2E;even?
       \x2E;finite?
       \x2E;infinite?
       \x2E;nan?
       \x2E;not
       \x2E;boolean?
       \x2E;boolean=?
       \x2E;pair?
       \x2E;null?
       \x2E;list?
       \x2E;symbol?
       \x2E;symbol=?
       \x2E;char?
       \x2E;char=?
       \x2E;char<?
       \x2E;char>?
       \x2E;char<=?
       \x2E;char>=?
       \x2E;string?
       \x2E;string=?
       \x2E;string<?
       \x2E;string>?
       \x2E;string<=?
       \x2E;string>=?
       \x2E;vector?
       \x2E;flonum?
       \x2E;fl=?
       \x2E;fl<?
       \x2E;fl>?
       \x2E;fl<=?
       \x2E;fl>=?
       \x2E;flinteger?
       \x2E;flzero?
       \x2E;flpositive?
       \x2E;flnegative?
       \x2E;flodd?
       \x2E;fleven?
       \x2E;flfinite?
       \x2E;flinfinite?
       \x2E;flnan?
       \x2E;fixnum?
       \x2E;fx=?
       \x2E;fx<?
       \x2E;fx>?
       \x2E;fx<=?
       \x2E;fx>=?
       \x2E;fxzero?
       \x2E;fxpositive?
       \x2E;fxnegative?
       \x2E;fxodd?
       \x2E;fxeven?
       \x2E;identifier?
       \x2E;bound-identifier=?
       \x2E;free-identifier=?
       \x2E;record?
       \x2E;record-type-generative?
       \x2E;record-type-sealed?
       \x2E;record-type-opaque?
       \x2E;record-field-mutable?
       \x2E;record-type-descriptor?
       \x2E;record-type?
       \x2E;condition?
       \x2E;message-condition?
       \x2E;warning?
       \x2E;serious-condition?
       \x2E;error?
       \x2E;violation?
       \x2E;assertion-violation?
       \x2E;irritants-condition?
       \x2E;who-condition?
       \x2E;non-continuable-violation?
       \x2E;implementation-restriction-violation?
       \x2E;lexical-violation?
       \x2E;syntax-violation?
       \x2E;undefined-violation?
       \x2E;char-whitespace?
       \x2E;eof-object?
       \x2E;input-port?
       \x2E;output-port?
       \x2E;port?
       \x2E;nonblock-byte-ready?
       \x2E;port-has-port-position?
       \x2E;port-has-set-port-position!?
       \x2E;port-eof?
       \x2E;i/o-error?
       \x2E;i/o-read-error?
       \x2E;i/o-write-error?
       \x2E;i/o-invalid-position-error?
       \x2E;i/o-filename-error?
       \x2E;i/o-file-protection-error?
       \x2E;i/o-file-is-read-only-error?
       \x2E;i/o-file-already-exists-error?
       \x2E;i/o-file-does-not-exist-error?
       \x2E;i/o-port-error?
       \x2E;i/o-decoding-error?
       \x2E;i/o-encoding-error?
       \x2E;file-exists?
       \x2E;bytevector?
       \x2E;bytevector=?
       \x2E;unspecified?
       \x2E;tuple?
       \x2E;weak-mapping?
       \x2E;core-hashtable?
       \x2E;weak-core-hashtable?
       \x2E;core-hashtable-contains?
       \x2E;core-hashtable-mutable?
       \x2E;top-level-bound?
       \x2E;subr?
       \x2E;inexact
       \x2E;exact
       \x2E;max
       \x2E;min
       \x2E;+
       \x2E;*
       \x2E;-
       \x2E;/
       \x2E;abs
       \x2E;div-and-mod
       \x2E;div
       \x2E;mod
       \x2E;div0-and-mod0
       \x2E;div0
       \x2E;mod0
       \x2E;gcd
       \x2E;lcm
       \x2E;numerator
       \x2E;denominator
       \x2E;floor
       \x2E;ceiling
       \x2E;truncate
       \x2E;round
       \x2E;rationalize
       \x2E;exp
       \x2E;log
       \x2E;sin
       \x2E;cos
       \x2E;tan
       \x2E;asin
       \x2E;acos
       \x2E;atan
       \x2E;sqrt
       \x2E;exact-integer-sqrt
       \x2E;expt
       \x2E;make-rectangular
       \x2E;make-polar
       \x2E;real-part
       \x2E;imag-part
       \x2E;magnitude
       \x2E;angle
       \x2E;number->string
       \x2E;string->number
       \x2E;cons
       \x2E;car
       \x2E;cdr
       \x2E;caar
       \x2E;cadr
       \x2E;cdar
       \x2E;cddr
       \x2E;caaar
       \x2E;caadr
       \x2E;cadar
       \x2E;caddr
       \x2E;cdaar
       \x2E;cdadr
       \x2E;cddar
       \x2E;cdddr
       \x2E;caaaar
       \x2E;caaadr
       \x2E;caadar
       \x2E;caaddr
       \x2E;cadaar
       \x2E;cadadr
       \x2E;caddar
       \x2E;cadddr
       \x2E;cdaaar
       \x2E;cdaadr
       \x2E;cdadar
       \x2E;cdaddr
       \x2E;cddaar
       \x2E;cddadr
       \x2E;cdddar
       \x2E;cddddr
       \x2E;list
       \x2E;length
       \x2E;append
       \x2E;reverse
       \x2E;list-tail
       \x2E;list-ref
       \x2E;symbol->string
       \x2E;string->symbol
       \x2E;char->integer
       \x2E;integer->char
       \x2E;make-string
       \x2E;string
       \x2E;string-length
       \x2E;string-ref
       \x2E;substring
       \x2E;string-append
       \x2E;string->list
       \x2E;list->string
       \x2E;string-copy
       \x2E;make-vector
       \x2E;vector
       \x2E;vector-length
       \x2E;vector-ref
       \x2E;vector->list
       \x2E;list->vector
       \x2E;values
       \x2E;cons*
       \x2E;memq
       \x2E;memv
       \x2E;member
       \x2E;assq
       \x2E;assv
       \x2E;assoc
       \x2E;list-head
       \x2E;datum->syntax
       \x2E;syntax->datum
       \x2E;syntax/i0
       \x2E;syntax/i1
       \x2E;syntax/i2
       \x2E;syntax/i3
       \x2E;syntax/c0
       \x2E;syntax/c1
       \x2E;syntax/c2
       \x2E;syntax/c3
       \x2E;string-contains
       \x2E;symbol-contains
       \x2E;top-level-value
       \x2E;unspecified
       \x2E;tuple
       \x2E;make-tuple
       \x2E;tuple-ref
       \x2E;tuple-length
       \x2E;tuple-index
       \x2E;tuple->list
       \x2E;make-core-hashtable
       \x2E;make-weak-core-hashtable
       \x2E;core-hashtable-ref
       \x2E;core-hashtable->alist
       \x2E;core-hashtable-size
       \x2E;core-hashtable-copy
       \x2E;core-hashtable-equivalence-function
       \x2E;core-hashtable-hash-function
       \x2E;current-library-infix
       \x2E;current-library-suffix
       \x2E;current-primitive-prefix
       \x2E;current-rename-delimiter)
     (apply.gloc.of \x2E;for-each "../stdlib/core/optimize.scm" . 41991))
   (push.iloc.0 . 0)
   (ret.subr.gloc.of \x2E;core-hashtable-copy "../stdlib/core/optimize.scm" . 158727))
 (set.gloc.of core.optimize\x27;ht-primitive-functions)
 (call
   (subr.gloc.of \x2E;make-core-hashtable 0)
   (push)
   (extend . 1)
   (call
     (push.close
       (1 0)
       (push.iloc.1 . 0)
       (push.iloc.0 . 0)
       (push.subr.gloc.of \x2E;top-level-value 1 "../stdlib/core/optimize.scm" . 162869)
       (push.const . #t)
       (ret.subr.gloc.of \x2E;core-hashtable-set! "../stdlib/core/optimize.scm" . 162845))
     (push.const \x2E;car \x2E;cdr \x2E;cadr \x2E;cddr)
     (apply.gloc.of \x2E;for-each "../stdlib/core/optimize.scm" . 162823))
   (push.iloc.0 . 0)
   (ret.subr.gloc.of \x2E;core-hashtable-copy "../stdlib/core/optimize.scm" . 164871))
 (set.gloc.of core.optimize\x27;ht-inlinable-primitive-functions)
 (call
   (subr.gloc.of \x2E;make-core-hashtable 0)
   (push)
   (extend . 1)
   (call
     (push.close
       (1 0)
       (push.iloc.1 . 0)
       (push.iloc.0 . 0)
       (push.subr.gloc.of \x2E;top-level-value 1 "../stdlib/core/optimize.scm" . 170037)
       (push.const . #t)
       (ret.subr.gloc.of \x2E;core-hashtable-set! "../stdlib/core/optimize.scm" . 170013))
     (push.const \x2E;map \x2E;for-each)
     (apply.gloc.of \x2E;for-each "../stdlib/core/optimize.scm" . 169991))
   (call
     (push.close
       (1 0)
       (push.iloc.1 . 0)
       (push.iloc.0 . 0)
       (push.const . #t)
       (ret.subr.gloc.of \x2E;core-hashtable-set! "../stdlib/core/optimize.scm" . 172061))
     (push.gloc.of core.lists\x27;find)
     (push.gloc.of core.lists\x27;for-all)
     (push.gloc.of core.lists\x27;exists)
     (push.gloc.of core.lists\x27;filter)
     (push.gloc.of core.lists\x27;partition)
     (push.gloc.of core.lists\x27;fold-left)
     (push.gloc.of core.lists\x27;fold-right)
     (push.gloc.of core.lists\x27;assp)
     (push.gloc.of core.lists\x27;memp)
     (push.gloc.of core.lists\x27;remp)
     (push.subr.gloc.of \x2E;list 10 "../stdlib/core/optimize.scm" . 173073)
     (apply.gloc.of \x2E;for-each "../stdlib/core/optimize.scm" . 172039))
   (push.iloc.0 . 0)
   (ret.subr.gloc.of \x2E;core-hashtable-copy "../stdlib/core/optimize.scm" . 174087))
 (set.gloc.of core.optimize\x27;ht-special-list-functions)
 (subr.gloc.of \x2E;make-core-hashtable 0 "../stdlib/core/optimize.scm" . 176156)
 (set.gloc.of core.optimize\x27;ht-variable-refc)
 (subr.gloc.of \x2E;make-core-hashtable 0 "../stdlib/core/optimize.scm" . 177183)
 (set.gloc.of core.optimize\x27;ht-variable-binding)
 (subr.gloc.of \x2E;make-core-hashtable 0 "../stdlib/core/optimize.scm" . 178206)
 (set.gloc.of core.optimize\x27;ht-variable-letrec)
 (subr.gloc.of \x2E;make-core-hashtable 0 "../stdlib/core/optimize.scm" . 179231)
 (set.gloc.of core.optimize\x27;ht-variable-defined)
 (subr.gloc.of \x2E;make-core-hashtable 0 "../stdlib/core/optimize.scm" . 180255)
 (set.gloc.of core.optimize\x27;ht-variable-formals)
 (subr.gloc.of \x2E;make-core-hashtable 0 "../stdlib/core/optimize.scm" . 181280)
 (set.gloc.of core.optimize\x27;ht-variable-assigned)
 (subr.gloc.of \x2E;make-core-hashtable 0 "../stdlib/core/optimize.scm" . 182309)
 (set.gloc.of core.optimize\x27;ht-variable-operands-refc)
 (subr.gloc.of \x2E;make-core-hashtable 0 "../stdlib/core/optimize.scm" . 183329)
 (set.gloc.of core.optimize\x27;ht-variable-callsites)
 (subr.gloc.of \x2E;make-core-hashtable 0 "../stdlib/core/optimize.scm" . 184350)
 (set.gloc.of core.optimize\x27;ht-variable-pinned)
 (subr.gloc.of \x2E;make-core-hashtable 0 "../stdlib/core/optimize.scm" . 185376)
 (set.gloc.of core.optimize\x27;ht-variable-privates)
 (subr.gloc.of \x2E;make-core-hashtable 0 "../stdlib/core/optimize.scm" . 186402)
 (set.gloc.of core.optimize\x27;ht-variable-stackables)
 (subr.gloc.of \x2E;make-core-hashtable 0 "../stdlib/core/optimize.scm" . 187418)
 (set.gloc.of core.optimize\x27;ht-lambda-node)
 (subr.gloc.of \x2E;make-core-hashtable 0 "../stdlib/core/optimize.scm" . 188450)
 (set.gloc.of core.optimize\x27;ht-binding-body-common)
 (subr.gloc.of \x2E;make-core-hashtable 0 "../stdlib/core/optimize.scm" . 189474)
 (set.gloc.of core.optimize\x27;ht-binding-body-mutual)
 (close
   (0 0 . core.optimize\x27;clear-context)
   (push.gloc.of core.optimize\x27;ht-variable-refc)
   (subr.gloc.of \x2E;core-hashtable-clear! 1 "../stdlib/core/optimize.scm" . 193543)
   (push.gloc.of core.optimize\x27;ht-variable-binding)
   (subr.gloc.of \x2E;core-hashtable-clear! 1 "../stdlib/core/optimize.scm" . 194567)
   (push.gloc.of core.optimize\x27;ht-variable-letrec)
   (subr.gloc.of \x2E;core-hashtable-clear! 1 "../stdlib/core/optimize.scm" . 195591)
   (push.gloc.of core.optimize\x27;ht-variable-defined)
   (subr.gloc.of \x2E;core-hashtable-clear! 1 "../stdlib/core/optimize.scm" . 196615)
   (push.gloc.of core.optimize\x27;ht-variable-formals)
   (subr.gloc.of \x2E;core-hashtable-clear! 1 "../stdlib/core/optimize.scm" . 197639)
   (push.gloc.of core.optimize\x27;ht-variable-assigned)
   (subr.gloc.of \x2E;core-hashtable-clear! 1 "../stdlib/core/optimize.scm" . 198663)
   (push.gloc.of core.optimize\x27;ht-variable-operands-refc)
   (subr.gloc.of \x2E;core-hashtable-clear! 1 "../stdlib/core/optimize.scm" . 199687)
   (push.gloc.of core.optimize\x27;ht-variable-callsites)
   (subr.gloc.of \x2E;core-hashtable-clear! 1 "../stdlib/core/optimize.scm" . 200711)
   (push.gloc.of core.optimize\x27;ht-variable-pinned)
   (subr.gloc.of \x2E;core-hashtable-clear! 1 "../stdlib/core/optimize.scm" . 201735)
   (push.gloc.of core.optimize\x27;ht-variable-privates)
   (subr.gloc.of \x2E;core-hashtable-clear! 1 "../stdlib/core/optimize.scm" . 202759)
   (push.gloc.of core.optimize\x27;ht-variable-stackables)
   (subr.gloc.of \x2E;core-hashtable-clear! 1 "../stdlib/core/optimize.scm" . 203783)
   (push.gloc.of core.optimize\x27;ht-lambda-node)
   (subr.gloc.of \x2E;core-hashtable-clear! 1 "../stdlib/core/optimize.scm" . 204807)
   (push.gloc.of core.optimize\x27;ht-binding-body-common)
   (subr.gloc.of \x2E;core-hashtable-clear! 1 "../stdlib/core/optimize.scm" . 205831)
   (push.gloc.of core.optimize\x27;ht-binding-body-mutual)
   (ret.subr.gloc.of \x2E;core-hashtable-clear! "../stdlib/core/optimize.scm" . 206855))
 (set.gloc.of core.optimize\x27;clear-context)
 (push.const . \x2E;call-with-current-continuation)
 (subr.gloc.of \x2E;top-level-value 1 "../stdlib/core/optimize.scm" . 208922)
 (set.gloc.of core.optimize\x27;denote-call/cc)
 (close
   (0 0 . core.optimize\x27;dump-lambda-node)
   (push.const . #t)
   (push.const . ">>> dump ht-lambda-node~%")
   (subr.gloc.of \x2E;format 2 "../stdlib/core/optimize.scm" . 212999)
   (push.gloc.of \x2E;fn5.1\x60;5)
   (push.gloc.of core.optimize\x27;ht-lambda-node)
   (push.subr.gloc.of \x2E;core-hashtable->alist 1 "../stdlib/core/optimize.scm" . 217105)
   (apply.gloc.of \x2E;for-each "../stdlib/core/optimize.scm" . 214023))
 (set.gloc.of core.optimize\x27;dump-lambda-node)
 (close
   (0 0 . core.optimize\x27;dump-variable-binding)
   (push.const . #t)
   (push.const . ">>> dump ht-variable-binding~%")
   (subr.gloc.of \x2E;format 2 "../stdlib/core/optimize.scm" . 221191)
   (push.gloc.of \x2E;fn22.1\x60;22)
   (push.gloc.of core.optimize\x27;ht-variable-binding)
   (push.subr.gloc.of \x2E;core-hashtable->alist 1 "../stdlib/core/optimize.scm" . 226321)
   (apply.gloc.of \x2E;for-each "../stdlib/core/optimize.scm" . 222215))
 (set.gloc.of core.optimize\x27;dump-variable-binding)
 (close
   (1 0 . core.optimize\x27;get-free-variables)
   (push.gloc.of core.optimize\x27;ht-variable-binding)
   (push.iloc.0 . 0)
   (push.const . #f)
   (push.subr.gloc.of \x2E;core-hashtable-ref 3 "../stdlib/core/optimize.scm" . 230414)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (push.gloc.of core.optimize\x27;ht-lambda-node)
     (push.iloc.0 . 0)
     (push.const . #f)
     (ret.subr.gloc.of \x2E;core-hashtable-ref "../stdlib/core/optimize.scm" . 231453))
   (ret.const . #f))
 (set.gloc.of core.optimize\x27;get-free-variables)
 (close
   (1 0 . core.optimize\x27;primitive-function?)
   (push.iloc.0 . 0)
   (subr.gloc.of \x2E;top-level-bound? 1 "../stdlib/core/optimize.scm" . 236556)
   (if.false.ret)
   (push.gloc.of core.optimize\x27;ht-primitive-functions)
   (push.iloc.0 . 0)
   (push.subr.gloc.of \x2E;top-level-value 1 "../stdlib/core/optimize.scm" . 237629)
   (ret.subr.gloc.of \x2E;core-hashtable-contains? "../stdlib/core/optimize.scm" . 237580))
 (set.gloc.of core.optimize\x27;primitive-function?)
 (close
   (1 0 . core.optimize\x27;special-list-function?)
   (push.iloc.0 . 0)
   (subr.gloc.of \x2E;top-level-bound? 1 "../stdlib/core/optimize.scm" . 241676)
   (if.false.ret)
   (push.gloc.of core.optimize\x27;ht-special-list-functions)
   (push.iloc.0 . 0)
   (push.subr.gloc.of \x2E;top-level-value 1 "../stdlib/core/optimize.scm" . 242752)
   (ret.subr.gloc.of \x2E;core-hashtable-contains? "../stdlib/core/optimize.scm" . 242700))
 (set.gloc.of core.optimize\x27;special-list-function?)
 (close
   (1 0 . core.optimize\x27;inlinable-primitive-function?)
   (iloc.0 . 0)
   (if.not.symbol?.ret.const . #f)
   (push.iloc.0 . 0)
   (subr.gloc.of \x2E;top-level-bound? 1 "../stdlib/core/optimize.scm" . 247820)
   (if.false.ret)
   (push.gloc.of core.optimize\x27;ht-inlinable-primitive-functions)
   (push.iloc.0 . 0)
   (push.subr.gloc.of \x2E;top-level-value 1 "../stdlib/core/optimize.scm" . 248903)
   (ret.subr.gloc.of \x2E;core-hashtable-contains? "../stdlib/core/optimize.scm" . 248844))
 (set.gloc.of core.optimize\x27;inlinable-primitive-function?)
 (close
   (1 0 . core.optimize\x27;variable-top-level?)
   (push.gloc.of core.optimize\x27;ht-variable-defined)
   (push.iloc.0 . 0)
   (subr.gloc.of \x2E;core-hashtable-contains? 2 "../stdlib/core/optimize.scm" . 252939)
   (if.true.ret)
   (call
     (push.gloc.of core.optimize\x27;ht-variable-binding)
     (push.iloc.0 . 0)
     (subr.gloc.of \x2E;core-hashtable-contains? 2 "../stdlib/core/optimize.scm" . 253973)
     (if.true.ret.const . #f)
     (push.gloc.of core.optimize\x27;ht-variable-formals)
     (push.iloc.0 . 0)
     (push.subr.gloc.of \x2E;core-hashtable-contains? 2 "../stdlib/core/optimize.scm" . 254997)
     (ret.subr.gloc.of \x2E;not "../stdlib/core/optimize.scm" . 254992))
   (if.true.ret)
   (call
     (push.iloc.0 . 0)
     (apply.gloc.of core.optimize\x27;get-free-variables "../stdlib/core/optimize.scm" . 256020))
   (push)
   (ret.subr.gloc.of \x2E;symbol? "../stdlib/core/optimize.scm" . 256011))
 (set.gloc.of core.optimize\x27;variable-top-level?)
 (close
   (1 0 . core.optimize\x27;variable-private?)
   (call
     (push.iloc.0 . 0)
     (subr.gloc.of \x2E;current-rename-delimiter 0)
     (push)
     (subr.gloc.of \x2E;symbol-contains 2 "../stdlib/core/optimize.scm" . 268304)
     (if.true.ret)
     (push.iloc.0 . 0)
     (subr.gloc.of \x2E;current-library-suffix 0)
     (push)
     (ret.subr.gloc.of \x2E;symbol-contains "../stdlib/core/optimize.scm" . 269328))
   (if.false.ret)
   (ret.const . #t))
 (set.gloc.of core.optimize\x27;variable-private?)
 (close
   (1 0 . core.optimize\x27;variable-functional?)
   (call
     (push.gloc.of core.optimize\x27;ht-variable-privates)
     (push.iloc.0 . 0)
     (subr.gloc.of \x2E;core-hashtable-contains? 2 "../stdlib/core/optimize.scm" . 274448)
     (if.true.ret)
     (push.gloc.of core.optimize\x27;ht-variable-defined)
     (push.iloc.0 . 0)
     (push.subr.gloc.of \x2E;core-hashtable-contains? 2 "../stdlib/core/optimize.scm" . 275477)
     (ret.subr.gloc.of \x2E;not "../stdlib/core/optimize.scm" . 275472))
   (if.false.ret)
   (push.gloc.of core.optimize\x27;ht-variable-binding)
   (push.iloc.0 . 0)
   (push.const . #f)
   (push.subr.gloc.of \x2E;core-hashtable-ref 3 "../stdlib/core/optimize.scm" . 276499)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (push.gloc.of core.optimize\x27;ht-lambda-node)
     (push.iloc.0 . 0)
     (push.const . #f)
     (push.subr.gloc.of \x2E;core-hashtable-ref 3 "../stdlib/core/optimize.scm" . 277543)
     (const . functable)
     (ret.eq? "../stdlib/core/optimize.scm" . 277538))
   (ret.const . #f))
 (set.gloc.of core.optimize\x27;variable-functional?)
 (close
   (1 0 . core.optimize\x27;variable-iloc?)
   (push.gloc.of core.optimize\x27;ht-variable-formals)
   (push.iloc.0 . 0)
   (subr.gloc.of \x2E;core-hashtable-contains? 2 "../stdlib/core/optimize.scm" . 282638)
   (if.true.ret)
   (push.gloc.of core.optimize\x27;ht-variable-binding)
   (push.iloc.0 . 0)
   (push.const . #f)
   (push.subr.gloc.of \x2E;core-hashtable-ref 3 "../stdlib/core/optimize.scm" . 283662)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (push.iloc.0 . 0)
     (ret.subr.gloc.of \x2E;symbol? "../stdlib/core/optimize.scm" . 282631))
   (ret.const . #f))
 (set.gloc.of core.optimize\x27;variable-iloc?)
 (close
   (1 0 . core.optimize\x27;function?)
   (iloc.0 . 0)
   (if.not.pair?.ret.const . #t)
   (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 289815)
   (extend . 1)
   (push.iloc.0 . 0)
   (push.const quote lambda)
   (subr.gloc.of \x2E;memq 2 "../stdlib/core/optimize.scm" . 290833)
   (if.true.ret)
   (iloc.0 . 0)
   (if.not.symbol?.ret.const . #f)
   (call
     (push.gloc.of core.optimize\x27;ht-variable-privates)
     (push.iloc.0 . 0)
     (subr.gloc.of \x2E;core-hashtable-contains? 2 "../stdlib/core/optimize.scm" . 292890)
     (if.true.ret)
     (push.gloc.of core.optimize\x27;ht-variable-defined)
     (push.iloc.0 . 0)
     (push.subr.gloc.of \x2E;core-hashtable-contains? 2 "../stdlib/core/optimize.scm" . 293919)
     (ret.subr.gloc.of \x2E;not "../stdlib/core/optimize.scm" . 293914))
   (if.false.ret)
   (call
     (call
       (push.iloc.0 . 0)
       (apply.gloc.of core.optimize\x27;primitive-function? "../stdlib/core/optimize.scm" . 294938))
     (if.true.ret)
     (call
       (push.iloc.0 . 0)
       (apply.gloc.of
         core.optimize\x27;variable-functional?
         "../stdlib/core/optimize.scm"
         .
         295962))
     (if.true.ret)
     (push.iloc.0 . 0)
     (push.const begin if and or)
     (ret.subr.gloc.of \x2E;memq "../stdlib/core/optimize.scm" . 296986))
   (if.false.ret)
   (push.gloc.of core.optimize\x27;function?)
   (push.cdr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 298025)
   (apply.gloc.of core.lists\x27;for-all "../stdlib/core/optimize.scm" . 298006))
 (set.gloc.of core.optimize\x27;function?)
 (close
   (1 0 . core.optimize\x27;constant?)
   (iloc.0 . 0)
   (if.pair?
     (call
       (iloc.0 . 0)
       (if.not.pair?.ret.const . #f)
       (cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 303118)
       (if.not.pair?.ret.const . #f)
       (cddr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 303118)
       (ret.null? "../stdlib/core/optimize.scm" . 303118))
     (push)
     (extend . 1)
     (call
       (iloc.0 . 0)
       (if.false.ret)
       (push.car.iloc (1 . 0) "../stdlib/core/optimize.scm" . 303118)
       (const . begin)
       (ret.eq? "../stdlib/core/optimize.scm" . 303118))
     (if.true
       (push.cadr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 303118)
       (apply.gloc.of core.optimize\x27;constant? "../stdlib/core/optimize.scm" . 303118))
     (call
       (iloc.0 . 0)
       (if.false.ret)
       (push.car.iloc (1 . 0) "../stdlib/core/optimize.scm" . 303118)
       (const . quote)
       (ret.eq? "../stdlib/core/optimize.scm" . 303118))
     (if.true.ret.const . #t)
     (push.gloc.of core.optimize\x27;constant?)
     (push.iloc.1 . 0)
     (apply.gloc.of core.lists\x27;for-all "../stdlib/core/optimize.scm" . 303118))
   (push.iloc.0 . 0)
   (subr.gloc.of \x2E;number? 1 "../stdlib/core/optimize.scm" . 309266)
   (if.true.ret)
   (push.iloc.0 . 0)
   (subr.gloc.of \x2E;boolean? 1 "../stdlib/core/optimize.scm" . 310290)
   (if.true.ret)
   (push.iloc.0 . 0)
   (subr.gloc.of \x2E;char? 1 "../stdlib/core/optimize.scm" . 311314)
   (if.true.ret)
   (push.iloc.0 . 0)
   (subr.gloc.of \x2E;string? 1 "../stdlib/core/optimize.scm" . 312338)
   (if.true.ret)
   (iloc.0 . 0)
   (if.not.symbol?.ret.const . #f)
   (call
     (call
       (push.iloc.0 . 0)
       (apply.gloc.of core.optimize\x27;primitive-function? "../stdlib/core/optimize.scm" . 314395))
     (if.true.ret)
     (push.gloc.of core.optimize\x27;ht-variable-binding)
     (push.iloc.0 . 0)
     (subr.gloc.of \x2E;core-hashtable-contains? 2 "../stdlib/core/optimize.scm" . 315424)
     (if.false.ret)
     (push.gloc.of core.optimize\x27;ht-variable-privates)
     (push.iloc.0 . 0)
     (subr.gloc.of \x2E;core-hashtable-contains? 2 "../stdlib/core/optimize.scm" . 316452)
     (if.true.ret)
     (push.gloc.of core.optimize\x27;ht-variable-defined)
     (push.iloc.0 . 0)
     (push.subr.gloc.of \x2E;core-hashtable-contains? 2 "../stdlib/core/optimize.scm" . 317481)
     (ret.subr.gloc.of \x2E;not "../stdlib/core/optimize.scm" . 317476))
   (if.false.ret)
   (push.gloc.of core.optimize\x27;ht-variable-operands-refc)
   (push.iloc.0 . 0)
   (push.const . 0)
   (push.subr.gloc.of \x2E;core-hashtable-ref 3 "../stdlib/core/optimize.scm" . 318490)
   (push.const . 1)
   (ret.subr.gloc.of \x2E;= "../stdlib/core/optimize.scm" . 318487))
 (set.gloc.of core.optimize\x27;constant?)
 (close
   (1 0 . core.optimize\x27;inlinable-expression?)
   (iloc.0 . 0)
   (if.pair?
     (call
       (iloc.0 . 0)
       (if.not.pair?.ret.const . #f)
       (cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 323598)
       (if.not.pair?.ret.const . #f)
       (cddr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 323598)
       (ret.null? "../stdlib/core/optimize.scm" . 323598))
     (push)
     (extend . 1)
     (call
       (iloc.0 . 0)
       (if.false.ret)
       (push.car.iloc (1 . 0) "../stdlib/core/optimize.scm" . 323598)
       (const . begin)
       (ret.eq? "../stdlib/core/optimize.scm" . 323598))
     (if.true
       (push.cadr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 323598)
       (apply.gloc.of
         core.optimize\x27;inlinable-expression?
         "../stdlib/core/optimize.scm"
         .
         323598))
     (call
       (iloc.0 . 0)
       (if.false.ret)
       (push.car.iloc (1 . 0) "../stdlib/core/optimize.scm" . 323598)
       (const . quote)
       (ret.eq? "../stdlib/core/optimize.scm" . 323598))
     (if.true
       (cadr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 323598)
       (if.pair?.ret.const . #f)
       (cadr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 323598)
       (if.symbol?.ret.const . #t)
       (push.cadr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 323598)
       (subr.gloc.of \x2E;fixnum? 1 "../stdlib/core/optimize.scm" . 323598)
       (if.true.ret)
       (push.cadr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 323598)
       (subr.gloc.of \x2E;boolean? 1 "../stdlib/core/optimize.scm" . 323598)
       (if.true.ret)
       (push.cadr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 323598)
       (subr.gloc.of \x2E;char? 1 "../stdlib/core/optimize.scm" . 323598)
       (if.true.ret)
       (push.cadr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 323598)
       (ret.subr.gloc.of \x2E;string? "../stdlib/core/optimize.scm" . 323598))
     (iloc.0 . 0)
     (if.true
       (push.cadr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 323598)
       (extend . 1)
       (call
         (push.car.iloc (2 . 0) "../stdlib/core/optimize.scm" . 323598)
         (apply.gloc.of
           core.optimize\x27;inlinable-primitive-function?
           "../stdlib/core/optimize.scm"
           .
           323598))
       (if.false.ret)
       (push.iloc.0 . 0)
       (apply.gloc.of core.optimize\x27;variable-iloc? "../stdlib/core/optimize.scm" . 323598))
     (ret.const . #f))
   (iloc.0 . 0)
   (if.symbol?.ret.const . #t)
   (push.iloc.0 . 0)
   (subr.gloc.of \x2E;fixnum? 1 "../stdlib/core/optimize.scm" . 334881)
   (if.true.ret)
   (push.iloc.0 . 0)
   (subr.gloc.of \x2E;boolean? 1 "../stdlib/core/optimize.scm" . 334896)
   (if.true.ret)
   (push.iloc.0 . 0)
   (subr.gloc.of \x2E;char? 1 "../stdlib/core/optimize.scm" . 334912)
   (if.true.ret)
   (push.iloc.0 . 0)
   (ret.subr.gloc.of \x2E;string? "../stdlib/core/optimize.scm" . 334925))
 (set.gloc.of core.optimize\x27;inlinable-expression?)
 (close
   (1 0 . core.optimize\x27;formals->list)
   (iloc.0 . 0)
   (if.pair?
     (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 339985)
     (call
       (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 340010)
       (apply.gloc.of core.optimize\x27;formals->list "../stdlib/core/optimize.scm" . 339995))
     (ret.cons "../stdlib/core/optimize.scm" . 339979))
   (iloc.0 . 0)
   (if.null?.ret.const)
   (push.iloc.0 . 0)
   (ret.subr.gloc.of \x2E;list "../stdlib/core/optimize.scm" . 342039))
 (set.gloc.of core.optimize\x27;formals->list)
 (close
   (1 0 . core.optimize\x27;flatten-begin)
   (call
     (touch.gloc.of loop\x60;90)
     (push.iloc.0 . 0)
     (push.const)
     (apply.gloc.of loop\x60;90 "../stdlib/core/optimize.scm" . 355336))
   (push)
   (push.iloc.0 . 0)
   (call (apply.gloc.of core.optimize\x27;annotate-hook "../stdlib/core/optimize.scm" . 354312))
   (apply))
 (set.gloc.of core.optimize\x27;flatten-begin)
 (close
   (3 0 . core.optimize\x27;collect-context-each)
   (extend.enclose+
     (3 0 . loop)
     (iloc.0 . 0)
     (if.null? (ret.iloc 0 . 1))
     (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 371745)
     (push.iloc 2 . 1)
     (call
       (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 371767)
       (push.iloc.0 . 1)
       (push.const . #t)
       (apply.iloc+ (1 . 0) "../stdlib/core/optimize.scm" . 371761))
     (push)
     (push.iloc.0 . 2)
     (apply.gloc.of core.optimize\x27;collect-context "../stdlib/core/optimize.scm" . 371728))
   (push.iloc.1 . 0)
   (push.iloc.1 . 2)
   (push.const . #f)
   (apply.iloc+ (0 . 0) "../stdlib/core/optimize.scm" . 368647))
 (set.gloc.of core.optimize\x27;collect-context-each)
 (close
   (3 0 . core.optimize\x27;collect-context-seq)
   (extend.enclose+
     (2 0 . loop)
     (iloc.0 . 0)
     (if.null? (ret.iloc 0 . 1))
     (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 378913)
     (push.iloc 2 . 1)
     (call
       (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 378935)
       (push.iloc.0 . 1)
       (apply.iloc+ (1 . 0) "../stdlib/core/optimize.scm" . 378929))
     (push)
     (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 378958)
     (push.subr.gloc.of \x2E;null? 1 "../stdlib/core/optimize.scm" . 378951)
     (apply.gloc.of core.optimize\x27;collect-context "../stdlib/core/optimize.scm" . 378896))
   (push.iloc.1 . 0)
   (push.iloc.1 . 2)
   (apply.iloc+ (0 . 0) "../stdlib/core/optimize.scm" . 375815))
 (set.gloc.of core.optimize\x27;collect-context-seq)
 (close
   (4 0 . core.optimize\x27;collect-context)
   (iloc.0 . 0)
   (if.pair?
     (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 385044)
     (extend . 1)
     (push.iloc.0 . 0)
     (push.const quote define lambda let letrec*)
     (subr.gloc.of \x2E;memq 2 "../stdlib/core/optimize.scm" . 385038)
     (if.true
       (call
         (iloc.1 . 0)
         (if.not.pair?.ret.const . #f)
         (cdr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 387089)
         (ret.pair? "../stdlib/core/optimize.scm" . 387089))
       (push)
       (extend . 1)
       (call
         (iloc.0 . 0)
         (if.false.ret)
         (cddr.iloc (2 . 0) "../stdlib/core/optimize.scm" . 387089)
         (if.not.null?.ret.const . #f)
         (push.car.iloc (2 . 0) "../stdlib/core/optimize.scm" . 387089)
         (const . quote)
         (ret.eq? "../stdlib/core/optimize.scm" . 387089))
       (if.true (ret.iloc 2 . 2))
       (call
         (iloc.0 . 0)
         (if.false.ret)
         (cddr.iloc (2 . 0) "../stdlib/core/optimize.scm" . 387089)
         (if.not.pair?.ret.const . #f)
         (push.iloc 2 . 0)
         (subr.gloc.of cdddr 1 "../stdlib/core/optimize.scm" . 387089)
         (if.not.null?.ret.const . #f)
         (push.car.iloc (2 . 0) "../stdlib/core/optimize.scm" . 387089)
         (const . define)
         (ret.eq? "../stdlib/core/optimize.scm" . 387089))
       (if.true
         (push.iloc 2 . 0)
         (push.subr.gloc.of caddr 1 "../stdlib/core/optimize.scm" . 387089)
         (push.cadr.iloc (2 . 0) "../stdlib/core/optimize.scm" . 387089)
         (extend . 2)
         (push.gloc.of core.optimize\x27;ht-variable-defined)
         (push.iloc.0 . 1)
         (push.const . #t)
         (subr.gloc.of \x2E;core-hashtable-set! 3 "../stdlib/core/optimize.scm" . 387089)
         (call
           (call
             (push.iloc.0 . 1)
             (apply.gloc.of
               core.optimize\x27;variable-private?
               "../stdlib/core/optimize.scm"
               .
               387089))
           (if.false.ret)
           (push.gloc.of core.optimize\x27;ht-variable-privates)
           (push.iloc.0 . 1)
           (push.const . #t)
           (ret.subr.gloc.of \x2E;core-hashtable-set! "../stdlib/core/optimize.scm" . 387089))
         (push.gloc.of core.optimize\x27;ht-variable-binding)
         (push.iloc.0 . 1)
         (call (iloc.0 . 0) (if.true.ret) (ret.const begin #f))
         (push)
         (subr.gloc.of \x2E;core-hashtable-set! 3 "../stdlib/core/optimize.scm" . 387089)
         (push.iloc.0 . 0)
         (push.iloc 3 . 1)
         (push.iloc 3 . 2)
         (push.iloc 3 . 3)
         (apply.gloc.of core.optimize\x27;collect-context "../stdlib/core/optimize.scm" . 387089))
       (call
         (iloc.0 . 0)
         (if.false.ret)
         (push.car.iloc (2 . 0) "../stdlib/core/optimize.scm" . 387089)
         (const . lambda)
         (ret.eq? "../stdlib/core/optimize.scm" . 387089))
       (if.true
         (push.cddr.iloc (2 . 0) "../stdlib/core/optimize.scm" . 387089)
         (extend . 1)
         (call
           (push.cadr.iloc (3 . 0) "../stdlib/core/optimize.scm" . 387089)
           (apply.gloc.of core.optimize\x27;formals->list "../stdlib/core/optimize.scm" . 387089))
         (push)
         (extend . 1)
         (call
           (push.gloc.of \x2E;fn63.1\x60;63)
           (push.iloc.0 . 0)
           (apply.gloc.of \x2E;for-each "../stdlib/core/optimize.scm" . 387089))
         (call
           (push.iloc.1 . 0)
           (push.iloc.0 . 0)
           (push.const)
           (apply.gloc.of
             core.optimize\x27;collect-context-seq
             "../stdlib/core/optimize.scm"
             .
             387089))
         (push)
         (extend . 1)
         (push.gloc.of core.optimize\x27;ht-lambda-node)
         (push.iloc 5 . 0)
         (call
           (push.iloc.0 . 0)
           (apply.gloc.of
             core.lists\x27;remove-duplicate-symbols
             "../stdlib/core/optimize.scm"
             .
             387089))
         (push)
         (subr.gloc.of \x2E;core-hashtable-set! 3 "../stdlib/core/optimize.scm" . 387089)
         (call
           (push.close
             (1 0)
             (push.iloc.0 . 0)
             (push.iloc 6 . 1)
             (push.subr.gloc.of \x2E;memq 2 "../stdlib/core/optimize.scm" . 387089)
             (ret.subr.gloc.of \x2E;not "../stdlib/core/optimize.scm" . 387089))
           (push.iloc.0 . 0)
           (apply.gloc.of core.lists\x27;filter "../stdlib/core/optimize.scm" . 387089))
         (push)
         (push.iloc 5 . 2)
         (ret.subr.gloc.of \x2E;append "../stdlib/core/optimize.scm" . 387089))
       (call
         (iloc.0 . 0)
         (if.false.ret)
         (push.car.iloc (2 . 0) "../stdlib/core/optimize.scm" . 387089)
         (const . let)
         (ret.eq? "../stdlib/core/optimize.scm" . 387089))
       (if.true
         (push.cddr.iloc (2 . 0) "../stdlib/core/optimize.scm" . 387089)
         (push.cadr.iloc (2 . 0) "../stdlib/core/optimize.scm" . 387089)
         (extend . 2)
         (call
           (push.close
             (1 0)
             (push.gloc.of core.optimize\x27;ht-variable-binding)
             (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 387089)
             (call
               (cadr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 387089)
               (if.true.ret)
               (ret.const begin #f))
             (push)
             (subr.gloc.of \x2E;core-hashtable-set! 3 "../stdlib/core/optimize.scm" . 387089)
             (push.gloc.of core.optimize\x27;ht-binding-body-common)
             (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 387089)
             (push.iloc.1 . 0)
             (ret.subr.gloc.of \x2E;core-hashtable-set! "../stdlib/core/optimize.scm" . 387089))
           (push.iloc.0 . 1)
           (apply.gloc.of \x2E;for-each "../stdlib/core/optimize.scm" . 387089))
         (call
           (call
             (push.gloc.of \x2E;cadr)
             (push.iloc.0 . 1)
             (apply.gloc.of \x2E;map "../stdlib/core/optimize.scm" . 387089))
           (push)
           (push.iloc 3 . 1)
           (push.iloc 3 . 2)
           (apply.gloc.of
             core.optimize\x27;collect-context-each
             "../stdlib/core/optimize.scm"
             .
             387089))
         (push)
         (extend . 1)
         (call
           (call
             (push.gloc.of \x2E;fn61.1\x60;61)
             (push.iloc.0 . 0)
             (apply.gloc.of core.lists\x27;for-all "../stdlib/core/optimize.scm" . 387089))
           (if.true.ret)
           (push.gloc.of \x2E;fn59.1\x60;59)
           (call
             (push.gloc.of \x2E;car)
             (push.iloc.1 . 1)
             (apply.gloc.of \x2E;map "../stdlib/core/optimize.scm" . 387089))
           (push)
           (apply.gloc.of \x2E;for-each "../stdlib/core/optimize.scm" . 387089))
         (push.iloc.1 . 0)
         (call
           (push.gloc.of \x2E;car)
           (push.iloc.1 . 1)
           (apply.gloc.of \x2E;map "../stdlib/core/optimize.scm" . 387089))
         (push)
         (push.iloc 4 . 1)
         (push.subr.gloc.of \x2E;append 2 "../stdlib/core/optimize.scm" . 387089)
         (push.iloc.0 . 0)
         (apply.gloc.of
           core.optimize\x27;collect-context-seq
           "../stdlib/core/optimize.scm"
           .
           387089))
       (call
         (iloc.0 . 0)
         (if.false.ret)
         (push.car.iloc (2 . 0) "../stdlib/core/optimize.scm" . 387089)
         (const . letrec*)
         (ret.eq? "../stdlib/core/optimize.scm" . 387089))
       (if.true
         (push.cddr.iloc (2 . 0) "../stdlib/core/optimize.scm" . 387089)
         (push.cadr.iloc (2 . 0) "../stdlib/core/optimize.scm" . 387089)
         (extend . 2)
         (call
           (push.close
             (1 0)
             (push.gloc.of core.optimize\x27;ht-variable-letrec)
             (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 387089)
             (push.const . #t)
             (subr.gloc.of \x2E;core-hashtable-set! 3 "../stdlib/core/optimize.scm" . 387089)
             (push.gloc.of core.optimize\x27;ht-variable-binding)
             (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 387089)
             (call
               (cadr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 387089)
               (if.true.ret)
               (ret.const begin #f))
             (push)
             (subr.gloc.of \x2E;core-hashtable-set! 3 "../stdlib/core/optimize.scm" . 387089)
             (push.gloc.of core.optimize\x27;ht-binding-body-common)
             (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 387089)
             (push.iloc.1 . 0)
             (subr.gloc.of \x2E;core-hashtable-set! 3 "../stdlib/core/optimize.scm" . 387089)
             (call
               (cadr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 387089)
               (if.not.pair?.ret.const . #f)
               (push.const . lambda)
               (push.iloc.0 . 0)
               (subr.gloc.of \x2E;caadr 1 "../stdlib/core/optimize.scm" . 387089)
               (ret.eq? "../stdlib/core/optimize.scm" . 387089))
             (if.true.ret)
             (push.gloc.of core.optimize\x27;ht-variable-pinned)
             (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 387089)
             (push.const . #t)
             (ret.subr.gloc.of \x2E;core-hashtable-set! "../stdlib/core/optimize.scm" . 387089))
           (push.iloc.0 . 1)
           (apply.gloc.of \x2E;for-each "../stdlib/core/optimize.scm" . 387089))
         (call
           (call
             (push.gloc.of \x2E;fn39.1\x60;39)
             (push.iloc.0 . 1)
             (apply.gloc.of \x2E;map "../stdlib/core/optimize.scm" . 387089))
           (push)
           (extend . 1)
           (push.close
             (1 0)
             (push.gloc.of core.optimize\x27;ht-binding-body-mutual)
             (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 387089)
             (push.iloc.1 . 0)
             (ret.subr.gloc.of \x2E;core-hashtable-set! "../stdlib/core/optimize.scm" . 387089))
           (push.iloc.1 . 1)
           (apply.gloc.of \x2E;for-each "../stdlib/core/optimize.scm" . 387089))
         (call
           (push.gloc.of \x2E;car)
           (push.iloc.0 . 1)
           (apply.gloc.of \x2E;map "../stdlib/core/optimize.scm" . 387089))
         (push)
         (push.iloc 3 . 1)
         (push.subr.gloc.of \x2E;append 2 "../stdlib/core/optimize.scm" . 387089)
         (extend . 1)
         (call
           (call
             (push.gloc.of \x2E;cadr)
             (push.iloc.1 . 1)
             (apply.gloc.of \x2E;map "../stdlib/core/optimize.scm" . 387089))
           (push)
           (push.iloc.0 . 0)
           (push.iloc 4 . 2)
           (apply.gloc.of
             core.optimize\x27;collect-context-each
             "../stdlib/core/optimize.scm"
             .
             387089))
         (push)
         (extend . 1)
         (call
           (call
             (push.gloc.of \x2E;fn52.1\x60;52)
             (push.iloc.0 . 0)
             (apply.gloc.of core.lists\x27;for-all "../stdlib/core/optimize.scm" . 387089))
           (if.true.ret)
           (push.gloc.of \x2E;fn32.1\x60;32)
           (call
             (push.gloc.of \x2E;car)
             (push.iloc 2 . 1)
             (apply.gloc.of \x2E;map "../stdlib/core/optimize.scm" . 387089))
           (push)
           (apply.gloc.of \x2E;for-each "../stdlib/core/optimize.scm" . 387089))
         (push.iloc 2 . 0)
         (push.iloc.1 . 0)
         (push.iloc.0 . 0)
         (apply.gloc.of
           core.optimize\x27;collect-context-seq
           "../stdlib/core/optimize.scm"
           .
           387089))
       (push.const . "coreform-optimize")
       (push.const . "internal inconsistency in ~s")
       (push.gloc.of core.optimize\x27;collect-context)
       (push.subr.gloc.of \x2E;format 2 "../stdlib/core/optimize.scm" . 387089)
       (push.iloc 2 . 0)
       (apply.gloc.of \x2E;assertion-violation "../stdlib/core/optimize.scm" . 387089))
     (push.iloc.0 . 0)
     (const . if)
     (if.eq?
       (push.cdr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 441383)
       (push.iloc.1 . 1)
       (push.iloc.1 . 2)
       (apply.gloc.of
         core.optimize\x27;collect-context-each
         "../stdlib/core/optimize.scm"
         .
         441361))
     (push.iloc.0 . 0)
     (const . set!)
     (if.eq?
       (push.gloc.of core.optimize\x27;ht-variable-assigned)
       (push.cadr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 443451)
       (push.const . #t)
       (subr.gloc.of \x2E;core-hashtable-set! 3 "../stdlib/core/optimize.scm" . 443409)
       (push.iloc.1 . 0)
       (push.iloc.1 . 1)
       (push.iloc.1 . 2)
       (apply.gloc.of
         core.optimize\x27;collect-context-each
         "../stdlib/core/optimize.scm"
         .
         444433))
     (push.iloc.0 . 0)
     (push.const begin and or)
     (subr.gloc.of \x2E;memq 2 "../stdlib/core/optimize.scm" . 385038)
     (if.true
       (push.cdr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 446502)
       (push.iloc.1 . 1)
       (push.iloc.1 . 2)
       (apply.gloc.of core.optimize\x27;collect-context-seq "../stdlib/core/optimize.scm" . 446481))
     (call
       (car.iloc (1 . 0) "../stdlib/core/optimize.scm" . 448543)
       (if.not.symbol?.ret.const . #f)
       (push.gloc.of core.optimize\x27;ht-variable-callsites)
       (push.car.iloc (1 . 0) "../stdlib/core/optimize.scm" . 450603)
       (push.iloc.1 . 0)
       (push.gloc.of core.optimize\x27;ht-variable-callsites)
       (push.car.iloc (1 . 0) "../stdlib/core/optimize.scm" . 451680)
       (push.const)
       (subr.gloc.of \x2E;core-hashtable-ref 3 "../stdlib/core/optimize.scm" . 451638)
       (push.cons)
       (ret.subr.gloc.of \x2E;core-hashtable-set! "../stdlib/core/optimize.scm" . 449558))
     (push.iloc.1 . 0)
     (push.iloc.1 . 1)
     (push.iloc.1 . 2)
     (apply.gloc.of core.optimize\x27;collect-context-each "../stdlib/core/optimize.scm" . 452625))
   (iloc.0 . 0)
   (if.symbol?
     (call
       (iloc.0 . 3)
       (if.false.ret)
       (push.gloc.of core.optimize\x27;ht-variable-operands-refc)
       (push.iloc.0 . 0)
       (push.gloc.of core.optimize\x27;ht-variable-operands-refc)
       (push.iloc.0 . 0)
       (push.const . 0)
       (push.subr.gloc.of \x2E;core-hashtable-ref 3 "../stdlib/core/optimize.scm" . 455759)
       (push.const . 1)
       (push.subr.gloc.of \x2E;+ 2 "../stdlib/core/optimize.scm" . 455756)
       (ret.subr.gloc.of \x2E;core-hashtable-set! "../stdlib/core/optimize.scm" . 455704))
     (push.gloc.of core.optimize\x27;ht-variable-refc)
     (push.iloc.0 . 0)
     (push.gloc.of core.optimize\x27;ht-variable-refc)
     (push.iloc.0 . 0)
     (push.const . 0)
     (push.subr.gloc.of \x2E;core-hashtable-ref 3 "../stdlib/core/optimize.scm" . 456764)
     (push.const . 1)
     (push.subr.gloc.of \x2E;+ 2 "../stdlib/core/optimize.scm" . 456761)
     (subr.gloc.of \x2E;core-hashtable-set! 3 "../stdlib/core/optimize.scm" . 456718)
     (call
       (push.iloc.0 . 0)
       (apply.gloc.of core.optimize\x27;primitive-function? "../stdlib/core/optimize.scm" . 457749))
     (if.true (ret.iloc 0 . 2))
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (subr.gloc.of \x2E;memq 2 "../stdlib/core/optimize.scm" . 458773)
     (if.true (ret.iloc 0 . 2))
     (push.iloc.0 . 0)
     (iloc.0 . 2)
     (ret.cons "../stdlib/core/optimize.scm" . 459802))
   (ret.iloc 0 . 2))
 (set.gloc.of core.optimize\x27;collect-context)
 (close
   (2 0 . core.optimize\x27;crawl-lambda-lifting)
   (extend.enclose
     (0 0)
     (subr.gloc.of \x2E;make-core-hashtable 0)
     (push)
     (extend . 1)
     (call
       (push.const . 1)
       (extend . 1)
       (push.close
         (1 0)
         (cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 581675)
         (if.symbol?
           (push.iloc 2 . 0)
           (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 582714)
           (push.const . ".fn~a.~a~a~a")
           (push.iloc.1 . 0)
           (push.iloc 5 . 1)
           (subr.gloc.of \x2E;current-rename-delimiter 0)
           (push)
           (push.iloc.1 . 0)
           (push.subr.gloc.of \x2E;format 5 "../stdlib/core/optimize.scm" . 582738)
           (push.subr.gloc.of \x2E;string->symbol 1 "../stdlib/core/optimize.scm" . 582722)
           (subr.gloc.of \x2E;core-hashtable-set! 3 "../stdlib/core/optimize.scm" . 582690)
           (n+.iloc (1 . 0) 1 "../stdlib/core/optimize.scm" . 583726)
           (set.iloc 1 . 0)
           (ret.const.unspec))
         (ret.const.unspec))
       (push.gloc.of core.optimize\x27;ht-lambda-node)
       (push.subr.gloc.of \x2E;core-hashtable->alist 1 "../stdlib/core/optimize.scm" . 584729)
       (apply.gloc.of \x2E;for-each "../stdlib/core/optimize.scm" . 580623))
     (call
       (push.close
         (1 0)
         (push.gloc.of core.optimize\x27;ht-lambda-node)
         (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 586819)
         (push.const . #f)
         (push.subr.gloc.of \x2E;core-hashtable-ref 3 "../stdlib/core/optimize.scm" . 586784)
         (extend . 1)
         (iloc.0 . 0)
         (if.true
           (iloc.0 . 0)
           (if.symbol?
             (push.iloc 2 . 0)
             (push.cdr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 589895)
             (subr.gloc.of \x2E;core-hashtable-delete! 2 "../stdlib/core/optimize.scm" . 589868)
             (push.iloc 2 . 0)
             (push.car.iloc (1 . 0) "../stdlib/core/optimize.scm" . 590916)
             (push.cdr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 590924)
             (ret.subr.gloc.of \x2E;core-hashtable-set! "../stdlib/core/optimize.scm" . 590892))
           (ret.const.unspec))
         (ret.const.unspec))
       (push.gloc.of core.optimize\x27;ht-variable-binding)
       (push.subr.gloc.of \x2E;core-hashtable->alist 1 "../stdlib/core/optimize.scm" . 591895)
       (apply.gloc.of \x2E;for-each "../stdlib/core/optimize.scm" . 578571))
     (call
       (push.close
         (1 0)
         (push.iloc.1 . 0)
         (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 593972)
         (ret.subr.gloc.of \x2E;core-hashtable-delete! "../stdlib/core/optimize.scm" . 593945))
       (push.gloc.of core.optimize\x27;ht-variable-defined)
       (push.subr.gloc.of \x2E;core-hashtable->alist 1 "../stdlib/core/optimize.scm" . 594967)
       (apply.gloc.of \x2E;for-each "../stdlib/core/optimize.scm" . 592909))
     (ret.iloc 0 . 0))
   (call
     (touch.gloc.of loop\x60;257)
     (apply.gloc.of loop\x60;257 "../stdlib/core/optimize.scm" . 600071))
   (call
     (touch.gloc.of traverse-lambda-node\x60;165)
     (apply.gloc.of traverse-lambda-node\x60;165 "../stdlib/core/optimize.scm" . 603143))
   (apply.iloc (0 . 0) "../stdlib/core/optimize.scm" . 604167))
 (set.gloc.of core.optimize\x27;crawl-lambda-lifting)
 (close
   (1 0 . core.optimize\x27;crawl-beta-subst)
   (subr.gloc.of \x2E;make-core-hashtable 0)
   (push)
   (extend . 1)
   (call
     (push.close
       (1 0)
       (push.gloc.of core.optimize\x27;ht-lambda-node)
       (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 612409)
       (subr.gloc.of \x2E;core-hashtable-contains? 2 "../stdlib/core/optimize.scm" . 612368)
       (if.true.ret)
       (push.gloc.of core.optimize\x27;ht-variable-refc)
       (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 613441)
       (push.const . #f)
       (push.subr.gloc.of \x2E;core-hashtable-ref 3 "../stdlib/core/optimize.scm" . 613404)
       (extend . 1)
       (call
         (iloc.0 . 0)
         (if.false.ret)
         (call
           (=n.iloc (0 . 0) 1 "../stdlib/core/optimize.scm" . 615458)
           (if.true.ret)
           (push.cdr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 615492)
           (apply.gloc.of
             core.optimize\x27;inlinable-expression?
             "../stdlib/core/optimize.scm"
             .
             615469))
         (if.false.ret)
         (push.gloc.of core.optimize\x27;ht-variable-pinned)
         (push.car.iloc (1 . 0) "../stdlib/core/optimize.scm" . 616528)
         (subr.gloc.of \x2E;core-hashtable-contains? 2 "../stdlib/core/optimize.scm" . 616483)
         (if.true.ret.const . #f)
         (push.gloc.of core.optimize\x27;ht-binding-body-common)
         (push.car.iloc (1 . 0) "../stdlib/core/optimize.scm" . 617545)
         (push.const . #f)
         (ret.subr.gloc.of \x2E;core-hashtable-ref "../stdlib/core/optimize.scm" . 617502))
       (push)
       (extend . 1)
       (iloc.0 . 0)
       (if.true
         (call
           (call
             (push.cdr.iloc (2 . 0) "../stdlib/core/optimize.scm" . 619579)
             (apply.gloc.of core.optimize\x27;constant? "../stdlib/core/optimize.scm" . 619568))
           (if.true.ret)
           (cdr.iloc (2 . 0) "../stdlib/core/optimize.scm" . 620606)
           (if.not.symbol?.ret.const . #f)
           (push.gloc.of core.optimize\x27;ht-variable-assigned)
           (push.cdr.iloc (2 . 0) "../stdlib/core/optimize.scm" . 621673)
           (subr.gloc.of \x2E;core-hashtable-contains? 2 "../stdlib/core/optimize.scm" . 621626)
           (if.true.ret.const . #f)
           (push.gloc.of core.optimize\x27;ht-variable-formals)
           (push.cdr.iloc (2 . 0) "../stdlib/core/optimize.scm" . 622695)
           (subr.gloc.of \x2E;core-hashtable-contains? 2 "../stdlib/core/optimize.scm" . 622649)
           (if.true.ret)
           (push.gloc.of core.optimize\x27;ht-variable-binding)
           (push.cdr.iloc (2 . 0) "../stdlib/core/optimize.scm" . 623724)
           (subr.gloc.of \x2E;core-hashtable-contains? 2 "../stdlib/core/optimize.scm" . 623678)
           (if.false.ret)
           (push.gloc.of core.optimize\x27;ht-variable-privates)
           (push.cdr.iloc (2 . 0) "../stdlib/core/optimize.scm" . 624753)
           (subr.gloc.of \x2E;core-hashtable-contains? 2 "../stdlib/core/optimize.scm" . 624706)
           (if.true.ret)
           (push.gloc.of core.optimize\x27;ht-variable-defined)
           (push.cdr.iloc (2 . 0) "../stdlib/core/optimize.scm" . 625781)
           (push.subr.gloc.of
             \x2E;core-hashtable-contains?
             2
             "../stdlib/core/optimize.scm"
             .
             625735)
           (ret.subr.gloc.of \x2E;not "../stdlib/core/optimize.scm" . 625730))
         (push)
         (extend . 1)
         (call
           (iloc.0 . 0)
           (if.true.ret)
           (call
             (push.cdr.iloc (3 . 0) "../stdlib/core/optimize.scm" . 627775)
             (apply.gloc.of core.optimize\x27;function? "../stdlib/core/optimize.scm" . 627764))
           (if.false.ret)
           (cdr.iloc (3 . 0) "../stdlib/core/optimize.scm" . 628806)
           (if.not.symbol?.ret.const . #t)
           (push.gloc.of core.optimize\x27;ht-variable-operands-refc)
           (push.cdr.iloc (3 . 0) "../stdlib/core/optimize.scm" . 629866)
           (push.const . 0)
           (push.subr.gloc.of \x2E;core-hashtable-ref 3 "../stdlib/core/optimize.scm" . 629820)
           (push.const . 1)
           (ret.subr.gloc.of \x2E;<= "../stdlib/core/optimize.scm" . 629816))
         (push)
         (extend . 1)
         (call
           (iloc.1 . 0)
           (if.false.ret)
           (push.cdr.iloc (4 . 0) "../stdlib/core/optimize.scm" . 631881)
           (apply.gloc.of
             core.optimize\x27;inlinable-expression?
             "../stdlib/core/optimize.scm"
             .
             631858))
         (push)
         (extend . 1)
         (call
           (push.close
             (1 0)
             (extend.enclose
               (1 0 . loop)
               (call
                 (<n.iloc (7 . 0) 1 "../stdlib/core/optimize.scm" . 636977)
                 (if.false.ret)
                 (push.const . #t)
                 (apply.iloc (2 . 0) "../stdlib/core/optimize.scm" . 636988))
               (iloc.0 . 0)
               (if.null?.ret.const)
               (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 639032)
               (car.iloc (8 . 0) "../stdlib/core/optimize.scm" . 639042)
               (if.eq?
                 (n+.iloc (7 . 0) -1 "../stdlib/core/optimize.scm" . 640062)
                 (set.iloc 7 . 0)
                 (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 641081)
                 (apply.iloc (1 . 0) "../stdlib/core/optimize.scm" . 641075))
               (car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 642106)
               (if.pair?
                 (push.iloc.0 . 0)
                 (push.subr.gloc.of \x2E;caar 1 "../stdlib/core/optimize.scm" . 643135)
                 (push.iloc.0 . 0)
                 (push.subr.gloc.of \x2E;cdar 1 "../stdlib/core/optimize.scm" . 643153)
                 (extend . 2)
                 (iloc.0 . 0)
                 (if.pair?
                   (call
                     (push.car.iloc (1 . 0) "../stdlib/core/optimize.scm" . 645186)
                     (apply.iloc (2 . 0) "../stdlib/core/optimize.scm" . 645180))
                   (push.cdr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 646210)
                   (apply.iloc (2 . 0) "../stdlib/core/optimize.scm" . 646204))
                 (push.iloc.0 . 0)
                 (const . quote)
                 (if.eq?
                   (push.cdr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 648258)
                   (apply.iloc (2 . 0) "../stdlib/core/optimize.scm" . 648252))
                 (push.iloc.0 . 0)
                 (const . lambda)
                 (if.eq?
                   (call
                     (iloc 4 . 0)
                     (if.false.ret)
                     (push.cdr.iloc (0 . 1) "../stdlib/core/optimize.scm" . 651342)
                     (apply.iloc (2 . 0) "../stdlib/core/optimize.scm" . 651336))
                   (push.cdr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 652354)
                   (apply.iloc (2 . 0) "../stdlib/core/optimize.scm" . 652348))
                 (push.iloc.0 . 0)
                 (push.const let letrec*)
                 (subr.gloc.of \x2E;memq 2 "../stdlib/core/optimize.scm" . 653372)
                 (if.true
                   (call
                     (call
                       (push.gloc.of \x2E;cadr)
                       (push.car.iloc (0 . 1) "../stdlib/core/optimize.scm" . 654412)
                       (apply.gloc.of \x2E;map "../stdlib/core/optimize.scm" . 654402))
                     (push)
                     (apply.iloc (2 . 0) "../stdlib/core/optimize.scm" . 654396))
                   (call
                     (push.cdr.iloc (0 . 1) "../stdlib/core/optimize.scm" . 655426)
                     (apply.iloc (2 . 0) "../stdlib/core/optimize.scm" . 655420))
                   (push.cdr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 656450)
                   (apply.iloc (2 . 0) "../stdlib/core/optimize.scm" . 656444))
                 (push.iloc.0 . 0)
                 (push.const begin and or)
                 (subr.gloc.of \x2E;memq 2 "../stdlib/core/optimize.scm" . 657468)
                 (if.true
                   (call
                     (push.iloc.0 . 1)
                     (apply.iloc (2 . 0) "../stdlib/core/optimize.scm" . 658492))
                   (push.cdr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 659522)
                   (apply.iloc (2 . 0) "../stdlib/core/optimize.scm" . 659516))
                 (push.iloc.0 . 0)
                 (const . set!)
                 (if.eq?
                   (call
                     (iloc 6 . 0)
                     (if.true.ret)
                     (push.const . #f)
                     (apply.iloc (3 . 0) "../stdlib/core/optimize.scm" . 661574))
                   (call
                     (push.car.iloc (9 . 0) "../stdlib/core/optimize.scm" . 662598)
                     (car.iloc (0 . 1) "../stdlib/core/optimize.scm" . 662606)
                     (if.not.eq?.ret.const . #f)
                     (push.const . #f)
                     (apply.iloc (3 . 0) "../stdlib/core/optimize.scm" . 662618))
                   (call
                     (push.cdr.iloc (9 . 0) "../stdlib/core/optimize.scm" . 663622)
                     (car.iloc (0 . 1) "../stdlib/core/optimize.scm" . 663630)
                     (if.not.eq?.ret.const . #f)
                     (push.const . #f)
                     (apply.iloc (3 . 0) "../stdlib/core/optimize.scm" . 663642))
                   (call
                     (push.cdr.iloc (0 . 1) "../stdlib/core/optimize.scm" . 664642)
                     (apply.iloc (2 . 0) "../stdlib/core/optimize.scm" . 664636))
                   (push.cdr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 665666)
                   (apply.iloc (2 . 0) "../stdlib/core/optimize.scm" . 665660))
                 (push.iloc.0 . 0)
                 (const . if)
                 (if.eq?
                   (call
                     (push.car.iloc (0 . 1) "../stdlib/core/optimize.scm" . 667720)
                     (push.subr.gloc.of \x2E;list 1 "../stdlib/core/optimize.scm" . 667714)
                     (apply.iloc (2 . 0) "../stdlib/core/optimize.scm" . 667708))
                   (call
                     (iloc 5 . 0)
                     (if.true.ret)
                     (push.const . #f)
                     (apply.iloc (3 . 0) "../stdlib/core/optimize.scm" . 668741))
                   (call
                     (push.cadr.iloc (0 . 1) "../stdlib/core/optimize.scm" . 669768)
                     (push.subr.gloc.of \x2E;list 1 "../stdlib/core/optimize.scm" . 669762)
                     (apply.iloc (2 . 0) "../stdlib/core/optimize.scm" . 669756))
                   (call
                     (cddr.iloc (0 . 1) "../stdlib/core/optimize.scm" . 670792)
                     (if.not.pair?.ret.const . #f)
                     (push.iloc.0 . 1)
                     (push.subr.gloc.of \x2E;caddr 1 "../stdlib/core/optimize.scm" . 670817)
                     (push.subr.gloc.of \x2E;list 1 "../stdlib/core/optimize.scm" . 670811)
                     (apply.iloc (2 . 0) "../stdlib/core/optimize.scm" . 670805))
                   (push.cdr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 671810)
                   (apply.iloc (2 . 0) "../stdlib/core/optimize.scm" . 671804))
                 (call
                   (push.iloc.0 . 0)
                   (car.iloc (9 . 0) "../stdlib/core/optimize.scm" . 673867)
                   (if.not.eq?.ret.const . #f)
                   (n+.iloc (8 . 0) -1 "../stdlib/core/optimize.scm" . 673887)
                   (set.iloc 8 . 0)
                   (ret.const.unspec))
                 (call
                   (push.iloc.0 . 1)
                   (apply.iloc (2 . 0) "../stdlib/core/optimize.scm" . 674876))
                 (call
                   (iloc 6 . 0)
                   (if.true.ret)
                   (call
                     (push.iloc.0 . 0)
                     (apply.gloc.of
                       core.optimize\x27;primitive-function?
                       "../stdlib/core/optimize.scm"
                       .
                       676928))
                   (if.true.ret)
                   (call
                     (push.iloc.0 . 0)
                     (apply.gloc.of
                       core.optimize\x27;variable-functional?
                       "../stdlib/core/optimize.scm"
                       .
                       677952))
                   (if.true.ret)
                   (call
                     (call
                       (push.iloc.0 . 0)
                       (apply.gloc.of
                         core.optimize\x27;special-list-function?
                         "../stdlib/core/optimize.scm"
                         .
                         680005))
                     (if.false.ret)
                     (iloc.0 . 1)
                     (if.not.pair?.ret.const . #f)
                     (car.iloc (0 . 1) "../stdlib/core/optimize.scm" . 682062)
                     (if.not.symbol?.ret.const . #f)
                     (call
                       (push.car.iloc (0 . 1) "../stdlib/core/optimize.scm" . 683102)
                       (apply.gloc.of
                         core.optimize\x27;primitive-function?
                         "../stdlib/core/optimize.scm"
                         .
                         683081))
                     (if.true.ret)
                     (push.car.iloc (0 . 1) "../stdlib/core/optimize.scm" . 684127)
                     (apply.gloc.of
                       core.optimize\x27;variable-functional?
                       "../stdlib/core/optimize.scm"
                       .
                       684105))
                   (if.true.ret)
                   (push.const . #f)
                   (apply.iloc (3 . 0) "../stdlib/core/optimize.scm" . 686144))
                 (push.cdr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 687170)
                 (apply.iloc (2 . 0) "../stdlib/core/optimize.scm" . 687164))
               (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 689209)
               (apply.iloc (1 . 0) "../stdlib/core/optimize.scm" . 689203))
             (push.iloc 5 . 0)
             (apply.iloc (0 . 0) "../stdlib/core/optimize.scm" . 635946))
           (apply.gloc.of \x2E;call/cc "../stdlib/core/optimize.scm" . 632864))
         (push)
         (extend . 1)
         (push.iloc.0 . 0)
         (const . #t)
         (if.not.eq?.ret.const . #f)
         (push.iloc 7 . 0)
         (push.car.iloc (6 . 0) "../stdlib/core/optimize.scm" . 691263)
         (push.cdr.iloc (6 . 0) "../stdlib/core/optimize.scm" . 691271)
         (ret.subr.gloc.of \x2E;core-hashtable-set! "../stdlib/core/optimize.scm" . 691239))
       (ret.const.unspec))
     (push.gloc.of core.optimize\x27;ht-variable-binding)
     (push.subr.gloc.of \x2E;core-hashtable->alist 1 "../stdlib/core/optimize.scm" . 692234)
     (apply.gloc.of \x2E;for-each "../stdlib/core/optimize.scm" . 609287))
   (call
     (push.close
       (1 0)
       (cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 694307)
       (if.not.symbol?.ret.const . #f)
       (push.iloc.1 . 0)
       (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 695349)
       (ret.subr.gloc.of \x2E;core-hashtable-delete! "../stdlib/core/optimize.scm" . 695322))
     (push.iloc.0 . 0)
     (push.subr.gloc.of \x2E;core-hashtable->alist 1 "../stdlib/core/optimize.scm" . 696339)
     (apply.gloc.of \x2E;for-each "../stdlib/core/optimize.scm" . 693257))
   (ret.iloc 0 . 0))
 (set.gloc.of core.optimize\x27;crawl-beta-subst)
 (close
   (2 0 . core.optimize\x27;check-stackable-each)
   (extend.enclose+
     (1 0 . loop)
     (iloc.0 . 0)
     (if.null?.ret.const . #t)
     (call
       (push.iloc 2 . 0)
       (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 703527)
       (push.const . #f)
       (apply.gloc.of core.optimize\x27;check-stackable "../stdlib/core/optimize.scm" . 703506))
     (if.false.ret)
     (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 704536)
     (apply.iloc+ (1 . 0) "../stdlib/core/optimize.scm" . 704530))
   (push.iloc.1 . 1)
   (apply.iloc+ (0 . 0) "../stdlib/core/optimize.scm" . 701447))
 (set.gloc.of core.optimize\x27;check-stackable-each)
 (close
   (3 0 . core.optimize\x27;check-stackable-seq)
   (extend.enclose+
     (1 0 . loop)
     (iloc.0 . 0)
     (if.null?.ret.const . #t)
     (call
       (push.iloc 2 . 0)
       (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 710695)
       (call
         (iloc 2 . 2)
         (if.false.ret)
         (cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 710722)
         (ret.null? "../stdlib/core/optimize.scm" . 710715))
       (push)
       (apply.gloc.of core.optimize\x27;check-stackable "../stdlib/core/optimize.scm" . 710674))
     (if.false.ret)
     (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 711704)
     (apply.iloc+ (1 . 0) "../stdlib/core/optimize.scm" . 711698))
   (push.iloc.1 . 1)
   (apply.iloc+ (0 . 0) "../stdlib/core/optimize.scm" . 708615))
 (set.gloc.of core.optimize\x27;check-stackable-seq)
 (close
   (3 0 . core.optimize\x27;check-stackable)
   (iloc.0 . 1)
   (if.pair?
     (push.car.iloc (0 . 1) "../stdlib/core/optimize.scm" . 716820)
     (extend . 1)
     (push.iloc.0 . 0)
     (const . lambda)
     (if.eq?
       (push.iloc.1 . 0)
       (push.cddr.iloc (1 . 1) "../stdlib/core/optimize.scm" . 718890)
       (push.const . #f)
       (apply.gloc.of core.optimize\x27;check-stackable-seq "../stdlib/core/optimize.scm" . 718865))
     (push.iloc.0 . 0)
     (push.const begin and or)
     (subr.gloc.of \x2E;memq 2 "../stdlib/core/optimize.scm" . 716814)
     (if.true
       (push.iloc.1 . 0)
       (push.cdr.iloc (1 . 1) "../stdlib/core/optimize.scm" . 720938)
       (push.iloc.1 . 2)
       (apply.gloc.of core.optimize\x27;check-stackable-seq "../stdlib/core/optimize.scm" . 720913))
     (push.iloc.0 . 0)
     (const . let)
     (if.eq?
       (call
         (push.close
           (1 0)
           (push.iloc 2 . 0)
           (push.cadr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 723008)
           (push.const . #f)
           (apply.gloc.of core.optimize\x27;check-stackable "../stdlib/core/optimize.scm" . 722987))
         (push.cadr.iloc (1 . 1) "../stdlib/core/optimize.scm" . 723022)
         (apply.gloc.of core.lists\x27;for-all "../stdlib/core/optimize.scm" . 722966))
       (if.false.ret)
       (push.iloc.1 . 0)
       (push.cddr.iloc (1 . 1) "../stdlib/core/optimize.scm" . 724015)
       (push.iloc.1 . 2)
       (apply.gloc.of core.optimize\x27;check-stackable-seq "../stdlib/core/optimize.scm" . 723990))
     (push.iloc.0 . 0)
     (const . letrec*)
     (if.eq?
       (iloc.1 . 2)
       (if.true
         (call
           (iloc.1 . 1)
           (if.not.pair?.ret.const . #f)
           (cdr.iloc (1 . 1) "../stdlib/core/optimize.scm" . 727064)
           (if.not.pair?.ret.const . #f)
           (cadr.iloc (1 . 1) "../stdlib/core/optimize.scm" . 727064)
           (if.not.pair?.ret.const . #f)
           (push.iloc.1 . 1)
           (subr.gloc.of caadr 1 "../stdlib/core/optimize.scm" . 727064)
           (if.not.pair?.ret.const . #f)
           (push.iloc.1 . 1)
           (subr.gloc.of cdaadr 1 "../stdlib/core/optimize.scm" . 727064)
           (if.not.pair?.ret.const . #f)
           (push.iloc.1 . 1)
           (push.subr.gloc.of cdaadr 1 "../stdlib/core/optimize.scm" . 727064)
           (subr.gloc.of car 1 "../stdlib/core/optimize.scm" . 727064)
           (if.not.pair?.ret.const . #f)
           (push.iloc.1 . 1)
           (push.subr.gloc.of cdaadr 1 "../stdlib/core/optimize.scm" . 727064)
           (subr.gloc.of cdar 1 "../stdlib/core/optimize.scm" . 727064)
           (if.not.pair?.ret.const . #f)
           (cddr.iloc (1 . 1) "../stdlib/core/optimize.scm" . 727064)
           (if.not.pair?.ret.const . #f)
           (push.iloc.1 . 1)
           (subr.gloc.of caddr 1 "../stdlib/core/optimize.scm" . 727064)
           (if.not.pair?.ret.const . #f)
           (push.iloc.1 . 1)
           (push.subr.gloc.of cdaadr 1 "../stdlib/core/optimize.scm" . 727064)
           (subr.gloc.of cdr 1 "../stdlib/core/optimize.scm" . 727064)
           (if.not.null?.ret.const . #f)
           (push.iloc.1 . 1)
           (subr.gloc.of cdadr 1 "../stdlib/core/optimize.scm" . 727064)
           (if.not.null?.ret.const . #f)
           (push.iloc.1 . 1)
           (subr.gloc.of cdddr 1 "../stdlib/core/optimize.scm" . 727064)
           (if.not.null?.ret.const . #f)
           (push.iloc.1 . 1)
           (push.subr.gloc.of cdaadr 1 "../stdlib/core/optimize.scm" . 727064)
           (push.subr.gloc.of caar 1 "../stdlib/core/optimize.scm" . 727064)
           (const . lambda)
           (if.not.eq?.ret.const . #f)
           (push.iloc.1 . 1)
           (push.subr.gloc.of caaadr 1 "../stdlib/core/optimize.scm" . 727064)
           (push.iloc.1 . 1)
           (subr.gloc.of caaddr 1 "../stdlib/core/optimize.scm" . 727064)
           (ret.eq? "../stdlib/core/optimize.scm" . 727064))
         (if.true
           (push.iloc.1 . 1)
           (push.subr.gloc.of cdaadr 1 "../stdlib/core/optimize.scm" . 727064)
           (push.subr.gloc.of cddar 1 "../stdlib/core/optimize.scm" . 727064)
           (extend . 1)
           (call
             (push.iloc 2 . 0)
             (push.iloc 2 . 1)
             (push.subr.gloc.of cdaddr 1 "../stdlib/core/optimize.scm" . 727064)
             (apply.gloc.of
               core.optimize\x27;check-stackable-each
               "../stdlib/core/optimize.scm"
               .
               727064))
           (if.false.ret)
           (push.iloc 2 . 0)
           (push.iloc.0 . 0)
           (push.iloc 2 . 2)
           (apply.gloc.of
             core.optimize\x27;check-stackable-seq
             "../stdlib/core/optimize.scm"
             .
             727064))
         (call
           (push.close
             (1 0)
             (push.iloc 2 . 0)
             (push.cadr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 727064)
             (push.const . #f)
             (apply.gloc.of
               core.optimize\x27;check-stackable
               "../stdlib/core/optimize.scm"
               .
               727064))
           (push.cadr.iloc (1 . 1) "../stdlib/core/optimize.scm" . 727064)
           (apply.gloc.of core.lists\x27;for-all "../stdlib/core/optimize.scm" . 727064))
         (if.false.ret)
         (push.iloc.1 . 0)
         (push.cddr.iloc (1 . 1) "../stdlib/core/optimize.scm" . 727064)
         (push.iloc.1 . 2)
         (apply.gloc.of
           core.optimize\x27;check-stackable-seq
           "../stdlib/core/optimize.scm"
           .
           727064))
       (call
         (push.close
           (1 0)
           (push.iloc 2 . 0)
           (push.cadr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 736327)
           (push.const . #f)
           (apply.gloc.of core.optimize\x27;check-stackable "../stdlib/core/optimize.scm" . 736306))
         (push.cadr.iloc (1 . 1) "../stdlib/core/optimize.scm" . 736341)
         (apply.gloc.of core.lists\x27;for-all "../stdlib/core/optimize.scm" . 736285))
       (if.false.ret)
       (push.iloc.1 . 0)
       (push.cddr.iloc (1 . 1) "../stdlib/core/optimize.scm" . 737334)
       (push.iloc.1 . 2)
       (apply.gloc.of core.optimize\x27;check-stackable-seq "../stdlib/core/optimize.scm" . 737309))
     (push.iloc.0 . 0)
     (const . if)
     (if.eq?
       (call
         (push.iloc.1 . 0)
         (push.cadr.iloc (1 . 1) "../stdlib/core/optimize.scm" . 739371)
         (push.const . #f)
         (apply.gloc.of core.optimize\x27;check-stackable "../stdlib/core/optimize.scm" . 739350))
       (if.false.ret)
       (call
         (push.iloc.1 . 0)
         (push.iloc.1 . 1)
         (push.subr.gloc.of \x2E;caddr 1 "../stdlib/core/optimize.scm" . 740395)
         (push.iloc.1 . 2)
         (apply.gloc.of core.optimize\x27;check-stackable "../stdlib/core/optimize.scm" . 740374))
       (if.false.ret)
       (push.iloc.1 . 1)
       (subr.gloc.of \x2E;cdddr 1 "../stdlib/core/optimize.scm" . 741409)
       (if.null?.ret.const . #t)
       (push.iloc.1 . 0)
       (push.iloc.1 . 1)
       (push.subr.gloc.of \x2E;cadddr 1 "../stdlib/core/optimize.scm" . 741444)
       (push.iloc.1 . 2)
       (apply.gloc.of core.optimize\x27;check-stackable "../stdlib/core/optimize.scm" . 741423))
     (push.iloc.0 . 0)
     (const . quote)
     (if.eq?.ret.const . #t)
     (car.iloc (1 . 1) "../stdlib/core/optimize.scm" . 744481)
     (if.symbol?
       (push.car.iloc (1 . 1) "../stdlib/core/optimize.scm" . 745505)
       (iloc.1 . 0)
       (if.eq?
         (iloc.1 . 2)
         (if.false.ret)
         (push.iloc.1 . 0)
         (push.cdr.iloc (1 . 1) "../stdlib/core/optimize.scm" . 746560)
         (apply.gloc.of
           core.optimize\x27;check-stackable-each
           "../stdlib/core/optimize.scm"
           .
           746534))
       (push.iloc.1 . 0)
       (push.cdr.iloc (1 . 1) "../stdlib/core/optimize.scm" . 747574)
       (apply.gloc.of
         core.optimize\x27;check-stackable-each
         "../stdlib/core/optimize.scm"
         .
         747548))
     (push.iloc.1 . 0)
     (push.iloc.1 . 1)
     (apply.gloc.of core.optimize\x27;check-stackable-each "../stdlib/core/optimize.scm" . 749592))
   (ret.const . #t))
 (set.gloc.of core.optimize\x27;check-stackable)
 (close
   (3 0 . core.optimize\x27;transcribe-each)
   (extend.enclose+
     (1 0 . loop)
     (iloc.0 . 0)
     (if.null?.ret.const)
     (call
       (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 757798)
       (push.iloc 2 . 1)
       (push.iloc 2 . 2)
       (apply.gloc.of core.optimize\x27;transcribe "../stdlib/core/optimize.scm" . 757786))
     (push)
     (call
       (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 757831)
       (apply.iloc+ (1 . 0) "../stdlib/core/optimize.scm" . 757825))
     (push)
     (extend . 2)
     (call
       (push.iloc.0 . 0)
       (car.iloc (1 . 0) "../stdlib/core/optimize.scm" . 758819)
       (if.not.eq?.ret.const . #f)
       (push.iloc.0 . 1)
       (cdr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 758838)
       (ret.eq? "../stdlib/core/optimize.scm" . 758830))
     (if.true (ret.iloc 1 . 0))
     (push.iloc.0 . 0)
     (iloc.0 . 1)
     (ret.cons "../stdlib/core/optimize.scm" . 760854))
   (push.iloc.1 . 0)
   (apply.iloc+ (0 . 0) "../stdlib/core/optimize.scm" . 754695))
 (set.gloc.of core.optimize\x27;transcribe-each)
 (close
   (3 0 . core.optimize\x27;transcribe-binding-construct)
   (push.cddr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 771113)
   (extend . 1)
   (call
     (push.gloc.of \x2E;car)
     (push.cadr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 771094)
     (apply.gloc.of \x2E;map "../stdlib/core/optimize.scm" . 772117))
   (push)
   (call
     (push.gloc.of \x2E;cadr)
     (push.cadr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 771094)
     (apply.gloc.of \x2E;map "../stdlib/core/optimize.scm" . 772143))
   (push)
   (extend . 2)
   (call
     (push.car.iloc (2 . 0) "../stdlib/core/optimize.scm" . 773153)
     (const . letrec*)
     (if.eq?
       (push.close
         (1 0)
         (push.iloc 3 . 2)
         (push.iloc.0 . 0)
         (subr.gloc.of \x2E;core-hashtable-contains? 2 "../stdlib/core/optimize.scm" . 775207)
         (if.true.ret)
         (push.iloc 3 . 1)
         (push.iloc.0 . 0)
         (subr.gloc.of \x2E;core-hashtable-contains? 2 "../stdlib/core/optimize.scm" . 776231)
         (if.true.ret)
         (call
           (push.gloc.of core.optimize\x27;ht-variable-pinned)
           (push.iloc.0 . 0)
           (subr.gloc.of \x2E;core-hashtable-contains? 2 "../stdlib/core/optimize.scm" . 777260)
           (if.false.ret)
           (ret.iloc 0 . 0))
         (if.true.ret)
         (push.gloc.of core.optimize\x27;ht-variable-refc)
         (push.iloc.0 . 0)
         (subr.gloc.of \x2E;core-hashtable-contains? 2 "../stdlib/core/optimize.scm" . 778284)
         (if.false.ret)
         (ret.iloc 0 . 0))
       (push.iloc.0 . 0)
       (apply.gloc.of \x2E;map "../stdlib/core/optimize.scm" . 774172))
     (push.close
       (1 0)
       (push.iloc 3 . 2)
       (push.iloc.0 . 0)
       (subr.gloc.of \x2E;core-hashtable-contains? 2 "../stdlib/core/optimize.scm" . 781351)
       (if.true.ret)
       (push.iloc 3 . 1)
       (push.iloc.0 . 0)
       (subr.gloc.of \x2E;core-hashtable-contains? 2 "../stdlib/core/optimize.scm" . 782375)
       (if.true.ret)
       (push.gloc.of core.optimize\x27;ht-variable-refc)
       (push.iloc.0 . 0)
       (subr.gloc.of \x2E;core-hashtable-contains? 2 "../stdlib/core/optimize.scm" . 783404)
       (if.false.ret)
       (ret.iloc 0 . 0))
     (push.iloc.0 . 0)
     (apply.gloc.of \x2E;map "../stdlib/core/optimize.scm" . 780316))
   (push)
   (extend . 1)
   (call
     (push.gloc.of \x2E;symbol?)
     (push.iloc.0 . 0)
     (apply.gloc.of core.lists\x27;for-all "../stdlib/core/optimize.scm" . 785428))
   (if.true
     (call
       (push.iloc 2 . 0)
       (push.iloc 3 . 1)
       (push.iloc 3 . 2)
       (apply.gloc.of core.optimize\x27;transcribe-each "../stdlib/core/optimize.scm" . 786468))
     (push)
     (extend . 1)
     (call
       (push.iloc 2 . 1)
       (push.iloc 4 . 1)
       (push.iloc 4 . 2)
       (apply.gloc.of core.optimize\x27;transcribe-each "../stdlib/core/optimize.scm" . 787495))
     (push)
     (extend . 1)
     (call
       (call
         (push.gloc.of \x2E;eq?)
         (push.iloc 3 . 1)
         (push.iloc.0 . 0)
         (apply.gloc.of core.lists\x27;for-all "../stdlib/core/optimize.scm" . 788516))
       (if.false.ret)
       (push.gloc.of \x2E;eq?)
       (push.iloc 4 . 0)
       (push.iloc.1 . 0)
       (apply.gloc.of core.lists\x27;for-all "../stdlib/core/optimize.scm" . 788546))
     (if.true (ret.iloc 5 . 0))
     (push.car.iloc (5 . 0) "../stdlib/core/optimize.scm" . 789549)
     (call
       (push.gloc.of \x2E;list)
       (push.iloc 3 . 0)
       (push.iloc.0 . 0)
       (apply.gloc.of \x2E;map "../stdlib/core/optimize.scm" . 789561))
     (push)
     (push.iloc.1 . 0)
     (push.subr.gloc.of \x2E;cons* 3 "../stdlib/core/optimize.scm" . 789540)
     (extend . 1)
     (push.iloc.0 . 0)
     (iloc 6 . 0)
     (if.eq? (ret.iloc 0 . 0))
     (call
       (push.iloc.0 . 0)
       (push.iloc 6 . 0)
       (call (apply.gloc.of core.optimize\x27;annotate-hook "../stdlib/core/optimize.scm" . 789540))
       (apply))
     (ret.iloc 0 . 0))
   (call
     (push.iloc 2 . 0)
     (push.iloc 3 . 1)
     (push.iloc 3 . 2)
     (apply.gloc.of core.optimize\x27;transcribe-each "../stdlib/core/optimize.scm" . 791588))
   (push)
   (extend . 1)
   (push.close
     (0 0)
     (extend.enclose+
       (5 0 . loop)
       (iloc.0 . 0)
       (if.null?
         (push.iloc.0 . 3)
         (push.subr.gloc.of \x2E;reverse 1 "../stdlib/core/optimize.scm" . 795701)
         (push.iloc.0 . 4)
         (push.subr.gloc.of \x2E;reverse 1 "../stdlib/core/optimize.scm" . 796725)
         (ret.subr.gloc.of \x2E;values "../stdlib/core/optimize.scm" . 795693))
       (push.car.iloc (0 . 1) "../stdlib/core/optimize.scm" . 797746)
       (const . #t)
       (if.eq?
         (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 798771)
         (push.cdr.iloc (0 . 1) "../stdlib/core/optimize.scm" . 798782)
         (push.cdr.iloc (0 . 2) "../stdlib/core/optimize.scm" . 798794)
         (push.iloc.0 . 3)
         (push.iloc.0 . 4)
         (apply.iloc+ (1 . 0) "../stdlib/core/optimize.scm" . 798765))
       (push.car.iloc (0 . 1) "../stdlib/core/optimize.scm" . 801842)
       (const . #f)
       (if.eq?
         (call
           (push.car.iloc (0 . 2) "../stdlib/core/optimize.scm" . 802876)
           (apply.gloc.of core.optimize\x27;function? "../stdlib/core/optimize.scm" . 802865))
         (if.true
           (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 803895)
           (push.cdr.iloc (0 . 1) "../stdlib/core/optimize.scm" . 803906)
           (push.cdr.iloc (0 . 2) "../stdlib/core/optimize.scm" . 803918)
           (push.iloc.0 . 3)
           (push.iloc.0 . 4)
           (apply.iloc+ (1 . 0) "../stdlib/core/optimize.scm" . 803889))
         (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 806967)
         (push.cdr.iloc (0 . 1) "../stdlib/core/optimize.scm" . 806978)
         (push.cdr.iloc (0 . 2) "../stdlib/core/optimize.scm" . 806990)
         (call
           (push.car.iloc (0 . 2) "../stdlib/core/optimize.scm" . 808009)
           (push.iloc 7 . 1)
           (push.iloc 7 . 2)
           (apply.gloc.of core.optimize\x27;transcribe "../stdlib/core/optimize.scm" . 807997))
         (push)
         (iloc.0 . 3)
         (push.cons)
         (push.iloc.0 . 4)
         (apply.iloc+ (1 . 0) "../stdlib/core/optimize.scm" . 806961))
       (car.iloc (0 . 1) "../stdlib/core/optimize.scm" . 810038)
       (if.symbol?
         (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 811059)
         (push.cdr.iloc (0 . 1) "../stdlib/core/optimize.scm" . 811070)
         (push.cdr.iloc (0 . 2) "../stdlib/core/optimize.scm" . 811082)
         (push.iloc.0 . 3)
         (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 813119)
         (call
           (push.car.iloc (0 . 2) "../stdlib/core/optimize.scm" . 813142)
           (push.iloc 7 . 1)
           (push.iloc 7 . 2)
           (apply.gloc.of core.optimize\x27;transcribe "../stdlib/core/optimize.scm" . 813130))
         (push)
         (push.subr.gloc.of \x2E;list 2 "../stdlib/core/optimize.scm" . 813113)
         (iloc.0 . 4)
         (push.cons)
         (apply.iloc+ (1 . 0) "../stdlib/core/optimize.scm" . 811053))
       (ret.const.unspec))
     (push.iloc 4 . 0)
     (push.iloc 3 . 0)
     (push.iloc 4 . 1)
     (push.const)
     (push.const)
     (apply.iloc+ (0 . 0) "../stdlib/core/optimize.scm" . 793636))
   (push.close
     (2 0)
     (iloc.0 . 0)
     (if.null?
       (push.car.iloc (5 . 0) "../stdlib/core/optimize.scm" . 815144)
       (push.iloc.0 . 1)
       (push.iloc.1 . 0)
       (push.subr.gloc.of \x2E;cons* 3 "../stdlib/core/optimize.scm" . 815135)
       (extend . 1)
       (push.iloc.0 . 0)
       (iloc 6 . 0)
       (if.eq? (ret.iloc 0 . 0))
       (call
         (push.iloc.0 . 0)
         (push.iloc 6 . 0)
         (call
           (apply.gloc.of core.optimize\x27;annotate-hook "../stdlib/core/optimize.scm" . 815135))
         (apply))
       (ret.iloc 0 . 0))
     (push.car.iloc (5 . 0) "../stdlib/core/optimize.scm" . 817195)
     (const . let)
     (if.eq?
       (push.const . begin)
       (push.iloc.0 . 0)
       (push.car.iloc (5 . 0) "../stdlib/core/optimize.scm" . 818239)
       (push.iloc.0 . 1)
       (push.iloc.1 . 0)
       (push.subr.gloc.of \x2E;cons* 3 "../stdlib/core/optimize.scm" . 818214)
       (push.subr.gloc.of \x2E;list 1 "../stdlib/core/optimize.scm" . 818214)
       (subr.gloc.of \x2E;append 2 "../stdlib/core/optimize.scm" . 818214)
       (push.cons)
       (extend . 1)
       (push.iloc.0 . 0)
       (iloc 6 . 0)
       (if.eq? (ret.iloc 0 . 0))
       (call
         (push.iloc.0 . 0)
         (push.iloc 6 . 0)
         (call
           (apply.gloc.of core.optimize\x27;annotate-hook "../stdlib/core/optimize.scm" . 818214))
         (apply))
       (ret.iloc 0 . 0))
     (push.car.iloc (5 . 0) "../stdlib/core/optimize.scm" . 819243)
     (const . letrec*)
     (if.eq?
       (push.car.iloc (5 . 0) "../stdlib/core/optimize.scm" . 820271)
       (push.iloc.0 . 1)
       (push.iloc.0 . 0)
       (push.iloc.1 . 0)
       (push.subr.gloc.of \x2E;append 2 "../stdlib/core/optimize.scm" . 820262)
       (push.subr.gloc.of \x2E;cons* 3 "../stdlib/core/optimize.scm" . 820262)
       (extend . 1)
       (push.iloc.0 . 0)
       (iloc 6 . 0)
       (if.eq? (ret.iloc 0 . 0))
       (call
         (push.iloc.0 . 0)
         (push.iloc 6 . 0)
         (call
           (apply.gloc.of core.optimize\x27;annotate-hook "../stdlib/core/optimize.scm" . 820262))
         (apply))
       (ret.iloc 0 . 0))
     (push.const . "coreform-optimize")
     (push.const . "internal inconsistency in ~s")
     (push.gloc.of core.optimize\x27;transcribe-binding-construct)
     (push.subr.gloc.of \x2E;format 2 "../stdlib/core/optimize.scm" . 822351)
     (push.iloc 5 . 0)
     (apply.gloc.of \x2E;assertion-violation "../stdlib/core/optimize.scm" . 822310))
   (apply.gloc.of \x2E;call-with-values "../stdlib/core/optimize.scm" . 791572))
 (set.gloc.of core.optimize\x27;transcribe-binding-construct)
 (close
   (3 0 . core.optimize\x27;transcribe)
   (iloc.0 . 0)
   (if.pair?
     (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 838676)
     (extend . 1)
     (push.iloc.0 . 0)
     (push.const let letrec*)
     (subr.gloc.of \x2E;memq 2 "../stdlib/core/optimize.scm" . 838670)
     (if.true
       (push.iloc.1 . 0)
       (push.iloc.1 . 1)
       (push.iloc.1 . 2)
       (apply.gloc.of
         core.optimize\x27;transcribe-binding-construct
         "../stdlib/core/optimize.scm"
         .
         840721))
     (push.iloc.0 . 0)
     (push.const quote define lambda if)
     (subr.gloc.of \x2E;memq 2 "../stdlib/core/optimize.scm" . 838670)
     (if.true
       (call
         (iloc.1 . 0)
         (if.not.pair?.ret.const . #f)
         (cdr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 842769)
         (ret.pair? "../stdlib/core/optimize.scm" . 842769))
       (push)
       (extend . 1)
       (call
         (iloc.0 . 0)
         (if.false.ret)
         (cddr.iloc (2 . 0) "../stdlib/core/optimize.scm" . 842769)
         (if.not.null?.ret.const . #f)
         (push.car.iloc (2 . 0) "../stdlib/core/optimize.scm" . 842769)
         (const . quote)
         (ret.eq? "../stdlib/core/optimize.scm" . 842769))
       (if.true (ret.iloc 2 . 0))
       (call
         (iloc.0 . 0)
         (if.false.ret)
         (push.car.iloc (2 . 0) "../stdlib/core/optimize.scm" . 842769)
         (const . lambda)
         (ret.eq? "../stdlib/core/optimize.scm" . 842769))
       (if.true
         (push.cddr.iloc (2 . 0) "../stdlib/core/optimize.scm" . 842769)
         (push.cadr.iloc (2 . 0) "../stdlib/core/optimize.scm" . 842769)
         (extend . 2)
         (push.iloc 3 . 1)
         (push.iloc 3 . 0)
         (push.const . #f)
         (push.subr.gloc.of \x2E;core-hashtable-ref 3 "../stdlib/core/optimize.scm" . 842769)
         (extend . 1)
         (iloc.0 . 0)
         (if.true
           (push.iloc.0 . 0)
           (ret.subr.gloc.of \x2E;values "../stdlib/core/optimize.scm" . 842769))
         (call
           (push.iloc.1 . 0)
           (push.iloc 4 . 1)
           (push.iloc 4 . 2)
           (apply.gloc.of core.optimize\x27;transcribe-each "../stdlib/core/optimize.scm" . 842769))
         (push)
         (extend . 1)
         (push.iloc 2 . 0)
         (iloc.0 . 0)
         (if.eq? (ret.iloc 5 . 0))
         (call
           (push.const . lambda)
           (push.iloc 2 . 1)
           (push.iloc.0 . 0)
           (push.subr.gloc.of \x2E;cons* 3 "../stdlib/core/optimize.scm" . 842769)
           (extend . 1)
           (push.iloc.0 . 0)
           (iloc 6 . 0)
           (if.eq? (ret.iloc 0 . 0))
           (call
             (push.iloc.0 . 0)
             (push.iloc 6 . 0)
             (call
               (apply.gloc.of
                 core.optimize\x27;annotate-closure-hook
                 "../stdlib/core/optimize.scm"
                 .
                 842769))
             (apply))
           (ret.iloc 0 . 0))
         (push)
         (extend . 1)
         (push.iloc.0 . 0)
         (iloc 6 . 0)
         (if.eq? (ret.iloc 0 . 0))
         (call
           (push.iloc.0 . 0)
           (push.iloc 6 . 0)
           (call
             (apply.gloc.of core.optimize\x27;annotate-hook "../stdlib/core/optimize.scm" . 842769))
           (apply))
         (ret.iloc 0 . 0))
       (call
         (iloc.0 . 0)
         (if.false.ret)
         (cddr.iloc (2 . 0) "../stdlib/core/optimize.scm" . 842769)
         (if.not.pair?.ret.const . #f)
         (push.iloc 2 . 0)
         (subr.gloc.of caddr 1 "../stdlib/core/optimize.scm" . 842769)
         (if.not.pair?.ret.const . #f)
         (push.iloc 2 . 0)
         (subr.gloc.of cdaddr 1 "../stdlib/core/optimize.scm" . 842769)
         (if.not.pair?.ret.const . #f)
         (push.iloc 2 . 0)
         (subr.gloc.of cdddr 1 "../stdlib/core/optimize.scm" . 842769)
         (if.not.null?.ret.const . #f)
         (push.car.iloc (2 . 0) "../stdlib/core/optimize.scm" . 842769)
         (const . define)
         (if.not.eq?.ret.const . #f)
         (push.iloc 2 . 0)
         (push.subr.gloc.of caaddr 1 "../stdlib/core/optimize.scm" . 842769)
         (const . lambda)
         (ret.eq? "../stdlib/core/optimize.scm" . 842769))
       (if.true
         (push.iloc 2 . 0)
         (push.subr.gloc.of cdaddr 1 "../stdlib/core/optimize.scm" . 842769)
         (push.subr.gloc.of cdr 1 "../stdlib/core/optimize.scm" . 842769)
         (push.iloc 2 . 0)
         (push.subr.gloc.of cdaddr 1 "../stdlib/core/optimize.scm" . 842769)
         (push.subr.gloc.of car 1 "../stdlib/core/optimize.scm" . 842769)
         (push.cadr.iloc (2 . 0) "../stdlib/core/optimize.scm" . 842769)
         (extend . 3)
         (call
           (push.iloc.0 . 0)
           (push.iloc 3 . 1)
           (push.iloc 3 . 2)
           (apply.gloc.of core.optimize\x27;transcribe-each "../stdlib/core/optimize.scm" . 842769))
         (push)
         (extend . 1)
         (push.iloc.1 . 0)
         (iloc.0 . 0)
         (if.eq? (ret.iloc 4 . 0))
         (push.const . define)
         (push.iloc.1 . 2)
         (call
           (push.const . lambda)
           (push.iloc.1 . 1)
           (push.iloc.0 . 0)
           (push.subr.gloc.of \x2E;cons* 3 "../stdlib/core/optimize.scm" . 842769)
           (push.iloc 4 . 0)
           (push.subr.gloc.of \x2E;caddr 1 "../stdlib/core/optimize.scm" . 842769)
           (extend . 2)
           (push.iloc.0 . 0)
           (iloc.0 . 1)
           (if.eq? (ret.iloc 0 . 0))
           (call
             (push.iloc.0 . 0)
             (push.iloc.0 . 1)
             (call
               (apply.gloc.of
                 core.optimize\x27;annotate-closure-hook
                 "../stdlib/core/optimize.scm"
                 .
                 842769))
             (apply))
           (ret.iloc 0 . 0))
         (push)
         (push.subr.gloc.of \x2E;list 3 "../stdlib/core/optimize.scm" . 842769)
         (extend . 1)
         (push.iloc.0 . 0)
         (iloc 5 . 0)
         (if.eq? (ret.iloc 0 . 0))
         (call
           (push.iloc.0 . 0)
           (push.iloc 5 . 0)
           (call
             (apply.gloc.of core.optimize\x27;annotate-hook "../stdlib/core/optimize.scm" . 842769))
           (apply))
         (ret.iloc 0 . 0))
       (call
         (push.iloc 2 . 0)
         (push.iloc 2 . 1)
         (push.iloc 2 . 2)
         (apply.gloc.of core.optimize\x27;transcribe-each "../stdlib/core/optimize.scm" . 842769))
       (push)
       (extend . 1)
       (push.iloc.0 . 0)
       (iloc 3 . 0)
       (if.eq? (ret.iloc 0 . 0))
       (call
         (push.iloc.0 . 0)
         (push.iloc 3 . 0)
         (call
           (apply.gloc.of core.optimize\x27;annotate-hook "../stdlib/core/optimize.scm" . 842769))
         (apply))
       (ret.iloc 0 . 0))
     (call
       (push.iloc.1 . 0)
       (push.iloc.1 . 1)
       (push.iloc.1 . 2)
       (apply.gloc.of core.optimize\x27;transcribe-each "../stdlib/core/optimize.scm" . 861207))
     (push)
     (extend . 1)
     (push.iloc.0 . 0)
     (iloc 2 . 0)
     (if.eq? (ret.iloc 0 . 0))
     (call
       (push.iloc.0 . 0)
       (push.iloc 2 . 0)
       (call (apply.gloc.of core.optimize\x27;annotate-hook "../stdlib/core/optimize.scm" . 861207))
       (apply))
     (ret.iloc 0 . 0))
   (iloc.0 . 0)
   (if.symbol?
     (push.iloc.0 . 2)
     (push.iloc.0 . 0)
     (push.const . #f)
     (subr.gloc.of \x2E;core-hashtable-ref 3 "../stdlib/core/optimize.scm" . 863250)
     (if.true.ret)
     (ret.iloc 0 . 0))
   (ret.iloc 0 . 0))
 (set.gloc.of core.optimize\x27;transcribe)
 (close
   (1 0 . core.optimize\x27;self-evaluation?)
   (push.iloc.0 . 0)
   (subr.gloc.of \x2E;number? 1 "../stdlib/core/optimize.scm" . 868363)
   (if.true.ret)
   (push.iloc.0 . 0)
   (subr.gloc.of \x2E;boolean? 1 "../stdlib/core/optimize.scm" . 868375)
   (if.true.ret)
   (push.iloc.0 . 0)
   (subr.gloc.of \x2E;char? 1 "../stdlib/core/optimize.scm" . 868388)
   (if.true.ret)
   (push.iloc.0 . 0)
   (subr.gloc.of \x2E;string? 1 "../stdlib/core/optimize.scm" . 868398)
   (if.true.ret)
   (push.iloc.0 . 0)
   (ret.subr.gloc.of \x2E;bytevector? "../stdlib/core/optimize.scm" . 868410))
 (set.gloc.of core.optimize\x27;self-evaluation?)
 (close
   (1 0 . core.optimize\x27;pretty-each)
   (touch.gloc.of loop\x60;436)
   (push.iloc.0 . 0)
   (apply.gloc.of loop\x60;436 "../stdlib/core/optimize.scm" . 872455))
 (set.gloc.of core.optimize\x27;pretty-each)
 (close
   (1 0 . core.optimize\x27;pretty)
   (extend.enclose
     (1 0)
     (push.gloc.of core.optimize\x27;limit-arguments)
     (push.const . 1)
     (push.subr.gloc.of \x2E;- 2 "../stdlib/core/optimize.scm" . 911385)
     (extend . 1)
     (call
       (extend.enclose+
         (2 0 . loop)
         (push.iloc.0 . 1)
         (subr.gloc.of \x2E;length 1 "../stdlib/core/optimize.scm" . 913444)
         (>.iloc (2 . 0) "../stdlib/core/optimize.scm" . 913441)
         (if.true
           (push.iloc.0 . 1)
           (push.iloc 2 . 0)
           (push.subr.gloc.of \x2E;list-head 2 "../stdlib/core/optimize.scm" . 914477)
           (iloc.0 . 0)
           (push.cons)
           (push.iloc.0 . 1)
           (push.iloc 2 . 0)
           (push.subr.gloc.of \x2E;list-tail 2 "../stdlib/core/optimize.scm" . 915495)
           (apply.iloc+ (1 . 0) "../stdlib/core/optimize.scm" . 914465))
         (push.iloc.0 . 1)
         (iloc.0 . 0)
         (push.cons)
         (ret.subr.gloc.of \x2E;reverse "../stdlib/core/optimize.scm" . 916518))
       (push.const)
       (push.cdr.iloc (2 . 0) "../stdlib/core/optimize.scm" . 912435)
       (apply.iloc+ (0 . 0) "../stdlib/core/optimize.scm" . 912408))
     (push)
     (extend . 1)
     (call
       (car.iloc (2 . 0) "../stdlib/core/optimize.scm" . 917535)
       (if.not.symbol?.ret.const . #f)
       (push.car.iloc (2 . 0) "../stdlib/core/optimize.scm" . 918568)
       (subr.gloc.of \x2E;top-level-bound? 1 "../stdlib/core/optimize.scm" . 918550)
       (if.false.ret)
       (push.car.iloc (2 . 0) "../stdlib/core/optimize.scm" . 919596)
       (push.subr.gloc.of \x2E;top-level-value 1 "../stdlib/core/optimize.scm" . 919579)
       (push.const . \x2E;list)
       (subr.gloc.of \x2E;top-level-value 1 "../stdlib/core/optimize.scm" . 919608)
       (ret.eq? "../stdlib/core/optimize.scm" . 919574))
     (if.true
       (call
         (push.const . \x2E;append)
         (call
           (push.gloc.of \x2E;fn67.1\x60;67)
           (push.iloc.0 . 0)
           (apply.gloc.of \x2E;map "../stdlib/core/optimize.scm" . 920619))
         (push.cons)
         (apply.gloc.of core.optimize\x27;pretty "../stdlib/core/optimize.scm" . 920599))
       (push)
       (extend . 1)
       (push.iloc.0 . 0)
       (iloc 5 . 0)
       (if.eq? (ret.iloc 0 . 0))
       (call
         (push.iloc.0 . 0)
         (push.iloc 5 . 0)
         (call
           (apply.gloc.of core.optimize\x27;annotate-hook "../stdlib/core/optimize.scm" . 920599))
         (apply))
       (ret.iloc 0 . 0))
     (call
       (push.const . \x2E;apply)
       (push.car.iloc (2 . 0) "../stdlib/core/optimize.scm" . 921641)
       (push.const . \x2E;append)
       (call
         (push.gloc.of \x2E;fn75.1\x60;75)
         (push.iloc.0 . 0)
         (apply.gloc.of \x2E;map "../stdlib/core/optimize.scm" . 921663))
       (push.cons)
       (push.subr.gloc.of \x2E;list 3 "../stdlib/core/optimize.scm" . 921623)
       (apply.gloc.of core.optimize\x27;pretty "../stdlib/core/optimize.scm" . 921623))
     (push)
     (extend . 1)
     (push.iloc.0 . 0)
     (iloc 5 . 0)
     (if.eq? (ret.iloc 0 . 0))
     (call
       (push.iloc.0 . 0)
       (push.iloc 5 . 0)
       (call (apply.gloc.of core.optimize\x27;annotate-hook "../stdlib/core/optimize.scm" . 921623))
       (apply))
     (ret.iloc 0 . 0))
   (iloc.1 . 0)
   (if.pair?
     (car.iloc (1 . 0) "../stdlib/core/optimize.scm" . 924694)
     (if.pair?
       (call
         (iloc.1 . 0)
         (if.not.pair?.ret.const . #f)
         (car.iloc (1 . 0) "../stdlib/core/optimize.scm" . 924683)
         (if.not.pair?.ret.const . #f)
         (push.iloc.1 . 0)
         (subr.gloc.of cdar 1 "../stdlib/core/optimize.scm" . 924683)
         (if.not.pair?.ret.const . #f)
         (push.iloc.1 . 0)
         (push.subr.gloc.of cadar 1 "../stdlib/core/optimize.scm" . 924683)
         (subr.gloc.of list? 1 "../stdlib/core/optimize.scm" . 924683)
         (if.false.ret)
         (push.iloc.1 . 0)
         (push.subr.gloc.of caar 1 "../stdlib/core/optimize.scm" . 924683)
         (const . lambda)
         (if.not.eq?.ret.const . #f)
         (push.iloc.1 . 0)
         (push.subr.gloc.of cadar 1 "../stdlib/core/optimize.scm" . 924683)
         (push.subr.gloc.of \x2E;length 1 "../stdlib/core/optimize.scm" . 924683)
         (push.cdr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 924683)
         (push.subr.gloc.of \x2E;length 1 "../stdlib/core/optimize.scm" . 924683)
         (ret.subr.gloc.of \x2E;= "../stdlib/core/optimize.scm" . 924683))
       (if.true
         (push.const . let)
         (call
           (push.gloc.of \x2E;list)
           (push.iloc.1 . 0)
           (push.subr.gloc.of cadar 1 "../stdlib/core/optimize.scm" . 924683)
           (call
             (push.cdr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 924683)
             (apply.gloc.of core.optimize\x27;pretty-each "../stdlib/core/optimize.scm" . 924683))
           (push)
           (apply.gloc.of \x2E;map "../stdlib/core/optimize.scm" . 924683))
         (push)
         (call
           (call
             (push.iloc.1 . 0)
             (push.subr.gloc.of cddar 1 "../stdlib/core/optimize.scm" . 924683)
             (apply.gloc.of core.optimize\x27;pretty-each "../stdlib/core/optimize.scm" . 924683))
           (push)
           (apply.gloc.of core.optimize\x27;flatten-begin "../stdlib/core/optimize.scm" . 924683))
         (push)
         (push.subr.gloc.of \x2E;cons* 3 "../stdlib/core/optimize.scm" . 924683)
         (extend . 1)
         (push.iloc.0 . 0)
         (iloc 2 . 0)
         (if.eq? (ret.iloc 0 . 0))
         (call
           (push.iloc.0 . 0)
           (push.iloc 2 . 0)
           (call
             (apply.gloc.of core.optimize\x27;annotate-hook "../stdlib/core/optimize.scm" . 924683))
           (apply))
         (ret.iloc 0 . 0))
       (push.iloc.1 . 0)
       (push.subr.gloc.of \x2E;length 1 "../stdlib/core/optimize.scm" . 924683)
       (push.gloc.of core.optimize\x27;limit-arguments)
       (subr.gloc.of \x2E;> 2 "../stdlib/core/optimize.scm" . 924683)
       (if.true (push.iloc.1 . 0) (apply.iloc (0 . 0) "../stdlib/core/optimize.scm" . 924683))
       (push.iloc.1 . 0)
       (apply.gloc.of core.optimize\x27;pretty-each "../stdlib/core/optimize.scm" . 924683))
     (push.car.iloc (1 . 0) "../stdlib/core/optimize.scm" . 934933)
     (extend . 1)
     (push.iloc.0 . 0)
     (const . and)
     (if.eq?
       (cdr.iloc (2 . 0) "../stdlib/core/optimize.scm" . 936992)
       (if.null?.ret.const . #t)
       (cddr.iloc (2 . 0) "../stdlib/core/optimize.scm" . 938016)
       (if.null?
         (push.cadr.iloc (2 . 0) "../stdlib/core/optimize.scm" . 938035)
         (extend . 1)
         (push.iloc.0 . 0)
         (iloc 3 . 0)
         (if.eq? (ret.iloc 0 . 0))
         (call
           (push.iloc.0 . 0)
           (push.iloc 3 . 0)
           (call
             (apply.gloc.of core.optimize\x27;annotate-hook "../stdlib/core/optimize.scm" . 938035))
           (apply))
         (ret.iloc 0 . 0))
       (call
         (push.cdr.iloc (2 . 0) "../stdlib/core/optimize.scm" . 940081)
         (apply.gloc.of core.optimize\x27;pretty-each "../stdlib/core/optimize.scm" . 940068))
       (push)
       (extend . 1)
       (push.iloc.0 . 0)
       (cdr.iloc (3 . 0) "../stdlib/core/optimize.scm" . 941099)
       (if.eq?
         (call
           (touch.gloc.of flatten-expression\x60;443)
           (push.iloc 3 . 0)
           (push.const . and)
           (apply.gloc.of flatten-expression\x60;443 "../stdlib/core/optimize.scm" . 942120))
         (push)
         (extend . 1)
         (push.iloc.0 . 0)
         (iloc 4 . 0)
         (if.eq? (ret.iloc 0 . 0))
         (call
           (push.iloc.0 . 0)
           (push.iloc 4 . 0)
           (call
             (apply.gloc.of core.optimize\x27;annotate-hook "../stdlib/core/optimize.scm" . 942120))
           (apply))
         (ret.iloc 0 . 0))
       (call
         (touch.gloc.of flatten-expression\x60;443)
         (push.const . and)
         (iloc.0 . 0)
         (push.cons)
         (push.const . and)
         (apply.gloc.of flatten-expression\x60;443 "../stdlib/core/optimize.scm" . 944168))
       (push)
       (extend . 1)
       (push.iloc.0 . 0)
       (iloc 4 . 0)
       (if.eq? (ret.iloc 0 . 0))
       (call
         (push.iloc.0 . 0)
         (push.iloc 4 . 0)
         (call
           (apply.gloc.of core.optimize\x27;annotate-hook "../stdlib/core/optimize.scm" . 944168))
         (apply))
       (ret.iloc 0 . 0))
     (push.iloc.0 . 0)
     (const . or)
     (if.eq?
       (cdr.iloc (2 . 0) "../stdlib/core/optimize.scm" . 946208)
       (if.null?.ret.const . #f)
       (cddr.iloc (2 . 0) "../stdlib/core/optimize.scm" . 947232)
       (if.null?
         (push.cadr.iloc (2 . 0) "../stdlib/core/optimize.scm" . 947251)
         (extend . 1)
         (push.iloc.0 . 0)
         (iloc 3 . 0)
         (if.eq? (ret.iloc 0 . 0))
         (call
           (push.iloc.0 . 0)
           (push.iloc 3 . 0)
           (call
             (apply.gloc.of core.optimize\x27;annotate-hook "../stdlib/core/optimize.scm" . 947251))
           (apply))
         (ret.iloc 0 . 0))
       (call
         (push.cdr.iloc (2 . 0) "../stdlib/core/optimize.scm" . 949297)
         (apply.gloc.of core.optimize\x27;pretty-each "../stdlib/core/optimize.scm" . 949284))
       (push)
       (extend . 1)
       (push.iloc.0 . 0)
       (cdr.iloc (3 . 0) "../stdlib/core/optimize.scm" . 950315)
       (if.eq?
         (call
           (touch.gloc.of flatten-expression\x60;443)
           (push.iloc 3 . 0)
           (push.const . or)
           (apply.gloc.of flatten-expression\x60;443 "../stdlib/core/optimize.scm" . 951336))
         (push)
         (extend . 1)
         (push.iloc.0 . 0)
         (iloc 4 . 0)
         (if.eq? (ret.iloc 0 . 0))
         (call
           (push.iloc.0 . 0)
           (push.iloc 4 . 0)
           (call
             (apply.gloc.of core.optimize\x27;annotate-hook "../stdlib/core/optimize.scm" . 951336))
           (apply))
         (ret.iloc 0 . 0))
       (call
         (touch.gloc.of flatten-expression\x60;443)
         (push.const . or)
         (iloc.0 . 0)
         (push.cons)
         (push.const . or)
         (apply.gloc.of flatten-expression\x60;443 "../stdlib/core/optimize.scm" . 953384))
       (push)
       (extend . 1)
       (push.iloc.0 . 0)
       (iloc 4 . 0)
       (if.eq? (ret.iloc 0 . 0))
       (call
         (push.iloc.0 . 0)
         (push.iloc 4 . 0)
         (call
           (apply.gloc.of core.optimize\x27;annotate-hook "../stdlib/core/optimize.scm" . 953384))
         (apply))
       (ret.iloc 0 . 0))
     (push.iloc.0 . 0)
     (push.const quote begin lambda let letrec* if)
     (subr.gloc.of \x2E;memq 2 "../stdlib/core/optimize.scm" . 934927)
     (if.true
       (call
         (iloc 2 . 0)
         (if.not.pair?.ret.const . #f)
         (cdr.iloc (2 . 0) "../stdlib/core/optimize.scm" . 955410)
         (ret.pair? "../stdlib/core/optimize.scm" . 955410))
       (push)
       (extend . 1)
       (call
         (iloc.0 . 0)
         (if.false.ret)
         (cadr.iloc (3 . 0) "../stdlib/core/optimize.scm" . 955410)
         (ret.pair? "../stdlib/core/optimize.scm" . 955410))
       (push)
       (extend . 1)
       (call
         (iloc.1 . 0)
         (if.false.ret)
         (cddr.iloc (4 . 0) "../stdlib/core/optimize.scm" . 955410)
         (if.not.pair?.ret.const . #f)
         (push.car.iloc (4 . 0) "../stdlib/core/optimize.scm" . 955410)
         (const . if)
         (ret.eq? "../stdlib/core/optimize.scm" . 955410))
       (push)
       (extend . 1)
       (call
         (iloc 2 . 0)
         (if.false.ret)
         (cddr.iloc (5 . 0) "../stdlib/core/optimize.scm" . 955410)
         (if.not.null?.ret.const . #f)
         (push.car.iloc (5 . 0) "../stdlib/core/optimize.scm" . 955410)
         (const . quote)
         (ret.eq? "../stdlib/core/optimize.scm" . 955410))
       (if.true
         (call
           (push.cadr.iloc (5 . 0) "../stdlib/core/optimize.scm" . 955410)
           (apply.gloc.of
             core.optimize\x27;self-evaluation?
             "../stdlib/core/optimize.scm"
             .
             955410))
         (if.true (push.iloc 5 . 0) (ret.subr.gloc.of cadr "../stdlib/core/optimize.scm" . 955410))
         (ret.iloc 5 . 0))
       (call
         (iloc 5 . 0)
         (if.not.pair?.ret.const . #f)
         (push.car.iloc (5 . 0) "../stdlib/core/optimize.scm" . 955410)
         (const . begin)
         (ret.eq? "../stdlib/core/optimize.scm" . 955410))
       (if.true
         (push.cdr.iloc (5 . 0) "../stdlib/core/optimize.scm" . 955410)
         (extend . 1)
         (iloc.0 . 0)
         (if.null? (ret.iloc 6 . 0))
         (call
           (iloc.0 . 0)
           (if.not.pair?.ret.const . #f)
           (cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 955410)
           (ret.null? "../stdlib/core/optimize.scm" . 955410))
         (if.true
           (push.iloc.0 . 0)
           (ret.subr.gloc.of \x2E;car "../stdlib/core/optimize.scm" . 955410))
         (call
           (call
             (push.iloc.0 . 0)
             (apply.gloc.of core.optimize\x27;pretty-each "../stdlib/core/optimize.scm" . 955410))
           (push)
           (apply.gloc.of core.optimize\x27;flatten-begin "../stdlib/core/optimize.scm" . 955410))
         (push)
         (extend . 1)
         (push.iloc.0 . 0)
         (iloc.1 . 0)
         (if.eq? (ret.iloc 7 . 0))
         (push.const . begin)
         (iloc.0 . 0)
         (push.cons)
         (extend . 1)
         (push.iloc.0 . 0)
         (iloc 8 . 0)
         (if.eq? (ret.iloc 0 . 0))
         (call
           (push.iloc.0 . 0)
           (push.iloc 8 . 0)
           (call
             (apply.gloc.of core.optimize\x27;annotate-hook "../stdlib/core/optimize.scm" . 955410))
           (apply))
         (ret.iloc 0 . 0))
       (call
         (iloc 2 . 0)
         (if.false.ret)
         (push.car.iloc (5 . 0) "../stdlib/core/optimize.scm" . 955410)
         (const . lambda)
         (ret.eq? "../stdlib/core/optimize.scm" . 955410))
       (if.true
         (push.cddr.iloc (5 . 0) "../stdlib/core/optimize.scm" . 955410)
         (push.cadr.iloc (5 . 0) "../stdlib/core/optimize.scm" . 955410)
         (extend . 2)
         (call
           (call
             (push.iloc.0 . 0)
             (apply.gloc.of core.optimize\x27;pretty-each "../stdlib/core/optimize.scm" . 955410))
           (push)
           (apply.gloc.of core.optimize\x27;flatten-begin "../stdlib/core/optimize.scm" . 955410))
         (push)
         (extend . 1)
         (push.iloc.0 . 0)
         (iloc.1 . 0)
         (if.eq? (ret.iloc 7 . 0))
         (call
           (push.const . lambda)
           (push.iloc.1 . 1)
           (push.iloc.0 . 0)
           (push.subr.gloc.of \x2E;cons* 3 "../stdlib/core/optimize.scm" . 955410)
           (extend . 1)
           (push.iloc.0 . 0)
           (iloc 8 . 0)
           (if.eq? (ret.iloc 0 . 0))
           (call
             (push.iloc.0 . 0)
             (push.iloc 8 . 0)
             (call
               (apply.gloc.of
                 core.optimize\x27;annotate-closure-hook
                 "../stdlib/core/optimize.scm"
                 .
                 955410))
             (apply))
           (ret.iloc 0 . 0))
         (push)
         (extend . 1)
         (push.iloc.0 . 0)
         (iloc 8 . 0)
         (if.eq? (ret.iloc 0 . 0))
         (call
           (push.iloc.0 . 0)
           (push.iloc 8 . 0)
           (call
             (apply.gloc.of core.optimize\x27;annotate-hook "../stdlib/core/optimize.scm" . 955410))
           (apply))
         (ret.iloc 0 . 0))
       (call
         (iloc 2 . 0)
         (if.false.ret)
         (push.car.iloc (5 . 0) "../stdlib/core/optimize.scm" . 955410)
         (const . let)
         (ret.eq? "../stdlib/core/optimize.scm" . 955410))
       (if.true
         (push.cddr.iloc (5 . 0) "../stdlib/core/optimize.scm" . 955410)
         (push.cadr.iloc (5 . 0) "../stdlib/core/optimize.scm" . 955410)
         (extend . 2)
         (iloc.0 . 1)
         (if.null?
           (push.const . begin)
           (call
             (push.iloc.0 . 0)
             (apply.gloc.of core.optimize\x27;flatten-begin "../stdlib/core/optimize.scm" . 955410))
           (push.cons)
           (extend . 1)
           (push.iloc.0 . 0)
           (iloc 7 . 0)
           (if.eq? (ret.iloc 0 . 0))
           (call
             (push.iloc.0 . 0)
             (push.iloc 7 . 0)
             (call
               (apply.gloc.of
                 core.optimize\x27;annotate-hook
                 "../stdlib/core/optimize.scm"
                 .
                 955410))
             (apply))
           (ret.iloc 0 . 0))
         (call
           (push.gloc.of \x2E;cadr)
           (push.iloc.0 . 1)
           (apply.gloc.of \x2E;map "../stdlib/core/optimize.scm" . 955410))
         (push)
         (extend . 1)
         (call
           (push.iloc.0 . 0)
           (apply.gloc.of core.optimize\x27;pretty-each "../stdlib/core/optimize.scm" . 955410))
         (push)
         (call
           (call
             (push.iloc.1 . 0)
             (apply.gloc.of core.optimize\x27;pretty-each "../stdlib/core/optimize.scm" . 955410))
           (push)
           (apply.gloc.of core.optimize\x27;flatten-begin "../stdlib/core/optimize.scm" . 955410))
         (push)
         (extend . 2)
         (call
           (push.iloc 2 . 0)
           (iloc.0 . 1)
           (if.not.eq?.ret.const . #f)
           (push.gloc.of \x2E;eq?)
           (push.iloc.1 . 0)
           (push.iloc.0 . 0)
           (apply.gloc.of core.lists\x27;for-all "../stdlib/core/optimize.scm" . 955410))
         (if.true (ret.iloc 8 . 0))
         (push.const . let)
         (call
           (push.gloc.of \x2E;list)
           (call
             (push.gloc.of \x2E;car)
             (push.iloc 2 . 1)
             (apply.gloc.of \x2E;map "../stdlib/core/optimize.scm" . 955410))
           (push)
           (push.iloc.0 . 0)
           (apply.gloc.of \x2E;map "../stdlib/core/optimize.scm" . 955410))
         (push)
         (push.iloc.0 . 1)
         (push.subr.gloc.of \x2E;cons* 3 "../stdlib/core/optimize.scm" . 955410)
         (extend . 1)
         (push.iloc.0 . 0)
         (iloc 9 . 0)
         (if.eq? (ret.iloc 0 . 0))
         (call
           (push.iloc.0 . 0)
           (push.iloc 9 . 0)
           (call
             (apply.gloc.of core.optimize\x27;annotate-hook "../stdlib/core/optimize.scm" . 955410))
           (apply))
         (ret.iloc 0 . 0))
       (call
         (iloc 2 . 0)
         (if.false.ret)
         (push.car.iloc (5 . 0) "../stdlib/core/optimize.scm" . 955410)
         (const . letrec*)
         (ret.eq? "../stdlib/core/optimize.scm" . 955410))
       (if.true
         (push.cddr.iloc (5 . 0) "../stdlib/core/optimize.scm" . 955410)
         (push.cadr.iloc (5 . 0) "../stdlib/core/optimize.scm" . 955410)
         (extend . 2)
         (iloc.0 . 1)
         (if.null?
           (push.const . begin)
           (call
             (push.iloc.0 . 0)
             (apply.gloc.of core.optimize\x27;flatten-begin "../stdlib/core/optimize.scm" . 955410))
           (push.cons)
           (extend . 1)
           (push.iloc.0 . 0)
           (iloc 7 . 0)
           (if.eq? (ret.iloc 0 . 0))
           (call
             (push.iloc.0 . 0)
             (push.iloc 7 . 0)
             (call
               (apply.gloc.of
                 core.optimize\x27;annotate-hook
                 "../stdlib/core/optimize.scm"
                 .
                 955410))
             (apply))
           (ret.iloc 0 . 0))
         (call
           (push.gloc.of \x2E;cadr)
           (push.iloc.0 . 1)
           (apply.gloc.of \x2E;map "../stdlib/core/optimize.scm" . 955410))
         (push)
         (extend . 1)
         (call
           (push.iloc.0 . 0)
           (apply.gloc.of core.optimize\x27;pretty-each "../stdlib/core/optimize.scm" . 955410))
         (push)
         (call
           (call
             (push.iloc.1 . 0)
             (apply.gloc.of core.optimize\x27;pretty-each "../stdlib/core/optimize.scm" . 955410))
           (push)
           (apply.gloc.of core.optimize\x27;flatten-begin "../stdlib/core/optimize.scm" . 955410))
         (push)
         (extend . 2)
         (call
           (push.iloc 2 . 0)
           (iloc.0 . 1)
           (if.not.eq?.ret.const . #f)
           (push.gloc.of \x2E;eq?)
           (push.iloc.1 . 0)
           (push.iloc.0 . 0)
           (apply.gloc.of core.lists\x27;for-all "../stdlib/core/optimize.scm" . 955410))
         (if.true (ret.iloc 8 . 0))
         (push.const . letrec*)
         (call
           (push.gloc.of \x2E;list)
           (call
             (push.gloc.of \x2E;car)
             (push.iloc 2 . 1)
             (apply.gloc.of \x2E;map "../stdlib/core/optimize.scm" . 955410))
           (push)
           (push.iloc.0 . 0)
           (apply.gloc.of \x2E;map "../stdlib/core/optimize.scm" . 955410))
         (push)
         (push.iloc.0 . 1)
         (push.subr.gloc.of \x2E;cons* 3 "../stdlib/core/optimize.scm" . 955410)
         (extend . 1)
         (push.iloc.0 . 0)
         (iloc 9 . 0)
         (if.eq? (ret.iloc 0 . 0))
         (call
           (push.iloc.0 . 0)
           (push.iloc 9 . 0)
           (call
             (apply.gloc.of core.optimize\x27;annotate-hook "../stdlib/core/optimize.scm" . 955410))
           (apply))
         (ret.iloc 0 . 0))
       (call
         (iloc.1 . 0)
         (if.false.ret)
         (cddr.iloc (5 . 0) "../stdlib/core/optimize.scm" . 955410)
         (if.not.pair?.ret.const . #f)
         (push.iloc 5 . 0)
         (subr.gloc.of cdddr 1 "../stdlib/core/optimize.scm" . 955410)
         (if.not.pair?.ret.const . #f)
         (push.iloc 5 . 0)
         (subr.gloc.of cddddr 1 "../stdlib/core/optimize.scm" . 955410)
         (if.not.null?.ret.const . #f)
         (push.car.iloc (5 . 0) "../stdlib/core/optimize.scm" . 955410)
         (const . if)
         (if.not.eq?.ret.const . #f)
         (push.iloc 5 . 0)
         (push.subr.gloc.of caadr 1 "../stdlib/core/optimize.scm" . 955410)
         (const . and)
         (if.not.eq?.ret.const . #f)
         (push.iloc 5 . 0)
         (push.subr.gloc.of cadddr 1 "../stdlib/core/optimize.scm" . 955410)
         (const . #f)
         (ret.eq? "../stdlib/core/optimize.scm" . 955410))
       (if.true
         (push.iloc 5 . 0)
         (push.subr.gloc.of caddr 1 "../stdlib/core/optimize.scm" . 955410)
         (extend . 1)
         (call
           (touch.gloc.of flatten-expression\x60;443)
           (push.const . and)
           (call
             (push.iloc 6 . 0)
             (push.subr.gloc.of cdadr 1 "../stdlib/core/optimize.scm" . 955410)
             (apply.gloc.of core.optimize\x27;pretty-each "../stdlib/core/optimize.scm" . 955410))
           (push)
           (call
             (push.iloc.0 . 0)
             (apply.gloc.of core.optimize\x27;pretty "../stdlib/core/optimize.scm" . 955410))
           (push)
           (push.subr.gloc.of \x2E;list 1 "../stdlib/core/optimize.scm" . 955410)
           (subr.gloc.of \x2E;append 2 "../stdlib/core/optimize.scm" . 955410)
           (push.cons)
           (push.const . and)
           (apply.gloc.of flatten-expression\x60;443 "../stdlib/core/optimize.scm" . 955410))
         (push)
         (extend . 1)
         (push.iloc.0 . 0)
         (iloc 7 . 0)
         (if.eq? (ret.iloc 0 . 0))
         (call
           (push.iloc.0 . 0)
           (push.iloc 7 . 0)
           (call
             (apply.gloc.of core.optimize\x27;annotate-hook "../stdlib/core/optimize.scm" . 955410))
           (apply))
         (ret.iloc 0 . 0))
       (call
         (iloc.0 . 0)
         (if.false.ret)
         (push.cadr.iloc (5 . 0) "../stdlib/core/optimize.scm" . 955410)
         (const . #t)
         (ret.eq? "../stdlib/core/optimize.scm" . 955410))
       (if.true
         (call
           (push.iloc 5 . 0)
           (push.subr.gloc.of caddr 1 "../stdlib/core/optimize.scm" . 955410)
           (apply.gloc.of core.optimize\x27;pretty "../stdlib/core/optimize.scm" . 955410))
         (push)
         (extend . 1)
         (push.iloc.0 . 0)
         (iloc 6 . 0)
         (if.eq? (ret.iloc 0 . 0))
         (call
           (push.iloc.0 . 0)
           (push.iloc 6 . 0)
           (call
             (apply.gloc.of core.optimize\x27;annotate-hook "../stdlib/core/optimize.scm" . 955410))
           (apply))
         (ret.iloc 0 . 0))
       (call
         (iloc.0 . 0)
         (if.false.ret)
         (push.cadr.iloc (5 . 0) "../stdlib/core/optimize.scm" . 955410)
         (const . #f)
         (ret.eq? "../stdlib/core/optimize.scm" . 955410))
       (if.true
         (push.iloc 5 . 0)
         (push.subr.gloc.of cdddr 1 "../stdlib/core/optimize.scm" . 955410)
         (extend . 1)
         (iloc.0 . 0)
         (if.null?
           (push.const \x2E;unspecified)
           (extend . 1)
           (push.iloc.0 . 0)
           (iloc 7 . 0)
           (if.eq? (ret.iloc 0 . 0))
           (call
             (push.iloc.0 . 0)
             (push.iloc 7 . 0)
             (call
               (apply.gloc.of
                 core.optimize\x27;annotate-hook
                 "../stdlib/core/optimize.scm"
                 .
                 955410))
             (apply))
           (ret.iloc 0 . 0))
         (call
           (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 955410)
           (apply.gloc.of core.optimize\x27;pretty "../stdlib/core/optimize.scm" . 955410))
         (push)
         (extend . 1)
         (push.iloc.0 . 0)
         (iloc 7 . 0)
         (if.eq? (ret.iloc 0 . 0))
         (call
           (push.iloc.0 . 0)
           (push.iloc 7 . 0)
           (call
             (apply.gloc.of core.optimize\x27;annotate-hook "../stdlib/core/optimize.scm" . 955410))
           (apply))
         (ret.iloc 0 . 0))
       (call
         (iloc.1 . 0)
         (if.false.ret)
         (push.iloc 5 . 0)
         (subr.gloc.of cdadr 1 "../stdlib/core/optimize.scm" . 955410)
         (if.not.pair?.ret.const . #f)
         (cddr.iloc (5 . 0) "../stdlib/core/optimize.scm" . 955410)
         (if.not.pair?.ret.const . #f)
         (push.iloc 5 . 0)
         (subr.gloc.of cdddr 1 "../stdlib/core/optimize.scm" . 955410)
         (if.not.pair?.ret.const . #f)
         (push.iloc 5 . 0)
         (subr.gloc.of cddadr 1 "../stdlib/core/optimize.scm" . 955410)
         (if.not.null?.ret.const . #f)
         (push.iloc 5 . 0)
         (subr.gloc.of cddddr 1 "../stdlib/core/optimize.scm" . 955410)
         (if.not.null?.ret.const . #f)
         (push.car.iloc (5 . 0) "../stdlib/core/optimize.scm" . 955410)
         (const . if)
         (if.not.eq?.ret.const . #f)
         (push.iloc 5 . 0)
         (push.subr.gloc.of caadr 1 "../stdlib/core/optimize.scm" . 955410)
         (const . not)
         (if.not.eq?.ret.const . #f)
         (push.const . not)
         (apply.gloc.of
           core.optimize\x27;primitive-function?
           "../stdlib/core/optimize.scm"
           .
           955410))
       (if.true
         (push.iloc 5 . 0)
         (push.subr.gloc.of cadddr 1 "../stdlib/core/optimize.scm" . 955410)
         (push.iloc 5 . 0)
         (push.subr.gloc.of caddr 1 "../stdlib/core/optimize.scm" . 955410)
         (extend . 2)
         (push.const . if)
         (call
           (push.iloc 6 . 0)
           (push.subr.gloc.of cadadr 1 "../stdlib/core/optimize.scm" . 955410)
           (apply.gloc.of core.optimize\x27;pretty "../stdlib/core/optimize.scm" . 955410))
         (push)
         (call
           (push.iloc.0 . 0)
           (apply.gloc.of core.optimize\x27;pretty "../stdlib/core/optimize.scm" . 955410))
         (push)
         (call
           (push.iloc.0 . 1)
           (apply.gloc.of core.optimize\x27;pretty "../stdlib/core/optimize.scm" . 955410))
         (push)
         (push.subr.gloc.of \x2E;list 4 "../stdlib/core/optimize.scm" . 955410)
         (extend . 1)
         (push.iloc.0 . 0)
         (iloc 7 . 0)
         (if.eq? (ret.iloc 0 . 0))
         (call
           (push.iloc.0 . 0)
           (push.iloc 7 . 0)
           (call
             (apply.gloc.of core.optimize\x27;annotate-hook "../stdlib/core/optimize.scm" . 955410))
           (apply))
         (ret.iloc 0 . 0))
       (call
         (iloc 5 . 0)
         (if.not.pair?.ret.const . #f)
         (push.car.iloc (5 . 0) "../stdlib/core/optimize.scm" . 955410)
         (const . if)
         (ret.eq? "../stdlib/core/optimize.scm" . 955410))
       (if.true
         (push.iloc 5 . 0)
         (apply.gloc.of core.optimize\x27;pretty-each "../stdlib/core/optimize.scm" . 955410))
       (push.const . "coreform-optimize")
       (push.const . "internal inconsistency in ~s")
       (push.gloc.of core.optimize\x27;pretty)
       (push.subr.gloc.of \x2E;format 2 "../stdlib/core/optimize.scm" . 955410)
       (push.iloc 5 . 0)
       (apply.gloc.of \x2E;assertion-violation "../stdlib/core/optimize.scm" . 955410))
     (push.iloc 2 . 0)
     (push.subr.gloc.of \x2E;length 1 "../stdlib/core/optimize.scm" . 1002521)
     (push.gloc.of core.optimize\x27;limit-arguments)
     (subr.gloc.of \x2E;> 2 "../stdlib/core/optimize.scm" . 1002518)
     (if.true (push.iloc 2 . 0) (apply.iloc (1 . 0) "../stdlib/core/optimize.scm" . 1003542))
     (push.iloc 2 . 0)
     (apply.gloc.of core.optimize\x27;pretty-each "../stdlib/core/optimize.scm" . 1004566))
   (ret.iloc 1 . 0))
 (set.gloc.of core.optimize\x27;pretty)
 (close
   (1 0 . core.optimize\x27;process-stackable)
   (extend.unbound . 5)
   (push.close
     (2 0)
     (extend.enclose+
       (1 0 . loop)
       (iloc.0 . 0)
       (if.pair?
         (call
           (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1017891)
           (push.iloc 2 . 1)
           (apply.iloc (3 . 1) "../stdlib/core/optimize.scm" . 1017876))
         (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1018906)
         (apply.iloc+ (1 . 0) "../stdlib/core/optimize.scm" . 1018900))
       (ret.const.unspec))
     (push.iloc.1 . 0)
     (apply.iloc+ (0 . 0) "../stdlib/core/optimize.scm" . 1015819))
   (push.close
     (2 0)
     (iloc.0 . 0)
     (if.pair?
       (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1024024)
       (extend . 1)
       (push.iloc.0 . 0)
       (const . define)
       (if.eq?
         (push.gloc.of core.optimize\x27;ht-lambda-node)
         (push.iloc.1 . 0)
         (push.subr.gloc.of \x2E;caddr 1 "../stdlib/core/optimize.scm" . 1026117)
         (subr.gloc.of \x2E;core-hashtable-contains? 2 "../stdlib/core/optimize.scm" . 1026076)
         (if.true
           (push.iloc.1 . 0)
           (push.subr.gloc.of \x2E;caddr 1 "../stdlib/core/optimize.scm" . 1027126)
           (push.subr.gloc.of \x2E;cddr 1 "../stdlib/core/optimize.scm" . 1027120)
           (push.iloc.1 . 1)
           (apply.iloc (2 . 0) "../stdlib/core/optimize.scm" . 1027100))
         (push.iloc.1 . 0)
         (push.subr.gloc.of \x2E;caddr 1 "../stdlib/core/optimize.scm" . 1029163)
         (push.iloc.1 . 1)
         (apply.iloc (2 . 1) "../stdlib/core/optimize.scm" . 1029148))
       (push.iloc.0 . 0)
       (const . lambda)
       (if.eq?
         (push.close
           (1 0)
           (push.iloc 3 . 4)
           (push.iloc.0 . 0)
           (push.const . #t)
           (ret.subr.gloc.of \x2E;core-hashtable-set! "../stdlib/core/optimize.scm" . 1031211))
         (push.iloc.1 . 1)
         (apply.gloc.of \x2E;for-each "../stdlib/core/optimize.scm" . 1031189))
       (push.iloc.0 . 0)
       (const . let)
       (if.eq?
         (call
           (push.close
             (1 0)
             (push.cadr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1033274)
             (push.iloc 2 . 1)
             (apply.iloc (3 . 1) "../stdlib/core/optimize.scm" . 1033259))
           (push.cadr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 1033294)
           (apply.gloc.of \x2E;for-each "../stdlib/core/optimize.scm" . 1033237))
         (push.cddr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 1034281)
         (push.iloc.1 . 1)
         (apply.iloc (2 . 0) "../stdlib/core/optimize.scm" . 1034261))
       (push.iloc.0 . 0)
       (const . letrec*)
       (if.eq?
         (call
           (push.gloc.of \x2E;values)
           (call
             (push.gloc.of \x2E;fn36.1\x60;36)
             (push.cadr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 1036422)
             (apply.gloc.of \x2E;map "../stdlib/core/optimize.scm" . 1036339))
           (push)
           (apply.gloc.of core.lists\x27;filter "../stdlib/core/optimize.scm" . 1036324))
         (push)
         (extend . 1)
         (call
           (push.close
             (1 0)
             (push.gloc.of core.optimize\x27;ht-lambda-node)
             (push.cadr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1038419)
             (subr.gloc.of \x2E;core-hashtable-contains? 2 "../stdlib/core/optimize.scm" . 1038378)
             (if.true
               (call
                 (push.close
                   (1 0)
                   (push.iloc 5 . 4)
                   (push.iloc.0 . 0)
                   (push.const)
                   (push.subr.gloc.of
                     \x2E;core-hashtable-ref
                     3
                     "../stdlib/core/optimize.scm"
                     .
                     1040449)
                   (extend . 1)
                   (push.iloc.0 . 0)
                   (const . #t)
                   (if.eq?.ret.const . #f)
                   (push.iloc 6 . 4)
                   (push.iloc.1 . 0)
                   (push.car.iloc (2 . 0) "../stdlib/core/optimize.scm" . 1042536)
                   (iloc.0 . 0)
                   (push.cons)
                   (ret.subr.gloc.of
                     \x2E;core-hashtable-set!
                     "../stdlib/core/optimize.scm"
                     .
                     1042493))
                 (push.iloc 3 . 1)
                 (apply.gloc.of \x2E;for-each "../stdlib/core/optimize.scm" . 1039402))
               (push.iloc.0 . 0)
               (push.subr.gloc.of \x2E;cddadr 1 "../stdlib/core/optimize.scm" . 1044542)
               (push.iloc.1 . 0)
               (push.iloc 3 . 1)
               (push.subr.gloc.of \x2E;append 2 "../stdlib/core/optimize.scm" . 1044553)
               (apply.iloc (4 . 0) "../stdlib/core/optimize.scm" . 1044522))
             (push.cadr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1046585)
             (push.iloc.1 . 0)
             (push.iloc 3 . 1)
             (push.subr.gloc.of \x2E;append 2 "../stdlib/core/optimize.scm" . 1046594)
             (apply.iloc (4 . 1) "../stdlib/core/optimize.scm" . 1046570))
           (push.cadr.iloc (2 . 0) "../stdlib/core/optimize.scm" . 1047585)
           (apply.gloc.of \x2E;for-each "../stdlib/core/optimize.scm" . 1036309))
         (push.cddr.iloc (2 . 0) "../stdlib/core/optimize.scm" . 1048619)
         (push.iloc 2 . 1)
         (apply.iloc (3 . 0) "../stdlib/core/optimize.scm" . 1048599))
       (push.iloc.0 . 0)
       (const . quote)
       (if.eq?.ret.const . #f)
       (push.iloc.1 . 0)
       (push.iloc.1 . 1)
       (apply.iloc (2 . 0) "../stdlib/core/optimize.scm" . 1051669))
     (ret.const . #f))
   (push.close
     (1 0)
     (push.iloc.1 . 4)
     (push.iloc.0 . 0)
     (push.const . #f)
     (push.subr.gloc.of \x2E;core-hashtable-ref 3 "../stdlib/core/optimize.scm" . 1056786)
     (extend . 1)
     (iloc.0 . 0)
     (if.true
       (push.iloc.0 . 0)
       (const . #t)
       (if.eq?.ret.const . #t)
       (call
         (push.gloc.of \x2E;fn20.1\x60;20)
         (push.iloc.0 . 0)
         (apply.gloc.of core.lists\x27;for-all "../stdlib/core/optimize.scm" . 1059872))
       (push)
       (ret.subr.gloc.of \x2E;not "../stdlib/core/optimize.scm" . 1059867))
     (ret.const . #f))
   (enclose . 3)
   (subr.gloc.of \x2E;make-core-hashtable 0 "../stdlib/core/optimize.scm" . 1010712)
   (set.iloc 0 . 3)
   (subr.gloc.of \x2E;make-core-hashtable 0 "../stdlib/core/optimize.scm" . 1011741)
   (set.iloc 0 . 4)
   (call
     (push.iloc.1 . 0)
     (push.const)
     (apply.iloc (0 . 1) "../stdlib/core/optimize.scm" . 1062919))
   (call
     (push.close
       (1 0)
       (cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1064993)
       (if.not.symbol?.ret.const . #f)
       (push.iloc.1 . 3)
       (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1066038)
       (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1066046)
       (ret.subr.gloc.of \x2E;core-hashtable-set! "../stdlib/core/optimize.scm" . 1066008))
     (push.gloc.of core.optimize\x27;ht-variable-binding)
     (push.subr.gloc.of \x2E;core-hashtable->alist 1 "../stdlib/core/optimize.scm" . 1067025)
     (apply.gloc.of \x2E;for-each "../stdlib/core/optimize.scm" . 1063943))
   (call
     (push.gloc.of \x2E;fn72.1\x60;72)
     (push.gloc.of core.optimize\x27;ht-variable-binding)
     (push.subr.gloc.of \x2E;core-hashtable->alist 1 "../stdlib/core/optimize.scm" . 1079327)
     (apply.gloc.of core.lists\x27;remp "../stdlib/core/optimize.scm" . 1069081))
   (push)
   (extend . 1)
   (call
     (extend.enclose+
       (1 0 . loop)
       (call
         (push.close
           (1 0)
           (push.gloc.of core.optimize\x27;ht-variable-stackables)
           (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1083468)
           (subr.gloc.of \x2E;core-hashtable-contains? 2 "../stdlib/core/optimize.scm" . 1083419)
           (if.true.ret)
           (push.gloc.of core.optimize\x27;ht-lambda-node)
           (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1084490)
           (push.const)
           (push.subr.gloc.of \x2E;core-hashtable-ref 3 "../stdlib/core/optimize.scm" . 1084455)
           (extend . 1)
           (call
             (call
               (push.car.iloc (1 . 0) "../stdlib/core/optimize.scm" . 1086532)
               (apply.iloc (5 . 2) "../stdlib/core/optimize.scm" . 1086510))
             (if.true.ret.const . #f)
             (push.close
               (1 0)
               (push.car.iloc (2 . 0) "../stdlib/core/optimize.scm" . 1089597)
               (iloc.0 . 0)
               (if.eq?.ret.const . #t)
               (call
                 (push.iloc.0 . 0)
                 (apply.gloc.of
                   core.optimize\x27;primitive-function?
                   "../stdlib/core/optimize.scm"
                   .
                   1090616))
               (if.true.ret)
               (call
                 (push.iloc.0 . 0)
                 (apply.gloc.of
                   core.optimize\x27;variable-top-level?
                   "../stdlib/core/optimize.scm"
                   .
                   1091640))
               (if.true.ret)
               (push.gloc.of core.optimize\x27;ht-variable-stackables)
               (push.iloc.0 . 0)
               (subr.gloc.of
                 \x2E;core-hashtable-contains?
                 2
                 "../stdlib/core/optimize.scm"
                 .
                 1092664)
               (if.true.ret)
               (call
                 (push.iloc.0 . 0)
                 (apply.gloc.of
                   core.optimize\x27;variable-iloc?
                   "../stdlib/core/optimize.scm"
                   .
                   1093693))
               (if.false.ret)
               (call (push.iloc.0 . 0) (apply.iloc (6 . 2) "../stdlib/core/optimize.scm" . 1094722))
               (push)
               (ret.subr.gloc.of \x2E;not "../stdlib/core/optimize.scm" . 1094717))
             (push.iloc.0 . 0)
             (apply.gloc.of core.lists\x27;for-all "../stdlib/core/optimize.scm" . 1087529))
           (if.true
             (push.gloc.of core.optimize\x27;ht-variable-stackables)
             (push.car.iloc (1 . 0) "../stdlib/core/optimize.scm" . 1098832)
             (push.cdr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 1098840)
             (ret.subr.gloc.of \x2E;core-hashtable-set! "../stdlib/core/optimize.scm" . 1098788))
           (ret.const.unspec))
         (push.iloc 2 . 0)
         (apply.gloc.of \x2E;for-each "../stdlib/core/optimize.scm" . 1081353))
       (push.gloc.of core.optimize\x27;ht-variable-stackables)
       (push.subr.gloc.of \x2E;core-hashtable-size 1 "../stdlib/core/optimize.scm" . 1101846)
       (extend . 1)
       (iloc.1 . 0)
       (=.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1102865)
       (if.true.ret)
       (push.iloc.0 . 0)
       (apply.iloc+ (2 . 0) "../stdlib/core/optimize.scm" . 1102878))
     (push.gloc.of core.optimize\x27;ht-variable-stackables)
     (push.subr.gloc.of \x2E;core-hashtable-size 1 "../stdlib/core/optimize.scm" . 1081370)
     (apply.iloc+ (0 . 0) "../stdlib/core/optimize.scm" . 1081353))
   (push.gloc.of \x2E;fn73.1\x60;73)
   (call
     (push.gloc.of \x2E;fn7.1\x60;7)
     (push.iloc.0 . 0)
     (apply.gloc.of core.lists\x27;remp "../stdlib/core/optimize.scm" . 1104923))
   (push)
   (apply.gloc.of \x2E;for-each "../stdlib/core/optimize.scm" . 1104905))
 (set.gloc.of core.optimize\x27;process-stackable)
 (close
   (1 0 . core.optimize\x27;transform)
   (touch.gloc.of loop\x60;684)
   (call
     (push.iloc.0 . 0)
     (apply.gloc.of core.optimize\x27;pretty-form "../stdlib/core/optimize.scm" . 1141784))
   (push)
   (push.const . 1)
   (apply.gloc.of loop\x60;684 "../stdlib/core/optimize.scm" . 1141767))
 (set.gloc.of core.optimize\x27;transform)
 (close
   (1 0 . core.optimize\x27;pretty-form)
   (touch.gloc.of loop\x60;715)
   (push.iloc.0 . 0)
   (apply.gloc.of loop\x60;715 "../stdlib/core/optimize.scm" . 1186823))
 (set.gloc.of core.optimize\x27;pretty-form)
 (call
   (push.gloc.of \x2E;fn69.1\x60;69)
   (apply.gloc.of \x2E;make-parameter "../stdlib/core/optimize.scm" . 1191961))
 (set.gloc.of core.optimize\x27;annotate-hook)
 (call
   (push.gloc.of \x2E;fn54.1\x60;54)
   (apply.gloc.of \x2E;make-parameter "../stdlib/core/optimize.scm" . 1192993))
 (set.gloc.of core.optimize\x27;annotate-closure-hook)
 (close
   (2 0 . core.optimize\x27;closure-attribute-set!)
   (push.iloc.0 . 0)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (call
     (apply.gloc.of
       core.optimize\x27;annotate-closure-hook
       "../stdlib/core/optimize.scm"
       .
       1197064))
   (apply))
 (set.gloc.of core.optimize\x27;closure-attribute-set!)
 (close
   (3 0 . core.optimize\x27;optimize)
   (call
     (apply.gloc.of core.optimize\x27;coreform-optimize "../stdlib/core/optimize.scm" . 1201168))
   (push)
   (const . 0)
   (if.eq?
     (push.iloc.0 . 0)
     (apply.gloc.of core.optimize\x27;pretty-form "../stdlib/core/optimize.scm" . 1202187))
   (push.const . #f)
   (push.const . #f)
   (extend . 2)
   (push.close
     (0 0)
     (call (apply.gloc.of core.optimize\x27;annotate-hook "../stdlib/core/optimize.scm" . 1204237))
     (set.iloc 1 . 0)
     (call
       (apply.gloc.of
         core.optimize\x27;annotate-closure-hook
         "../stdlib/core/optimize.scm"
         .
         1204237))
     (set.iloc 1 . 1)
     (call
       (push.iloc 2 . 1)
       (apply.gloc.of core.optimize\x27;annotate-hook "../stdlib/core/optimize.scm" . 1204237))
     (push.iloc 2 . 2)
     (apply.gloc.of
       core.optimize\x27;annotate-closure-hook
       "../stdlib/core/optimize.scm"
       .
       1204237))
   (push.close
     (0 0)
     (call
       (push.iloc 2 . 0)
       (apply.gloc.of core.optimize\x27;transform "../stdlib/core/optimize.scm" . 1204249))
     (push)
     (extend . 1)
     (call (apply.gloc.of core.optimize\x27;clear-context "../stdlib/core/optimize.scm" . 1205263))
     (push.iloc.0 . 0)
     (apply.gloc.of core.optimize\x27;pretty-form "../stdlib/core/optimize.scm" . 1206287))
   (push.close
     (0 0)
     (call
       (push.iloc.1 . 0)
       (apply.gloc.of core.optimize\x27;annotate-hook "../stdlib/core/optimize.scm" . 1204237))
     (push.iloc.1 . 1)
     (apply.gloc.of
       core.optimize\x27;annotate-closure-hook
       "../stdlib/core/optimize.scm"
       .
       1204237))
   (apply.gloc.of \x2E;dynamic-wind "../stdlib/core/optimize.scm" . 1204237))
 (set.gloc.of core.optimize\x27;optimize)
 (call
   (push.const . #t)
   (apply.gloc.of \x2E;make-parameter "../stdlib/core/optimize.scm" . 1208347))
 (set.gloc.of core.optimize\x27;coreform-pretty)
 (call
   (push.const . #t)
   (push.gloc.of \x2E;fn35.1\x60;35)
   (apply.gloc.of \x2E;make-parameter "../stdlib/core/optimize.scm" . 6145))
 (set.gloc.of core.optimize\x27;coreform-optimize)
 (call
   (push.const
     (_ import . \x2E;_)
     (... import . \x2E;...)
     (define-inline-assistant import . core.optimize\x27;define-inline-assistant)
     (define-syntax import . \x2E;define-syntax)
     (let import . \x2E;let)
     (syntax-rules import . \x2E;syntax-rules)
     (lambda import . \x2E;lambda))
   (extend . 1)
   (call
     (push.const . syntax)
     (push.const . core.optimize\x27;define-inline-assistant)
     (push.const
       ()
       ("../stdlib/core/optimize.scm" . 16389)
       ((_ func () (args ...) (vars ...) . body)
        (define-syntax func (syntax-rules () ((_ args ...) (let ((vars args) ...) . body))))
        ((body . 0) (vars . 1) (args . 1) (func . 0))
        (let _ syntax-rules define-syntax))
       ((_ func (e1 e2 ...) (args ...) . more)
        (define-inline-assistant func (e2 ...) (temp args ...) . more)
        ((more . 0) (args . 1) (e2 . 1) (e1 . 0) (func . 0))
        (temp define-inline-assistant)))
     (push.iloc.0 . 0)
     (apply.gloc.of \x2E;set-top-level-macro! "../stdlib/core/optimize.scm" . 6145))
   (call
     (push.const . syntax)
     (push.const . core.optimize\x27;define-inline)
     (push.const
       (lambda)
       ("../stdlib/core/optimize.scm" . 26629)
       ((_ func (lambda (vars ...) body1 body2 ...))
        (define-inline-assistant func (vars ...) () (vars ...) body1 body2 ...)
        ((body2 . 1) (body1 . 0) (vars . 1) (func . 0))
        (define-inline-assistant))
       ((_ (func vars ...) body1 body2 ...)
        (define-inline-assistant func (vars ...) () (vars ...) body1 body2 ...)
        ((body2 . 1) (body1 . 0) (vars . 1) (func . 0))
        (define-inline-assistant)))
     (push.iloc.0 . 0)
     (apply.gloc.of \x2E;set-top-level-macro! "../stdlib/core/optimize.scm" . 6145))
   (push.const . syntax)
   (push.const . core.optimize\x27;diagnostics)
   (push.const () ("../stdlib/core/optimize.scm" . 33822) ((_ _) #f () ()))
   (push.iloc.0 . 0)
   (apply.gloc.of \x2E;set-top-level-macro! "../stdlib/core/optimize.scm" . 6145))
 (push.const . core.optimize)
 (push.const . #f)
 (push.const (coreform-optimize import . core.optimize\x27;coreform-optimize))
 (apply.gloc.of \x2E;intern-scheme-library "../stdlib/core/optimize.scm" . 6145))

((call
   (push.const core intrinsics)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/rnrs/base.scm" . 2049))
 (push.const . rnrs.base)
 (push.const 6)
 (push.const
   (define import . \x2E;define)
   (define-syntax import . \x2E;define-syntax)
   (quote import . \x2E;quote)
   (lambda import . \x2E;lambda)
   (if import . \x2E;if)
   (set! import . \x2E;set!)
   (cond import . \x2E;cond)
   (case import . \x2E;case)
   (and import . \x2E;and)
   (or import . \x2E;or)
   (let import . \x2E;let)
   (let* import . \x2E;let*)
   (letrec import . \x2E;letrec)
   (letrec* import . \x2E;letrec*)
   (let-values import . \x2E;let-values)
   (let*-values import . \x2E;let*-values)
   (begin import . \x2E;begin)
   (quasiquote import . \x2E;quasiquote)
   (unquote import . \x2E;unquote)
   (unquote-splicing import . \x2E;unquote-splicing)
   (let-syntax import . \x2E;let-syntax)
   (letrec-syntax import . \x2E;letrec-syntax)
   (syntax-rules import . \x2E;syntax-rules)
   (identifier-syntax import . \x2E;identifier-syntax)
   (assert import . \x2E;assert)
   (else import . \x2E;else)
   (=> import . \x2E;=>)
   (... import . \x2E;...)
   (_ import . \x2E;_)
   (eq? import . \x2E;eq?)
   (eqv? import . \x2E;eqv?)
   (equal? import . \x2E;equal?)
   (procedure? import . \x2E;procedure?)
   (number? import . \x2E;number?)
   (complex? import . \x2E;complex?)
   (real? import . \x2E;real?)
   (rational? import . \x2E;rational?)
   (integer? import . \x2E;integer?)
   (real-valued? import . \x2E;real-valued?)
   (rational-valued? import . \x2E;rational-valued?)
   (integer-valued? import . \x2E;integer-valued?)
   (exact? import . \x2E;exact?)
   (inexact? import . \x2E;inexact?)
   (inexact import . \x2E;inexact)
   (exact import . \x2E;exact)
   (= import . \x2E;=)
   (< import . \x2E;<)
   (> import . \x2E;>)
   (<= import . \x2E;<=)
   (>= import . \x2E;>=)
   (zero? import . \x2E;zero?)
   (positive? import . \x2E;positive?)
   (negative? import . \x2E;negative?)
   (odd? import . \x2E;odd?)
   (even? import . \x2E;even?)
   (finite? import . \x2E;finite?)
   (infinite? import . \x2E;infinite?)
   (nan? import . \x2E;nan?)
   (max import . \x2E;max)
   (min import . \x2E;min)
   (+ import . \x2E;+)
   (* import . \x2E;*)
   (- import . \x2E;-)
   (/ import . \x2E;/)
   (abs import . \x2E;abs)
   (div-and-mod import . \x2E;div-and-mod)
   (div import . \x2E;div)
   (mod import . \x2E;mod)
   (div0-and-mod0 import . \x2E;div0-and-mod0)
   (div0 import . \x2E;div0)
   (mod0 import . \x2E;mod0)
   (gcd import . \x2E;gcd)
   (lcm import . \x2E;lcm)
   (numerator import . \x2E;numerator)
   (denominator import . \x2E;denominator)
   (floor import . \x2E;floor)
   (ceiling import . \x2E;ceiling)
   (truncate import . \x2E;truncate)
   (round import . \x2E;round)
   (rationalize import . \x2E;rationalize)
   (exp import . \x2E;exp)
   (log import . \x2E;log)
   (sin import . \x2E;sin)
   (cos import . \x2E;cos)
   (tan import . \x2E;tan)
   (asin import . \x2E;asin)
   (acos import . \x2E;acos)
   (atan import . \x2E;atan)
   (sqrt import . \x2E;sqrt)
   (exact-integer-sqrt import . \x2E;exact-integer-sqrt)
   (expt import . \x2E;expt)
   (make-rectangular import . \x2E;make-rectangular)
   (make-polar import . \x2E;make-polar)
   (real-part import . \x2E;real-part)
   (imag-part import . \x2E;imag-part)
   (magnitude import . \x2E;magnitude)
   (angle import . \x2E;angle)
   (number->string import . \x2E;number->string)
   (string->number import . \x2E;string->number)
   (not import . \x2E;not)
   (boolean? import . \x2E;boolean?)
   (boolean=? import . \x2E;boolean=?)
   (pair? import . \x2E;pair?)
   (cons import . \x2E;cons)
   (car import . \x2E;car)
   (cdr import . \x2E;cdr)
   (caar import . \x2E;caar)
   (cadr import . \x2E;cadr)
   (cdar import . \x2E;cdar)
   (cddr import . \x2E;cddr)
   (caaar import . \x2E;caaar)
   (caadr import . \x2E;caadr)
   (cadar import . \x2E;cadar)
   (caddr import . \x2E;caddr)
   (cdaar import . \x2E;cdaar)
   (cdadr import . \x2E;cdadr)
   (cddar import . \x2E;cddar)
   (cdddr import . \x2E;cdddr)
   (caaaar import . \x2E;caaaar)
   (caaadr import . \x2E;caaadr)
   (caadar import . \x2E;caadar)
   (caaddr import . \x2E;caaddr)
   (cadaar import . \x2E;cadaar)
   (cadadr import . \x2E;cadadr)
   (caddar import . \x2E;caddar)
   (cadddr import . \x2E;cadddr)
   (cdaaar import . \x2E;cdaaar)
   (cdaadr import . \x2E;cdaadr)
   (cdadar import . \x2E;cdadar)
   (cdaddr import . \x2E;cdaddr)
   (cddaar import . \x2E;cddaar)
   (cddadr import . \x2E;cddadr)
   (cdddar import . \x2E;cdddar)
   (cddddr import . \x2E;cddddr)
   (null? import . \x2E;null?)
   (list? import . \x2E;list?)
   (list import . \x2E;list)
   (length import . \x2E;length)
   (append import . \x2E;append)
   (reverse import . \x2E;reverse)
   (list-tail import . \x2E;list-tail)
   (list-ref import . \x2E;list-ref)
   (map import . \x2E;map)
   (for-each import . \x2E;for-each)
   (symbol? import . \x2E;symbol?)
   (symbol->string import . \x2E;symbol->string)
   (string->symbol import . \x2E;string->symbol)
   (symbol=? import . \x2E;symbol=?)
   (char? import . \x2E;char?)
   (char->integer import . \x2E;char->integer)
   (integer->char import . \x2E;integer->char)
   (char=? import . \x2E;char=?)
   (char<? import . \x2E;char<?)
   (char>? import . \x2E;char>?)
   (char<=? import . \x2E;char<=?)
   (char>=? import . \x2E;char>=?)
   (string? import . \x2E;string?)
   (make-string import . \x2E;make-string)
   (string import . \x2E;string)
   (string-length import . \x2E;string-length)
   (string-ref import . \x2E;string-ref)
   (string=? import . \x2E;string=?)
   (string<? import . \x2E;string<?)
   (string>? import . \x2E;string>?)
   (string<=? import . \x2E;string<=?)
   (string>=? import . \x2E;string>=?)
   (substring import . \x2E;substring)
   (string-append import . \x2E;string-append)
   (string->list import . \x2E;string->list)
   (list->string import . \x2E;list->string)
   (string-copy import . \x2E;string-copy)
   (string-for-each import . \x2E;string-for-each)
   (vector? import . \x2E;vector?)
   (make-vector import . \x2E;make-vector)
   (vector import . \x2E;vector)
   (vector-length import . \x2E;vector-length)
   (vector-ref import . \x2E;vector-ref)
   (vector-set! import . \x2E;vector-set!)
   (vector->list import . \x2E;vector->list)
   (list->vector import . \x2E;list->vector)
   (vector-fill! import . \x2E;vector-fill!)
   (vector-map import . \x2E;vector-map)
   (vector-for-each import . \x2E;vector-for-each)
   (error import . \x2E;error)
   (assertion-violation import . \x2E;assertion-violation)
   (apply import . \x2E;apply)
   (call-with-current-continuation import . \x2E;call-with-current-continuation)
   (call/cc import . \x2E;call/cc)
   (values import . \x2E;values)
   (call-with-values import . \x2E;call-with-values)
   (dynamic-wind import . \x2E;dynamic-wind))
 (apply.gloc.of \x2E;intern-scheme-library "../stdlib/rnrs/base.scm" . 2049))

((call
   (push.const core unicode)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/rnrs/unicode.scm" . 2049))
 (push.const . rnrs.unicode)
 (push.const 6)
 (push.const
   (char-upcase import . core.unicode\x27;char-upcase)
   (char-downcase import . core.unicode\x27;char-downcase)
   (char-titlecase import . core.unicode\x27;char-titlecase)
   (char-foldcase import . core.unicode\x27;char-foldcase)
   (char-ci=? import . core.unicode\x27;char-ci=?)
   (char-ci<? import . core.unicode\x27;char-ci<?)
   (char-ci>? import . core.unicode\x27;char-ci>?)
   (char-ci<=? import . core.unicode\x27;char-ci<=?)
   (char-ci>=? import . core.unicode\x27;char-ci>=?)
   (char-alphabetic? import . core.unicode\x27;char-alphabetic?)
   (char-numeric? import . core.unicode\x27;char-numeric?)
   (char-whitespace? import . \x2E;char-whitespace?)
   (char-upper-case? import . core.unicode\x27;char-upper-case?)
   (char-lower-case? import . core.unicode\x27;char-lower-case?)
   (char-title-case? import . core.unicode\x27;char-title-case?)
   (char-general-category import . core.unicode\x27;char-general-category)
   (string-upcase import . core.unicode\x27;string-upcase)
   (string-downcase import . core.unicode\x27;string-downcase)
   (string-titlecase import . core.unicode\x27;string-titlecase)
   (string-foldcase import . core.unicode\x27;string-foldcase)
   (string-ci=? import . core.unicode\x27;string-ci=?)
   (string-ci<? import . core.unicode\x27;string-ci<?)
   (string-ci>? import . core.unicode\x27;string-ci>?)
   (string-ci<=? import . core.unicode\x27;string-ci<=?)
   (string-ci>=? import . core.unicode\x27;string-ci>=?)
   (string-normalize-nfd import . core.unicode\x27;string-normalize-nfd)
   (string-normalize-nfkd import . core.unicode\x27;string-normalize-nfkd)
   (string-normalize-nfc import . core.unicode\x27;string-normalize-nfc)
   (string-normalize-nfkc import . core.unicode\x27;string-normalize-nfkc))
 (apply.gloc.of \x2E;intern-scheme-library "../stdlib/rnrs/unicode.scm" . 2049))

((call
   (push.const core bytevector-transcoders)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/rnrs/bytevectors.scm" . 2049))
 (call
   (push.const core bytevectors)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/rnrs/bytevectors.scm" . 2049))
 (push.const . rnrs.bytevectors)
 (push.const 6)
 (push.const
   (endianness import . core.bytevectors\x27;endianness)
   (native-endianness import . \x2E;native-endianness)
   (bytevector? import . \x2E;bytevector?)
   (make-bytevector import . \x2E;make-bytevector)
   (bytevector-length import . \x2E;bytevector-length)
   (bytevector=? import . \x2E;bytevector=?)
   (bytevector-fill! import . \x2E;bytevector-fill!)
   (bytevector-copy! import . \x2E;bytevector-copy!)
   (bytevector-copy import . \x2E;bytevector-copy)
   (bytevector-u8-ref import . \x2E;bytevector-u8-ref)
   (bytevector-s8-ref import . \x2E;bytevector-s8-ref)
   (bytevector-u8-set! import . \x2E;bytevector-u8-set!)
   (bytevector-s8-set! import . \x2E;bytevector-s8-set!)
   (bytevector->u8-list import . \x2E;bytevector->u8-list)
   (u8-list->bytevector import . \x2E;u8-list->bytevector)
   (bytevector-u16-ref import . \x2E;bytevector-u16-ref)
   (bytevector-s16-ref import . \x2E;bytevector-s16-ref)
   (bytevector-u16-native-ref import . \x2E;bytevector-u16-native-ref)
   (bytevector-s16-native-ref import . \x2E;bytevector-s16-native-ref)
   (bytevector-u16-set! import . \x2E;bytevector-u16-set!)
   (bytevector-s16-set! import . \x2E;bytevector-s16-set!)
   (bytevector-u16-native-set! import . \x2E;bytevector-u16-native-set!)
   (bytevector-s16-native-set! import . \x2E;bytevector-s16-native-set!)
   (bytevector-u32-ref import . \x2E;bytevector-u32-ref)
   (bytevector-s32-ref import . \x2E;bytevector-s32-ref)
   (bytevector-u32-native-ref import . \x2E;bytevector-u32-native-ref)
   (bytevector-s32-native-ref import . \x2E;bytevector-s32-native-ref)
   (bytevector-u32-set! import . \x2E;bytevector-u32-set!)
   (bytevector-s32-set! import . \x2E;bytevector-s32-set!)
   (bytevector-u32-native-set! import . \x2E;bytevector-u32-native-set!)
   (bytevector-s32-native-set! import . \x2E;bytevector-s32-native-set!)
   (bytevector-u64-ref import . \x2E;bytevector-u64-ref)
   (bytevector-s64-ref import . \x2E;bytevector-s64-ref)
   (bytevector-u64-native-ref import . \x2E;bytevector-u64-native-ref)
   (bytevector-s64-native-ref import . \x2E;bytevector-s64-native-ref)
   (bytevector-u64-set! import . \x2E;bytevector-u64-set!)
   (bytevector-s64-set! import . \x2E;bytevector-s64-set!)
   (bytevector-u64-native-set! import . \x2E;bytevector-u64-native-set!)
   (bytevector-s64-native-set! import . \x2E;bytevector-s64-native-set!)
   (bytevector-ieee-single-ref import . \x2E;bytevector-ieee-single-ref)
   (bytevector-ieee-single-native-ref import . \x2E;bytevector-ieee-single-native-ref)
   (bytevector-ieee-single-set! import . \x2E;bytevector-ieee-single-set!)
   (bytevector-ieee-single-native-set! import . \x2E;bytevector-ieee-single-native-set!)
   (bytevector-ieee-double-ref import . \x2E;bytevector-ieee-double-ref)
   (bytevector-ieee-double-native-ref import . \x2E;bytevector-ieee-double-native-ref)
   (bytevector-ieee-double-set! import . \x2E;bytevector-ieee-double-set!)
   (bytevector-ieee-double-native-set! import . \x2E;bytevector-ieee-double-native-set!)
   (bytevector-uint-ref import . core.bytevectors\x27;bytevector-uint-ref)
   (bytevector-sint-ref import . core.bytevectors\x27;bytevector-sint-ref)
   (bytevector-uint-set! import . core.bytevectors\x27;bytevector-uint-set!)
   (bytevector-sint-set! import . core.bytevectors\x27;bytevector-sint-set!)
   (bytevector->uint-list import . core.bytevectors\x27;bytevector->uint-list)
   (bytevector->sint-list import . core.bytevectors\x27;bytevector->sint-list)
   (uint-list->bytevector import . core.bytevectors\x27;uint-list->bytevector)
   (sint-list->bytevector import . core.bytevectors\x27;sint-list->bytevector)
   (string->utf8 import . \x2E;string->utf8)
   (utf8->string import . \x2E;utf8->string)
   (string->utf16 import . core.bytevector-transcoders\x27;string->utf16)
   (utf16->string import . core.bytevector-transcoders\x27;utf16->string)
   (string->utf32 import . core.bytevector-transcoders\x27;string->utf32)
   (utf32->string import . core.bytevector-transcoders\x27;utf32->string))
 (apply.gloc.of \x2E;intern-scheme-library "../stdlib/rnrs/bytevectors.scm" . 2049))

((call
   (push.const core lists)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/rnrs/lists.scm" . 2049))
 (push.const . rnrs.lists)
 (push.const 6)
 (push.const
   (find import . core.lists\x27;find)
   (for-all import . core.lists\x27;for-all)
   (exists import . core.lists\x27;exists)
   (filter import . core.lists\x27;filter)
   (partition import . core.lists\x27;partition)
   (fold-left import . core.lists\x27;fold-left)
   (fold-right import . core.lists\x27;fold-right)
   (remp import . core.lists\x27;remp)
   (remove import . core.lists\x27;remove)
   (remv import . core.lists\x27;remv)
   (remq import . core.lists\x27;remq)
   (memp import . core.lists\x27;memp)
   (member import . \x2E;member)
   (memv import . \x2E;memv)
   (memq import . \x2E;memq)
   (assp import . core.lists\x27;assp)
   (assoc import . \x2E;assoc)
   (assv import . \x2E;assv)
   (assq import . \x2E;assq)
   (cons* import . \x2E;cons*))
 (apply.gloc.of \x2E;intern-scheme-library "../stdlib/rnrs/lists.scm" . 2049))

((call
   (push.const core sorting)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/rnrs/sorting.scm" . 2049))
 (push.const . rnrs.sorting)
 (push.const 6)
 (push.const
   (list-sort import . core.sorting\x27;list-sort)
   (vector-sort import . core.sorting\x27;vector-sort)
   (vector-sort! import . core.sorting\x27;vector-sort!))
 (apply.gloc.of \x2E;intern-scheme-library "../stdlib/rnrs/sorting.scm" . 2049))

((call
   (push.const core control)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/rnrs/control.scm" . 2049))
 (push.const . rnrs.control)
 (push.const 6)
 (push.const
   (when import . core.control\x27;when)
   (unless import . core.control\x27;unless)
   (do import . \x2E;do)
   (case-lambda import . core.control\x27;case-lambda))
 (apply.gloc.of \x2E;intern-scheme-library "../stdlib/rnrs/control.scm" . 2049))

((call
   (push.const core records)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/rnrs/records/syntactic.scm" . 2049))
 (push.const . rnrs.records.syntactic)
 (push.const 6)
 (push.const
   (define-record-type import . core.records\x27;define-record-type)
   (record-type-descriptor import . core.records\x27;record-type-descriptor)
   (record-constructor-descriptor import . core.records\x27;record-constructor-descriptor))
 (apply.gloc.of \x2E;intern-scheme-library "../stdlib/rnrs/records/syntactic.scm" . 2049))

((call
   (push.const core records)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/rnrs/records/procedural.scm" . 2049))
 (push.const . rnrs.records.procedural)
 (push.const 6)
 (push.const
   (make-record-type-descriptor import . \x2E;make-record-type-descriptor)
   (record-type-descriptor? import . \x2E;record-type-descriptor?)
   (make-record-constructor-descriptor import . \x2E;make-record-constructor-descriptor)
   (record-constructor import . \x2E;record-constructor)
   (record-predicate import . \x2E;record-predicate)
   (record-accessor import . \x2E;record-accessor)
   (record-mutator import . \x2E;record-mutator))
 (apply.gloc.of \x2E;intern-scheme-library "../stdlib/rnrs/records/procedural.scm" . 2049))

((call
   (push.const core records)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/rnrs/records/inspection.scm" . 2049))
 (push.const . rnrs.records.inspection)
 (push.const 6)
 (push.const
   (record? import . \x2E;record?)
   (record-rtd import . \x2E;record-rtd)
   (record-type-name import . \x2E;record-type-name)
   (record-type-parent import . \x2E;record-type-parent)
   (record-type-uid import . \x2E;record-type-uid)
   (record-type-generative? import . \x2E;record-type-generative?)
   (record-type-sealed? import . \x2E;record-type-sealed?)
   (record-type-opaque? import . \x2E;record-type-opaque?)
   (record-type-field-names import . \x2E;record-type-field-names)
   (record-field-mutable? import . \x2E;record-field-mutable?))
 (apply.gloc.of \x2E;intern-scheme-library "../stdlib/rnrs/records/inspection.scm" . 2049))

((call
   (push.const core exceptions)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/rnrs/exceptions.scm" . 2049))
 (push.const . rnrs.exceptions)
 (push.const 6)
 (push.const
   (with-exception-handler import . \x2E;with-exception-handler)
   (guard import . core.exceptions\x27;guard)
   (raise import . \x2E;raise)
   (raise-continuable import . \x2E;raise-continuable))
 (apply.gloc.of \x2E;intern-scheme-library "../stdlib/rnrs/exceptions.scm" . 2049))

((call
   (push.const core conditions)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/rnrs/conditions.scm" . 2049))
 (push.const . rnrs.conditions)
 (push.const 6)
 (push.const
   (&condition import . \x2E;&condition)
   (condition import . \x2E;condition)
   (simple-conditions import . \x2E;simple-conditions)
   (condition? import . \x2E;condition?)
   (condition-predicate import . \x2E;condition-predicate)
   (condition-accessor import . \x2E;condition-accessor)
   (define-condition-type import . core.conditions\x27;define-condition-type)
   (&message import . \x2E;&message)
   (make-message-condition import . \x2E;make-message-condition)
   (message-condition? import . \x2E;message-condition?)
   (condition-message import . \x2E;condition-message)
   (&warning import . \x2E;&warning)
   (make-warning import . \x2E;make-warning)
   (warning? import . \x2E;warning?)
   (&serious import . \x2E;&serious)
   (make-serious-condition import . \x2E;make-serious-condition)
   (serious-condition? import . \x2E;serious-condition?)
   (&error import . \x2E;&error)
   (make-error import . \x2E;make-error)
   (error? import . \x2E;error?)
   (&violation import . \x2E;&violation)
   (make-violation import . \x2E;make-violation)
   (violation? import . \x2E;violation?)
   (&assertion import . \x2E;&assertion)
   (make-assertion-violation import . \x2E;make-assertion-violation)
   (assertion-violation? import . \x2E;assertion-violation?)
   (&irritants import . \x2E;&irritants)
   (make-irritants-condition import . \x2E;make-irritants-condition)
   (irritants-condition? import . \x2E;irritants-condition?)
   (&who import . \x2E;&who)
   (make-who-condition import . \x2E;make-who-condition)
   (who-condition? import . \x2E;who-condition?)
   (condition-who import . \x2E;condition-who)
   (condition-irritants import . \x2E;condition-irritants)
   (&non-continuable import . \x2E;&non-continuable)
   (make-non-continuable-violation import . \x2E;make-non-continuable-violation)
   (non-continuable-violation? import . \x2E;non-continuable-violation?)
   (&implementation-restriction import . \x2E;&implementation-restriction)
   (make-implementation-restriction-violation
     import
     .
     \x2E;make-implementation-restriction-violation)
   (implementation-restriction-violation? import . \x2E;implementation-restriction-violation?)
   (&lexical import . \x2E;&lexical)
   (make-lexical-violation import . \x2E;make-lexical-violation)
   (lexical-violation? import . \x2E;lexical-violation?)
   (&syntax import . \x2E;&syntax)
   (make-syntax-violation import . \x2E;make-syntax-violation)
   (syntax-violation? import . \x2E;syntax-violation?)
   (syntax-violation-form import . \x2E;syntax-violation-form)
   (syntax-violation-subform import . \x2E;syntax-violation-subform)
   (&undefined import . \x2E;&undefined)
   (make-undefined-violation import . \x2E;make-undefined-violation)
   (undefined-violation? import . \x2E;undefined-violation?))
 (apply.gloc.of \x2E;intern-scheme-library "../stdlib/rnrs/conditions.scm" . 2049))

((call
   (push.const core io)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/rnrs/io/ports.scm" . 2049))
 (push.const . rnrs.io.ports)
 (push.const 6)
 (push.const
   (&i/o import . \x2E;&i/o)
   (make-i/o-error import . \x2E;make-i/o-error)
   (i/o-error? import . \x2E;i/o-error?)
   (&i/o-read import . \x2E;&i/o-read)
   (make-i/o-read-error import . \x2E;make-i/o-read-error)
   (i/o-read-error? import . \x2E;i/o-read-error?)
   (&i/o-write import . \x2E;&i/o-write)
   (make-i/o-write-error import . \x2E;make-i/o-write-error)
   (i/o-write-error? import . \x2E;i/o-write-error?)
   (&i/o-invalid-position import . \x2E;&i/o-invalid-position)
   (make-i/o-invalid-position-error import . \x2E;make-i/o-invalid-position-error)
   (i/o-invalid-position-error? import . \x2E;i/o-invalid-position-error?)
   (i/o-error-position import . \x2E;i/o-error-position)
   (&i/o-filename import . \x2E;&i/o-filename)
   (make-i/o-filename-error import . \x2E;make-i/o-filename-error)
   (i/o-filename-error? import . \x2E;i/o-filename-error?)
   (i/o-error-filename import . \x2E;i/o-error-filename)
   (&i/o-file-protection import . \x2E;&i/o-file-protection)
   (make-i/o-file-protection-error import . \x2E;make-i/o-file-protection-error)
   (i/o-file-protection-error? import . \x2E;i/o-file-protection-error?)
   (&i/o-file-is-read-only import . \x2E;&i/o-file-is-read-only)
   (make-i/o-file-is-read-only-error import . \x2E;make-i/o-file-is-read-only-error)
   (i/o-file-is-read-only-error? import . \x2E;i/o-file-is-read-only-error?)
   (&i/o-file-already-exists import . \x2E;&i/o-file-already-exists)
   (make-i/o-file-already-exists-error import . \x2E;make-i/o-file-already-exists-error)
   (i/o-file-already-exists-error? import . \x2E;i/o-file-already-exists-error?)
   (&i/o-file-does-not-exist import . \x2E;&i/o-file-does-not-exist)
   (make-i/o-file-does-not-exist-error import . \x2E;make-i/o-file-does-not-exist-error)
   (i/o-file-does-not-exist-error? import . \x2E;i/o-file-does-not-exist-error?)
   (&i/o-port import . \x2E;&i/o-port)
   (make-i/o-port-error import . \x2E;make-i/o-port-error)
   (i/o-port-error? import . \x2E;i/o-port-error?)
   (i/o-error-port import . \x2E;i/o-error-port)
   (&i/o-decoding import . \x2E;&i/o-decoding)
   (make-i/o-decoding-error import . \x2E;make-i/o-decoding-error)
   (i/o-decoding-error? import . \x2E;i/o-decoding-error?)
   (&i/o-encoding import . \x2E;&i/o-encoding)
   (make-i/o-encoding-error import . \x2E;make-i/o-encoding-error)
   (i/o-encoding-error? import . \x2E;i/o-encoding-error?)
   (i/o-encoding-error-char import . \x2E;i/o-encoding-error-char)
   (file-options import . core.io\x27;file-options)
   (buffer-mode import . core.io\x27;buffer-mode)
   (buffer-mode? import . core.io\x27;buffer-mode?)
   (utf-8-codec import . core.io\x27;utf-8-codec)
   (utf-16-codec import . core.io\x27;utf-16-codec)
   (latin-1-codec import . core.io\x27;latin-1-codec)
   (eol-style import . core.io\x27;eol-style)
   (error-handling-mode import . core.io\x27;error-handling-mode)
   (make-transcoder import . core.io\x27;make-transcoder)
   (transcoder-codec import . core.io\x27;transcoder-codec)
   (transcoder-eol-style import . core.io\x27;transcoder-eol-style)
   (transcoder-error-handling-mode import . core.io\x27;transcoder-error-handling-mode)
   (native-transcoder import . core.io\x27;native-transcoder)
   (native-eol-style import . core.io\x27;native-eol-style)
   (bytevector->string import . core.io\x27;bytevector->string)
   (string->bytevector import . core.io\x27;string->bytevector)
   (eof-object import . \x2E;eof-object)
   (eof-object? import . \x2E;eof-object?)
   (port? import . \x2E;port?)
   (port-transcoder import . core.io\x27;port-transcoder)
   (textual-port? import . core.io\x27;textual-port?)
   (binary-port? import . core.io\x27;binary-port?)
   (transcoded-port import . core.io\x27;transcoded-port)
   (port-has-port-position? import . \x2E;port-has-port-position?)
   (port-position import . \x2E;port-position)
   (port-has-set-port-position!? import . \x2E;port-has-set-port-position!?)
   (set-port-position! import . \x2E;set-port-position!)
   (close-port import . \x2E;close-port)
   (call-with-port import . \x2E;call-with-port)
   (input-port? import . \x2E;input-port?)
   (port-eof? import . \x2E;port-eof?)
   (open-file-input-port import . core.io\x27;open-file-input-port)
   (open-bytevector-input-port import . core.io\x27;open-bytevector-input-port)
   (open-string-input-port import . core.io\x27;open-string-input-port)
   (standard-input-port import . \x2E;standard-input-port)
   (current-input-port import . \x2E;current-input-port)
   (get-u8 import . \x2E;get-u8)
   (lookahead-u8 import . \x2E;lookahead-u8)
   (get-bytevector-n import . \x2E;get-bytevector-n)
   (get-bytevector-n! import . \x2E;get-bytevector-n!)
   (get-bytevector-some import . \x2E;get-bytevector-some)
   (get-bytevector-all import . \x2E;get-bytevector-all)
   (get-char import . \x2E;get-char)
   (lookahead-char import . \x2E;lookahead-char)
   (get-string-n import . \x2E;get-string-n)
   (get-string-n! import . \x2E;get-string-n!)
   (get-string-all import . \x2E;get-string-all)
   (get-line import . \x2E;get-line)
   (get-datum import . \x2E;get-datum)
   (output-port? import . \x2E;output-port?)
   (flush-output-port import . \x2E;flush-output-port)
   (output-port-buffer-mode import . \x2E;output-port-buffer-mode)
   (open-file-output-port import . core.io\x27;open-file-output-port)
   (open-bytevector-output-port import . core.io\x27;open-bytevector-output-port)
   (call-with-bytevector-output-port import . core.io\x27;call-with-bytevector-output-port)
   (open-string-output-port import . core.io\x27;open-string-output-port)
   (call-with-string-output-port import . core.io\x27;call-with-string-output-port)
   (standard-output-port import . \x2E;standard-output-port)
   (standard-error-port import . \x2E;standard-error-port)
   (current-output-port import . \x2E;current-output-port)
   (current-error-port import . \x2E;current-error-port)
   (put-u8 import . \x2E;put-u8)
   (put-bytevector import . \x2E;put-bytevector)
   (put-char import . \x2E;put-char)
   (put-string import . \x2E;put-string)
   (put-datum import . \x2E;put-datum)
   (open-file-input/output-port import . core.io\x27;open-file-input/output-port)
   (make-custom-binary-input-port import . core.io\x27;make-custom-binary-input-port)
   (make-custom-textual-input-port import . core.io\x27;make-custom-textual-input-port)
   (make-custom-binary-output-port import . core.io\x27;make-custom-binary-output-port)
   (make-custom-textual-output-port import . core.io\x27;make-custom-textual-output-port)
   (make-custom-binary-input/output-port import . core.io\x27;make-custom-binary-input/output-port)
   (make-custom-textual-input/output-port
     import
     .
     core.io\x27;make-custom-textual-input/output-port))
 (apply.gloc.of \x2E;intern-scheme-library "../stdlib/rnrs/io/ports.scm" . 2049))

((call
   (push.const core io)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/rnrs/io/simple.scm" . 2049))
 (push.const . rnrs.io.simple)
 (push.const 6)
 (push.const
   (&i/o import . \x2E;&i/o)
   (make-i/o-error import . \x2E;make-i/o-error)
   (i/o-error? import . \x2E;i/o-error?)
   (&i/o-read import . \x2E;&i/o-read)
   (make-i/o-read-error import . \x2E;make-i/o-read-error)
   (i/o-read-error? import . \x2E;i/o-read-error?)
   (&i/o-write import . \x2E;&i/o-write)
   (make-i/o-write-error import . \x2E;make-i/o-write-error)
   (i/o-write-error? import . \x2E;i/o-write-error?)
   (&i/o-invalid-position import . \x2E;&i/o-invalid-position)
   (make-i/o-invalid-position-error import . \x2E;make-i/o-invalid-position-error)
   (i/o-invalid-position-error? import . \x2E;i/o-invalid-position-error?)
   (i/o-error-position import . \x2E;i/o-error-position)
   (&i/o-filename import . \x2E;&i/o-filename)
   (make-i/o-filename-error import . \x2E;make-i/o-filename-error)
   (i/o-filename-error? import . \x2E;i/o-filename-error?)
   (i/o-error-filename import . \x2E;i/o-error-filename)
   (&i/o-file-protection import . \x2E;&i/o-file-protection)
   (make-i/o-file-protection-error import . \x2E;make-i/o-file-protection-error)
   (i/o-file-protection-error? import . \x2E;i/o-file-protection-error?)
   (&i/o-file-is-read-only import . \x2E;&i/o-file-is-read-only)
   (make-i/o-file-is-read-only-error import . \x2E;make-i/o-file-is-read-only-error)
   (i/o-file-is-read-only-error? import . \x2E;i/o-file-is-read-only-error?)
   (&i/o-file-already-exists import . \x2E;&i/o-file-already-exists)
   (make-i/o-file-already-exists-error import . \x2E;make-i/o-file-already-exists-error)
   (i/o-file-already-exists-error? import . \x2E;i/o-file-already-exists-error?)
   (&i/o-file-does-not-exist import . \x2E;&i/o-file-does-not-exist)
   (make-i/o-file-does-not-exist-error import . \x2E;make-i/o-file-does-not-exist-error)
   (i/o-file-does-not-exist-error? import . \x2E;i/o-file-does-not-exist-error?)
   (&i/o-port import . \x2E;&i/o-port)
   (make-i/o-port-error import . \x2E;make-i/o-port-error)
   (i/o-port-error? import . \x2E;i/o-port-error?)
   (i/o-error-port import . \x2E;i/o-error-port)
   (&i/o-decoding import . \x2E;&i/o-decoding)
   (make-i/o-decoding-error import . \x2E;make-i/o-decoding-error)
   (i/o-decoding-error? import . \x2E;i/o-decoding-error?)
   (&i/o-encoding import . \x2E;&i/o-encoding)
   (make-i/o-encoding-error import . \x2E;make-i/o-encoding-error)
   (i/o-encoding-error? import . \x2E;i/o-encoding-error?)
   (i/o-encoding-error-char import . \x2E;i/o-encoding-error-char)
   (current-input-port import . \x2E;current-input-port)
   (current-output-port import . \x2E;current-output-port)
   (current-error-port import . \x2E;current-error-port)
   (eof-object import . \x2E;eof-object)
   (eof-object? import . \x2E;eof-object?)
   (input-port? import . \x2E;input-port?)
   (output-port? import . \x2E;output-port?)
   (call-with-input-file import . core.io\x27;call-with-input-file)
   (call-with-output-file import . core.io\x27;call-with-output-file)
   (with-input-from-file import . core.io\x27;with-input-from-file)
   (with-output-to-file import . core.io\x27;with-output-to-file)
   (open-input-file import . core.io\x27;open-input-file)
   (open-output-file import . core.io\x27;open-output-file)
   (close-input-port import . core.io\x27;close-input-port)
   (close-output-port import . core.io\x27;close-output-port)
   (read-char import . \x2E;read-char)
   (peek-char import . \x2E;peek-char)
   (read import . \x2E;read)
   (write-char import . \x2E;write-char)
   (newline import . \x2E;newline)
   (display import . \x2E;display)
   (write import . \x2E;write))
 (apply.gloc.of \x2E;intern-scheme-library "../stdlib/rnrs/io/simple.scm" . 2049))

((call
   (push.const core files)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/rnrs/files.scm" . 2049))
 (push.const . rnrs.files)
 (push.const 6)
 (push.const (file-exists? import . \x2E;file-exists?) (delete-file import . \x2E;delete-file))
 (apply.gloc.of \x2E;intern-scheme-library "../stdlib/rnrs/files.scm" . 2049))

((call
   (push.const core primitives)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/rnrs/programs.scm" . 2049))
 (push.const . rnrs.programs)
 (push.const 6)
 (push.const (command-line import . \x2E;command-line) (exit import . \x2E;exit))
 (apply.gloc.of \x2E;intern-scheme-library "../stdlib/rnrs/programs.scm" . 2049))

((call
   (push.const core arithmetic)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/rnrs/arithmetic/fixnums.scm" . 2049))
 (push.const . rnrs.arithmetic.fixnums)
 (push.const 6)
 (push.const
   (fixnum? import . \x2E;fixnum?)
   (fixnum-width import . \x2E;fixnum-width)
   (least-fixnum import . \x2E;least-fixnum)
   (greatest-fixnum import . \x2E;greatest-fixnum)
   (fx=? import . \x2E;fx=?)
   (fx<? import . \x2E;fx<?)
   (fx>? import . \x2E;fx>?)
   (fx<=? import . \x2E;fx<=?)
   (fx>=? import . \x2E;fx>=?)
   (fxzero? import . \x2E;fxzero?)
   (fxpositive? import . \x2E;fxpositive?)
   (fxnegative? import . \x2E;fxnegative?)
   (fxodd? import . \x2E;fxodd?)
   (fxeven? import . \x2E;fxeven?)
   (fxmax import . \x2E;fxmax)
   (fxmin import . \x2E;fxmin)
   (fx+ import . \x2E;fx+)
   (fx* import . \x2E;fx*)
   (fx- import . \x2E;fx-)
   (fxdiv import . \x2E;fxdiv)
   (fxmod import . core.arithmetic\x27;fxmod)
   (fxdiv-and-mod import . core.arithmetic\x27;fxdiv-and-mod)
   (fxdiv0 import . \x2E;fxdiv0)
   (fxmod0 import . core.arithmetic\x27;fxmod0)
   (fxdiv0-and-mod0 import . core.arithmetic\x27;fxdiv0-and-mod0)
   (fx+/carry import . core.arithmetic\x27;fx+/carry)
   (fx-/carry import . core.arithmetic\x27;fx-/carry)
   (fx*/carry import . core.arithmetic\x27;fx*/carry)
   (fxnot import . \x2E;fxnot)
   (fxand import . \x2E;fxand)
   (fxior import . \x2E;fxior)
   (fxxor import . \x2E;fxxor)
   (fxif import . \x2E;fxif)
   (fxbit-count import . \x2E;fxbit-count)
   (fxlength import . \x2E;fxlength)
   (fxfirst-bit-set import . \x2E;fxfirst-bit-set)
   (fxbit-set? import . \x2E;fxbit-set?)
   (fxcopy-bit import . \x2E;fxcopy-bit)
   (fxbit-field import . \x2E;fxbit-field)
   (fxcopy-bit-field import . \x2E;fxcopy-bit-field)
   (fxarithmetic-shift import . \x2E;fxarithmetic-shift)
   (fxarithmetic-shift-left import . \x2E;fxarithmetic-shift-left)
   (fxarithmetic-shift-right import . \x2E;fxarithmetic-shift-right)
   (fxrotate-bit-field import . core.arithmetic\x27;fxrotate-bit-field)
   (fxreverse-bit-field import . core.arithmetic\x27;fxreverse-bit-field))
 (apply.gloc.of \x2E;intern-scheme-library "../stdlib/rnrs/arithmetic/fixnums.scm" . 2049))

((call
   (push.const core arithmetic)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/rnrs/arithmetic/flonums.scm" . 2049))
 (push.const . rnrs.arithmetic.flonums)
 (push.const 6)
 (push.const
   (flonum? import . \x2E;flonum?)
   (real->flonum import . \x2E;real->flonum)
   (fl=? import . \x2E;fl=?)
   (fl<? import . \x2E;fl<?)
   (fl>? import . \x2E;fl>?)
   (fl<=? import . \x2E;fl<=?)
   (fl>=? import . \x2E;fl>=?)
   (flinteger? import . \x2E;flinteger?)
   (flzero? import . \x2E;flzero?)
   (flpositive? import . \x2E;flpositive?)
   (flnegative? import . \x2E;flnegative?)
   (flodd? import . \x2E;flodd?)
   (fleven? import . \x2E;fleven?)
   (flfinite? import . \x2E;flfinite?)
   (flinfinite? import . \x2E;flinfinite?)
   (flnan? import . \x2E;flnan?)
   (flmax import . \x2E;flmax)
   (flmin import . \x2E;flmin)
   (fl+ import . \x2E;fl+)
   (fl* import . \x2E;fl*)
   (fl- import . \x2E;fl-)
   (fl/ import . \x2E;fl/)
   (fldiv-and-mod import . core.arithmetic\x27;fldiv-and-mod)
   (fldiv import . \x2E;fldiv)
   (flmod import . core.arithmetic\x27;flmod)
   (fldiv0-and-mod0 import . core.arithmetic\x27;fldiv0-and-mod0)
   (fldiv0 import . \x2E;fldiv0)
   (flmod0 import . core.arithmetic\x27;flmod0)
   (flnumerator import . \x2E;flnumerator)
   (fldenominator import . \x2E;fldenominator)
   (flfloor import . \x2E;flfloor)
   (flceiling import . \x2E;flceiling)
   (fltruncate import . \x2E;fltruncate)
   (flround import . \x2E;flround)
   (flexp import . \x2E;flexp)
   (flexpt import . \x2E;flexpt)
   (fllog import . \x2E;fllog)
   (flsin import . \x2E;flsin)
   (flcos import . \x2E;flcos)
   (fltan import . \x2E;fltan)
   (flasin import . \x2E;flasin)
   (flacos import . \x2E;flacos)
   (flatan import . \x2E;flatan)
   (flabs import . \x2E;flabs)
   (flsqrt import . \x2E;flsqrt)
   (fixnum->flonum import . \x2E;fixnum->flonum)
   (&no-infinities import . \x2E;&no-infinities)
   (make-no-infinities-violation import . \x2E;make-no-infinities-violation)
   (no-infinities-violation? import . \x2E;no-infinities-violation?)
   (&no-nans import . \x2E;&no-nans)
   (make-no-nans-violation import . \x2E;make-no-nans-violation)
   (no-nans-violation? import . \x2E;no-nans-violation?))
 (apply.gloc.of \x2E;intern-scheme-library "../stdlib/rnrs/arithmetic/flonums.scm" . 2049))

((call
   (push.const core arithmetic)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/rnrs/arithmetic/bitwise.scm" . 2049))
 (push.const . rnrs.arithmetic.bitwise)
 (push.const 6)
 (push.const
   (bitwise-not import . \x2E;bitwise-not)
   (bitwise-and import . \x2E;bitwise-and)
   (bitwise-ior import . \x2E;bitwise-ior)
   (bitwise-xor import . \x2E;bitwise-xor)
   (bitwise-if import . core.arithmetic\x27;bitwise-if)
   (bitwise-bit-count import . \x2E;bitwise-bit-count)
   (bitwise-length import . \x2E;bitwise-length)
   (bitwise-first-bit-set import . \x2E;bitwise-first-bit-set)
   (bitwise-bit-set? import . core.arithmetic\x27;bitwise-bit-set?)
   (bitwise-copy-bit import . core.arithmetic\x27;bitwise-copy-bit)
   (bitwise-bit-field import . core.arithmetic\x27;bitwise-bit-field)
   (bitwise-copy-bit-field import . core.arithmetic\x27;bitwise-copy-bit-field)
   (bitwise-arithmetic-shift import . \x2E;bitwise-arithmetic-shift)
   (bitwise-arithmetic-shift-left import . core.arithmetic\x27;bitwise-arithmetic-shift-left)
   (bitwise-arithmetic-shift-right import . core.arithmetic\x27;bitwise-arithmetic-shift-right)
   (bitwise-rotate-bit-field import . core.arithmetic\x27;bitwise-rotate-bit-field)
   (bitwise-reverse-bit-field import . core.arithmetic\x27;bitwise-reverse-bit-field))
 (apply.gloc.of \x2E;intern-scheme-library "../stdlib/rnrs/arithmetic/bitwise.scm" . 2049))

((call
   (push.const core syntax-case)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/rnrs/syntax-case.scm" . 2049))
 (push.const . rnrs.syntax-case)
 (push.const 6)
 (push.const
   (make-variable-transformer import . \x2E;make-variable-transformer)
   (syntax-case import . \x2E;syntax-case)
   (_ import . \x2E;_)
   (... import . \x2E;...)
   (syntax import . \x2E;syntax)
   (identifier? import . \x2E;identifier?)
   (bound-identifier=? import . \x2E;bound-identifier=?)
   (free-identifier=? import . \x2E;free-identifier=?)
   (syntax->datum import . \x2E;syntax->datum)
   (datum->syntax import . \x2E;datum->syntax)
   (generate-temporaries import . \x2E;generate-temporaries)
   (with-syntax import . core.syntax-case\x27;with-syntax)
   (quasisyntax import . core.syntax-case\x27;quasisyntax)
   (unsyntax import . core.syntax-case\x27;unsyntax)
   (unsyntax-splicing import . core.syntax-case\x27;unsyntax-splicing)
   (syntax-violation import . \x2E;syntax-violation))
 (apply.gloc.of \x2E;intern-scheme-library "../stdlib/rnrs/syntax-case.scm" . 2049))

((call
   (push.const core hashtables)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/rnrs/hashtables.scm" . 2049))
 (push.const . rnrs.hashtables)
 (push.const 6)
 (push.const
   (make-eq-hashtable import . core.hashtables\x27;make-eq-hashtable)
   (make-eqv-hashtable import . core.hashtables\x27;make-eqv-hashtable)
   (make-hashtable import . core.hashtables\x27;make-hashtable)
   (hashtable? import . \x2E;core-hashtable?)
   (hashtable-size import . \x2E;core-hashtable-size)
   (hashtable-ref import . \x2E;core-hashtable-ref)
   (hashtable-set! import . \x2E;core-hashtable-set!)
   (hashtable-delete! import . \x2E;core-hashtable-delete!)
   (hashtable-contains? import . \x2E;core-hashtable-contains?)
   (hashtable-update! import . core.hashtables\x27;hashtable-update!)
   (hashtable-copy import . \x2E;core-hashtable-copy)
   (hashtable-clear! import . \x2E;core-hashtable-clear!)
   (hashtable-keys import . core.hashtables\x27;hashtable-keys)
   (hashtable-entries import . core.hashtables\x27;hashtable-entries)
   (hashtable-equivalence-function import . \x2E;core-hashtable-equivalence-function)
   (hashtable-hash-function import . \x2E;core-hashtable-hash-function)
   (hashtable-mutable? import . \x2E;core-hashtable-mutable?)
   (equal-hash import . \x2E;equal-hash)
   (string-hash import . \x2E;string-hash)
   (string-ci-hash import . core.hashtables\x27;string-ci-hash)
   (symbol-hash import . \x2E;symbol-hash))
 (apply.gloc.of \x2E;intern-scheme-library "../stdlib/rnrs/hashtables.scm" . 2049))

((call
   (push.const core enums)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/rnrs/enums.scm" . 2049))
 (push.const . rnrs.enums)
 (push.const 6)
 (push.const
   (make-enumeration import . core.enums\x27;make-enumeration)
   (enum-set-universe import . core.enums\x27;enum-set-universe)
   (enum-set-indexer import . core.enums\x27;enum-set-indexer)
   (enum-set-constructor import . core.enums\x27;enum-set-constructor)
   (enum-set->list import . core.enums\x27;enum-set->list)
   (enum-set-member? import . core.enums\x27;enum-set-member?)
   (enum-set-subset? import . core.enums\x27;enum-set-subset?)
   (enum-set=? import . core.enums\x27;enum-set=?)
   (enum-set-union import . core.enums\x27;enum-set-union)
   (enum-set-intersection import . core.enums\x27;enum-set-intersection)
   (enum-set-difference import . core.enums\x27;enum-set-difference)
   (enum-set-complement import . core.enums\x27;enum-set-complement)
   (enum-set-projection import . core.enums\x27;enum-set-projection)
   (define-enumeration import . core.enums\x27;define-enumeration))
 (apply.gloc.of \x2E;intern-scheme-library "../stdlib/rnrs/enums.scm" . 2049))

((call
   (push.const rnrs enums)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/rnrs.scm" . 2049))
 (call
   (push.const rnrs hashtables)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/rnrs.scm" . 2049))
 (call
   (push.const rnrs syntax-case)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/rnrs.scm" . 2049))
 (call
   (push.const rnrs arithmetic bitwise)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/rnrs.scm" . 2049))
 (call
   (push.const rnrs arithmetic flonums)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/rnrs.scm" . 2049))
 (call
   (push.const rnrs arithmetic fixnums)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/rnrs.scm" . 2049))
 (call
   (push.const rnrs programs)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/rnrs.scm" . 2049))
 (call
   (push.const rnrs files)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/rnrs.scm" . 2049))
 (call
   (push.const rnrs io simple)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/rnrs.scm" . 2049))
 (call
   (push.const rnrs io ports)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/rnrs.scm" . 2049))
 (call
   (push.const rnrs conditions)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/rnrs.scm" . 2049))
 (call
   (push.const rnrs exceptions)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/rnrs.scm" . 2049))
 (call
   (push.const rnrs records inspection)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/rnrs.scm" . 2049))
 (call
   (push.const rnrs records procedural)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/rnrs.scm" . 2049))
 (call
   (push.const rnrs records syntactic)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/rnrs.scm" . 2049))
 (call
   (push.const rnrs control)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/rnrs.scm" . 2049))
 (call
   (push.const rnrs sorting)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/rnrs.scm" . 2049))
 (call
   (push.const rnrs lists)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/rnrs.scm" . 2049))
 (call
   (push.const rnrs bytevectors)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/rnrs.scm" . 2049))
 (call
   (push.const rnrs unicode)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/rnrs.scm" . 2049))
 (call
   (push.const rnrs base)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/rnrs.scm" . 2049))
 (push.const . rnrs)
 (push.const 6)
 (push.const
   (define import . \x2E;define)
   (define-syntax import . \x2E;define-syntax)
   (quote import . \x2E;quote)
   (lambda import . \x2E;lambda)
   (if import . \x2E;if)
   (set! import . \x2E;set!)
   (cond import . \x2E;cond)
   (case import . \x2E;case)
   (and import . \x2E;and)
   (or import . \x2E;or)
   (let import . \x2E;let)
   (let* import . \x2E;let*)
   (letrec import . \x2E;letrec)
   (letrec* import . \x2E;letrec*)
   (let-values import . \x2E;let-values)
   (let*-values import . \x2E;let*-values)
   (begin import . \x2E;begin)
   (quasiquote import . \x2E;quasiquote)
   (unquote import . \x2E;unquote)
   (unquote-splicing import . \x2E;unquote-splicing)
   (let-syntax import . \x2E;let-syntax)
   (letrec-syntax import . \x2E;letrec-syntax)
   (syntax-rules import . \x2E;syntax-rules)
   (identifier-syntax import . \x2E;identifier-syntax)
   (assert import . \x2E;assert)
   (else import . \x2E;else)
   (=> import . \x2E;=>)
   (... import . \x2E;...)
   (_ import . \x2E;_)
   (eq? import . \x2E;eq?)
   (eqv? import . \x2E;eqv?)
   (equal? import . \x2E;equal?)
   (procedure? import . \x2E;procedure?)
   (number? import . \x2E;number?)
   (complex? import . \x2E;complex?)
   (real? import . \x2E;real?)
   (rational? import . \x2E;rational?)
   (integer? import . \x2E;integer?)
   (real-valued? import . \x2E;real-valued?)
   (rational-valued? import . \x2E;rational-valued?)
   (integer-valued? import . \x2E;integer-valued?)
   (exact? import . \x2E;exact?)
   (inexact? import . \x2E;inexact?)
   (inexact import . \x2E;inexact)
   (exact import . \x2E;exact)
   (= import . \x2E;=)
   (< import . \x2E;<)
   (> import . \x2E;>)
   (<= import . \x2E;<=)
   (>= import . \x2E;>=)
   (zero? import . \x2E;zero?)
   (positive? import . \x2E;positive?)
   (negative? import . \x2E;negative?)
   (odd? import . \x2E;odd?)
   (even? import . \x2E;even?)
   (finite? import . \x2E;finite?)
   (infinite? import . \x2E;infinite?)
   (nan? import . \x2E;nan?)
   (max import . \x2E;max)
   (min import . \x2E;min)
   (+ import . \x2E;+)
   (* import . \x2E;*)
   (- import . \x2E;-)
   (/ import . \x2E;/)
   (abs import . \x2E;abs)
   (div-and-mod import . \x2E;div-and-mod)
   (div import . \x2E;div)
   (mod import . \x2E;mod)
   (div0-and-mod0 import . \x2E;div0-and-mod0)
   (div0 import . \x2E;div0)
   (mod0 import . \x2E;mod0)
   (gcd import . \x2E;gcd)
   (lcm import . \x2E;lcm)
   (numerator import . \x2E;numerator)
   (denominator import . \x2E;denominator)
   (floor import . \x2E;floor)
   (ceiling import . \x2E;ceiling)
   (truncate import . \x2E;truncate)
   (round import . \x2E;round)
   (rationalize import . \x2E;rationalize)
   (exp import . \x2E;exp)
   (log import . \x2E;log)
   (sin import . \x2E;sin)
   (cos import . \x2E;cos)
   (tan import . \x2E;tan)
   (asin import . \x2E;asin)
   (acos import . \x2E;acos)
   (atan import . \x2E;atan)
   (sqrt import . \x2E;sqrt)
   (exact-integer-sqrt import . \x2E;exact-integer-sqrt)
   (expt import . \x2E;expt)
   (make-rectangular import . \x2E;make-rectangular)
   (make-polar import . \x2E;make-polar)
   (real-part import . \x2E;real-part)
   (imag-part import . \x2E;imag-part)
   (magnitude import . \x2E;magnitude)
   (angle import . \x2E;angle)
   (number->string import . \x2E;number->string)
   (string->number import . \x2E;string->number)
   (not import . \x2E;not)
   (boolean? import . \x2E;boolean?)
   (boolean=? import . \x2E;boolean=?)
   (pair? import . \x2E;pair?)
   (cons import . \x2E;cons)
   (car import . \x2E;car)
   (cdr import . \x2E;cdr)
   (caar import . \x2E;caar)
   (cadr import . \x2E;cadr)
   (cdar import . \x2E;cdar)
   (cddr import . \x2E;cddr)
   (caaar import . \x2E;caaar)
   (caadr import . \x2E;caadr)
   (cadar import . \x2E;cadar)
   (caddr import . \x2E;caddr)
   (cdaar import . \x2E;cdaar)
   (cdadr import . \x2E;cdadr)
   (cddar import . \x2E;cddar)
   (cdddr import . \x2E;cdddr)
   (caaaar import . \x2E;caaaar)
   (caaadr import . \x2E;caaadr)
   (caadar import . \x2E;caadar)
   (caaddr import . \x2E;caaddr)
   (cadaar import . \x2E;cadaar)
   (cadadr import . \x2E;cadadr)
   (caddar import . \x2E;caddar)
   (cadddr import . \x2E;cadddr)
   (cdaaar import . \x2E;cdaaar)
   (cdaadr import . \x2E;cdaadr)
   (cdadar import . \x2E;cdadar)
   (cdaddr import . \x2E;cdaddr)
   (cddaar import . \x2E;cddaar)
   (cddadr import . \x2E;cddadr)
   (cdddar import . \x2E;cdddar)
   (cddddr import . \x2E;cddddr)
   (null? import . \x2E;null?)
   (list? import . \x2E;list?)
   (list import . \x2E;list)
   (length import . \x2E;length)
   (append import . \x2E;append)
   (reverse import . \x2E;reverse)
   (list-tail import . \x2E;list-tail)
   (list-ref import . \x2E;list-ref)
   (map import . \x2E;map)
   (for-each import . \x2E;for-each)
   (symbol? import . \x2E;symbol?)
   (symbol->string import . \x2E;symbol->string)
   (string->symbol import . \x2E;string->symbol)
   (symbol=? import . \x2E;symbol=?)
   (char? import . \x2E;char?)
   (char->integer import . \x2E;char->integer)
   (integer->char import . \x2E;integer->char)
   (char=? import . \x2E;char=?)
   (char<? import . \x2E;char<?)
   (char>? import . \x2E;char>?)
   (char<=? import . \x2E;char<=?)
   (char>=? import . \x2E;char>=?)
   (string? import . \x2E;string?)
   (make-string import . \x2E;make-string)
   (string import . \x2E;string)
   (string-length import . \x2E;string-length)
   (string-ref import . \x2E;string-ref)
   (string=? import . \x2E;string=?)
   (string<? import . \x2E;string<?)
   (string>? import . \x2E;string>?)
   (string<=? import . \x2E;string<=?)
   (string>=? import . \x2E;string>=?)
   (substring import . \x2E;substring)
   (string-append import . \x2E;string-append)
   (string->list import . \x2E;string->list)
   (list->string import . \x2E;list->string)
   (string-copy import . \x2E;string-copy)
   (string-for-each import . \x2E;string-for-each)
   (vector? import . \x2E;vector?)
   (make-vector import . \x2E;make-vector)
   (vector import . \x2E;vector)
   (vector-length import . \x2E;vector-length)
   (vector-ref import . \x2E;vector-ref)
   (vector-set! import . \x2E;vector-set!)
   (vector->list import . \x2E;vector->list)
   (list->vector import . \x2E;list->vector)
   (vector-fill! import . \x2E;vector-fill!)
   (vector-map import . \x2E;vector-map)
   (vector-for-each import . \x2E;vector-for-each)
   (error import . \x2E;error)
   (assertion-violation import . \x2E;assertion-violation)
   (apply import . \x2E;apply)
   (call-with-current-continuation import . \x2E;call-with-current-continuation)
   (call/cc import . \x2E;call/cc)
   (values import . \x2E;values)
   (call-with-values import . \x2E;call-with-values)
   (dynamic-wind import . \x2E;dynamic-wind)
   (char-upcase import . core.unicode\x27;char-upcase)
   (char-downcase import . core.unicode\x27;char-downcase)
   (char-titlecase import . core.unicode\x27;char-titlecase)
   (char-foldcase import . core.unicode\x27;char-foldcase)
   (char-ci=? import . core.unicode\x27;char-ci=?)
   (char-ci<? import . core.unicode\x27;char-ci<?)
   (char-ci>? import . core.unicode\x27;char-ci>?)
   (char-ci<=? import . core.unicode\x27;char-ci<=?)
   (char-ci>=? import . core.unicode\x27;char-ci>=?)
   (char-alphabetic? import . core.unicode\x27;char-alphabetic?)
   (char-numeric? import . core.unicode\x27;char-numeric?)
   (char-whitespace? import . \x2E;char-whitespace?)
   (char-upper-case? import . core.unicode\x27;char-upper-case?)
   (char-lower-case? import . core.unicode\x27;char-lower-case?)
   (char-title-case? import . core.unicode\x27;char-title-case?)
   (char-general-category import . core.unicode\x27;char-general-category)
   (string-upcase import . core.unicode\x27;string-upcase)
   (string-downcase import . core.unicode\x27;string-downcase)
   (string-titlecase import . core.unicode\x27;string-titlecase)
   (string-foldcase import . core.unicode\x27;string-foldcase)
   (string-ci=? import . core.unicode\x27;string-ci=?)
   (string-ci<? import . core.unicode\x27;string-ci<?)
   (string-ci>? import . core.unicode\x27;string-ci>?)
   (string-ci<=? import . core.unicode\x27;string-ci<=?)
   (string-ci>=? import . core.unicode\x27;string-ci>=?)
   (string-normalize-nfd import . core.unicode\x27;string-normalize-nfd)
   (string-normalize-nfkd import . core.unicode\x27;string-normalize-nfkd)
   (string-normalize-nfc import . core.unicode\x27;string-normalize-nfc)
   (string-normalize-nfkc import . core.unicode\x27;string-normalize-nfkc)
   (endianness import . core.bytevectors\x27;endianness)
   (native-endianness import . \x2E;native-endianness)
   (bytevector? import . \x2E;bytevector?)
   (make-bytevector import . \x2E;make-bytevector)
   (bytevector-length import . \x2E;bytevector-length)
   (bytevector=? import . \x2E;bytevector=?)
   (bytevector-fill! import . \x2E;bytevector-fill!)
   (bytevector-copy! import . \x2E;bytevector-copy!)
   (bytevector-copy import . \x2E;bytevector-copy)
   (bytevector-u8-ref import . \x2E;bytevector-u8-ref)
   (bytevector-s8-ref import . \x2E;bytevector-s8-ref)
   (bytevector-u8-set! import . \x2E;bytevector-u8-set!)
   (bytevector-s8-set! import . \x2E;bytevector-s8-set!)
   (bytevector->u8-list import . \x2E;bytevector->u8-list)
   (u8-list->bytevector import . \x2E;u8-list->bytevector)
   (bytevector-u16-ref import . \x2E;bytevector-u16-ref)
   (bytevector-s16-ref import . \x2E;bytevector-s16-ref)
   (bytevector-u16-native-ref import . \x2E;bytevector-u16-native-ref)
   (bytevector-s16-native-ref import . \x2E;bytevector-s16-native-ref)
   (bytevector-u16-set! import . \x2E;bytevector-u16-set!)
   (bytevector-s16-set! import . \x2E;bytevector-s16-set!)
   (bytevector-u16-native-set! import . \x2E;bytevector-u16-native-set!)
   (bytevector-s16-native-set! import . \x2E;bytevector-s16-native-set!)
   (bytevector-u32-ref import . \x2E;bytevector-u32-ref)
   (bytevector-s32-ref import . \x2E;bytevector-s32-ref)
   (bytevector-u32-native-ref import . \x2E;bytevector-u32-native-ref)
   (bytevector-s32-native-ref import . \x2E;bytevector-s32-native-ref)
   (bytevector-u32-set! import . \x2E;bytevector-u32-set!)
   (bytevector-s32-set! import . \x2E;bytevector-s32-set!)
   (bytevector-u32-native-set! import . \x2E;bytevector-u32-native-set!)
   (bytevector-s32-native-set! import . \x2E;bytevector-s32-native-set!)
   (bytevector-u64-ref import . \x2E;bytevector-u64-ref)
   (bytevector-s64-ref import . \x2E;bytevector-s64-ref)
   (bytevector-u64-native-ref import . \x2E;bytevector-u64-native-ref)
   (bytevector-s64-native-ref import . \x2E;bytevector-s64-native-ref)
   (bytevector-u64-set! import . \x2E;bytevector-u64-set!)
   (bytevector-s64-set! import . \x2E;bytevector-s64-set!)
   (bytevector-u64-native-set! import . \x2E;bytevector-u64-native-set!)
   (bytevector-s64-native-set! import . \x2E;bytevector-s64-native-set!)
   (bytevector-ieee-single-ref import . \x2E;bytevector-ieee-single-ref)
   (bytevector-ieee-single-native-ref import . \x2E;bytevector-ieee-single-native-ref)
   (bytevector-ieee-single-set! import . \x2E;bytevector-ieee-single-set!)
   (bytevector-ieee-single-native-set! import . \x2E;bytevector-ieee-single-native-set!)
   (bytevector-ieee-double-ref import . \x2E;bytevector-ieee-double-ref)
   (bytevector-ieee-double-native-ref import . \x2E;bytevector-ieee-double-native-ref)
   (bytevector-ieee-double-set! import . \x2E;bytevector-ieee-double-set!)
   (bytevector-ieee-double-native-set! import . \x2E;bytevector-ieee-double-native-set!)
   (bytevector-uint-ref import . core.bytevectors\x27;bytevector-uint-ref)
   (bytevector-sint-ref import . core.bytevectors\x27;bytevector-sint-ref)
   (bytevector-uint-set! import . core.bytevectors\x27;bytevector-uint-set!)
   (bytevector-sint-set! import . core.bytevectors\x27;bytevector-sint-set!)
   (bytevector->uint-list import . core.bytevectors\x27;bytevector->uint-list)
   (bytevector->sint-list import . core.bytevectors\x27;bytevector->sint-list)
   (uint-list->bytevector import . core.bytevectors\x27;uint-list->bytevector)
   (sint-list->bytevector import . core.bytevectors\x27;sint-list->bytevector)
   (string->utf8 import . \x2E;string->utf8)
   (utf8->string import . \x2E;utf8->string)
   (string->utf16 import . core.bytevector-transcoders\x27;string->utf16)
   (utf16->string import . core.bytevector-transcoders\x27;utf16->string)
   (string->utf32 import . core.bytevector-transcoders\x27;string->utf32)
   (utf32->string import . core.bytevector-transcoders\x27;utf32->string)
   (find import . core.lists\x27;find)
   (for-all import . core.lists\x27;for-all)
   (exists import . core.lists\x27;exists)
   (filter import . core.lists\x27;filter)
   (partition import . core.lists\x27;partition)
   (fold-left import . core.lists\x27;fold-left)
   (fold-right import . core.lists\x27;fold-right)
   (remp import . core.lists\x27;remp)
   (remove import . core.lists\x27;remove)
   (remv import . core.lists\x27;remv)
   (remq import . core.lists\x27;remq)
   (memp import . core.lists\x27;memp)
   (member import . \x2E;member)
   (memv import . \x2E;memv)
   (memq import . \x2E;memq)
   (assp import . core.lists\x27;assp)
   (assoc import . \x2E;assoc)
   (assv import . \x2E;assv)
   (assq import . \x2E;assq)
   (cons* import . \x2E;cons*)
   (list-sort import . core.sorting\x27;list-sort)
   (vector-sort import . core.sorting\x27;vector-sort)
   (vector-sort! import . core.sorting\x27;vector-sort!)
   (when import . core.control\x27;when)
   (unless import . core.control\x27;unless)
   (do import . \x2E;do)
   (case-lambda import . core.control\x27;case-lambda)
   (define-record-type import . core.records\x27;define-record-type)
   (record-type-descriptor import . core.records\x27;record-type-descriptor)
   (record-constructor-descriptor import . core.records\x27;record-constructor-descriptor)
   (make-record-type-descriptor import . \x2E;make-record-type-descriptor)
   (record-type-descriptor? import . \x2E;record-type-descriptor?)
   (make-record-constructor-descriptor import . \x2E;make-record-constructor-descriptor)
   (record-constructor import . \x2E;record-constructor)
   (record-predicate import . \x2E;record-predicate)
   (record-accessor import . \x2E;record-accessor)
   (record-mutator import . \x2E;record-mutator)
   (record? import . \x2E;record?)
   (record-rtd import . \x2E;record-rtd)
   (record-type-name import . \x2E;record-type-name)
   (record-type-parent import . \x2E;record-type-parent)
   (record-type-uid import . \x2E;record-type-uid)
   (record-type-generative? import . \x2E;record-type-generative?)
   (record-type-sealed? import . \x2E;record-type-sealed?)
   (record-type-opaque? import . \x2E;record-type-opaque?)
   (record-type-field-names import . \x2E;record-type-field-names)
   (record-field-mutable? import . \x2E;record-field-mutable?)
   (with-exception-handler import . \x2E;with-exception-handler)
   (guard import . core.exceptions\x27;guard)
   (raise import . \x2E;raise)
   (raise-continuable import . \x2E;raise-continuable)
   (&condition import . \x2E;&condition)
   (condition import . \x2E;condition)
   (simple-conditions import . \x2E;simple-conditions)
   (condition? import . \x2E;condition?)
   (condition-predicate import . \x2E;condition-predicate)
   (condition-accessor import . \x2E;condition-accessor)
   (define-condition-type import . core.conditions\x27;define-condition-type)
   (&message import . \x2E;&message)
   (make-message-condition import . \x2E;make-message-condition)
   (message-condition? import . \x2E;message-condition?)
   (condition-message import . \x2E;condition-message)
   (&warning import . \x2E;&warning)
   (make-warning import . \x2E;make-warning)
   (warning? import . \x2E;warning?)
   (&serious import . \x2E;&serious)
   (make-serious-condition import . \x2E;make-serious-condition)
   (serious-condition? import . \x2E;serious-condition?)
   (&error import . \x2E;&error)
   (make-error import . \x2E;make-error)
   (error? import . \x2E;error?)
   (&violation import . \x2E;&violation)
   (make-violation import . \x2E;make-violation)
   (violation? import . \x2E;violation?)
   (&assertion import . \x2E;&assertion)
   (make-assertion-violation import . \x2E;make-assertion-violation)
   (assertion-violation? import . \x2E;assertion-violation?)
   (&irritants import . \x2E;&irritants)
   (make-irritants-condition import . \x2E;make-irritants-condition)
   (irritants-condition? import . \x2E;irritants-condition?)
   (condition-irritants import . \x2E;condition-irritants)
   (&who import . \x2E;&who)
   (make-who-condition import . \x2E;make-who-condition)
   (who-condition? import . \x2E;who-condition?)
   (condition-who import . \x2E;condition-who)
   (&non-continuable import . \x2E;&non-continuable)
   (make-non-continuable-violation import . \x2E;make-non-continuable-violation)
   (non-continuable-violation? import . \x2E;non-continuable-violation?)
   (&implementation-restriction import . \x2E;&implementation-restriction)
   (make-implementation-restriction-violation
     import
     .
     \x2E;make-implementation-restriction-violation)
   (implementation-restriction-violation? import . \x2E;implementation-restriction-violation?)
   (&lexical import . \x2E;&lexical)
   (make-lexical-violation import . \x2E;make-lexical-violation)
   (lexical-violation? import . \x2E;lexical-violation?)
   (&syntax import . \x2E;&syntax)
   (make-syntax-violation import . \x2E;make-syntax-violation)
   (syntax-violation? import . \x2E;syntax-violation?)
   (syntax-violation-form import . \x2E;syntax-violation-form)
   (syntax-violation-subform import . \x2E;syntax-violation-subform)
   (&undefined import . \x2E;&undefined)
   (make-undefined-violation import . \x2E;make-undefined-violation)
   (undefined-violation? import . \x2E;undefined-violation?)
   (&i/o import . \x2E;&i/o)
   (make-i/o-error import . \x2E;make-i/o-error)
   (i/o-error? import . \x2E;i/o-error?)
   (&i/o-read import . \x2E;&i/o-read)
   (make-i/o-read-error import . \x2E;make-i/o-read-error)
   (i/o-read-error? import . \x2E;i/o-read-error?)
   (&i/o-write import . \x2E;&i/o-write)
   (make-i/o-write-error import . \x2E;make-i/o-write-error)
   (i/o-write-error? import . \x2E;i/o-write-error?)
   (&i/o-invalid-position import . \x2E;&i/o-invalid-position)
   (make-i/o-invalid-position-error import . \x2E;make-i/o-invalid-position-error)
   (i/o-invalid-position-error? import . \x2E;i/o-invalid-position-error?)
   (i/o-error-position import . \x2E;i/o-error-position)
   (&i/o-filename import . \x2E;&i/o-filename)
   (make-i/o-filename-error import . \x2E;make-i/o-filename-error)
   (i/o-filename-error? import . \x2E;i/o-filename-error?)
   (i/o-error-filename import . \x2E;i/o-error-filename)
   (&i/o-file-protection import . \x2E;&i/o-file-protection)
   (make-i/o-file-protection-error import . \x2E;make-i/o-file-protection-error)
   (i/o-file-protection-error? import . \x2E;i/o-file-protection-error?)
   (&i/o-file-is-read-only import . \x2E;&i/o-file-is-read-only)
   (make-i/o-file-is-read-only-error import . \x2E;make-i/o-file-is-read-only-error)
   (i/o-file-is-read-only-error? import . \x2E;i/o-file-is-read-only-error?)
   (&i/o-file-already-exists import . \x2E;&i/o-file-already-exists)
   (make-i/o-file-already-exists-error import . \x2E;make-i/o-file-already-exists-error)
   (i/o-file-already-exists-error? import . \x2E;i/o-file-already-exists-error?)
   (&i/o-file-does-not-exist import . \x2E;&i/o-file-does-not-exist)
   (make-i/o-file-does-not-exist-error import . \x2E;make-i/o-file-does-not-exist-error)
   (i/o-file-does-not-exist-error? import . \x2E;i/o-file-does-not-exist-error?)
   (&i/o-port import . \x2E;&i/o-port)
   (make-i/o-port-error import . \x2E;make-i/o-port-error)
   (i/o-port-error? import . \x2E;i/o-port-error?)
   (i/o-error-port import . \x2E;i/o-error-port)
   (&i/o-decoding import . \x2E;&i/o-decoding)
   (make-i/o-decoding-error import . \x2E;make-i/o-decoding-error)
   (i/o-decoding-error? import . \x2E;i/o-decoding-error?)
   (&i/o-encoding import . \x2E;&i/o-encoding)
   (make-i/o-encoding-error import . \x2E;make-i/o-encoding-error)
   (i/o-encoding-error? import . \x2E;i/o-encoding-error?)
   (i/o-encoding-error-char import . \x2E;i/o-encoding-error-char)
   (file-options import . core.io\x27;file-options)
   (buffer-mode import . core.io\x27;buffer-mode)
   (buffer-mode? import . core.io\x27;buffer-mode?)
   (utf-8-codec import . core.io\x27;utf-8-codec)
   (utf-16-codec import . core.io\x27;utf-16-codec)
   (latin-1-codec import . core.io\x27;latin-1-codec)
   (eol-style import . core.io\x27;eol-style)
   (error-handling-mode import . core.io\x27;error-handling-mode)
   (make-transcoder import . core.io\x27;make-transcoder)
   (transcoder-codec import . core.io\x27;transcoder-codec)
   (transcoder-eol-style import . core.io\x27;transcoder-eol-style)
   (transcoder-error-handling-mode import . core.io\x27;transcoder-error-handling-mode)
   (native-transcoder import . core.io\x27;native-transcoder)
   (native-eol-style import . core.io\x27;native-eol-style)
   (bytevector->string import . core.io\x27;bytevector->string)
   (string->bytevector import . core.io\x27;string->bytevector)
   (eof-object import . \x2E;eof-object)
   (eof-object? import . \x2E;eof-object?)
   (port? import . \x2E;port?)
   (port-transcoder import . core.io\x27;port-transcoder)
   (textual-port? import . core.io\x27;textual-port?)
   (binary-port? import . core.io\x27;binary-port?)
   (transcoded-port import . core.io\x27;transcoded-port)
   (port-has-port-position? import . \x2E;port-has-port-position?)
   (port-position import . \x2E;port-position)
   (port-has-set-port-position!? import . \x2E;port-has-set-port-position!?)
   (set-port-position! import . \x2E;set-port-position!)
   (close-port import . \x2E;close-port)
   (call-with-port import . \x2E;call-with-port)
   (input-port? import . \x2E;input-port?)
   (port-eof? import . \x2E;port-eof?)
   (open-file-input-port import . core.io\x27;open-file-input-port)
   (open-bytevector-input-port import . core.io\x27;open-bytevector-input-port)
   (open-string-input-port import . core.io\x27;open-string-input-port)
   (standard-input-port import . \x2E;standard-input-port)
   (current-input-port import . \x2E;current-input-port)
   (get-u8 import . \x2E;get-u8)
   (lookahead-u8 import . \x2E;lookahead-u8)
   (get-bytevector-n import . \x2E;get-bytevector-n)
   (get-bytevector-n! import . \x2E;get-bytevector-n!)
   (get-bytevector-some import . \x2E;get-bytevector-some)
   (get-bytevector-all import . \x2E;get-bytevector-all)
   (get-char import . \x2E;get-char)
   (lookahead-char import . \x2E;lookahead-char)
   (get-string-n import . \x2E;get-string-n)
   (get-string-n! import . \x2E;get-string-n!)
   (get-string-all import . \x2E;get-string-all)
   (get-line import . \x2E;get-line)
   (get-datum import . \x2E;get-datum)
   (output-port? import . \x2E;output-port?)
   (flush-output-port import . \x2E;flush-output-port)
   (output-port-buffer-mode import . \x2E;output-port-buffer-mode)
   (open-file-output-port import . core.io\x27;open-file-output-port)
   (open-bytevector-output-port import . core.io\x27;open-bytevector-output-port)
   (call-with-bytevector-output-port import . core.io\x27;call-with-bytevector-output-port)
   (open-string-output-port import . core.io\x27;open-string-output-port)
   (call-with-string-output-port import . core.io\x27;call-with-string-output-port)
   (standard-output-port import . \x2E;standard-output-port)
   (standard-error-port import . \x2E;standard-error-port)
   (current-output-port import . \x2E;current-output-port)
   (current-error-port import . \x2E;current-error-port)
   (put-u8 import . \x2E;put-u8)
   (put-bytevector import . \x2E;put-bytevector)
   (put-char import . \x2E;put-char)
   (put-string import . \x2E;put-string)
   (put-datum import . \x2E;put-datum)
   (open-file-input/output-port import . core.io\x27;open-file-input/output-port)
   (make-custom-binary-input-port import . core.io\x27;make-custom-binary-input-port)
   (make-custom-textual-input-port import . core.io\x27;make-custom-textual-input-port)
   (make-custom-binary-output-port import . core.io\x27;make-custom-binary-output-port)
   (make-custom-textual-output-port import . core.io\x27;make-custom-textual-output-port)
   (make-custom-binary-input/output-port import . core.io\x27;make-custom-binary-input/output-port)
   (make-custom-textual-input/output-port
     import
     .
     core.io\x27;make-custom-textual-input/output-port)
   (call-with-input-file import . core.io\x27;call-with-input-file)
   (call-with-output-file import . core.io\x27;call-with-output-file)
   (with-input-from-file import . core.io\x27;with-input-from-file)
   (with-output-to-file import . core.io\x27;with-output-to-file)
   (open-input-file import . core.io\x27;open-input-file)
   (open-output-file import . core.io\x27;open-output-file)
   (close-input-port import . core.io\x27;close-input-port)
   (close-output-port import . core.io\x27;close-output-port)
   (read-char import . \x2E;read-char)
   (peek-char import . \x2E;peek-char)
   (read import . \x2E;read)
   (write-char import . \x2E;write-char)
   (newline import . \x2E;newline)
   (display import . \x2E;display)
   (write import . \x2E;write)
   (file-exists? import . \x2E;file-exists?)
   (delete-file import . \x2E;delete-file)
   (make-enumeration import . core.enums\x27;make-enumeration)
   (enum-set-universe import . core.enums\x27;enum-set-universe)
   (enum-set-indexer import . core.enums\x27;enum-set-indexer)
   (enum-set-constructor import . core.enums\x27;enum-set-constructor)
   (enum-set->list import . core.enums\x27;enum-set->list)
   (enum-set-member? import . core.enums\x27;enum-set-member?)
   (enum-set-subset? import . core.enums\x27;enum-set-subset?)
   (enum-set=? import . core.enums\x27;enum-set=?)
   (enum-set-union import . core.enums\x27;enum-set-union)
   (enum-set-intersection import . core.enums\x27;enum-set-intersection)
   (enum-set-difference import . core.enums\x27;enum-set-difference)
   (enum-set-complement import . core.enums\x27;enum-set-complement)
   (enum-set-projection import . core.enums\x27;enum-set-projection)
   (define-enumeration import . core.enums\x27;define-enumeration)
   (command-line import . \x2E;command-line)
   (exit import . \x2E;exit)
   (fixnum? import . \x2E;fixnum?)
   (fixnum-width import . \x2E;fixnum-width)
   (least-fixnum import . \x2E;least-fixnum)
   (greatest-fixnum import . \x2E;greatest-fixnum)
   (fx=? import . \x2E;fx=?)
   (fx<? import . \x2E;fx<?)
   (fx>? import . \x2E;fx>?)
   (fx<=? import . \x2E;fx<=?)
   (fx>=? import . \x2E;fx>=?)
   (fxzero? import . \x2E;fxzero?)
   (fxpositive? import . \x2E;fxpositive?)
   (fxnegative? import . \x2E;fxnegative?)
   (fxodd? import . \x2E;fxodd?)
   (fxeven? import . \x2E;fxeven?)
   (fxmax import . \x2E;fxmax)
   (fxmin import . \x2E;fxmin)
   (fx+ import . \x2E;fx+)
   (fx* import . \x2E;fx*)
   (fx- import . \x2E;fx-)
   (fxdiv import . \x2E;fxdiv)
   (fxmod import . core.arithmetic\x27;fxmod)
   (fxdiv-and-mod import . core.arithmetic\x27;fxdiv-and-mod)
   (fxdiv0 import . \x2E;fxdiv0)
   (fxmod0 import . core.arithmetic\x27;fxmod0)
   (fxdiv0-and-mod0 import . core.arithmetic\x27;fxdiv0-and-mod0)
   (fx+/carry import . core.arithmetic\x27;fx+/carry)
   (fx-/carry import . core.arithmetic\x27;fx-/carry)
   (fx*/carry import . core.arithmetic\x27;fx*/carry)
   (fxnot import . \x2E;fxnot)
   (fxand import . \x2E;fxand)
   (fxior import . \x2E;fxior)
   (fxxor import . \x2E;fxxor)
   (fxif import . \x2E;fxif)
   (fxbit-count import . \x2E;fxbit-count)
   (fxlength import . \x2E;fxlength)
   (fxfirst-bit-set import . \x2E;fxfirst-bit-set)
   (fxbit-set? import . \x2E;fxbit-set?)
   (fxcopy-bit import . \x2E;fxcopy-bit)
   (fxbit-field import . \x2E;fxbit-field)
   (fxcopy-bit-field import . \x2E;fxcopy-bit-field)
   (fxarithmetic-shift import . \x2E;fxarithmetic-shift)
   (fxarithmetic-shift-left import . \x2E;fxarithmetic-shift-left)
   (fxarithmetic-shift-right import . \x2E;fxarithmetic-shift-right)
   (fxrotate-bit-field import . core.arithmetic\x27;fxrotate-bit-field)
   (fxreverse-bit-field import . core.arithmetic\x27;fxreverse-bit-field)
   (flonum? import . \x2E;flonum?)
   (real->flonum import . \x2E;real->flonum)
   (fl=? import . \x2E;fl=?)
   (fl<? import . \x2E;fl<?)
   (fl>? import . \x2E;fl>?)
   (fl<=? import . \x2E;fl<=?)
   (fl>=? import . \x2E;fl>=?)
   (flinteger? import . \x2E;flinteger?)
   (flzero? import . \x2E;flzero?)
   (flpositive? import . \x2E;flpositive?)
   (flnegative? import . \x2E;flnegative?)
   (flodd? import . \x2E;flodd?)
   (fleven? import . \x2E;fleven?)
   (flfinite? import . \x2E;flfinite?)
   (flinfinite? import . \x2E;flinfinite?)
   (flnan? import . \x2E;flnan?)
   (flmax import . \x2E;flmax)
   (flmin import . \x2E;flmin)
   (fl+ import . \x2E;fl+)
   (fl* import . \x2E;fl*)
   (fl- import . \x2E;fl-)
   (fl/ import . \x2E;fl/)
   (fldiv-and-mod import . core.arithmetic\x27;fldiv-and-mod)
   (fldiv import . \x2E;fldiv)
   (flmod import . core.arithmetic\x27;flmod)
   (fldiv0-and-mod0 import . core.arithmetic\x27;fldiv0-and-mod0)
   (fldiv0 import . \x2E;fldiv0)
   (flmod0 import . core.arithmetic\x27;flmod0)
   (flnumerator import . \x2E;flnumerator)
   (fldenominator import . \x2E;fldenominator)
   (flfloor import . \x2E;flfloor)
   (flceiling import . \x2E;flceiling)
   (fltruncate import . \x2E;fltruncate)
   (flround import . \x2E;flround)
   (flabs import . \x2E;flabs)
   (flexpt import . \x2E;flexpt)
   (flsqrt import . \x2E;flsqrt)
   (flexp import . \x2E;flexp)
   (fllog import . \x2E;fllog)
   (flsin import . \x2E;flsin)
   (flcos import . \x2E;flcos)
   (fltan import . \x2E;fltan)
   (flasin import . \x2E;flasin)
   (flacos import . \x2E;flacos)
   (flatan import . \x2E;flatan)
   (fixnum->flonum import . \x2E;fixnum->flonum)
   (&no-infinities import . \x2E;&no-infinities)
   (make-no-infinities-violation import . \x2E;make-no-infinities-violation)
   (no-infinities-violation? import . \x2E;no-infinities-violation?)
   (&no-nans import . \x2E;&no-nans)
   (make-no-nans-violation import . \x2E;make-no-nans-violation)
   (no-nans-violation? import . \x2E;no-nans-violation?)
   (bitwise-not import . \x2E;bitwise-not)
   (bitwise-and import . \x2E;bitwise-and)
   (bitwise-ior import . \x2E;bitwise-ior)
   (bitwise-xor import . \x2E;bitwise-xor)
   (bitwise-if import . core.arithmetic\x27;bitwise-if)
   (bitwise-bit-count import . \x2E;bitwise-bit-count)
   (bitwise-length import . \x2E;bitwise-length)
   (bitwise-first-bit-set import . \x2E;bitwise-first-bit-set)
   (bitwise-bit-set? import . core.arithmetic\x27;bitwise-bit-set?)
   (bitwise-copy-bit import . core.arithmetic\x27;bitwise-copy-bit)
   (bitwise-bit-field import . core.arithmetic\x27;bitwise-bit-field)
   (bitwise-copy-bit-field import . core.arithmetic\x27;bitwise-copy-bit-field)
   (bitwise-arithmetic-shift import . \x2E;bitwise-arithmetic-shift)
   (bitwise-arithmetic-shift-left import . core.arithmetic\x27;bitwise-arithmetic-shift-left)
   (bitwise-arithmetic-shift-right import . core.arithmetic\x27;bitwise-arithmetic-shift-right)
   (bitwise-rotate-bit-field import . core.arithmetic\x27;bitwise-rotate-bit-field)
   (bitwise-reverse-bit-field import . core.arithmetic\x27;bitwise-reverse-bit-field)
   (syntax-case import . \x2E;syntax-case)
   (syntax import . \x2E;syntax)
   (with-syntax import . core.syntax-case\x27;with-syntax)
   (make-variable-transformer import . \x2E;make-variable-transformer)
   (identifier? import . \x2E;identifier?)
   (bound-identifier=? import . \x2E;bound-identifier=?)
   (free-identifier=? import . \x2E;free-identifier=?)
   (datum->syntax import . \x2E;datum->syntax)
   (syntax->datum import . \x2E;syntax->datum)
   (generate-temporaries import . \x2E;generate-temporaries)
   (quasisyntax import . core.syntax-case\x27;quasisyntax)
   (unsyntax import . core.syntax-case\x27;unsyntax)
   (unsyntax-splicing import . core.syntax-case\x27;unsyntax-splicing)
   (syntax-violation import . \x2E;syntax-violation)
   (make-eq-hashtable import . core.hashtables\x27;make-eq-hashtable)
   (make-eqv-hashtable import . core.hashtables\x27;make-eqv-hashtable)
   (make-hashtable import . core.hashtables\x27;make-hashtable)
   (hashtable? import . \x2E;core-hashtable?)
   (hashtable-size import . \x2E;core-hashtable-size)
   (hashtable-ref import . \x2E;core-hashtable-ref)
   (hashtable-set! import . \x2E;core-hashtable-set!)
   (hashtable-delete! import . \x2E;core-hashtable-delete!)
   (hashtable-contains? import . \x2E;core-hashtable-contains?)
   (hashtable-update! import . core.hashtables\x27;hashtable-update!)
   (hashtable-copy import . \x2E;core-hashtable-copy)
   (hashtable-clear! import . \x2E;core-hashtable-clear!)
   (hashtable-keys import . core.hashtables\x27;hashtable-keys)
   (hashtable-entries import . core.hashtables\x27;hashtable-entries)
   (hashtable-equivalence-function import . \x2E;core-hashtable-equivalence-function)
   (hashtable-hash-function import . \x2E;core-hashtable-hash-function)
   (hashtable-mutable? import . \x2E;core-hashtable-mutable?)
   (equal-hash import . \x2E;equal-hash)
   (string-hash import . \x2E;string-hash)
   (string-ci-hash import . core.hashtables\x27;string-ci-hash)
   (symbol-hash import . \x2E;symbol-hash))
 (apply.gloc.of \x2E;intern-scheme-library "../stdlib/rnrs.scm" . 2049))

((call (push.const rnrs) (apply.gloc.of \x2E;require-scheme-library "../stdlib/core.scm" . 1025))
 (call
   (push.const core enums)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core.scm" . 1025))
 (call
   (push.const core struct)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core.scm" . 1025))
 (call
   (push.const core hashtables)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core.scm" . 1025))
 (call
   (push.const core unicode)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core.scm" . 1025))
 (call
   (push.const core bytevector-transcoders)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core.scm" . 1025))
 (call
   (push.const core conditions)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core.scm" . 1025))
 (call
   (push.const core records)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core.scm" . 1025))
 (call
   (push.const core destructuring)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core.scm" . 1025))
 (call
   (push.const core lists)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core.scm" . 1025))
 (call
   (push.const core chkarg)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core.scm" . 1025))
 (call
   (push.const core optargs)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core.scm" . 1025))
 (call
   (push.const core control)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core.scm" . 1025))
 (call
   (push.const core r5rs)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core.scm" . 1025))
 (call
   (push.const core syntax-case)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core.scm" . 1025))
 (call
   (push.const core bytevectors)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core.scm" . 1025))
 (call
   (push.const core sorting)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core.scm" . 1025))
 (call
   (push.const core arithmetic)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core.scm" . 1025))
 (call
   (push.const core exceptions)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core.scm" . 1025))
 (call
   (push.const core files)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core.scm" . 1025))
 (call (push.const core io) (apply.gloc.of \x2E;require-scheme-library "../stdlib/core.scm" . 1025))
 (call
   (push.const core parameters)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core.scm" . 1025))
 (call
   (push.const core optimize)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core.scm" . 1025))
 (call
   (push.const core primitives)
   (apply.gloc.of \x2E;require-scheme-library "../stdlib/core.scm" . 1025))
 (push.const . core)
 (push.const . #f)
 (push.const
   (&assertion import . \x2E;&assertion)
   (&condition import . \x2E;&condition)
   (&error import . \x2E;&error)
   (&i/o import . \x2E;&i/o)
   (&i/o-decoding import . \x2E;&i/o-decoding)
   (&i/o-encoding import . \x2E;&i/o-encoding)
   (&i/o-file-already-exists import . \x2E;&i/o-file-already-exists)
   (&i/o-file-does-not-exist import . \x2E;&i/o-file-does-not-exist)
   (&i/o-file-is-read-only import . \x2E;&i/o-file-is-read-only)
   (&i/o-file-protection import . \x2E;&i/o-file-protection)
   (&i/o-filename import . \x2E;&i/o-filename)
   (&i/o-invalid-position import . \x2E;&i/o-invalid-position)
   (&i/o-port import . \x2E;&i/o-port)
   (&i/o-read import . \x2E;&i/o-read)
   (&i/o-write import . \x2E;&i/o-write)
   (&implementation-restriction import . \x2E;&implementation-restriction)
   (&irritants import . \x2E;&irritants)
   (&lexical import . \x2E;&lexical)
   (&message import . \x2E;&message)
   (&no-infinities import . \x2E;&no-infinities)
   (&no-nans import . \x2E;&no-nans)
   (&non-continuable import . \x2E;&non-continuable)
   (&serious import . \x2E;&serious)
   (&syntax import . \x2E;&syntax)
   (&undefined import . \x2E;&undefined)
   (&violation import . \x2E;&violation)
   (&warning import . \x2E;&warning)
   (&who import . \x2E;&who)
   (* import . \x2E;*)
   (+ import . \x2E;+)
   (- import . \x2E;-)
   (... import . \x2E;...)
   (/ import . \x2E;/)
   (< import . \x2E;<)
   (<= import . \x2E;<=)
   (= import . \x2E;=)
   (=> import . \x2E;=>)
   (> import . \x2E;>)
   (>= import . \x2E;>=)
   (_ import . \x2E;_)
   (abs import . \x2E;abs)
   (acos import . \x2E;acos)
   (add-library-path import . \x2E;add-library-path)
   (add-load-path import . \x2E;add-load-path)
   (and import . \x2E;and)
   (angle import . \x2E;angle)
   (append import . \x2E;append)
   (apply import . \x2E;apply)
   (architecture-feature import . \x2E;architecture-feature)
   (asin import . \x2E;asin)
   (assert import . \x2E;assert)
   (assertion-violation import . \x2E;assertion-violation)
   (assertion-violation? import . \x2E;assertion-violation?)
   (assoc import . \x2E;assoc)
   (assp import . core.lists\x27;assp)
   (assq import . \x2E;assq)
   (assv import . \x2E;assv)
   (atan import . \x2E;atan)
   (auto-compile-cache import . \x2E;auto-compile-cache)
   (auto-compile-verbose import . \x2E;auto-compile-verbose)
   (backtrace import . \x2E;backtrace)
   (backtrace-line-length import . \x2E;backtrace-line-length)
   (begin import . \x2E;begin)
   (binary-port? import . core.io\x27;binary-port?)
   (bitwise-and import . \x2E;bitwise-and)
   (bitwise-arithmetic-shift import . \x2E;bitwise-arithmetic-shift)
   (bitwise-arithmetic-shift-left import . core.arithmetic\x27;bitwise-arithmetic-shift-left)
   (bitwise-arithmetic-shift-right import . core.arithmetic\x27;bitwise-arithmetic-shift-right)
   (bitwise-bit-count import . \x2E;bitwise-bit-count)
   (bitwise-bit-field import . core.arithmetic\x27;bitwise-bit-field)
   (bitwise-bit-set? import . core.arithmetic\x27;bitwise-bit-set?)
   (bitwise-copy-bit import . core.arithmetic\x27;bitwise-copy-bit)
   (bitwise-copy-bit-field import . core.arithmetic\x27;bitwise-copy-bit-field)
   (bitwise-first-bit-set import . \x2E;bitwise-first-bit-set)
   (bitwise-if import . core.arithmetic\x27;bitwise-if)
   (bitwise-ior import . \x2E;bitwise-ior)
   (bitwise-length import . \x2E;bitwise-length)
   (bitwise-not import . \x2E;bitwise-not)
   (bitwise-reverse-bit-field import . core.arithmetic\x27;bitwise-reverse-bit-field)
   (bitwise-rotate-bit-field import . core.arithmetic\x27;bitwise-rotate-bit-field)
   (bitwise-xor import . \x2E;bitwise-xor)
   (boolean=? import . \x2E;boolean=?)
   (boolean? import . \x2E;boolean?)
   (bound-identifier=? import . \x2E;bound-identifier=?)
   (break import . core.lists\x27;break)
   (buffer-mode import . core.io\x27;buffer-mode)
   (buffer-mode? import . core.io\x27;buffer-mode?)
   (bytevector->sint-list import . core.bytevectors\x27;bytevector->sint-list)
   (bytevector->string import . core.io\x27;bytevector->string)
   (bytevector->u8-list import . \x2E;bytevector->u8-list)
   (bytevector->uint-list import . core.bytevectors\x27;bytevector->uint-list)
   (bytevector-copy import . \x2E;bytevector-copy)
   (bytevector-copy! import . \x2E;bytevector-copy!)
   (bytevector-fill! import . \x2E;bytevector-fill!)
   (bytevector-ieee-double-native-ref import . \x2E;bytevector-ieee-double-native-ref)
   (bytevector-ieee-double-native-set! import . \x2E;bytevector-ieee-double-native-set!)
   (bytevector-ieee-double-ref import . \x2E;bytevector-ieee-double-ref)
   (bytevector-ieee-double-set! import . \x2E;bytevector-ieee-double-set!)
   (bytevector-ieee-single-native-ref import . \x2E;bytevector-ieee-single-native-ref)
   (bytevector-ieee-single-native-set! import . \x2E;bytevector-ieee-single-native-set!)
   (bytevector-ieee-single-ref import . \x2E;bytevector-ieee-single-ref)
   (bytevector-ieee-single-set! import . \x2E;bytevector-ieee-single-set!)
   (bytevector-length import . \x2E;bytevector-length)
   (bytevector-s16-native-ref import . \x2E;bytevector-s16-native-ref)
   (bytevector-s16-native-set! import . \x2E;bytevector-s16-native-set!)
   (bytevector-s16-ref import . \x2E;bytevector-s16-ref)
   (bytevector-s16-set! import . \x2E;bytevector-s16-set!)
   (bytevector-s32-native-ref import . \x2E;bytevector-s32-native-ref)
   (bytevector-s32-native-set! import . \x2E;bytevector-s32-native-set!)
   (bytevector-s32-ref import . \x2E;bytevector-s32-ref)
   (bytevector-s32-set! import . \x2E;bytevector-s32-set!)
   (bytevector-s64-native-ref import . \x2E;bytevector-s64-native-ref)
   (bytevector-s64-native-set! import . \x2E;bytevector-s64-native-set!)
   (bytevector-s64-ref import . \x2E;bytevector-s64-ref)
   (bytevector-s64-set! import . \x2E;bytevector-s64-set!)
   (bytevector-s8-ref import . \x2E;bytevector-s8-ref)
   (bytevector-s8-set! import . \x2E;bytevector-s8-set!)
   (bytevector-sint-ref import . core.bytevectors\x27;bytevector-sint-ref)
   (bytevector-sint-set! import . core.bytevectors\x27;bytevector-sint-set!)
   (bytevector-u16-native-ref import . \x2E;bytevector-u16-native-ref)
   (bytevector-u16-native-set! import . \x2E;bytevector-u16-native-set!)
   (bytevector-u16-ref import . \x2E;bytevector-u16-ref)
   (bytevector-u16-set! import . \x2E;bytevector-u16-set!)
   (bytevector-u32-native-ref import . \x2E;bytevector-u32-native-ref)
   (bytevector-u32-native-set! import . \x2E;bytevector-u32-native-set!)
   (bytevector-u32-ref import . \x2E;bytevector-u32-ref)
   (bytevector-u32-set! import . \x2E;bytevector-u32-set!)
   (bytevector-u64-native-ref import . \x2E;bytevector-u64-native-ref)
   (bytevector-u64-native-set! import . \x2E;bytevector-u64-native-set!)
   (bytevector-u64-ref import . \x2E;bytevector-u64-ref)
   (bytevector-u64-set! import . \x2E;bytevector-u64-set!)
   (bytevector-u8-ref import . \x2E;bytevector-u8-ref)
   (bytevector-u8-set! import . \x2E;bytevector-u8-set!)
   (bytevector-uint-ref import . core.bytevectors\x27;bytevector-uint-ref)
   (bytevector-uint-set! import . core.bytevectors\x27;bytevector-uint-set!)
   (bytevector=? import . \x2E;bytevector=?)
   (bytevector? import . \x2E;bytevector?)
   (caaaar import . \x2E;caaaar)
   (caaadr import . \x2E;caaadr)
   (caaar import . \x2E;caaar)
   (caadar import . \x2E;caadar)
   (caaddr import . \x2E;caaddr)
   (caadr import . \x2E;caadr)
   (caar import . \x2E;caar)
   (cadaar import . \x2E;cadaar)
   (cadadr import . \x2E;cadadr)
   (cadar import . \x2E;cadar)
   (caddar import . \x2E;caddar)
   (cadddr import . \x2E;cadddr)
   (caddr import . \x2E;caddr)
   (cadr import . \x2E;cadr)
   (call-shared-object->double import . \x2E;call-shared-object->double)
   (call-shared-object->int import . \x2E;call-shared-object->int)
   (call-shared-object->intptr import . \x2E;call-shared-object->intptr)
   (call-shared-object->void import . \x2E;call-shared-object->void)
   (call-with-bytevector-output-port import . core.io\x27;call-with-bytevector-output-port)
   (call-with-current-continuation import . \x2E;call-with-current-continuation)
   (call-with-input-file import . core.io\x27;call-with-input-file)
   (call-with-output-file import . core.io\x27;call-with-output-file)
   (call-with-port import . \x2E;call-with-port)
   (call-with-string-output-port import . core.io\x27;call-with-string-output-port)
   (call-with-values import . \x2E;call-with-values)
   (call/cc import . \x2E;call/cc)
   (car import . \x2E;car)
   (case import . \x2E;case)
   (case-lambda import . core.control\x27;case-lambda)
   (cdaaar import . \x2E;cdaaar)
   (cdaadr import . \x2E;cdaadr)
   (cdaar import . \x2E;cdaar)
   (cdadar import . \x2E;cdadar)
   (cdaddr import . \x2E;cdaddr)
   (cdadr import . \x2E;cdadr)
   (cdar import . \x2E;cdar)
   (cddaar import . \x2E;cddaar)
   (cddadr import . \x2E;cddadr)
   (cddar import . \x2E;cddar)
   (cdddar import . \x2E;cdddar)
   (cddddr import . \x2E;cddddr)
   (cdddr import . \x2E;cdddr)
   (cddr import . \x2E;cddr)
   (cdr import . \x2E;cdr)
   (ceiling import . \x2E;ceiling)
   (char->integer import . \x2E;char->integer)
   (char-alphabetic? import . core.unicode\x27;char-alphabetic?)
   (char-ci<=? import . core.unicode\x27;char-ci<=?)
   (char-ci<? import . core.unicode\x27;char-ci<?)
   (char-ci=? import . core.unicode\x27;char-ci=?)
   (char-ci>=? import . core.unicode\x27;char-ci>=?)
   (char-ci>? import . core.unicode\x27;char-ci>?)
   (char-downcase import . core.unicode\x27;char-downcase)
   (char-foldcase import . core.unicode\x27;char-foldcase)
   (char-general-category import . core.unicode\x27;char-general-category)
   (char-lower-case? import . core.unicode\x27;char-lower-case?)
   (char-numeric? import . core.unicode\x27;char-numeric?)
   (char-title-case? import . core.unicode\x27;char-title-case?)
   (char-titlecase import . core.unicode\x27;char-titlecase)
   (char-upcase import . core.unicode\x27;char-upcase)
   (char-upper-case? import . core.unicode\x27;char-upper-case?)
   (char-whitespace? import . \x2E;char-whitespace?)
   (char<=? import . \x2E;char<=?)
   (char<? import . \x2E;char<?)
   (char=? import . \x2E;char=?)
   (char>=? import . \x2E;char>=?)
   (char>? import . \x2E;char>?)
   (char? import . \x2E;char?)
   (check-argument import . core.chkarg\x27;check-argument)
   (circular-list? import . \x2E;circular-list?)
   (circular-tree? import . \x2E;circular-tree?)
   (close-input-port import . core.io\x27;close-input-port)
   (close-output-port import . core.io\x27;close-output-port)
   (close-port import . \x2E;close-port)
   (closure-code import . \x2E;closure-code)
   (collect import . \x2E;collect)
   (collect-notify import . \x2E;collect-notify)
   (collect-stack-notify import . \x2E;collect-stack-notify)
   (collect-trip-bytes import . \x2E;collect-trip-bytes)
   (command-line import . \x2E;command-line)
   (command-line-shift import . \x2E;command-line-shift)
   (compile import . \x2E;compile)
   (compile-coreform import . \x2E;compile-coreform)
   (complex? import . \x2E;complex?)
   (cond import . \x2E;cond)
   (condition import . \x2E;condition)
   (condition-accessor import . \x2E;condition-accessor)
   (condition-irritants import . \x2E;condition-irritants)
   (condition-message import . \x2E;condition-message)
   (condition-predicate import . \x2E;condition-predicate)
   (condition-who import . \x2E;condition-who)
   (condition? import . \x2E;condition?)
   (cons import . \x2E;cons)
   (cons* import . \x2E;cons*)
   (copy-environment-macros! import . \x2E;copy-environment-macros!)
   (copy-environment-variables! import . \x2E;copy-environment-variables!)
   (core-eval import . \x2E;core-eval)
   (core-hashtable->alist import . \x2E;core-hashtable->alist)
   (core-hashtable-clear! import . \x2E;core-hashtable-clear!)
   (core-hashtable-contains? import . \x2E;core-hashtable-contains?)
   (core-hashtable-copy import . \x2E;core-hashtable-copy)
   (core-hashtable-delete! import . \x2E;core-hashtable-delete!)
   (core-hashtable-equivalence-function import . \x2E;core-hashtable-equivalence-function)
   (core-hashtable-hash-function import . \x2E;core-hashtable-hash-function)
   (core-hashtable-mutable? import . \x2E;core-hashtable-mutable?)
   (core-hashtable-ref import . \x2E;core-hashtable-ref)
   (core-hashtable-set! import . \x2E;core-hashtable-set!)
   (core-hashtable-size import . \x2E;core-hashtable-size)
   (core-hashtable? import . \x2E;core-hashtable?)
   (core-read import . \x2E;core-read)
   (coreform-optimize import . core.optimize\x27;coreform-optimize)
   (cos import . \x2E;cos)
   (create-directory import . \x2E;create-directory)
   (cstring->string import . \x2E;cstring->string)
   (current-after-expansion-hook import . \x2E;current-after-expansion-hook)
   (current-directory import . \x2E;current-directory)
   (current-dynamic-environment import . \x2E;current-dynamic-environment)
   (current-environment import . \x2E;current-environment)
   (current-error-port import . \x2E;current-error-port)
   (current-input-port import . \x2E;current-input-port)
   (current-library-infix import . \x2E;current-library-infix)
   (current-library-suffix import . \x2E;current-library-suffix)
   (current-macro-environment import . \x2E;current-macro-environment)
   (current-output-port import . \x2E;current-output-port)
   (current-primitive-prefix import . \x2E;current-primitive-prefix)
   (current-rename-delimiter import . \x2E;current-rename-delimiter)
   (current-source-comments import . \x2E;current-source-comments)
   (current-variable-environment import . \x2E;current-variable-environment)
   (datum->syntax import . \x2E;datum->syntax)
   (decode-flonum import . \x2E;decode-flonum)
   (define import . \x2E;define)
   (define-condition-type import . core.conditions\x27;define-condition-type)
   (define-enumeration import . core.enums\x27;define-enumeration)
   (define-macro import . \x2E;define-macro)
   (define-record-type import . core.records\x27;define-record-type)
   (define-struct import . core.struct\x27;define-struct)
   (define-syntax import . \x2E;define-syntax)
   (delay import . core.r5rs\x27;delay)
   (delete-file import . \x2E;delete-file)
   (denominator import . \x2E;denominator)
   (destructuring-bind import . core.destructuring\x27;destructuring-bind)
   (destructuring-match import . core.destructuring\x27;destructuring-match)
   (directory-list import . \x2E;directory-list)
   (display import . \x2E;display)
   (display-backtrace import . \x2E;display-backtrace)
   (display-heap-statistics import . \x2E;display-heap-statistics)
   (display-object-statistics import . \x2E;display-object-statistics)
   (div import . \x2E;div)
   (div-and-mod import . \x2E;div-and-mod)
   (div0 import . \x2E;div0)
   (div0-and-mod0 import . \x2E;div0-and-mod0)
   (do import . \x2E;do)
   (drop import . core.lists\x27;drop)
   (dynamic-wind import . \x2E;dynamic-wind)
   (else import . \x2E;else)
   (endianness import . core.bytevectors\x27;endianness)
   (enum-set->list import . core.enums\x27;enum-set->list)
   (enum-set-complement import . core.enums\x27;enum-set-complement)
   (enum-set-constructor import . core.enums\x27;enum-set-constructor)
   (enum-set-difference import . core.enums\x27;enum-set-difference)
   (enum-set-indexer import . core.enums\x27;enum-set-indexer)
   (enum-set-intersection import . core.enums\x27;enum-set-intersection)
   (enum-set-member? import . core.enums\x27;enum-set-member?)
   (enum-set-projection import . core.enums\x27;enum-set-projection)
   (enum-set-subset? import . core.enums\x27;enum-set-subset?)
   (enum-set-union import . core.enums\x27;enum-set-union)
   (enum-set-universe import . core.enums\x27;enum-set-universe)
   (enum-set=? import . core.enums\x27;enum-set=?)
   (environment import . \x2E;environment)
   (eof-object import . \x2E;eof-object)
   (eof-object? import . \x2E;eof-object?)
   (eol-style import . core.io\x27;eol-style)
   (eq? import . \x2E;eq?)
   (equal-hash import . \x2E;equal-hash)
   (equal? import . \x2E;equal?)
   (eqv? import . \x2E;eqv?)
   (error import . \x2E;error)
   (error-handling-mode import . core.io\x27;error-handling-mode)
   (error? import . \x2E;error?)
   (eval import . \x2E;eval)
   (even? import . \x2E;even?)
   (exact import . \x2E;exact)
   (exact->inexact import . \x2E;inexact)
   (exact-integer-sqrt import . \x2E;exact-integer-sqrt)
   (exact? import . \x2E;exact?)
   (exists import . core.lists\x27;exists)
   (exit import . \x2E;exit)
   (exp import . \x2E;exp)
   (expansion-backtrace import . \x2E;expansion-backtrace)
   (expt import . \x2E;expt)
   (extend-lexical-syntax import . \x2E;extend-lexical-syntax)
   (extract-accumulated-bytevector import . \x2E;extract-accumulated-bytevector)
   (extract-accumulated-string import . \x2E;extract-accumulated-string)
   (file-exists? import . \x2E;file-exists?)
   (file-options import . core.io\x27;file-options)
   (filter import . core.lists\x27;filter)
   (find import . core.lists\x27;find)
   (finite? import . \x2E;finite?)
   (fixnum->flonum import . \x2E;fixnum->flonum)
   (fixnum-width import . \x2E;fixnum-width)
   (fixnum? import . \x2E;fixnum?)
   (fl* import . \x2E;fl*)
   (fl+ import . \x2E;fl+)
   (fl- import . \x2E;fl-)
   (fl/ import . \x2E;fl/)
   (fl<=? import . \x2E;fl<=?)
   (fl<? import . \x2E;fl<?)
   (fl=? import . \x2E;fl=?)
   (fl>=? import . \x2E;fl>=?)
   (fl>? import . \x2E;fl>?)
   (flabs import . \x2E;flabs)
   (flacos import . \x2E;flacos)
   (flasin import . \x2E;flasin)
   (flatan import . \x2E;flatan)
   (flceiling import . \x2E;flceiling)
   (flcos import . \x2E;flcos)
   (fldenominator import . \x2E;fldenominator)
   (fldiv import . \x2E;fldiv)
   (fldiv-and-mod import . core.arithmetic\x27;fldiv-and-mod)
   (fldiv0 import . \x2E;fldiv0)
   (fldiv0-and-mod0 import . core.arithmetic\x27;fldiv0-and-mod0)
   (fleven? import . \x2E;fleven?)
   (flexp import . \x2E;flexp)
   (flexpt import . \x2E;flexpt)
   (flfinite? import . \x2E;flfinite?)
   (flfloor import . \x2E;flfloor)
   (flinfinite? import . \x2E;flinfinite?)
   (flinteger? import . \x2E;flinteger?)
   (fllog import . \x2E;fllog)
   (flmax import . \x2E;flmax)
   (flmin import . \x2E;flmin)
   (flmod import . core.arithmetic\x27;flmod)
   (flmod0 import . core.arithmetic\x27;flmod0)
   (flnan? import . \x2E;flnan?)
   (flnegative? import . \x2E;flnegative?)
   (flnumerator import . \x2E;flnumerator)
   (flodd? import . \x2E;flodd?)
   (flonum->float import . \x2E;flonum->float)
   (flonum? import . \x2E;flonum?)
   (floor import . \x2E;floor)
   (flpositive? import . \x2E;flpositive?)
   (flround import . \x2E;flround)
   (flsin import . \x2E;flsin)
   (flsqrt import . \x2E;flsqrt)
   (fltan import . \x2E;fltan)
   (fltruncate import . \x2E;fltruncate)
   (flush-output-port import . \x2E;flush-output-port)
   (flzero? import . \x2E;flzero?)
   (fold-left import . core.lists\x27;fold-left)
   (fold-right import . core.lists\x27;fold-right)
   (for-all import . core.lists\x27;for-all)
   (for-each import . \x2E;for-each)
   (force import . core.r5rs\x27;force)
   (format import . \x2E;format)
   (free-identifier=? import . \x2E;free-identifier=?)
   (fx* import . \x2E;fx*)
   (fx*/carry import . core.arithmetic\x27;fx*/carry)
   (fx+ import . \x2E;fx+)
   (fx+/carry import . core.arithmetic\x27;fx+/carry)
   (fx- import . \x2E;fx-)
   (fx-/carry import . core.arithmetic\x27;fx-/carry)
   (fx<=? import . \x2E;fx<=?)
   (fx<? import . \x2E;fx<?)
   (fx=? import . \x2E;fx=?)
   (fx>=? import . \x2E;fx>=?)
   (fx>? import . \x2E;fx>?)
   (fxand import . \x2E;fxand)
   (fxarithmetic-shift import . \x2E;fxarithmetic-shift)
   (fxarithmetic-shift-left import . \x2E;fxarithmetic-shift-left)
   (fxarithmetic-shift-right import . \x2E;fxarithmetic-shift-right)
   (fxbit-count import . \x2E;fxbit-count)
   (fxbit-field import . \x2E;fxbit-field)
   (fxbit-set? import . \x2E;fxbit-set?)
   (fxcopy-bit import . \x2E;fxcopy-bit)
   (fxcopy-bit-field import . \x2E;fxcopy-bit-field)
   (fxdiv import . \x2E;fxdiv)
   (fxdiv-and-mod import . core.arithmetic\x27;fxdiv-and-mod)
   (fxdiv0 import . \x2E;fxdiv0)
   (fxdiv0-and-mod0 import . core.arithmetic\x27;fxdiv0-and-mod0)
   (fxeven? import . \x2E;fxeven?)
   (fxfirst-bit-set import . \x2E;fxfirst-bit-set)
   (fxif import . \x2E;fxif)
   (fxior import . \x2E;fxior)
   (fxlength import . \x2E;fxlength)
   (fxmax import . \x2E;fxmax)
   (fxmin import . \x2E;fxmin)
   (fxmod import . core.arithmetic\x27;fxmod)
   (fxmod0 import . core.arithmetic\x27;fxmod0)
   (fxnegative? import . \x2E;fxnegative?)
   (fxnot import . \x2E;fxnot)
   (fxodd? import . \x2E;fxodd?)
   (fxpositive? import . \x2E;fxpositive?)
   (fxreverse-bit-field import . core.arithmetic\x27;fxreverse-bit-field)
   (fxrotate-bit-field import . core.arithmetic\x27;fxrotate-bit-field)
   (fxxor import . \x2E;fxxor)
   (fxzero? import . \x2E;fxzero?)
   (gcd import . \x2E;gcd)
   (generate-temporaries import . \x2E;generate-temporaries)
   (generate-temporary-symbol import . \x2E;generate-temporary-symbol)
   (gensym import . \x2E;gensym)
   (get-accumulated-string import . \x2E;get-accumulated-string)
   (get-bytevector-all import . \x2E;get-bytevector-all)
   (get-bytevector-n import . \x2E;get-bytevector-n)
   (get-bytevector-n! import . \x2E;get-bytevector-n!)
   (get-bytevector-some import . \x2E;get-bytevector-some)
   (get-char import . \x2E;get-char)
   (get-datum import . \x2E;get-datum)
   (get-line import . \x2E;get-line)
   (get-string-all import . \x2E;get-string-all)
   (get-string-n import . \x2E;get-string-n)
   (get-string-n! import . \x2E;get-string-n!)
   (get-u8 import . \x2E;get-u8)
   (greatest-fixnum import . \x2E;greatest-fixnum)
   (guard import . core.exceptions\x27;guard)
   (hashtable->alist import . \x2E;core-hashtable->alist)
   (hashtable-clear! import . \x2E;core-hashtable-clear!)
   (hashtable-contains? import . \x2E;core-hashtable-contains?)
   (hashtable-copy import . \x2E;core-hashtable-copy)
   (hashtable-delete! import . \x2E;core-hashtable-delete!)
   (hashtable-entries import . core.hashtables\x27;hashtable-entries)
   (hashtable-equivalence-function import . \x2E;core-hashtable-equivalence-function)
   (hashtable-hash-function import . \x2E;core-hashtable-hash-function)
   (hashtable-keys import . core.hashtables\x27;hashtable-keys)
   (hashtable-mutable? import . \x2E;core-hashtable-mutable?)
   (hashtable-ref import . \x2E;core-hashtable-ref)
   (hashtable-set! import . \x2E;core-hashtable-set!)
   (hashtable-size import . \x2E;core-hashtable-size)
   (hashtable-update! import . core.hashtables\x27;hashtable-update!)
   (hashtable? import . \x2E;core-hashtable?)
   (home-directory import . \x2E;home-directory)
   (i/o-decoding-error? import . \x2E;i/o-decoding-error?)
   (i/o-encoding-error-char import . \x2E;i/o-encoding-error-char)
   (i/o-encoding-error? import . \x2E;i/o-encoding-error?)
   (i/o-error-filename import . \x2E;i/o-error-filename)
   (i/o-error-port import . \x2E;i/o-error-port)
   (i/o-error-position import . \x2E;i/o-error-position)
   (i/o-error? import . \x2E;i/o-error?)
   (i/o-file-already-exists-error? import . \x2E;i/o-file-already-exists-error?)
   (i/o-file-does-not-exist-error? import . \x2E;i/o-file-does-not-exist-error?)
   (i/o-file-is-read-only-error? import . \x2E;i/o-file-is-read-only-error?)
   (i/o-file-protection-error? import . \x2E;i/o-file-protection-error?)
   (i/o-filename-error? import . \x2E;i/o-filename-error?)
   (i/o-invalid-position-error? import . \x2E;i/o-invalid-position-error?)
   (i/o-port-error? import . \x2E;i/o-port-error?)
   (i/o-read-error? import . \x2E;i/o-read-error?)
   (i/o-write-error? import . \x2E;i/o-write-error?)
   (identifier-syntax import . \x2E;identifier-syntax)
   (identifier? import . \x2E;identifier?)
   (if import . \x2E;if)
   (imag-part import . \x2E;imag-part)
   (implementation-restriction-violation? import . \x2E;implementation-restriction-violation?)
   (inexact import . \x2E;inexact)
   (inexact->exact import . \x2E;exact)
   (inexact? import . \x2E;inexact?)
   (infinite? import . \x2E;infinite?)
   (input-port? import . \x2E;input-port?)
   (integer->char import . \x2E;integer->char)
   (integer-valued? import . \x2E;integer-valued?)
   (integer? import . \x2E;integer?)
   (interaction-environment import . \x2E;interaction-environment)
   (iota import . core.lists\x27;iota)
   (irritants-condition? import . \x2E;irritants-condition?)
   (lambda import . \x2E;lambda)
   (latin-1-codec import . core.io\x27;latin-1-codec)
   (lcm import . \x2E;lcm)
   (least-fixnum import . \x2E;least-fixnum)
   (length import . \x2E;length)
   (let import . \x2E;let)
   (let* import . \x2E;let*)
   (let*-values import . \x2E;let*-values)
   (let-optionals import . core.optargs\x27;let-optionals)
   (let-syntax import . \x2E;let-syntax)
   (let-values import . \x2E;let-values)
   (letrec import . \x2E;letrec)
   (letrec* import . \x2E;letrec*)
   (letrec-syntax import . \x2E;letrec-syntax)
   (lexical-violation? import . \x2E;lexical-violation?)
   (library import . \x2E;library)
   (library-extensions import . \x2E;library-extensions)
   (list import . \x2E;list)
   (list->string import . \x2E;list->string)
   (list->vector import . \x2E;list->vector)
   (list-head import . \x2E;list-head)
   (list-of-unique-symbols? import . core.lists\x27;list-of-unique-symbols?)
   (list-ref import . \x2E;list-ref)
   (list-sort import . core.sorting\x27;list-sort)
   (list-tail import . \x2E;list-tail)
   (list-transpose import . \x2E;list-transpose)
   (list-transpose* import . \x2E;list-transpose*)
   (list-transpose+ import . \x2E;list-transpose+)
   (list? import . \x2E;list?)
   (load import . \x2E;load)
   (load-shared-object import . \x2E;load-shared-object)
   (log import . \x2E;log)
   (lookahead-char import . \x2E;lookahead-char)
   (lookahead-u8 import . \x2E;lookahead-u8)
   (lookup-process-environment import . \x2E;lookup-process-environment)
   (lookup-shared-object import . \x2E;lookup-shared-object)
   (macro-expand import . \x2E;macro-expand)
   (magnitude import . \x2E;magnitude)
   (make-assertion-violation import . \x2E;make-assertion-violation)
   (make-bytevector import . \x2E;make-bytevector)
   (make-bytevector-mapping import . \x2E;make-bytevector-mapping)
   (make-callback import . \x2E;make-callback)
   (make-core-hashtable import . \x2E;make-core-hashtable)
   (make-custom-binary-input-port import . core.io\x27;make-custom-binary-input-port)
   (make-custom-binary-input/output-port import . core.io\x27;make-custom-binary-input/output-port)
   (make-custom-binary-output-port import . core.io\x27;make-custom-binary-output-port)
   (make-custom-textual-input-port import . core.io\x27;make-custom-textual-input-port)
   (make-custom-textual-input/output-port
     import
     .
     core.io\x27;make-custom-textual-input/output-port)
   (make-custom-textual-output-port import . core.io\x27;make-custom-textual-output-port)
   (make-enumeration import . core.enums\x27;make-enumeration)
   (make-environment import . \x2E;make-environment)
   (make-eq-hashtable import . core.hashtables\x27;make-eq-hashtable)
   (make-eqv-hashtable import . core.hashtables\x27;make-eqv-hashtable)
   (make-error import . \x2E;make-error)
   (make-hashtable import . core.hashtables\x27;make-hashtable)
   (make-i/o-decoding-error import . \x2E;make-i/o-decoding-error)
   (make-i/o-encoding-error import . \x2E;make-i/o-encoding-error)
   (make-i/o-error import . \x2E;make-i/o-error)
   (make-i/o-file-already-exists-error import . \x2E;make-i/o-file-already-exists-error)
   (make-i/o-file-does-not-exist-error import . \x2E;make-i/o-file-does-not-exist-error)
   (make-i/o-file-is-read-only-error import . \x2E;make-i/o-file-is-read-only-error)
   (make-i/o-file-protection-error import . \x2E;make-i/o-file-protection-error)
   (make-i/o-filename-error import . \x2E;make-i/o-filename-error)
   (make-i/o-invalid-position-error import . \x2E;make-i/o-invalid-position-error)
   (make-i/o-port-error import . \x2E;make-i/o-port-error)
   (make-i/o-read-error import . \x2E;make-i/o-read-error)
   (make-i/o-write-error import . \x2E;make-i/o-write-error)
   (make-implementation-restriction-violation
     import
     .
     \x2E;make-implementation-restriction-violation)
   (make-irritants-condition import . \x2E;make-irritants-condition)
   (make-lexical-violation import . \x2E;make-lexical-violation)
   (make-list import . core.lists\x27;make-list)
   (make-message-condition import . \x2E;make-message-condition)
   (make-no-infinities-violation import . \x2E;make-no-infinities-violation)
   (make-no-nans-violation import . \x2E;make-no-nans-violation)
   (make-non-continuable-violation import . \x2E;make-non-continuable-violation)
   (make-parameter import . \x2E;make-parameter)
   (make-polar import . \x2E;make-polar)
   (make-record-constructor-descriptor import . \x2E;make-record-constructor-descriptor)
   (make-record-type import . \x2E;make-record-type)
   (make-record-type-descriptor import . \x2E;make-record-type-descriptor)
   (make-rectangular import . \x2E;make-rectangular)
   (make-serious-condition import . \x2E;make-serious-condition)
   (make-string import . \x2E;make-string)
   (make-string-hashtable import . core.hashtables\x27;make-string-hashtable)
   (make-string-input-port import . \x2E;make-string-input-port)
   (make-string-output-port import . \x2E;make-string-output-port)
   (make-syntax-violation import . \x2E;make-syntax-violation)
   (make-temporary-file-port import . \x2E;make-temporary-file-port)
   (make-transcoded-port import . \x2E;make-transcoded-port)
   (make-transcoder import . core.io\x27;make-transcoder)
   (make-tuple import . \x2E;make-tuple)
   (make-undefined-violation import . \x2E;make-undefined-violation)
   (make-variable-transformer import . \x2E;make-variable-transformer)
   (make-vector import . \x2E;make-vector)
   (make-violation import . \x2E;make-violation)
   (make-warning import . \x2E;make-warning)
   (make-weak-core-hashtable import . \x2E;make-weak-core-hashtable)
   (make-weak-hashtable import . \x2E;make-weak-core-hashtable)
   (make-weak-mapping import . \x2E;make-weak-mapping)
   (make-who-condition import . \x2E;make-who-condition)
   (map import . \x2E;map)
   (max import . \x2E;max)
   (member import . \x2E;member)
   (memp import . core.lists\x27;memp)
   (memq import . \x2E;memq)
   (memv import . \x2E;memv)
   (message-condition? import . \x2E;message-condition?)
   (microsecond import . \x2E;microsecond)
   (microsecond->utc import . \x2E;microsecond->utc)
   (min import . \x2E;min)
   (mod import . \x2E;mod)
   (mod0 import . \x2E;mod0)
   (modulo import . \x2E;modulo)
   (nan? import . \x2E;nan?)
   (native-endianness import . \x2E;native-endianness)
   (native-eol-style import . core.io\x27;native-eol-style)
   (native-transcoder import . core.io\x27;native-transcoder)
   (native-transcoder-descriptor import . \x2E;native-transcoder-descriptor)
   (negative? import . \x2E;negative?)
   (newline import . \x2E;newline)
   (no-infinities-violation? import . \x2E;no-infinities-violation?)
   (no-nans-violation? import . \x2E;no-nans-violation?)
   (non-continuable-violation? import . \x2E;non-continuable-violation?)
   (nonblock-byte-ready? import . \x2E;nonblock-byte-ready?)
   (not import . \x2E;not)
   (null? import . \x2E;null?)
   (number->string import . \x2E;number->string)
   (number? import . \x2E;number?)
   (numerator import . \x2E;numerator)
   (odd? import . \x2E;odd?)
   (open-builtin-data-input-port import . \x2E;open-builtin-data-input-port)
   (open-bytevector-input-port import . core.io\x27;open-bytevector-input-port)
   (open-bytevector-output-port import . core.io\x27;open-bytevector-output-port)
   (open-file-input-port import . core.io\x27;open-file-input-port)
   (open-file-input/output-port import . core.io\x27;open-file-input/output-port)
   (open-file-output-port import . core.io\x27;open-file-output-port)
   (open-input-file import . core.io\x27;open-input-file)
   (open-output-file import . core.io\x27;open-output-file)
   (open-port import . \x2E;open-port)
   (open-string-input-port import . core.io\x27;open-string-input-port)
   (open-string-output-port import . core.io\x27;open-string-output-port)
   (open-temporary-file-port import . core.io\x27;open-temporary-file-port)
   (or import . \x2E;or)
   (output-port-buffer-mode import . \x2E;output-port-buffer-mode)
   (output-port? import . \x2E;output-port?)
   (pair? import . \x2E;pair?)
   (parameterize import . core.parameters\x27;parameterize)
   (partition import . core.lists\x27;partition)
   (peek-char import . \x2E;peek-char)
   (port-device-subtype import . \x2E;port-device-subtype)
   (port-eof? import . \x2E;port-eof?)
   (port-has-port-position? import . \x2E;port-has-port-position?)
   (port-has-set-port-position!? import . \x2E;port-has-set-port-position!?)
   (port-position import . \x2E;port-position)
   (port-transcoder import . core.io\x27;port-transcoder)
   (port-transcoder-descriptor import . \x2E;port-transcoder-descriptor)
   (port? import . \x2E;port?)
   (positive? import . \x2E;positive?)
   (pretty-print import . \x2E;pretty-print)
   (pretty-print-initial-indent import . \x2E;pretty-print-initial-indent)
   (pretty-print-line-length import . \x2E;pretty-print-line-length)
   (pretty-print-maximum-lines import . \x2E;pretty-print-maximum-lines)
   (pretty-print-unwrap-syntax import . \x2E;pretty-print-unwrap-syntax)
   (procedure? import . \x2E;procedure?)
   (process import . \x2E;process)
   (process-wait import . \x2E;process-wait)
   (put-byte import . \x2E;put-byte)
   (put-bytevector import . \x2E;put-bytevector)
   (put-char import . \x2E;put-char)
   (put-datum import . \x2E;put-datum)
   (put-fasl import . \x2E;put-fasl)
   (put-string import . \x2E;put-string)
   (put-u8 import . \x2E;put-u8)
   (quasiquote import . \x2E;quasiquote)
   (quasisyntax import . core.syntax-case\x27;quasisyntax)
   (quote import . \x2E;quote)
   (quotient import . \x2E;quotient)
   (raise import . \x2E;raise)
   (raise-continuable import . \x2E;raise-continuable)
   (rational-valued? import . \x2E;rational-valued?)
   (rational? import . \x2E;rational?)
   (rationalize import . \x2E;rationalize)
   (read import . \x2E;read)
   (read-char import . \x2E;read-char)
   (real->flonum import . \x2E;real->flonum)
   (real-part import . \x2E;real-part)
   (real-valued? import . \x2E;real-valued?)
   (real? import . \x2E;real?)
   (record-accessor import . \x2E;record-accessor)
   (record-constructor import . \x2E;record-constructor)
   (record-constructor-descriptor import . core.records\x27;record-constructor-descriptor)
   (record-field-mutable? import . \x2E;record-field-mutable?)
   (record-mutator import . \x2E;record-mutator)
   (record-predicate import . \x2E;record-predicate)
   (record-print-nesting-limit import . \x2E;record-print-nesting-limit)
   (record-rtd import . \x2E;record-rtd)
   (record-type-descriptor import . core.records\x27;record-type-descriptor)
   (record-type-descriptor? import . \x2E;record-type-descriptor?)
   (record-type-field-names import . \x2E;record-type-field-names)
   (record-type-generative? import . \x2E;record-type-generative?)
   (record-type-name import . \x2E;record-type-name)
   (record-type-opaque? import . \x2E;record-type-opaque?)
   (record-type-parent import . \x2E;record-type-parent)
   (record-type-rcd import . \x2E;record-type-rcd)
   (record-type-rtd import . \x2E;record-type-rtd)
   (record-type-sealed? import . \x2E;record-type-sealed?)
   (record-type-uid import . \x2E;record-type-uid)
   (record-type? import . \x2E;record-type?)
   (record? import . \x2E;record?)
   (remainder import . \x2E;remainder)
   (remove import . core.lists\x27;remove)
   (remove-duplicate-symbols import . core.lists\x27;remove-duplicate-symbols)
   (remp import . core.lists\x27;remp)
   (remq import . core.lists\x27;remq)
   (remv import . core.lists\x27;remv)
   (restricted-print-line-length import . \x2E;restricted-print-line-length)
   (reverse import . \x2E;reverse)
   (round import . \x2E;round)
   (scheme-error import . \x2E;scheme-error)
   (scheme-library-exports import . \x2E;scheme-library-exports)
   (scheme-library-paths import . \x2E;scheme-library-paths)
   (scheme-load-paths import . \x2E;scheme-load-paths)
   (scheme-load-verbose import . \x2E;scheme-load-verbose)
   (serious-condition? import . \x2E;serious-condition?)
   (set! import . \x2E;set!)
   (set-car! import . \x2E;set-car!)
   (set-cdr! import . \x2E;set-cdr!)
   (set-current-error-port! import . \x2E;set-current-error-port!)
   (set-current-input-port! import . \x2E;set-current-input-port!)
   (set-current-output-port! import . \x2E;set-current-output-port!)
   (set-port-position! import . \x2E;set-port-position!)
   (set-top-level-value! import . \x2E;set-top-level-value!)
   (simple-conditions import . \x2E;simple-conditions)
   (sin import . \x2E;sin)
   (sint-list->bytevector import . core.bytevectors\x27;sint-list->bytevector)
   (sqrt import . \x2E;sqrt)
   (standard-error-port import . \x2E;standard-error-port)
   (standard-input-port import . \x2E;standard-input-port)
   (standard-output-port import . \x2E;standard-output-port)
   (stdcall-shared-object->double import . \x2E;stdcall-shared-object->double)
   (stdcall-shared-object->int import . \x2E;stdcall-shared-object->int)
   (stdcall-shared-object->intptr import . \x2E;stdcall-shared-object->intptr)
   (stdcall-shared-object->void import . \x2E;stdcall-shared-object->void)
   (string import . \x2E;string)
   (string->bytevector import . core.io\x27;string->bytevector)
   (string->cstring import . \x2E;string->cstring)
   (string->list import . \x2E;string->list)
   (string->number import . \x2E;string->number)
   (string->symbol import . \x2E;string->symbol)
   (string->utf16 import . core.bytevector-transcoders\x27;string->utf16)
   (string->utf32 import . core.bytevector-transcoders\x27;string->utf32)
   (string->utf8 import . \x2E;string->utf8)
   (string-append import . \x2E;string-append)
   (string-ci-hash import . core.hashtables\x27;string-ci-hash)
   (string-ci<=? import . core.unicode\x27;string-ci<=?)
   (string-ci<? import . core.unicode\x27;string-ci<?)
   (string-ci=? import . core.unicode\x27;string-ci=?)
   (string-ci>=? import . core.unicode\x27;string-ci>=?)
   (string-ci>? import . core.unicode\x27;string-ci>?)
   (string-contains import . \x2E;string-contains)
   (string-copy import . \x2E;string-copy)
   (string-downcase import . core.unicode\x27;string-downcase)
   (string-fill! import . \x2E;string-fill!)
   (string-foldcase import . core.unicode\x27;string-foldcase)
   (string-for-each import . \x2E;string-for-each)
   (string-hash import . \x2E;string-hash)
   (string-length import . \x2E;string-length)
   (string-normalize-nfc import . core.unicode\x27;string-normalize-nfc)
   (string-normalize-nfd import . core.unicode\x27;string-normalize-nfd)
   (string-normalize-nfkc import . core.unicode\x27;string-normalize-nfkc)
   (string-normalize-nfkd import . core.unicode\x27;string-normalize-nfkd)
   (string-ref import . \x2E;string-ref)
   (string-set! import . \x2E;string-set!)
   (string-titlecase import . core.unicode\x27;string-titlecase)
   (string-upcase import . core.unicode\x27;string-upcase)
   (string<=? import . \x2E;string<=?)
   (string<? import . \x2E;string<?)
   (string=? import . \x2E;string=?)
   (string>=? import . \x2E;string>=?)
   (string>? import . \x2E;string>?)
   (string? import . \x2E;string?)
   (subr? import . \x2E;subr?)
   (substring import . \x2E;substring)
   (symbol->string import . \x2E;symbol->string)
   (symbol-contains import . \x2E;symbol-contains)
   (symbol-hash import . \x2E;symbol-hash)
   (symbol=? import . \x2E;symbol=?)
   (symbol? import . \x2E;symbol?)
   (syntax import . \x2E;syntax)
   (syntax->datum import . \x2E;syntax->datum)
   (syntax-case import . \x2E;syntax-case)
   (syntax-rules import . \x2E;syntax-rules)
   (syntax-violation import . \x2E;syntax-violation)
   (syntax-violation-form import . \x2E;syntax-violation-form)
   (syntax-violation-subform import . \x2E;syntax-violation-subform)
   (syntax-violation? import . \x2E;syntax-violation?)
   (system import . \x2E;system)
   (system-environment import . \x2E;system-environment)
   (system-share-path import . \x2E;system-share-path)
   (take import . core.lists\x27;take)
   (tan import . \x2E;tan)
   (textual-port? import . core.io\x27;textual-port?)
   (time-usage import . \x2E;time-usage)
   (top-level-bound? import . \x2E;top-level-bound?)
   (top-level-value import . \x2E;top-level-value)
   (transcoded-port import . core.io\x27;transcoded-port)
   (transcoder-codec import . core.io\x27;transcoder-codec)
   (transcoder-eol-style import . core.io\x27;transcoder-eol-style)
   (transcoder-error-handling-mode import . core.io\x27;transcoder-error-handling-mode)
   (truncate import . \x2E;truncate)
   (tuple import . \x2E;tuple)
   (tuple->list import . \x2E;tuple->list)
   (tuple-index import . \x2E;tuple-index)
   (tuple-length import . \x2E;tuple-length)
   (tuple-ref import . \x2E;tuple-ref)
   (tuple-set! import . \x2E;tuple-set!)
   (tuple? import . \x2E;tuple?)
   (u8-list->bytevector import . \x2E;u8-list->bytevector)
   (uint-list->bytevector import . core.bytevectors\x27;uint-list->bytevector)
   (undefined-violation? import . \x2E;undefined-violation?)
   (unless import . core.control\x27;unless)
   (unquote import . \x2E;unquote)
   (unquote-splicing import . \x2E;unquote-splicing)
   (unspecified import . \x2E;unspecified)
   (unspecified? import . \x2E;unspecified?)
   (unsyntax import . core.syntax-case\x27;unsyntax)
   (unsyntax-splicing import . core.syntax-case\x27;unsyntax-splicing)
   (usleep import . \x2E;usleep)
   (utf-16-codec import . core.io\x27;utf-16-codec)
   (utf-8-codec import . core.io\x27;utf-8-codec)
   (utf16->string import . core.bytevector-transcoders\x27;utf16->string)
   (utf32->string import . core.bytevector-transcoders\x27;utf32->string)
   (utf8->string import . \x2E;utf8->string)
   (values import . \x2E;values)
   (vector import . \x2E;vector)
   (vector->list import . \x2E;vector->list)
   (vector-fill! import . \x2E;vector-fill!)
   (vector-for-each import . \x2E;vector-for-each)
   (vector-length import . \x2E;vector-length)
   (vector-map import . \x2E;vector-map)
   (vector-ref import . \x2E;vector-ref)
   (vector-set! import . \x2E;vector-set!)
   (vector-sort import . core.sorting\x27;vector-sort)
   (vector-sort! import . core.sorting\x27;vector-sort!)
   (vector? import . \x2E;vector?)
   (violation? import . \x2E;violation?)
   (warning-level import . \x2E;warning-level)
   (warning? import . \x2E;warning?)
   (weak-core-hashtable? import . \x2E;weak-core-hashtable?)
   (weak-hashtable? import . \x2E;weak-core-hashtable?)
   (weak-mapping-key import . \x2E;weak-mapping-key)
   (weak-mapping-value import . \x2E;weak-mapping-value)
   (weak-mapping? import . \x2E;weak-mapping?)
   (when import . core.control\x27;when)
   (who-condition? import . \x2E;who-condition?)
   (with-exception-handler import . \x2E;with-exception-handler)
   (with-input-from-file import . core.io\x27;with-input-from-file)
   (with-output-to-file import . core.io\x27;with-output-to-file)
   (with-syntax import . core.syntax-case\x27;with-syntax)
   (write import . \x2E;write)
   (write-char import . \x2E;write-char)
   (write-with-shared-structure import . \x2E;write-with-shared-structure)
   (zero? import . \x2E;zero?))
 (apply.gloc.of \x2E;intern-scheme-library "../stdlib/core.scm" . 1025))

