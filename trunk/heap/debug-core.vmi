((call
   (push.const core primitives)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/exceptions.scm" . 6145))
 (call
   (push.const . syntax)
   (push.const . |core.exceptions'guard|)
   (push.const
     (else)
     ("../stdlib/core/exceptions.scm" . 20485)
     ((_ (var clause ... (else e1 e2 ...)) b1 b2 ...)
      (call/cc
        (lambda (cont)
          (with-exception-handler
            (lambda (var) (call-with-values (lambda () (cond clause ... (else e1 e2 ...))) cont))
            (lambda () b1 b2 ...))))
      ((b2 . 1) (b1 . 0) (e2 . 1) (e1 . 0) (clause . 1) (var . 0))
      (else cond call-with-values with-exception-handler cont lambda call/cc))
     ((_ (var clause ...) b1 b2 ...)
      ((call/cc
         (lambda (guard-k)
           (with-exception-handler
             (lambda (condition)
               ((call/cc
                  (lambda (handler-k)
                    (guard-k
                      (lambda ()
                        (let ((var condition))
                          (cond clause ... (else (handler-k (lambda () (raise condition))))))))))))
             (lambda ()
               (call-with-values
                 (lambda () b1 b2 ...)
                 (lambda args (guard-k (lambda () (apply values args))))))))))
      ((b2 . 1) (b1 . 0) (clause . 1) (var . 0))
      (values
        apply
        args
        call-with-values
        raise
        else
        cond
        let
        handler-k
        condition
        with-exception-handler
        guard-k
        lambda
        call/cc)))
   (push.const
     (call-with-values import . |.call-with-values|)
     (apply import . |.apply|)
     (if import . |.if|)
     (quote import . |.quote|)
     (call/cc import . |.call/cc|)
     (with-exception-handler import . |.with-exception-handler|)
     (... import . |....|)
     (values import . |.values|)
     (letrec* import . |.letrec*|)
     (condition import . |.condition|)
     (define-syntax import . |.define-syntax|)
     (or import . |.or|)
     (let import . |.let|)
     (set! import . |.set!|)
     (raise import . |.raise|)
     (define import . |.define|)
     (guard import . |core.exceptions'guard|)
     (begin import . |.begin|)
     (cond import . |.cond|)
     (_ import . |._|)
     (and import . |.and|)
     (else import . |.else|)
     (syntax-rules import . |.syntax-rules|)
     (lambda import . |.lambda|))
   (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/exceptions.scm" . 6145))
 (push.const . core.exceptions)
 (push.const . #f)
 (push.const
   (with-exception-handler import . |.with-exception-handler|)
   (guard import . |core.exceptions'guard|)
   (raise import . |.raise|)
   (raise-continuable import . |.raise-continuable|))
 (apply.gloc.of |.intern-scheme-library| "../stdlib/core/exceptions.scm" . 6145))

((call
   (push.const core primitives)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/parameters.scm" . 6145))
 (call
   (push.const core intrinsics)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/parameters.scm" . 6145))
 (call
   (push.const
     (quote import . |.quote|)
     (if import . |.if|)
     (dynamic-wind import . |.dynamic-wind|)
     (parameterize import . |core.parameters'parameterize|)
     (... import . |....|)
     (_ import . |._|)
     (define-syntax import . |.define-syntax|)
     (or import . |.or|)
     (let import . |.let|)
     (set! import . |.set!|)
     (letrec* import . |.letrec*|)
     (define import . |.define|)
     (begin import . |.begin|)
     (and import . |.and|)
     (parameterize-aux import . |core.parameters'parameterize-aux|)
     (syntax-rules import . |.syntax-rules|)
     (lambda import . |.lambda|))
   (extend . 1)
   (call
     (push.const . syntax)
     (push.const . |core.parameters'parameterize-aux|)
     (push.const
       ()
       ("../stdlib/core/parameters.scm" . 14341)
       ((_ () ((save new param value) ...) body ...)
        (let ((save #f) ... (new value) ...)
          (dynamic-wind
            (lambda () (set! save (param)) ... (param new) ...)
            (lambda () body ...)
            (lambda () (param save) ...)))
        ((body . 1) (value . 1) (param . 1) (new . 1) (save . 1))
        (set! lambda dynamic-wind let))
       ((_ ((e1 e2) . more) (stash ...) body ...)
        (parameterize-aux more (stash ... (tmp1 tmp2 e1 e2)) body ...)
        ((body . 1) (stash . 1) (more . 0) (e2 . 0) (e1 . 0))
        (tmp2 tmp1 parameterize-aux)))
     (push.iloc.0 . 0)
     (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/parameters.scm" . 6145))
   (push.const . syntax)
   (push.const . |core.parameters'parameterize|)
   (push.const
     ()
     ("../stdlib/core/parameters.scm" . 25605)
     ((_ ((e1 e2) ...) body ...)
      (parameterize-aux ((e1 e2) ...) () body ...)
      ((body . 1) (e2 . 1) (e1 . 1))
      (parameterize-aux)))
   (push.iloc.0 . 0)
   (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/parameters.scm" . 6145))
 (push.const . core.parameters)
 (push.const . #f)
 (push.const
   (make-parameter import . |.make-parameter|)
   (parameterize import . |core.parameters'parameterize|))
 (apply.gloc.of |.intern-scheme-library| "../stdlib/core/parameters.scm" . 6145))

((call
   (push.const core primitives)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/arithmetic.scm" . 6145))
 (close
   (2 0 . |core.arithmetic'flmod|)
   (push.iloc.0 . 0)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.subr.gloc.of |.fldiv| 2 "../stdlib/core/arithmetic.scm" . 129043)
   (push.iloc.0 . 1)
   (push.subr.gloc.of |.fl*| 2 "../stdlib/core/arithmetic.scm" . 129038)
   (ret.subr.gloc.of |.fl-| "../stdlib/core/arithmetic.scm" . 129031))
 (set.gloc.of |core.arithmetic'flmod|)
 (close
   (2 0 . |core.arithmetic'fldiv-and-mod|)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.subr.gloc.of |.fldiv| 2 "../stdlib/core/arithmetic.scm" . 133136)
   (extend . 1)
   (push.iloc.0 . 0)
   (push.iloc.1 . 0)
   (push.iloc.0 . 0)
   (push.iloc.1 . 1)
   (push.subr.gloc.of |.fl*| 2 "../stdlib/core/arithmetic.scm" . 134170)
   (push.subr.gloc.of |.fl-| 2 "../stdlib/core/arithmetic.scm" . 134163)
   (ret.subr.gloc.of |.values| "../stdlib/core/arithmetic.scm" . 134153))
 (set.gloc.of |core.arithmetic'fldiv-and-mod|)
 (close
   (2 0 . |core.arithmetic'flmod0|)
   (push.iloc.0 . 0)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.subr.gloc.of |.fldiv0| 2 "../stdlib/core/arithmetic.scm" . 138259)
   (push.iloc.0 . 1)
   (push.subr.gloc.of |.fl*| 2 "../stdlib/core/arithmetic.scm" . 138254)
   (ret.subr.gloc.of |.fl-| "../stdlib/core/arithmetic.scm" . 138247))
 (set.gloc.of |core.arithmetic'flmod0|)
 (close
   (2 0 . |core.arithmetic'fldiv0-and-mod0|)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.subr.gloc.of |.fldiv0| 2 "../stdlib/core/arithmetic.scm" . 142353)
   (extend . 1)
   (push.iloc.0 . 0)
   (push.iloc.1 . 0)
   (push.iloc.0 . 0)
   (push.iloc.1 . 1)
   (push.subr.gloc.of |.fl*| 2 "../stdlib/core/arithmetic.scm" . 143387)
   (push.subr.gloc.of |.fl-| 2 "../stdlib/core/arithmetic.scm" . 143380)
   (ret.subr.gloc.of |.values| "../stdlib/core/arithmetic.scm" . 143369))
 (set.gloc.of |core.arithmetic'fldiv0-and-mod0|)
 (push.const . 2)
 (subr.gloc.of |.fixnum-width| 0)
 (push)
 (subr.gloc.of |.expt| 2 "../stdlib/core/arithmetic.scm" . 145434)
 (set.gloc.of |core.arithmetic'2^fixnum-width|)
 (close
   (2 0 . |core.arithmetic'fxmod|)
   (push.iloc.0 . 0)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.subr.gloc.of |.fxdiv| 2 "../stdlib/core/arithmetic.scm" . 149523)
   (push.iloc.0 . 1)
   (push.subr.gloc.of |.fx*| 2 "../stdlib/core/arithmetic.scm" . 149518)
   (ret.subr.gloc.of |.fx-| "../stdlib/core/arithmetic.scm" . 149511))
 (set.gloc.of |core.arithmetic'fxmod|)
 (close
   (2 0 . |core.arithmetic'fxdiv-and-mod|)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.subr.gloc.of |.fxdiv| 2 "../stdlib/core/arithmetic.scm" . 153616)
   (extend . 1)
   (push.iloc.0 . 0)
   (push.iloc.1 . 0)
   (push.iloc.0 . 0)
   (push.iloc.1 . 1)
   (push.subr.gloc.of |.fx*| 2 "../stdlib/core/arithmetic.scm" . 154650)
   (push.subr.gloc.of |.fx-| 2 "../stdlib/core/arithmetic.scm" . 154643)
   (ret.subr.gloc.of |.values| "../stdlib/core/arithmetic.scm" . 154633))
 (set.gloc.of |core.arithmetic'fxdiv-and-mod|)
 (close
   (2 0 . |core.arithmetic'fxmod0|)
   (push.iloc.0 . 0)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.subr.gloc.of |.fxdiv0| 2 "../stdlib/core/arithmetic.scm" . 158739)
   (push.iloc.0 . 1)
   (push.subr.gloc.of |.fx*| 2 "../stdlib/core/arithmetic.scm" . 158734)
   (ret.subr.gloc.of |.fx-| "../stdlib/core/arithmetic.scm" . 158727))
 (set.gloc.of |core.arithmetic'fxmod0|)
 (close
   (2 0 . |core.arithmetic'fxdiv0-and-mod0|)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.subr.gloc.of |.fxdiv0| 2 "../stdlib/core/arithmetic.scm" . 162833)
   (extend . 1)
   (push.iloc.0 . 0)
   (push.iloc.1 . 0)
   (push.iloc.0 . 0)
   (push.iloc.1 . 1)
   (push.subr.gloc.of |.fx*| 2 "../stdlib/core/arithmetic.scm" . 163867)
   (push.subr.gloc.of |.fx-| 2 "../stdlib/core/arithmetic.scm" . 163860)
   (ret.subr.gloc.of |.values| "../stdlib/core/arithmetic.scm" . 163849))
 (set.gloc.of |core.arithmetic'fxdiv0-and-mod0|)
 (close
   (3 0 . |core.arithmetic'fx+/carry|)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.iloc.0 . 2)
   (push.subr.gloc.of |.+| 3 "../stdlib/core/arithmetic.scm" . 167953)
   (extend . 1)
   (call
     (push.iloc.0 . 0)
     (push.gloc.of |core.arithmetic'2^fixnum-width|)
     (apply.gloc.of |.mod0| "../stdlib/core/arithmetic.scm" . 168978))
   (push)
   (push.iloc.0 . 0)
   (push.gloc.of |core.arithmetic'2^fixnum-width|)
   (push.subr.gloc.of |.div0| 2 "../stdlib/core/arithmetic.scm" . 170002)
   (ret.subr.gloc.of |.values| "../stdlib/core/arithmetic.scm" . 171017))
 (set.gloc.of |core.arithmetic'fx+/carry|)
 (close
   (3 0 . |core.arithmetic'fx-/carry|)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.iloc.0 . 2)
   (push.subr.gloc.of |.-| 3 "../stdlib/core/arithmetic.scm" . 175121)
   (extend . 1)
   (call
     (push.iloc.0 . 0)
     (push.gloc.of |core.arithmetic'2^fixnum-width|)
     (apply.gloc.of |.mod0| "../stdlib/core/arithmetic.scm" . 176146))
   (push)
   (push.iloc.0 . 0)
   (push.gloc.of |core.arithmetic'2^fixnum-width|)
   (push.subr.gloc.of |.div0| 2 "../stdlib/core/arithmetic.scm" . 177170)
   (ret.subr.gloc.of |.values| "../stdlib/core/arithmetic.scm" . 178185))
 (set.gloc.of |core.arithmetic'fx-/carry|)
 (close
   (3 0 . |core.arithmetic'fx*/carry|)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.subr.gloc.of |.*| 2 "../stdlib/core/arithmetic.scm" . 182292)
   (push.iloc.0 . 2)
   (push.subr.gloc.of |.+| 2 "../stdlib/core/arithmetic.scm" . 182289)
   (extend . 1)
   (call
     (push.iloc.0 . 0)
     (push.gloc.of |core.arithmetic'2^fixnum-width|)
     (apply.gloc.of |.mod0| "../stdlib/core/arithmetic.scm" . 183314))
   (push)
   (push.iloc.0 . 0)
   (push.gloc.of |core.arithmetic'2^fixnum-width|)
   (push.subr.gloc.of |.div0| 2 "../stdlib/core/arithmetic.scm" . 184338)
   (ret.subr.gloc.of |.values| "../stdlib/core/arithmetic.scm" . 185353))
 (set.gloc.of |core.arithmetic'fx*/carry|)
 (close
   (4 0 . |core.arithmetic'fxrotate-bit-field|)
   (push.iloc.0 . 2)
   (push.iloc.0 . 1)
   (push.subr.gloc.of |.fx-| 2 "../stdlib/core/arithmetic.scm" . 193557)
   (extend . 1)
   (push.iloc.0 . 0)
   (subr.gloc.of |.fxpositive?| 1 "../stdlib/core/arithmetic.scm" . 194573)
   (if.true
     (call
       (push.iloc.1 . 3)
       (push.iloc.0 . 0)
       (apply.gloc.of |core.arithmetic'fxmod| "../stdlib/core/arithmetic.scm" . 195611))
     (push)
     (extend . 1)
     (push.iloc 2 . 0)
     (push.iloc 2 . 1)
     (push.iloc 2 . 2)
     (push.subr.gloc.of |.fxbit-field| 3 "../stdlib/core/arithmetic.scm" . 196636)
     (extend . 1)
     (push.iloc 3 . 0)
     (push.iloc 3 . 1)
     (push.iloc 3 . 2)
     (push.iloc.0 . 0)
     (push.iloc.1 . 0)
     (push.subr.gloc.of |.fxarithmetic-shift-left| 2 "../stdlib/core/arithmetic.scm" . 197660)
     (push.iloc.0 . 0)
     (push.iloc 2 . 0)
     (push.iloc.1 . 0)
     (push.subr.gloc.of |.fx-| 2 "../stdlib/core/arithmetic.scm" . 198717)
     (push.subr.gloc.of |.fxarithmetic-shift-right| 2 "../stdlib/core/arithmetic.scm" . 198684)
     (push.subr.gloc.of |.fxior| 2 "../stdlib/core/arithmetic.scm" . 199707)
     (ret.subr.gloc.of |.fxcopy-bit-field| "../stdlib/core/arithmetic.scm" . 200719))
   (ret.iloc 1 . 0))
 (set.gloc.of |core.arithmetic'fxrotate-bit-field|)
 (close
   (3 0 . |core.arithmetic'fxreverse-bit-field|)
   (push.iloc.0 . 2)
   (push.iloc.0 . 1)
   (push.subr.gloc.of |.fx-| 2 "../stdlib/core/arithmetic.scm" . 208917)
   (extend . 1)
   (push.iloc.0 . 0)
   (subr.gloc.of |.fxpositive?| 1 "../stdlib/core/arithmetic.scm" . 209933)
   (if.true
     (extend.enclose+
       (3 0 . loop)
       (push.iloc.0 . 2)
       (subr.gloc.of |.fxzero?| 1 "../stdlib/core/arithmetic.scm" . 211987)
       (if.true
         (push.iloc 3 . 0)
         (push.iloc 3 . 1)
         (push.iloc 3 . 2)
         (push.iloc.0 . 0)
         (ret.subr.gloc.of |.fxcopy-bit-field| "../stdlib/core/arithmetic.scm" . 213011))
       (push.iloc.0 . 1)
       (push.const . 1)
       (push.subr.gloc.of |.fxand| 2 "../stdlib/core/arithmetic.scm" . 214048)
       (subr.gloc.of |.fxzero?| 1 "../stdlib/core/arithmetic.scm" . 214039)
       (if.true
         (push.iloc.0 . 0)
         (push.const . 1)
         (push.subr.gloc.of |.fxarithmetic-shift-left| 2 "../stdlib/core/arithmetic.scm" . 215069)
         (push.iloc.0 . 1)
         (push.const . 1)
         (push.subr.gloc.of |.fxarithmetic-shift-right| 2 "../stdlib/core/arithmetic.scm" . 216093)
         (push.iloc.0 . 2)
         (push.const . 1)
         (push.subr.gloc.of |.fx-| 2 "../stdlib/core/arithmetic.scm" . 217117)
         (apply.iloc+ (1 . 0) "../stdlib/core/arithmetic.scm" . 215063))
       (push.iloc.0 . 0)
       (push.const . 1)
       (push.subr.gloc.of |.fxarithmetic-shift-left| 2 "../stdlib/core/arithmetic.scm" . 218148)
       (push.const . 1)
       (push.subr.gloc.of |.fxior| 2 "../stdlib/core/arithmetic.scm" . 218141)
       (push.iloc.0 . 1)
       (push.const . 1)
       (push.subr.gloc.of |.fxarithmetic-shift-right| 2 "../stdlib/core/arithmetic.scm" . 219165)
       (push.iloc.0 . 2)
       (push.const . 1)
       (push.subr.gloc.of |.fx-| 2 "../stdlib/core/arithmetic.scm" . 220189)
       (apply.iloc+ (1 . 0) "../stdlib/core/arithmetic.scm" . 218135))
     (push.const . 0)
     (push.iloc 2 . 0)
     (push.iloc 2 . 1)
     (push.iloc 2 . 2)
     (push.subr.gloc.of |.fxbit-field| 3 "../stdlib/core/arithmetic.scm" . 210988)
     (push.iloc.1 . 0)
     (apply.iloc+ (0 . 0) "../stdlib/core/arithmetic.scm" . 210957))
   (ret.iloc 1 . 0))
 (set.gloc.of |core.arithmetic'fxreverse-bit-field|)
 (gloc.of |.bitwise-arithmetic-shift|)
 (set.gloc.of |core.arithmetic'bitwise-arithmetic-shift-left|)
 (close
   (3 0 . |core.arithmetic'bitwise-if|)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.subr.gloc.of |.bitwise-and| 2 "../stdlib/core/arithmetic.scm" . 227348)
   (push.iloc.0 . 0)
   (push.subr.gloc.of |.bitwise-not| 1 "../stdlib/core/arithmetic.scm" . 228385)
   (push.iloc.0 . 2)
   (push.subr.gloc.of |.bitwise-and| 2 "../stdlib/core/arithmetic.scm" . 228372)
   (ret.subr.gloc.of |.bitwise-ior| "../stdlib/core/arithmetic.scm" . 227335))
 (set.gloc.of |core.arithmetic'bitwise-if|)
 (close
   (2 0 . |core.arithmetic'bitwise-bit-set?|)
   (push.const . 1)
   (push.iloc.0 . 1)
   (push.subr.gloc.of |.bitwise-arithmetic-shift| 2 "../stdlib/core/arithmetic.scm" . 232480)
   (push.iloc.0 . 0)
   (push.subr.gloc.of |.bitwise-and| 2 "../stdlib/core/arithmetic.scm" . 232467)
   (push.subr.gloc.of |.zero?| 1 "../stdlib/core/arithmetic.scm" . 232460)
   (ret.subr.gloc.of |.not| "../stdlib/core/arithmetic.scm" . 232455))
 (set.gloc.of |core.arithmetic'bitwise-bit-set?|)
 (close
   (3 0 . |core.arithmetic'bitwise-copy-bit|)
   (push.const . 1)
   (push.iloc.0 . 1)
   (push.subr.gloc.of |.bitwise-arithmetic-shift| 2 "../stdlib/core/arithmetic.scm" . 236564)
   (push.iloc.0 . 2)
   (push.iloc.0 . 1)
   (push.subr.gloc.of |.bitwise-arithmetic-shift| 2 "../stdlib/core/arithmetic.scm" . 237594)
   (push.iloc.0 . 0)
   (apply.gloc.of |core.arithmetic'bitwise-if| "../stdlib/core/arithmetic.scm" . 237577))
 (set.gloc.of |core.arithmetic'bitwise-copy-bit|)
 (close
   (3 0 . |core.arithmetic'bitwise-bit-field|)
   (push.iloc.0 . 0)
   (push.const . -1)
   (push.iloc.0 . 2)
   (push.subr.gloc.of |.bitwise-arithmetic-shift| 2 "../stdlib/core/arithmetic.scm" . 241696)
   (push.subr.gloc.of |.bitwise-not| 1 "../stdlib/core/arithmetic.scm" . 241683)
   (push.subr.gloc.of |.bitwise-and| 2 "../stdlib/core/arithmetic.scm" . 242729)
   (push.iloc.0 . 1)
   (apply.gloc.of
     |core.arithmetic'bitwise-arithmetic-shift-right|
     "../stdlib/core/arithmetic.scm"
     .
     242697))
 (set.gloc.of |core.arithmetic'bitwise-bit-field|)
 (close
   (4 0 . |core.arithmetic'bitwise-copy-bit-field|)
   (push.const . -1)
   (push.iloc.0 . 1)
   (push.subr.gloc.of |.bitwise-arithmetic-shift| 2 "../stdlib/core/arithmetic.scm" . 250901)
   (push.const . -1)
   (push.iloc.0 . 2)
   (push.subr.gloc.of |.bitwise-arithmetic-shift| 2 "../stdlib/core/arithmetic.scm" . 251938)
   (push.subr.gloc.of |.bitwise-not| 1 "../stdlib/core/arithmetic.scm" . 251925)
   (push.subr.gloc.of |.bitwise-and| 2 "../stdlib/core/arithmetic.scm" . 252948)
   (push.iloc.0 . 3)
   (push.iloc.0 . 1)
   (push.subr.gloc.of |.bitwise-arithmetic-shift| 2 "../stdlib/core/arithmetic.scm" . 253978)
   (push.iloc.0 . 0)
   (apply.gloc.of |core.arithmetic'bitwise-if| "../stdlib/core/arithmetic.scm" . 253961))
 (set.gloc.of |core.arithmetic'bitwise-copy-bit-field|)
 (close
   (2 0 . |core.arithmetic'bitwise-arithmetic-shift-right|)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.subr.gloc.of |.-| 1 "../stdlib/core/arithmetic.scm" . 258085)
   (ret.subr.gloc.of |.bitwise-arithmetic-shift| "../stdlib/core/arithmetic.scm" . 258055))
 (set.gloc.of |core.arithmetic'bitwise-arithmetic-shift-right|)
 (close
   (4 0 . |core.arithmetic'bitwise-rotate-bit-field|)
   (push.iloc.0 . 2)
   (push.iloc.0 . 1)
   (push.subr.gloc.of |.-| 2 "../stdlib/core/arithmetic.scm" . 266261)
   (extend . 1)
   (push.iloc.0 . 0)
   (subr.gloc.of |.positive?| 1 "../stdlib/core/arithmetic.scm" . 267277)
   (if.true
     (call
       (push.iloc.1 . 3)
       (push.iloc.0 . 0)
       (apply.gloc.of |.mod| "../stdlib/core/arithmetic.scm" . 268315))
     (push)
     (extend . 1)
     (call
       (push.iloc 2 . 0)
       (push.iloc 2 . 1)
       (push.iloc 2 . 2)
       (apply.gloc.of |core.arithmetic'bitwise-bit-field| "../stdlib/core/arithmetic.scm" . 269340))
     (push)
     (extend . 1)
     (push.iloc 3 . 0)
     (push.iloc 3 . 1)
     (push.iloc 3 . 2)
     (push.iloc.0 . 0)
     (push.iloc.1 . 0)
     (push.subr.gloc.of |.bitwise-arithmetic-shift| 2 "../stdlib/core/arithmetic.scm" . 270364)
     (call
       (push.iloc.0 . 0)
       (push.iloc 2 . 0)
       (push.iloc.1 . 0)
       (push.subr.gloc.of |.-| 2 "../stdlib/core/arithmetic.scm" . 271427)
       (apply.gloc.of
         |core.arithmetic'bitwise-arithmetic-shift-right|
         "../stdlib/core/arithmetic.scm"
         .
         271388))
     (push)
     (push.subr.gloc.of |.bitwise-ior| 2 "../stdlib/core/arithmetic.scm" . 272411)
     (apply.gloc.of
       |core.arithmetic'bitwise-copy-bit-field|
       "../stdlib/core/arithmetic.scm"
       .
       273423))
   (ret.iloc 1 . 0))
 (set.gloc.of |core.arithmetic'bitwise-rotate-bit-field|)
 (close
   (3 0 . |core.arithmetic'bitwise-reverse-bit-field|)
   (push.iloc.0 . 2)
   (push.iloc.0 . 1)
   (push.subr.gloc.of |.-| 2 "../stdlib/core/arithmetic.scm" . 281621)
   (extend . 1)
   (push.iloc.0 . 0)
   (subr.gloc.of |.positive?| 1 "../stdlib/core/arithmetic.scm" . 282637)
   (if.true
     (extend.enclose+
       (3 0 . loop)
       (push.iloc.0 . 2)
       (subr.gloc.of |.zero?| 1 "../stdlib/core/arithmetic.scm" . 284691)
       (if.true
         (push.iloc 3 . 0)
         (push.iloc 3 . 1)
         (push.iloc 3 . 2)
         (push.iloc.0 . 0)
         (apply.gloc.of
           |core.arithmetic'bitwise-copy-bit-field|
           "../stdlib/core/arithmetic.scm"
           .
           285715))
       (push.iloc.0 . 1)
       (push.const . 1)
       (push.subr.gloc.of |.bitwise-and| 2 "../stdlib/core/arithmetic.scm" . 286750)
       (subr.gloc.of |.zero?| 1 "../stdlib/core/arithmetic.scm" . 286743)
       (if.true
         (push.iloc.0 . 0)
         (push.const . 1)
         (push.subr.gloc.of |.bitwise-arithmetic-shift| 2 "../stdlib/core/arithmetic.scm" . 287773)
         (call
           (push.iloc.0 . 1)
           (push.const . 1)
           (apply.gloc.of
             |core.arithmetic'bitwise-arithmetic-shift-right|
             "../stdlib/core/arithmetic.scm"
             .
             288797))
         (push)
         (push.n+.iloc (0 . 2) -1 "../stdlib/core/arithmetic.scm" . 289821)
         (apply.iloc+ (1 . 0) "../stdlib/core/arithmetic.scm" . 287767))
       (push.iloc.0 . 0)
       (push.const . 1)
       (push.subr.gloc.of |.bitwise-arithmetic-shift| 2 "../stdlib/core/arithmetic.scm" . 290858)
       (push.const . 1)
       (push.subr.gloc.of |.bitwise-ior| 2 "../stdlib/core/arithmetic.scm" . 290845)
       (call
         (push.iloc.0 . 1)
         (push.const . 1)
         (apply.gloc.of
           |core.arithmetic'bitwise-arithmetic-shift-right|
           "../stdlib/core/arithmetic.scm"
           .
           291869))
       (push)
       (push.n+.iloc (0 . 2) -1 "../stdlib/core/arithmetic.scm" . 292893)
       (apply.iloc+ (1 . 0) "../stdlib/core/arithmetic.scm" . 290839))
     (push.const . 0)
     (call
       (push.iloc 2 . 0)
       (push.iloc 2 . 1)
       (push.iloc 2 . 2)
       (apply.gloc.of |core.arithmetic'bitwise-bit-field| "../stdlib/core/arithmetic.scm" . 283692))
     (push)
     (push.iloc.1 . 0)
     (apply.iloc+ (0 . 0) "../stdlib/core/arithmetic.scm" . 283661))
   (ret.iloc 1 . 0))
 (set.gloc.of |core.arithmetic'bitwise-reverse-bit-field|)
 (push.const . core.arithmetic)
 (push.const . #f)
 (push.const
   (fixnum? import . |.fixnum?|)
   (fixnum-width import . |.fixnum-width|)
   (least-fixnum import . |.least-fixnum|)
   (greatest-fixnum import . |.greatest-fixnum|)
   (fx=? import . |.fx=?|)
   (fx<? import . |.fx<?|)
   (fx>? import . |.fx>?|)
   (fx<=? import . |.fx<=?|)
   (fx>=? import . |.fx>=?|)
   (fxzero? import . |.fxzero?|)
   (fxpositive? import . |.fxpositive?|)
   (fxnegative? import . |.fxnegative?|)
   (fxodd? import . |.fxodd?|)
   (fxeven? import . |.fxeven?|)
   (fxmax import . |.fxmax|)
   (fxmin import . |.fxmin|)
   (fx+ import . |.fx+|)
   (fx* import . |.fx*|)
   (fx- import . |.fx-|)
   (fxdiv import . |.fxdiv|)
   (fxmod import . |core.arithmetic'fxmod|)
   (fxdiv-and-mod import . |core.arithmetic'fxdiv-and-mod|)
   (fxdiv0 import . |.fxdiv0|)
   (fxmod0 import . |core.arithmetic'fxmod0|)
   (fxdiv0-and-mod0 import . |core.arithmetic'fxdiv0-and-mod0|)
   (fx+/carry import . |core.arithmetic'fx+/carry|)
   (fx-/carry import . |core.arithmetic'fx-/carry|)
   (fx*/carry import . |core.arithmetic'fx*/carry|)
   (fxnot import . |.fxnot|)
   (fxand import . |.fxand|)
   (fxior import . |.fxior|)
   (fxxor import . |.fxxor|)
   (fxif import . |.fxif|)
   (fxbit-count import . |.fxbit-count|)
   (fxlength import . |.fxlength|)
   (fxfirst-bit-set import . |.fxfirst-bit-set|)
   (fxbit-set? import . |.fxbit-set?|)
   (fxcopy-bit import . |.fxcopy-bit|)
   (fxbit-field import . |.fxbit-field|)
   (fxcopy-bit-field import . |.fxcopy-bit-field|)
   (fxarithmetic-shift import . |.fxarithmetic-shift|)
   (fxarithmetic-shift-left import . |.fxarithmetic-shift-left|)
   (fxarithmetic-shift-right import . |.fxarithmetic-shift-right|)
   (fxrotate-bit-field import . |core.arithmetic'fxrotate-bit-field|)
   (fxreverse-bit-field import . |core.arithmetic'fxreverse-bit-field|)
   (flonum? import . |.flonum?|)
   (real->flonum import . |.real->flonum|)
   (fl=? import . |.fl=?|)
   (fl<? import . |.fl<?|)
   (fl>? import . |.fl>?|)
   (fl<=? import . |.fl<=?|)
   (fl>=? import . |.fl>=?|)
   (flinteger? import . |.flinteger?|)
   (flzero? import . |.flzero?|)
   (flpositive? import . |.flpositive?|)
   (flnegative? import . |.flnegative?|)
   (flodd? import . |.flodd?|)
   (fleven? import . |.fleven?|)
   (flfinite? import . |.flfinite?|)
   (flinfinite? import . |.flinfinite?|)
   (flnan? import . |.flnan?|)
   (flmax import . |.flmax|)
   (flmin import . |.flmin|)
   (fl+ import . |.fl+|)
   (fl* import . |.fl*|)
   (fl- import . |.fl-|)
   (fl/ import . |.fl/|)
   (fldiv-and-mod import . |core.arithmetic'fldiv-and-mod|)
   (fldiv import . |.fldiv|)
   (flmod import . |core.arithmetic'flmod|)
   (fldiv0-and-mod0 import . |core.arithmetic'fldiv0-and-mod0|)
   (fldiv0 import . |.fldiv0|)
   (flmod0 import . |core.arithmetic'flmod0|)
   (flnumerator import . |.flnumerator|)
   (fldenominator import . |.fldenominator|)
   (flfloor import . |.flfloor|)
   (flceiling import . |.flceiling|)
   (fltruncate import . |.fltruncate|)
   (flround import . |.flround|)
   (flexp import . |.flexp|)
   (flexpt import . |.flexpt|)
   (fllog import . |.fllog|)
   (flsin import . |.flsin|)
   (flcos import . |.flcos|)
   (fltan import . |.fltan|)
   (flasin import . |.flasin|)
   (flacos import . |.flacos|)
   (flatan import . |.flatan|)
   (flabs import . |.flabs|)
   (flsqrt import . |.flsqrt|)
   (fixnum->flonum import . |.fixnum->flonum|)
   (bitwise-not import . |.bitwise-not|)
   (bitwise-and import . |.bitwise-and|)
   (bitwise-ior import . |.bitwise-ior|)
   (bitwise-xor import . |.bitwise-xor|)
   (bitwise-if import . |core.arithmetic'bitwise-if|)
   (bitwise-bit-count import . |.bitwise-bit-count|)
   (bitwise-length import . |.bitwise-length|)
   (bitwise-first-bit-set import . |.bitwise-first-bit-set|)
   (bitwise-bit-set? import . |core.arithmetic'bitwise-bit-set?|)
   (bitwise-copy-bit import . |core.arithmetic'bitwise-copy-bit|)
   (bitwise-bit-field import . |core.arithmetic'bitwise-bit-field|)
   (bitwise-copy-bit-field import . |core.arithmetic'bitwise-copy-bit-field|)
   (bitwise-arithmetic-shift import . |.bitwise-arithmetic-shift|)
   (bitwise-arithmetic-shift-left import . |core.arithmetic'bitwise-arithmetic-shift-left|)
   (bitwise-arithmetic-shift-right import . |core.arithmetic'bitwise-arithmetic-shift-right|)
   (bitwise-rotate-bit-field import . |core.arithmetic'bitwise-rotate-bit-field|)
   (bitwise-reverse-bit-field import . |core.arithmetic'bitwise-reverse-bit-field|)
   (&no-infinities import . |.&no-infinities|)
   (make-no-infinities-violation import . |.make-no-infinities-violation|)
   (no-infinities-violation? import . |.no-infinities-violation?|)
   (&no-nans import . |.&no-nans|)
   (make-no-nans-violation import . |.make-no-nans-violation|)
   (no-nans-violation? import . |.no-nans-violation?|))
 (apply.gloc.of |.intern-scheme-library| "../stdlib/core/arithmetic.scm" . 6145))

((call
   (push.const core primitives)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/sorting.scm" . 6145))
 (close
   (2 0 . |core.sorting'list-sort|)
   (extend.unbound . 3)
   (push.close+
     (2 0 . merge)
     (iloc.0 . 0)
     (if.null? (ret.iloc 0 . 1))
     (iloc.0 . 1)
     (if.null? (ret.iloc 0 . 0))
     (call
       (push.car.iloc (0 . 1) "../stdlib/core/sorting.scm" . 23575)
       (push.car.iloc (0 . 0) "../stdlib/core/sorting.scm" . 23586)
       (apply.iloc (2 . 0) "../stdlib/core/sorting.scm" . 23569))
     (if.true
       (push.car.iloc (0 . 1) "../stdlib/core/sorting.scm" . 24599)
       (call
         (push.iloc.0 . 0)
         (push.cdr.iloc (0 . 1) "../stdlib/core/sorting.scm" . 24622)
         (apply.iloc+ (1 . 0) "../stdlib/core/sorting.scm" . 24610))
       (ret.cons "../stdlib/core/sorting.scm" . 24593))
     (push.car.iloc (0 . 0) "../stdlib/core/sorting.scm" . 25623)
     (call
       (push.cdr.iloc (0 . 0) "../stdlib/core/sorting.scm" . 25641)
       (push.iloc.0 . 1)
       (apply.iloc+ (1 . 0) "../stdlib/core/sorting.scm" . 25634))
     (ret.cons "../stdlib/core/sorting.scm" . 25617))
   (push.close+
     (2 0 . sort)
     (=n.iloc (0 . 1) 1 "../stdlib/core/sorting.scm" . 29714)
     (if.true
       (push.car.iloc (0 . 0) "../stdlib/core/sorting.scm" . 30744)
       (ret.subr.gloc.of |.list| "../stdlib/core/sorting.scm" . 30738))
     (=n.iloc (0 . 1) 2 "../stdlib/core/sorting.scm" . 31762)
     (if.true
       (call
         (push.cadr.iloc (0 . 0) "../stdlib/core/sorting.scm" . 32796)
         (push.car.iloc (0 . 0) "../stdlib/core/sorting.scm" . 32807)
         (apply.iloc (2 . 0) "../stdlib/core/sorting.scm" . 32790))
       (if.true
         (push.cadr.iloc (0 . 0) "../stdlib/core/sorting.scm" . 33820)
         (push.car.iloc (0 . 0) "../stdlib/core/sorting.scm" . 33831)
         (ret.subr.gloc.of |.list| "../stdlib/core/sorting.scm" . 33814))
       (push.car.iloc (0 . 0) "../stdlib/core/sorting.scm" . 34844)
       (push.cadr.iloc (0 . 0) "../stdlib/core/sorting.scm" . 34854)
       (ret.subr.gloc.of |.list| "../stdlib/core/sorting.scm" . 34838))
     (push.iloc.0 . 1)
     (push.const . 2)
     (push.subr.gloc.of |.div| 2 "../stdlib/core/sorting.scm" . 36893)
     (extend . 1)
     (call
       (push.iloc.1 . 0)
       (push.iloc.0 . 0)
       (apply.iloc+ (2 . 1) "../stdlib/core/sorting.scm" . 37915))
     (push)
     (call
       (push.iloc.1 . 0)
       (push.iloc.0 . 0)
       (push.subr.gloc.of |.list-tail| 2 "../stdlib/core/sorting.scm" . 38945)
       (push.iloc.1 . 1)
       (push.iloc.0 . 0)
       (push.subr.gloc.of |.-| 2 "../stdlib/core/sorting.scm" . 38965)
       (apply.iloc+ (2 . 1) "../stdlib/core/sorting.scm" . 38939))
     (push)
     (apply.iloc+ (2 . 0) "../stdlib/core/sorting.scm" . 37908))
   (push.close+
     (1 0 . divide)
     (extend.enclose+
       (2 0 . loop)
       (cdr.iloc (0 . 1) "../stdlib/core/sorting.scm" . 44059)
       (if.null?
         (push.iloc.0 . 0)
         (push.const)
         (ret.subr.gloc.of |.values| "../stdlib/core/sorting.scm" . 44070))
       (call
         (push.car.iloc (0 . 1) "../stdlib/core/sorting.scm" . 46110)
         (push.cadr.iloc (0 . 1) "../stdlib/core/sorting.scm" . 46120)
         (apply.iloc (4 . 0) "../stdlib/core/sorting.scm" . 46104))
       (if.true
         (push.n+.iloc (0 . 0) 1 "../stdlib/core/sorting.scm" . 47134)
         (push.cdr.iloc (0 . 1) "../stdlib/core/sorting.scm" . 47144)
         (apply.iloc+ (1 . 0) "../stdlib/core/sorting.scm" . 47128))
       (push.iloc.0 . 0)
       (push.cdr.iloc (0 . 1) "../stdlib/core/sorting.scm" . 48164)
       (ret.subr.gloc.of |.values| "../stdlib/core/sorting.scm" . 48152))
     (push.const . 1)
     (push.iloc.1 . 0)
     (apply.iloc+ (0 . 0) "../stdlib/core/sorting.scm" . 43019))
   (enclose . 3)
   (iloc.1 . 1)
   (if.null?.ret.const)
   (push.close (0 0) (push.iloc 2 . 1) (apply.iloc+ (1 . 2) "../stdlib/core/sorting.scm" . 52261))
   (push.close
     (2 0)
     (iloc.0 . 1)
     (if.null? (ret.iloc 2 . 1))
     (push.iloc 2 . 1)
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.list-head| 2 "../stdlib/core/sorting.scm" . 55326)
     (call
       (push.iloc.0 . 1)
       (push.iloc.0 . 1)
       (push.subr.gloc.of |.length| 1 "../stdlib/core/sorting.scm" . 56361)
       (apply.iloc+ (1 . 1) "../stdlib/core/sorting.scm" . 56350))
     (push)
     (apply.iloc+ (1 . 0) "../stdlib/core/sorting.scm" . 55319))
   (apply.gloc.of |.call-with-values| "../stdlib/core/sorting.scm" . 17415))
 (set.gloc.of |core.sorting'list-sort|)
 (close
   (2 0 . |core.sorting'vector-sort|)
   (push.iloc.0 . 1)
   (push.subr.gloc.of |.vector->list| 1 "../stdlib/core/sorting.scm" . 60434)
   (extend . 1)
   (call
     (push.iloc.1 . 0)
     (push.iloc.0 . 0)
     (apply.gloc.of |core.sorting'list-sort| "../stdlib/core/sorting.scm" . 61461))
   (push)
   (extend . 1)
   (push.iloc.1 . 0)
   (iloc.0 . 0)
   (if.eq? (ret.iloc 2 . 1))
   (push.iloc.0 . 0)
   (apply.gloc.of |.list->vector| "../stdlib/core/sorting.scm" . 64530))
 (set.gloc.of |core.sorting'vector-sort|)
 (close
   (2 0 . |core.sorting'vector-sort!|)
   (push.iloc.0 . 1)
   (push.subr.gloc.of |.vector->list| 1 "../stdlib/core/sorting.scm" . 68626)
   (extend . 1)
   (call
     (push.iloc.1 . 0)
     (push.iloc.0 . 0)
     (apply.gloc.of |core.sorting'list-sort| "../stdlib/core/sorting.scm" . 69653))
   (push)
   (extend . 1)
   (push.iloc.1 . 0)
   (iloc.0 . 0)
   (if.eq? (ret.iloc 2 . 1))
   (extend.enclose+
     (2 0 . loop)
     (iloc.0 . 1)
     (if.null? (ret.const.unspec))
     (push.iloc 4 . 1)
     (push.iloc.0 . 0)
     (push.car.iloc (0 . 1) "../stdlib/core/sorting.scm" . 75823)
     (subr.gloc.of |.vector-set!| 3 "../stdlib/core/sorting.scm" . 75803)
     (push.n+.iloc (0 . 0) 1 "../stdlib/core/sorting.scm" . 76833)
     (push.cdr.iloc (0 . 1) "../stdlib/core/sorting.scm" . 76841)
     (apply.iloc+ (1 . 0) "../stdlib/core/sorting.scm" . 76827))
   (push.const . 0)
   (push.iloc.1 . 0)
   (apply.iloc+ (0 . 0) "../stdlib/core/sorting.scm" . 72722))
 (set.gloc.of |core.sorting'vector-sort!|)
 (push.const . core.sorting)
 (push.const . #f)
 (push.const
   (list-sort import . |core.sorting'list-sort|)
   (vector-sort import . |core.sorting'vector-sort|)
   (vector-sort! import . |core.sorting'vector-sort!|))
 (apply.gloc.of |.intern-scheme-library| "../stdlib/core/sorting.scm" . 6145))

((call
   (push.const core arithmetic)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/bytevectors.scm" . 6145))
 (call
   (push.const core primitives)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/bytevectors.scm" . 6145))
 (close
   (4 0 . |core.bytevectors'bytevector-uint-ref|)
   (push.iloc.0 . 2)
   (const . big)
   (if.eq?
     (push.iloc.0 . 1)
     (push.iloc.0 . 3)
     (push.subr.gloc.of |.+| 2 "../stdlib/core/bytevectors.scm" . 47129)
     (extend . 1)
     (extend.enclose+
       (2 0 . loop)
       (iloc.0 . 0)
       (>=.iloc (2 . 0) "../stdlib/core/bytevectors.scm" . 49174)
       (if.true (ret.iloc 0 . 1))
       (push.n+.iloc (0 . 0) 1 "../stdlib/core/bytevectors.scm" . 51228)
       (push.const . 256)
       (push.iloc.0 . 1)
       (push.subr.gloc.of |.*| 2 "../stdlib/core/bytevectors.scm" . 51239)
       (push.iloc 3 . 0)
       (push.iloc.0 . 0)
       (push.subr.gloc.of |.bytevector-u8-ref| 2 "../stdlib/core/bytevectors.scm" . 51251)
       (push.subr.gloc.of |.+| 2 "../stdlib/core/bytevectors.scm" . 51236)
       (apply.iloc+ (1 . 0) "../stdlib/core/bytevectors.scm" . 51222))
     (push.iloc 2 . 1)
     (push.const . 0)
     (apply.iloc+ (0 . 0) "../stdlib/core/bytevectors.scm" . 48144))
   (push.iloc.0 . 2)
   (const . little)
   (if.eq?
     (extend.enclose+
       (2 0 . loop)
       (iloc.0 . 0)
       (<.iloc (2 . 1) "../stdlib/core/bytevectors.scm" . 54292)
       (if.true (ret.iloc 0 . 1))
       (push.n+.iloc (0 . 0) -1 "../stdlib/core/bytevectors.scm" . 56346)
       (push.const . 256)
       (push.iloc.0 . 1)
       (push.subr.gloc.of |.*| 2 "../stdlib/core/bytevectors.scm" . 56357)
       (push.iloc 2 . 0)
       (push.iloc.0 . 0)
       (push.subr.gloc.of |.bytevector-u8-ref| 2 "../stdlib/core/bytevectors.scm" . 56369)
       (push.subr.gloc.of |.+| 2 "../stdlib/core/bytevectors.scm" . 56354)
       (apply.iloc+ (1 . 0) "../stdlib/core/bytevectors.scm" . 56340))
     (push.iloc.1 . 1)
     (push.iloc.1 . 3)
     (push.const . -1)
     (push.subr.gloc.of |.+| 3 "../stdlib/core/bytevectors.scm" . 53276)
     (push.const . 0)
     (apply.iloc+ (0 . 0) "../stdlib/core/bytevectors.scm" . 53262))
   (push.const . bytevector-uint-ref)
   (push.const . "expected endianness, but got ~r, as argument 3")
   (push.iloc.0 . 2)
   (push.subr.gloc.of |.format| 2 "../stdlib/core/bytevectors.scm" . 59427)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.iloc.0 . 2)
   (push.iloc.0 . 3)
   (push.subr.gloc.of |.list| 4 "../stdlib/core/bytevectors.scm" . 60451)
   (apply.gloc.of |.assertion-violation| "../stdlib/core/bytevectors.scm" . 58382))
 (set.gloc.of |core.bytevectors'bytevector-uint-ref|)
 (close
   (4 0 . |core.bytevectors'bytevector-sint-ref|)
   (push.iloc.0 . 2)
   (const . big)
   (if.eq?
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.subr.gloc.of |.bytevector-u8-ref| 2 "../stdlib/core/bytevectors.scm" . 65557)
     (push.const . 127)
     (subr.gloc.of |.>| 2 "../stdlib/core/bytevectors.scm" . 65554)
     (if.true
       (call
         (push.iloc.0 . 0)
         (push.iloc.0 . 1)
         (push.iloc.0 . 2)
         (push.iloc.0 . 3)
         (apply.gloc.of
           |core.bytevectors'bytevector-uint-ref|
           "../stdlib/core/bytevectors.scm"
           .
           66581))
       (push)
       (push.const . 256)
       (push.iloc.0 . 3)
       (push.subr.gloc.of |.expt| 2 "../stdlib/core/bytevectors.scm" . 66624)
       (ret.subr.gloc.of |.-| "../stdlib/core/bytevectors.scm" . 66578))
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.iloc.0 . 2)
     (push.iloc.0 . 3)
     (apply.gloc.of
       |core.bytevectors'bytevector-uint-ref|
       "../stdlib/core/bytevectors.scm"
       .
       67602))
   (push.iloc.0 . 2)
   (const . little)
   (if.eq?
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.iloc.0 . 3)
     (push.const . -1)
     (push.subr.gloc.of |.+| 3 "../stdlib/core/bytevectors.scm" . 69675)
     (push.subr.gloc.of |.bytevector-u8-ref| 2 "../stdlib/core/bytevectors.scm" . 69653)
     (push.const . 127)
     (subr.gloc.of |.>| 2 "../stdlib/core/bytevectors.scm" . 69650)
     (if.true
       (call
         (push.iloc.0 . 0)
         (push.iloc.0 . 1)
         (push.iloc.0 . 2)
         (push.iloc.0 . 3)
         (apply.gloc.of
           |core.bytevectors'bytevector-uint-ref|
           "../stdlib/core/bytevectors.scm"
           .
           70677))
       (push)
       (push.const . 256)
       (push.iloc.0 . 3)
       (push.subr.gloc.of |.expt| 2 "../stdlib/core/bytevectors.scm" . 70720)
       (ret.subr.gloc.of |.-| "../stdlib/core/bytevectors.scm" . 70674))
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.iloc.0 . 2)
     (push.iloc.0 . 3)
     (apply.gloc.of
       |core.bytevectors'bytevector-uint-ref|
       "../stdlib/core/bytevectors.scm"
       .
       71698))
   (push.const . bytevector-uint-ref)
   (push.const . "expected endianness, but got ~r, as argument 3")
   (push.iloc.0 . 2)
   (push.subr.gloc.of |.format| 2 "../stdlib/core/bytevectors.scm" . 74787)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.iloc.0 . 2)
   (push.iloc.0 . 3)
   (push.subr.gloc.of |.list| 4 "../stdlib/core/bytevectors.scm" . 75811)
   (apply.gloc.of |.assertion-violation| "../stdlib/core/bytevectors.scm" . 73742))
 (set.gloc.of |core.bytevectors'bytevector-sint-ref|)
 (close
   (5 0 . |core.bytevectors'bytevector-uint-set!|)
   (call
     (=n.iloc (0 . 2) 0 "../stdlib/core/bytevectors.scm" . 79886)
     (if.true
       (push.iloc.0 . 1)
       (push.iloc.0 . 4)
       (push.subr.gloc.of |.+| 2 "../stdlib/core/bytevectors.scm" . 80921)
       (extend . 1)
       (extend.enclose+
         (1 0 . loop)
         (iloc.0 . 0)
         (>=.iloc (2 . 0) "../stdlib/core/bytevectors.scm" . 82969)
         (if.true (ret.const.unspec))
         (push.iloc 3 . 0)
         (push.iloc.0 . 0)
         (push.const . 0)
         (subr.gloc.of |.bytevector-u8-set!| 3 "../stdlib/core/bytevectors.scm" . 85017)
         (push.n+.iloc (0 . 0) 1 "../stdlib/core/bytevectors.scm" . 86047)
         (apply.iloc+ (1 . 0) "../stdlib/core/bytevectors.scm" . 86041))
       (push.iloc 2 . 1)
       (apply.iloc+ (0 . 0) "../stdlib/core/bytevectors.scm" . 81936))
     (push.const . 0)
     (push.iloc.0 . 2)
     (push.const . 256)
     (push.iloc.0 . 4)
     (push.subr.gloc.of |.expt| 2 "../stdlib/core/bytevectors.scm" . 87063)
     (subr.gloc.of |.<| 3 "../stdlib/core/bytevectors.scm" . 87054)
     (if.true
       (push.iloc.0 . 3)
       (const . big)
       (if.eq?
         (extend.enclose+
           (2 0 . loop)
           (iloc.0 . 0)
           (<.iloc (2 . 1) "../stdlib/core/bytevectors.scm" . 91168)
           (if.true (ret.const.unspec))
           (push.iloc 2 . 0)
           (push.iloc.0 . 0)
           (push.iloc.0 . 1)
           (push.const . 255)
           (push.subr.gloc.of |.bitwise-and| 2 "../stdlib/core/bytevectors.scm" . 93216)
           (subr.gloc.of |.bytevector-u8-set!| 3 "../stdlib/core/bytevectors.scm" . 93216)
           (push.n+.iloc (0 . 0) -1 "../stdlib/core/bytevectors.scm" . 94246)
           (push.iloc.0 . 1)
           (push.const . -8)
           (push.subr.gloc.of
             |.bitwise-arithmetic-shift|
             2
             "../stdlib/core/bytevectors.scm"
             .
             94240)
           (apply.iloc+ (1 . 0) "../stdlib/core/bytevectors.scm" . 94240))
         (push.iloc.1 . 1)
         (push.iloc.1 . 4)
         (push.subr.gloc.of |.+| 2 "../stdlib/core/bytevectors.scm" . 89125)
         (push.const . 1)
         (push.subr.gloc.of |.-| 2 "../stdlib/core/bytevectors.scm" . 89122)
         (push.iloc.1 . 2)
         (apply.iloc+ (0 . 0) "../stdlib/core/bytevectors.scm" . 90135))
       (push.iloc.0 . 3)
       (const . little)
       (if.eq?
         (push.iloc.0 . 1)
         (push.iloc.0 . 4)
         (push.subr.gloc.of |.+| 2 "../stdlib/core/bytevectors.scm" . 96288)
         (extend . 1)
         (extend.enclose+
           (2 0 . loop)
           (iloc.0 . 0)
           (>=.iloc (2 . 0) "../stdlib/core/bytevectors.scm" . 98336)
           (if.true (ret.const.unspec))
           (push.iloc 3 . 0)
           (push.iloc.0 . 0)
           (push.iloc.0 . 1)
           (push.const . 255)
           (push.subr.gloc.of |.bitwise-and| 2 "../stdlib/core/bytevectors.scm" . 100384)
           (subr.gloc.of |.bytevector-u8-set!| 3 "../stdlib/core/bytevectors.scm" . 100384)
           (push.n+.iloc (0 . 0) 1 "../stdlib/core/bytevectors.scm" . 101414)
           (push.iloc.0 . 1)
           (push.const . -8)
           (push.subr.gloc.of
             |.bitwise-arithmetic-shift|
             2
             "../stdlib/core/bytevectors.scm"
             .
             101408)
           (apply.iloc+ (1 . 0) "../stdlib/core/bytevectors.scm" . 101408))
         (push.iloc 2 . 1)
         (push.iloc 2 . 2)
         (apply.iloc+ (0 . 0) "../stdlib/core/bytevectors.scm" . 97303))
       (ret.const.unspec))
     (push.const . bytevector-uint-set!)
     (push.const . "value out of range, ~s as argument 3")
     (push.iloc.0 . 2)
     (push.subr.gloc.of |.format| 2 "../stdlib/core/bytevectors.scm" . 104483)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.iloc.0 . 2)
     (push.iloc.0 . 3)
     (push.iloc.0 . 4)
     (push.subr.gloc.of |.list| 5 "../stdlib/core/bytevectors.scm" . 105507)
     (apply.gloc.of |.assertion-violation| "../stdlib/core/bytevectors.scm" . 103438))
   (ret.const.unspec))
 (set.gloc.of |core.bytevectors'bytevector-uint-set!|)
 (close
   (5 0 . |core.bytevectors'bytevector-sint-set!|)
   (call
     (push.const . 2)
     (push.iloc.0 . 4)
     (push.const . 8)
     (push.subr.gloc.of |.*| 2 "../stdlib/core/bytevectors.scm" . 110626)
     (push.const . 1)
     (push.subr.gloc.of |.-| 2 "../stdlib/core/bytevectors.scm" . 110623)
     (push.subr.gloc.of |.expt| 2 "../stdlib/core/bytevectors.scm" . 110615)
     (extend . 1)
     (push.n+.iloc (0 . 0) 1 "../stdlib/core/bytevectors.scm" . 111642)
     (push.subr.gloc.of |.-| 1 "../stdlib/core/bytevectors.scm" . 111639)
     (push.iloc.1 . 2)
     (push.iloc.0 . 0)
     (subr.gloc.of |.<| 3 "../stdlib/core/bytevectors.scm" . 112653)
     (if.true
       (>n.iloc (1 . 2) 0 "../stdlib/core/bytevectors.scm" . 113681)
       (if.true
         (push.iloc.1 . 0)
         (push.iloc.1 . 1)
         (push.iloc.1 . 2)
         (push.iloc.1 . 3)
         (push.iloc.1 . 4)
         (apply.gloc.of
           |core.bytevectors'bytevector-uint-set!|
           "../stdlib/core/bytevectors.scm"
           .
           114705))
       (push.iloc.1 . 0)
       (push.iloc.1 . 1)
       (push.iloc.1 . 2)
       (push.const . 256)
       (push.iloc.1 . 4)
       (push.subr.gloc.of |.expt| 2 "../stdlib/core/bytevectors.scm" . 115767)
       (push.subr.gloc.of |.+| 2 "../stdlib/core/bytevectors.scm" . 115760)
       (push.iloc.1 . 3)
       (push.iloc.1 . 4)
       (apply.gloc.of
         |core.bytevectors'bytevector-uint-set!|
         "../stdlib/core/bytevectors.scm"
         .
         115729))
     (push.const . bytevector-sint-set!)
     (push.const . "value out of range, ~s as argument 3")
     (push.iloc.1 . 2)
     (push.subr.gloc.of |.format| 2 "../stdlib/core/bytevectors.scm" . 117794)
     (push.iloc.1 . 0)
     (push.iloc.1 . 1)
     (push.iloc.1 . 2)
     (push.iloc.1 . 3)
     (push.iloc.1 . 4)
     (push.subr.gloc.of |.list| 5 "../stdlib/core/bytevectors.scm" . 118818)
     (apply.gloc.of |.assertion-violation| "../stdlib/core/bytevectors.scm" . 116749))
   (ret.const.unspec))
 (set.gloc.of |core.bytevectors'bytevector-sint-set!|)
 (close
   (3 0 . |core.bytevectors'bytevector->uint-list|)
   (extend.enclose+
     (2 0 . loop)
     (>n.iloc (0 . 0) -1 "../stdlib/core/bytevectors.scm" . 124941)
     (if.true
       (push.iloc.0 . 0)
       (push.iloc 2 . 2)
       (push.subr.gloc.of |.-| 2 "../stdlib/core/bytevectors.scm" . 125971)
       (call
         (push.iloc 2 . 0)
         (push.iloc.0 . 0)
         (push.iloc 2 . 1)
         (push.iloc 2 . 2)
         (apply.gloc.of
           |core.bytevectors'bytevector-uint-ref|
           "../stdlib/core/bytevectors.scm"
           .
           125988))
       (push)
       (iloc.0 . 1)
       (push.cons)
       (apply.iloc+ (1 . 0) "../stdlib/core/bytevectors.scm" . 125965))
     (push.iloc 2 . 2)
     (subr.gloc.of |.-| 1 "../stdlib/core/bytevectors.scm" . 126998)
     (=.iloc (0 . 0) "../stdlib/core/bytevectors.scm" . 126993)
     (if.true (ret.iloc 0 . 1))
     (push.const . bytevector->uint-list)
     (push.const . "expected appropriate element size as argument 3, but got ~r")
     (push.iloc 2 . 2)
     (push.subr.gloc.of |.format| 2 "../stdlib/core/bytevectors.scm" . 130086)
     (push.iloc 2 . 0)
     (push.iloc 2 . 1)
     (push.iloc 2 . 2)
     (push.subr.gloc.of |.list| 3 "../stdlib/core/bytevectors.scm" . 131110)
     (apply.gloc.of |.assertion-violation| "../stdlib/core/bytevectors.scm" . 129041))
   (push.iloc.1 . 0)
   (push.subr.gloc.of |.bytevector-length| 1 "../stdlib/core/bytevectors.scm" . 123928)
   (push.iloc.1 . 2)
   (push.subr.gloc.of |.-| 2 "../stdlib/core/bytevectors.scm" . 123925)
   (push.const)
   (apply.iloc+ (0 . 0) "../stdlib/core/bytevectors.scm" . 123911))
 (set.gloc.of |core.bytevectors'bytevector->uint-list|)
 (close
   (3 0 . |core.bytevectors'bytevector->sint-list|)
   (extend.enclose+
     (2 0 . loop)
     (>n.iloc (0 . 0) -1 "../stdlib/core/bytevectors.scm" . 136205)
     (if.true
       (push.iloc.0 . 0)
       (push.iloc 2 . 2)
       (push.subr.gloc.of |.-| 2 "../stdlib/core/bytevectors.scm" . 137235)
       (call
         (push.iloc 2 . 0)
         (push.iloc.0 . 0)
         (push.iloc 2 . 1)
         (push.iloc 2 . 2)
         (apply.gloc.of
           |core.bytevectors'bytevector-sint-ref|
           "../stdlib/core/bytevectors.scm"
           .
           137252))
       (push)
       (iloc.0 . 1)
       (push.cons)
       (apply.iloc+ (1 . 0) "../stdlib/core/bytevectors.scm" . 137229))
     (push.iloc 2 . 2)
     (subr.gloc.of |.-| 1 "../stdlib/core/bytevectors.scm" . 138262)
     (=.iloc (0 . 0) "../stdlib/core/bytevectors.scm" . 138257)
     (if.true (ret.iloc 0 . 1))
     (push.const . bytevector->sint-list)
     (push.const . "expected appropriate element size as argument 3, but got ~r")
     (push.iloc 2 . 2)
     (push.subr.gloc.of |.format| 2 "../stdlib/core/bytevectors.scm" . 141350)
     (push.iloc 2 . 0)
     (push.iloc 2 . 1)
     (push.iloc 2 . 2)
     (push.subr.gloc.of |.list| 3 "../stdlib/core/bytevectors.scm" . 142374)
     (apply.gloc.of |.assertion-violation| "../stdlib/core/bytevectors.scm" . 140305))
   (push.iloc.1 . 0)
   (push.subr.gloc.of |.bytevector-length| 1 "../stdlib/core/bytevectors.scm" . 135192)
   (push.iloc.1 . 2)
   (push.subr.gloc.of |.-| 2 "../stdlib/core/bytevectors.scm" . 135189)
   (push.const)
   (apply.iloc+ (0 . 0) "../stdlib/core/bytevectors.scm" . 135175))
 (set.gloc.of |core.bytevectors'bytevector->sint-list|)
 (close
   (3 0 . |core.bytevectors'uint-list->bytevector|)
   (push.iloc.0 . 2)
   (push.iloc.0 . 0)
   (push.subr.gloc.of |.length| 1 "../stdlib/core/bytevectors.scm" . 146474)
   (push.subr.gloc.of |.*| 2 "../stdlib/core/bytevectors.scm" . 146466)
   (push.subr.gloc.of |.make-bytevector| 1 "../stdlib/core/bytevectors.scm" . 146449)
   (extend . 1)
   (extend.enclose+
     (2 0 . loop)
     (iloc.0 . 1)
     (if.null? (ret.iloc 2 . 0))
     (call
       (push.iloc 2 . 0)
       (push.iloc.0 . 0)
       (push.car.iloc (0 . 1) "../stdlib/core/bytevectors.scm" . 150573)
       (push.iloc 3 . 1)
       (push.iloc 3 . 2)
       (apply.gloc.of
         |core.bytevectors'bytevector-uint-set!|
         "../stdlib/core/bytevectors.scm"
         .
         150546))
     (push.iloc.0 . 0)
     (push.iloc 3 . 2)
     (push.subr.gloc.of |.+| 2 "../stdlib/core/bytevectors.scm" . 151576)
     (push.cdr.iloc (0 . 1) "../stdlib/core/bytevectors.scm" . 151587)
     (apply.iloc+ (1 . 0) "../stdlib/core/bytevectors.scm" . 151570))
   (push.const . 0)
   (push.iloc 2 . 0)
   (apply.iloc+ (0 . 0) "../stdlib/core/bytevectors.scm" . 147465))
 (set.gloc.of |core.bytevectors'uint-list->bytevector|)
 (close
   (3 0 . |core.bytevectors'sint-list->bytevector|)
   (push.iloc.0 . 2)
   (push.iloc.0 . 0)
   (push.subr.gloc.of |.length| 1 "../stdlib/core/bytevectors.scm" . 155690)
   (push.subr.gloc.of |.*| 2 "../stdlib/core/bytevectors.scm" . 155682)
   (push.subr.gloc.of |.make-bytevector| 1 "../stdlib/core/bytevectors.scm" . 155665)
   (extend . 1)
   (extend.enclose+
     (2 0 . loop)
     (iloc.0 . 1)
     (if.null? (ret.iloc 2 . 0))
     (call
       (push.iloc 2 . 0)
       (push.iloc.0 . 0)
       (push.car.iloc (0 . 1) "../stdlib/core/bytevectors.scm" . 159789)
       (push.iloc 3 . 1)
       (push.iloc 3 . 2)
       (apply.gloc.of
         |core.bytevectors'bytevector-sint-set!|
         "../stdlib/core/bytevectors.scm"
         .
         159762))
     (push.iloc.0 . 0)
     (push.iloc 3 . 2)
     (push.subr.gloc.of |.+| 2 "../stdlib/core/bytevectors.scm" . 160792)
     (push.cdr.iloc (0 . 1) "../stdlib/core/bytevectors.scm" . 160803)
     (apply.iloc+ (1 . 0) "../stdlib/core/bytevectors.scm" . 160786))
   (push.const . 0)
   (push.iloc 2 . 0)
   (apply.iloc+ (0 . 0) "../stdlib/core/bytevectors.scm" . 156681))
 (set.gloc.of |core.bytevectors'sint-list->bytevector|)
 (call
   (push.const
     (lambda import . |.lambda|)
     (+ import . |.+|)
     (set! import . |.set!|)
     (bytevector-uint-set! import . |core.bytevectors'bytevector-uint-set!|)
     (bytevector-uint-ref import . |core.bytevectors'bytevector-uint-ref|)
     (list import . |.list|)
     (begin import . |.begin|)
     (< import . |.<|)
     (quote import . |.quote|)
     (> import . |.>|)
     (letrec* import . |.letrec*|)
     (= import . |.=|)
     (format import . |.format|)
     (cons import . |.cons|)
     (define import . |.define|)
     (if import . |.if|)
     (assertion-violation import . |.assertion-violation|)
     (- import . |.-|)
     (syntax-rules import . |.syntax-rules|)
     (make-bytevector import . |.make-bytevector|)
     (bytevector-sint-set! import . |core.bytevectors'bytevector-sint-set!|)
     (define-syntax import . |.define-syntax|)
     (>= import . |.>=|)
     (mod256 import . |core.bytevectors'mod256|)
     (bytevector->uint-list import . |core.bytevectors'bytevector->uint-list|)
     (eq? import . |.eq?|)
     (or import . |.or|)
     (div256 import . |core.bytevectors'div256|)
     (native-endianness import . |.native-endianness|)
     (endianness import . |core.bytevectors'endianness|)
     (expt import . |.expt|)
     (bytevector-length import . |.bytevector-length|)
     (else import . |.else|)
     (uint-list->bytevector import . |core.bytevectors'uint-list->bytevector|)
     (let* import . |.let*|)
     (cdr import . |.cdr|)
     (null? import . |.null?|)
     (* import . |.*|)
     (bitwise-arithmetic-shift import . |.bitwise-arithmetic-shift|)
     (bytevector-u8-set! import . |.bytevector-u8-set!|)
     (length import . |.length|)
     (and import . |.and|)
     (bytevector->sint-list import . |core.bytevectors'bytevector->sint-list|)
     (unspecified import . |.unspecified|)
     (sint-list->bytevector import . |core.bytevectors'sint-list->bytevector|)
     (bytevector-sint-ref import . |core.bytevectors'bytevector-sint-ref|)
     (bytevector-u8-ref import . |.bytevector-u8-ref|)
     (_ import . |._|)
     (let import . |.let|)
     (bitwise-and import . |.bitwise-and|)
     (car import . |.car|)
     (cond import . |.cond|))
   (extend . 1)
   (call
     (push.const . syntax)
     (push.const . |core.bytevectors'div256|)
     (push.const
       ()
       ("../stdlib/core/bytevectors.scm" . 30725)
       ((_ x) (bitwise-arithmetic-shift x -8) ((x . 0)) (bitwise-arithmetic-shift)))
     (push.iloc.0 . 0)
     (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/bytevectors.scm" . 6145))
   (call
     (push.const . syntax)
     (push.const . |core.bytevectors'mod256|)
     (push.const
       ()
       ("../stdlib/core/bytevectors.scm" . 34821)
       ((_ x) (bitwise-and x 255) ((x . 0)) (bitwise-and)))
     (push.iloc.0 . 0)
     (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/bytevectors.scm" . 6145))
   (push.const . syntax)
   (push.const . |core.bytevectors'endianness|)
   (push.const
     (big little native)
     ("../stdlib/core/bytevectors.scm" . 38917)
     ((_ big) 'big () (big quote))
     ((_ little) 'little () (little quote))
     ((_ native) (native-endianness) () (native-endianness)))
   (push.iloc.0 . 0)
   (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/bytevectors.scm" . 6145))
 (push.const . core.bytevectors)
 (push.const . #f)
 (push.const
   (endianness import . |core.bytevectors'endianness|)
   (native-endianness import . |.native-endianness|)
   (bytevector? import . |.bytevector?|)
   (make-bytevector import . |.make-bytevector|)
   (bytevector-length import . |.bytevector-length|)
   (bytevector=? import . |.bytevector=?|)
   (bytevector-fill! import . |.bytevector-fill!|)
   (bytevector-copy! import . |.bytevector-copy!|)
   (bytevector-copy import . |.bytevector-copy|)
   (bytevector-u8-ref import . |.bytevector-u8-ref|)
   (bytevector-s8-ref import . |.bytevector-s8-ref|)
   (bytevector-u8-set! import . |.bytevector-u8-set!|)
   (bytevector-s8-set! import . |.bytevector-s8-set!|)
   (bytevector->u8-list import . |.bytevector->u8-list|)
   (u8-list->bytevector import . |.u8-list->bytevector|)
   (bytevector-uint-ref import . |core.bytevectors'bytevector-uint-ref|)
   (bytevector-sint-ref import . |core.bytevectors'bytevector-sint-ref|)
   (bytevector-uint-set! import . |core.bytevectors'bytevector-uint-set!|)
   (bytevector-sint-set! import . |core.bytevectors'bytevector-sint-set!|)
   (bytevector->uint-list import . |core.bytevectors'bytevector->uint-list|)
   (bytevector->sint-list import . |core.bytevectors'bytevector->sint-list|)
   (uint-list->bytevector import . |core.bytevectors'uint-list->bytevector|)
   (sint-list->bytevector import . |core.bytevectors'sint-list->bytevector|)
   (bytevector-u16-ref import . |.bytevector-u16-ref|)
   (bytevector-s16-ref import . |.bytevector-s16-ref|)
   (bytevector-u16-native-ref import . |.bytevector-u16-native-ref|)
   (bytevector-s16-native-ref import . |.bytevector-s16-native-ref|)
   (bytevector-u16-set! import . |.bytevector-u16-set!|)
   (bytevector-s16-set! import . |.bytevector-s16-set!|)
   (bytevector-u16-native-set! import . |.bytevector-u16-native-set!|)
   (bytevector-s16-native-set! import . |.bytevector-s16-native-set!|)
   (bytevector-u32-ref import . |.bytevector-u32-ref|)
   (bytevector-s32-ref import . |.bytevector-s32-ref|)
   (bytevector-u32-native-ref import . |.bytevector-u32-native-ref|)
   (bytevector-s32-native-ref import . |.bytevector-s32-native-ref|)
   (bytevector-u32-set! import . |.bytevector-u32-set!|)
   (bytevector-s32-set! import . |.bytevector-s32-set!|)
   (bytevector-u32-native-set! import . |.bytevector-u32-native-set!|)
   (bytevector-s32-native-set! import . |.bytevector-s32-native-set!|)
   (bytevector-u64-ref import . |.bytevector-u64-ref|)
   (bytevector-s64-ref import . |.bytevector-s64-ref|)
   (bytevector-u64-native-ref import . |.bytevector-u64-native-ref|)
   (bytevector-s64-native-ref import . |.bytevector-s64-native-ref|)
   (bytevector-u64-set! import . |.bytevector-u64-set!|)
   (bytevector-s64-set! import . |.bytevector-s64-set!|)
   (bytevector-u64-native-set! import . |.bytevector-u64-native-set!|)
   (bytevector-s64-native-set! import . |.bytevector-s64-native-set!|)
   (bytevector-ieee-single-ref import . |.bytevector-ieee-single-ref|)
   (bytevector-ieee-single-native-ref import . |.bytevector-ieee-single-native-ref|)
   (bytevector-ieee-single-set! import . |.bytevector-ieee-single-set!|)
   (bytevector-ieee-single-native-set! import . |.bytevector-ieee-single-native-set!|)
   (bytevector-ieee-double-ref import . |.bytevector-ieee-double-ref|)
   (bytevector-ieee-double-native-ref import . |.bytevector-ieee-double-native-ref|)
   (bytevector-ieee-double-set! import . |.bytevector-ieee-double-set!|)
   (bytevector-ieee-double-native-set! import . |.bytevector-ieee-double-native-set!|))
 (apply.gloc.of |.intern-scheme-library| "../stdlib/core/bytevectors.scm" . 6145))

((close
   (1 0)
   (push.const . with-syntax)
   (push.const . "value does not match to pattern")
   (push.const ((b ...) b*) (x xnew))
   (apply.gloc.of |.syntax-violation| "../stdlib/core/syntax-case.scm" . 158755))
 (set.gloc.of |.fn16.1`16|)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (push.const quasisyntax . d)
   (push.const (d . 0))
   (push.const . #f)
   (push.const)
   (apply.gloc.of |.syntax-transcribe| "../stdlib/core/syntax-case.scm" . 72729))
 (set.gloc.of |.fn10.1`10|)
 (close
   (4 0 . qs)
   (push.gloc.of |.patvars|)
   (push.iloc.0 . 0)
   (push.const quasisyntax unsyntax unsyntax-splicing)
   (push.const quasisyntax . d)
   (push.const . #f)
   (push.close
     (1 0)
     (touch.gloc.of |qs`10|)
     (call
       (push.iloc.0 . 0)
       (push.const . d)
       (push.const (d . 0))
       (push.const . d)
       (push.const)
       (apply.gloc.of |.syntax-transcribe| "../stdlib/core/syntax-case.scm" . 67596))
     (push)
     (push.n+.iloc (1 . 1) 1 "../stdlib/core/syntax-case.scm" . 67604)
     (push.iloc.1 . 2)
     (push.close
       (2 0)
       (push.iloc.0 . 0)
       (call
         (push.iloc.0 . 1)
         (call
           (push.iloc.1 . 0)
           (push.const . d)
           (push.const (d . 0))
           (push.const . d)
           (push.const)
           (apply.gloc.of |.syntax-transcribe| "../stdlib/core/syntax-case.scm" . 70681))
         (if.eq? (ret.iloc 2 . 0))
         (push.iloc.1 . 0)
         (push.iloc.0 . 1)
         (push.subr.gloc.of |.list| 1 "../stdlib/core/syntax-case.scm" . 70677)
         (push.const)
         (push.const d)
         (push.const . #f)
         (push.gloc.of |.fn10.1`10|)
         (push.subr.gloc.of |.list| 3 "../stdlib/core/syntax-case.scm" . 68624)
         (push.const . _)
         (push.const . #f)
         (push.gloc.of |.fn28.1`28|)
         (push.subr.gloc.of |.list| 3 "../stdlib/core/syntax-case.scm" . 70677)
         (apply.gloc.of |.syntax-dispatch| "../stdlib/core/syntax-case.scm" . 68624))
       (push)
       (apply.iloc (2 . 3) "../stdlib/core/syntax-case.scm" . 68624))
     (apply.gloc.of |qs`10| "../stdlib/core/syntax-case.scm" . 67596))
   (push.subr.gloc.of |.list| 3 "../stdlib/core/syntax-case.scm" . 64519)
   (push.const unsyntax . d)
   (push.close
     (1 0)
     (push.iloc.1 . 1)
     (push.const . 0)
     (push.subr.gloc.of |.=| 2 "../stdlib/core/syntax-case.scm" . 74769)
     (ret.subr.gloc.of |.not| "../stdlib/core/syntax-case.scm" . 74764))
   (push.close
     (1 0)
     (touch.gloc.of |qs`10|)
     (call
       (push.iloc.0 . 0)
       (push.const . d)
       (push.const (d . 0))
       (push.const . d)
       (push.const)
       (apply.gloc.of |.syntax-transcribe| "../stdlib/core/syntax-case.scm" . 75788))
     (push)
     (push.n+.iloc (1 . 1) -1 "../stdlib/core/syntax-case.scm" . 75796)
     (push.iloc.1 . 2)
     (push.close
       (2 0)
       (push.iloc.0 . 0)
       (call
         (push.iloc.0 . 1)
         (call
           (push.iloc.1 . 0)
           (push.const . d)
           (push.const (d . 0))
           (push.const . d)
           (push.const)
           (apply.gloc.of |.syntax-transcribe| "../stdlib/core/syntax-case.scm" . 78873))
         (if.eq? (ret.iloc 2 . 0))
         (push.iloc.1 . 0)
         (push.iloc.0 . 1)
         (push.subr.gloc.of |.list| 1 "../stdlib/core/syntax-case.scm" . 78869)
         (push.const)
         (push.const d)
         (push.const . #f)
         (push.gloc.of |.fn25.1`25|)
         (push.subr.gloc.of |.list| 3 "../stdlib/core/syntax-case.scm" . 76816)
         (push.const . _)
         (push.const . #f)
         (push.gloc.of |.fn30.1`30|)
         (push.subr.gloc.of |.list| 3 "../stdlib/core/syntax-case.scm" . 78869)
         (apply.gloc.of |.syntax-dispatch| "../stdlib/core/syntax-case.scm" . 76816))
       (push)
       (apply.iloc (2 . 3) "../stdlib/core/syntax-case.scm" . 76816))
     (apply.gloc.of |qs`10| "../stdlib/core/syntax-case.scm" . 75788))
   (push.subr.gloc.of |.list| 3 "../stdlib/core/syntax-case.scm" . 64519)
   (push.const unsyntax-splicing . d)
   (push.close
     (1 0)
     (push.iloc.1 . 1)
     (push.const . 0)
     (push.subr.gloc.of |.=| 2 "../stdlib/core/syntax-case.scm" . 82961)
     (ret.subr.gloc.of |.not| "../stdlib/core/syntax-case.scm" . 82956))
   (push.close
     (1 0)
     (touch.gloc.of |qs`10|)
     (call
       (push.iloc.0 . 0)
       (push.const . d)
       (push.const (d . 0))
       (push.const . d)
       (push.const)
       (apply.gloc.of |.syntax-transcribe| "../stdlib/core/syntax-case.scm" . 83980))
     (push)
     (push.n+.iloc (1 . 1) -1 "../stdlib/core/syntax-case.scm" . 83988)
     (push.iloc.1 . 2)
     (push.close
       (2 0)
       (push.iloc.0 . 0)
       (call
         (push.iloc.0 . 1)
         (call
           (push.iloc.1 . 0)
           (push.const . d)
           (push.const (d . 0))
           (push.const . d)
           (push.const)
           (apply.gloc.of |.syntax-transcribe| "../stdlib/core/syntax-case.scm" . 87065))
         (if.eq? (ret.iloc 2 . 0))
         (push.iloc.1 . 0)
         (push.iloc.0 . 1)
         (push.subr.gloc.of |.list| 1 "../stdlib/core/syntax-case.scm" . 87061)
         (push.const)
         (push.const d)
         (push.const . #f)
         (push.gloc.of |.fn4.1`4|)
         (push.subr.gloc.of |.list| 3 "../stdlib/core/syntax-case.scm" . 85008)
         (push.const . _)
         (push.const . #f)
         (push.gloc.of |.fn26.1`26|)
         (push.subr.gloc.of |.list| 3 "../stdlib/core/syntax-case.scm" . 87061)
         (apply.gloc.of |.syntax-dispatch| "../stdlib/core/syntax-case.scm" . 85008))
       (push)
       (apply.iloc (2 . 3) "../stdlib/core/syntax-case.scm" . 85008))
     (apply.gloc.of |qs`10| "../stdlib/core/syntax-case.scm" . 83980))
   (push.subr.gloc.of |.list| 3 "../stdlib/core/syntax-case.scm" . 64519)
   (push.const unsyntax q)
   (push.close
     (1 0)
     (push.iloc.1 . 1)
     (push.const . 0)
     (ret.subr.gloc.of |.=| "../stdlib/core/syntax-case.scm" . 91148))
   (push.close
     (1 0)
     (push.iloc.0 . 0)
     (call
       (call
         (push.iloc.0 . 0)
         (push.const q)
         (push.const (q . 0))
         (push.const . #f)
         (push.const)
         (apply.gloc.of |.syntax-transcribe| "../stdlib/core/syntax-case.scm" . 92172))
       (push)
       (apply.gloc.of |.generate-temporaries| "../stdlib/core/syntax-case.scm" . 92172))
     (push)
     (push.subr.gloc.of |.list| 1 "../stdlib/core/syntax-case.scm" . 92172)
     (push.const)
     (push.const (t))
     (push.const . #f)
     (push.close
       (1 0)
       (call
         (push.iloc.0 . 0)
         (push.const t q)
         (push.const (q . 0) (t . 0))
         (push.const . #f)
         (push.const)
         (apply.gloc.of |.syntax-transcribe| "../stdlib/core/syntax-case.scm" . 93198))
       (push)
       (iloc 2 . 2)
       (push.cons)
       (call
         (push.iloc.0 . 0)
         (push.const . t)
         (push.const (t . 0))
         (push.const . t)
         (push.const)
         (apply.gloc.of |.syntax-transcribe| "../stdlib/core/syntax-case.scm" . 93198))
       (push)
       (apply.iloc (2 . 3) "../stdlib/core/syntax-case.scm" . 93198))
     (push.subr.gloc.of |.list| 3 "../stdlib/core/syntax-case.scm" . 92172)
     (push.const . _)
     (push.const . #f)
     (push.gloc.of |.fn11.1`11|)
     (push.subr.gloc.of |.list| 3 "../stdlib/core/syntax-case.scm" . 92191)
     (apply.gloc.of |.syntax-dispatch| "../stdlib/core/syntax-case.scm" . 92172))
   (push.subr.gloc.of |.list| 3 "../stdlib/core/syntax-case.scm" . 64519)
   (push.const (unsyntax q ...) . d)
   (push.close
     (1 0)
     (push.iloc.1 . 1)
     (push.const . 0)
     (ret.subr.gloc.of |.=| "../stdlib/core/syntax-case.scm" . 95244))
   (push.close
     (1 0)
     (touch.gloc.of |qs`10|)
     (call
       (push.iloc.0 . 0)
       (push.const . d)
       (push.const (d . 0))
       (push.const . d)
       (push.const)
       (apply.gloc.of |.syntax-transcribe| "../stdlib/core/syntax-case.scm" . 96268))
     (push)
     (push.iloc.1 . 1)
     (push.iloc.1 . 2)
     (push.close
       (2 0)
       (push.iloc.1 . 0)
       (call
         (call
           (push.iloc.1 . 0)
           (push.const q ...)
           (push.const (q . 1))
           (push.const . #f)
           (push.const)
           (apply.gloc.of |.syntax-transcribe| "../stdlib/core/syntax-case.scm" . 97296))
         (push)
         (apply.gloc.of |.generate-temporaries| "../stdlib/core/syntax-case.scm" . 97296))
       (push)
       (push.subr.gloc.of |.list| 1 "../stdlib/core/syntax-case.scm" . 97296)
       (push.const)
       (push.const (t ...))
       (push.const . #f)
       (push.close
         (1 0)
         (call
           (push.iloc.0 . 0)
           (push.const (t q) ...)
           (push.const (q . 1) (t . 1))
           (push.const . #f)
           (push.const)
           (apply.gloc.of |.syntax-transcribe| "../stdlib/core/syntax-case.scm" . 99348))
         (push)
         (push.iloc.1 . 0)
         (push.subr.gloc.of |.append| 2 "../stdlib/core/syntax-case.scm" . 99348)
         (call
           (push.iloc.0 . 0)
           (push.iloc.1 . 1)
           (push.subr.gloc.of |.list| 1 "../stdlib/core/syntax-case.scm" . 99348)
           (push.const)
           (push.const d)
           (push.const . #f)
           (push.gloc.of |.fn19.1`19|)
           (push.subr.gloc.of |.list| 3 "../stdlib/core/syntax-case.scm" . 99348)
           (push.const . _)
           (push.const . #f)
           (push.gloc.of |.fn27.1`27|)
           (push.subr.gloc.of |.list| 3 "../stdlib/core/syntax-case.scm" . 99348)
           (apply.gloc.of |.syntax-dispatch| "../stdlib/core/syntax-case.scm" . 99348))
         (push)
         (apply.iloc (3 . 3) "../stdlib/core/syntax-case.scm" . 99348))
       (push.subr.gloc.of |.list| 3 "../stdlib/core/syntax-case.scm" . 97296)
       (push.const . _)
       (push.const . #f)
       (push.gloc.of |.fn21.1`21|)
       (push.subr.gloc.of |.list| 3 "../stdlib/core/syntax-case.scm" . 98345)
       (apply.gloc.of |.syntax-dispatch| "../stdlib/core/syntax-case.scm" . 97296))
     (apply.gloc.of |qs`10| "../stdlib/core/syntax-case.scm" . 96268))
   (push.subr.gloc.of |.list| 3 "../stdlib/core/syntax-case.scm" . 64519)
   (push.const (unsyntax-splicing q ...) . d)
   (push.close
     (1 0)
     (push.iloc.1 . 1)
     (push.const . 0)
     (ret.subr.gloc.of |.=| "../stdlib/core/syntax-case.scm" . 102412))
   (push.close
     (1 0)
     (touch.gloc.of |qs`10|)
     (call
       (push.iloc.0 . 0)
       (push.const . d)
       (push.const (d . 0))
       (push.const . d)
       (push.const)
       (apply.gloc.of |.syntax-transcribe| "../stdlib/core/syntax-case.scm" . 103436))
     (push)
     (push.iloc.1 . 1)
     (push.iloc.1 . 2)
     (push.close
       (2 0)
       (push.iloc.1 . 0)
       (call
         (call
           (push.iloc.1 . 0)
           (push.const q ...)
           (push.const (q . 1))
           (push.const . #f)
           (push.const)
           (apply.gloc.of |.syntax-transcribe| "../stdlib/core/syntax-case.scm" . 104464))
         (push)
         (apply.gloc.of |.generate-temporaries| "../stdlib/core/syntax-case.scm" . 104464))
       (push)
       (push.subr.gloc.of |.list| 1 "../stdlib/core/syntax-case.scm" . 104464)
       (push.const)
       (push.const (t ...))
       (push.const . #f)
       (push.close
         (1 0)
         (call
           (push.iloc.0 . 0)
           (push.const ((t (... ...)) q) ...)
           (push.const (q . 1) (t . 1))
           (push.const . #f)
           (push.const)
           (apply.gloc.of |.syntax-transcribe| "../stdlib/core/syntax-case.scm" . 106516))
         (push)
         (push.iloc.1 . 0)
         (push.subr.gloc.of |.append| 2 "../stdlib/core/syntax-case.scm" . 106516)
         (call
           (push.iloc.0 . 0)
           (call
             (push.iloc.0 . 0)
             (push.const (t (... ...)) ...)
             (push.const (t . 1))
             (push.const . #f)
             (push.const)
             (apply.gloc.of |.syntax-transcribe| "../stdlib/core/syntax-case.scm" . 106516))
           (push)
           (push.subr.gloc.of |.list| 1 "../stdlib/core/syntax-case.scm" . 106516)
           (push.const)
           (push.const ((m ...) ...))
           (push.const . #f)
           (push.close
             (1 0)
             (push.iloc.0 . 0)
             (push.iloc 2 . 1)
             (push.subr.gloc.of |.list| 1 "../stdlib/core/syntax-case.scm" . 108569)
             (push.const)
             (push.const d)
             (push.const . #f)
             (push.gloc.of |.fn18.1`18|)
             (push.subr.gloc.of |.list| 3 "../stdlib/core/syntax-case.scm" . 108569)
             (push.const . _)
             (push.const . #f)
             (push.gloc.of |.fn2.1`2|)
             (push.subr.gloc.of |.list| 3 "../stdlib/core/syntax-case.scm" . 108569)
             (apply.gloc.of |.syntax-dispatch| "../stdlib/core/syntax-case.scm" . 108569))
           (push.subr.gloc.of |.list| 3 "../stdlib/core/syntax-case.scm" . 106516)
           (push.const . _)
           (push.const . #f)
           (push.gloc.of |.fn14.1`14|)
           (push.subr.gloc.of |.list| 3 "../stdlib/core/syntax-case.scm" . 107557)
           (apply.gloc.of |.syntax-dispatch| "../stdlib/core/syntax-case.scm" . 106516))
         (push)
         (apply.iloc (3 . 3) "../stdlib/core/syntax-case.scm" . 106516))
       (push.subr.gloc.of |.list| 3 "../stdlib/core/syntax-case.scm" . 104464)
       (push.const . _)
       (push.const . #f)
       (push.gloc.of |.fn31.1`31|)
       (push.subr.gloc.of |.list| 3 "../stdlib/core/syntax-case.scm" . 105513)
       (apply.gloc.of |.syntax-dispatch| "../stdlib/core/syntax-case.scm" . 104464))
     (apply.gloc.of |qs`10| "../stdlib/core/syntax-case.scm" . 103436))
   (push.subr.gloc.of |.list| 3 "../stdlib/core/syntax-case.scm" . 64519)
   (push.const a . d)
   (push.const . #f)
   (push.close
     (1 0)
     (touch.gloc.of |qs`10|)
     (call
       (push.iloc.0 . 0)
       (push.const . a)
       (push.const (a . 0))
       (push.const . a)
       (push.const)
       (apply.gloc.of |.syntax-transcribe| "../stdlib/core/syntax-case.scm" . 110604))
     (push)
     (push.iloc.1 . 1)
     (push.iloc.1 . 2)
     (push.close
       (2 0)
       (touch.gloc.of |qs`10|)
       (call
         (push.iloc.1 . 0)
         (push.const . d)
         (push.const (d . 0))
         (push.const . d)
         (push.const)
         (apply.gloc.of |.syntax-transcribe| "../stdlib/core/syntax-case.scm" . 112658))
       (push)
       (push.iloc 2 . 1)
       (push.iloc.0 . 0)
       (push.close
         (2 0)
         (push.iloc.0 . 0)
         (call
           (call
             (push.iloc.1 . 1)
             (call
               (push.iloc 2 . 0)
               (push.const . a)
               (push.const (a . 0))
               (push.const . a)
               (push.const)
               (apply.gloc.of |.syntax-transcribe| "../stdlib/core/syntax-case.scm" . 115748))
             (if.not.eq?.ret.const . #f)
             (push.iloc.0 . 1)
             (call
               (push.iloc 2 . 0)
               (push.const . d)
               (push.const (d . 0))
               (push.const . d)
               (push.const)
               (apply.gloc.of |.syntax-transcribe| "../stdlib/core/syntax-case.scm" . 115763))
             (ret.eq? "../stdlib/core/syntax-case.scm" . 115763))
           (if.true (ret.iloc 3 . 0))
           (push.iloc 2 . 0)
           (push.iloc.1 . 1)
           (push.iloc.0 . 1)
           (push.subr.gloc.of |.list| 2 "../stdlib/core/syntax-case.scm" . 115739)
           (push.const)
           (push.const a d)
           (push.const . #f)
           (push.gloc.of |.fn20.1`20|)
           (push.subr.gloc.of |.list| 3 "../stdlib/core/syntax-case.scm" . 113686)
           (push.const . _)
           (push.const . #f)
           (push.gloc.of |.fn23.1`23|)
           (push.subr.gloc.of |.list| 3 "../stdlib/core/syntax-case.scm" . 115739)
           (apply.gloc.of |.syntax-dispatch| "../stdlib/core/syntax-case.scm" . 113686))
         (push)
         (apply.iloc (3 . 3) "../stdlib/core/syntax-case.scm" . 113686))
       (apply.gloc.of |qs`10| "../stdlib/core/syntax-case.scm" . 111632))
     (apply.gloc.of |qs`10| "../stdlib/core/syntax-case.scm" . 110604))
   (push.subr.gloc.of |.list| 3 "../stdlib/core/syntax-case.scm" . 64519)
   (push.const . #(x ...))
   (push.const . #f)
   (push.close
     (1 0)
     (touch.gloc.of |vqs`10|)
     (call
       (push.iloc.0 . 0)
       (push.const x ...)
       (push.const (x . 1))
       (push.const . #f)
       (push.const)
       (apply.gloc.of |.syntax-transcribe| "../stdlib/core/syntax-case.scm" . 119821))
     (push)
     (push.iloc.1 . 1)
     (push.iloc.1 . 2)
     (push.close
       (2 0)
       (push.iloc.0 . 0)
       (call
         (call
           (touch.gloc.of |same?`117|)
           (call
             (push.iloc.1 . 0)
             (push.const x ...)
             (push.const (x . 1))
             (push.const . #f)
             (push.const)
             (apply.gloc.of |.syntax-transcribe| "../stdlib/core/syntax-case.scm" . 122907))
           (push)
           (push.iloc.0 . 1)
           (apply.gloc.of |same?`117| "../stdlib/core/syntax-case.scm" . 122907))
         (if.true (ret.iloc 2 . 0))
         (push.iloc.1 . 0)
         (push.iloc.0 . 1)
         (push.subr.gloc.of |.list| 1 "../stdlib/core/syntax-case.scm" . 122903)
         (push.const)
         (push.const (x ...))
         (push.const . #f)
         (push.gloc.of |.fn29.1`29|)
         (push.subr.gloc.of |.list| 3 "../stdlib/core/syntax-case.scm" . 120850)
         (push.const . _)
         (push.const . #f)
         (push.gloc.of |.fn3.1`3|)
         (push.subr.gloc.of |.list| 3 "../stdlib/core/syntax-case.scm" . 122903)
         (apply.gloc.of |.syntax-dispatch| "../stdlib/core/syntax-case.scm" . 120850))
       (push)
       (apply.iloc (2 . 3) "../stdlib/core/syntax-case.scm" . 120850))
     (apply.gloc.of |vqs`10| "../stdlib/core/syntax-case.scm" . 119821))
   (push.subr.gloc.of |.list| 3 "../stdlib/core/syntax-case.scm" . 158755)
   (push.const . _)
   (push.const . #f)
   (push.close
     (1 0)
     (push.iloc.1 . 2)
     (push.iloc.1 . 0)
     (apply.iloc (1 . 3) "../stdlib/core/syntax-case.scm" . 131086))
   (push.subr.gloc.of |.list| 3 "../stdlib/core/syntax-case.scm" . 65545)
   (apply.gloc.of |.syntax-dispatch| "../stdlib/core/syntax-case.scm" . 158755))
 (set.gloc.of |qs`10|)
 (close
   (2 0 . same?)
   (iloc.0 . 0)
   (if.null? (iloc.0 . 1) (ret.null? "../stdlib/core/syntax-case.scm" . 124961))
   (iloc.0 . 1)
   (if.null?.ret.const . #f)
   (push.car.iloc (0 . 0) "../stdlib/core/syntax-case.scm" . 127019)
   (car.iloc (0 . 1) "../stdlib/core/syntax-case.scm" . 127028)
   (if.not.eq?.ret.const . #f)
   (touch.gloc.of |same?`117|)
   (push.cdr.iloc (0 . 0) "../stdlib/core/syntax-case.scm" . 128045)
   (push.cdr.iloc (0 . 1) "../stdlib/core/syntax-case.scm" . 128054)
   (apply.gloc.of |same?`117| "../stdlib/core/syntax-case.scm" . 128038))
 (set.gloc.of |same?`117|)
 (close
   (1 0)
   (push.gloc.of |.patvars|)
   (push.iloc.0 . 0)
   (push.const)
   (push.const _ x)
   (push.const . #f)
   (push.gloc.of |.fn15.1`15|)
   (push.subr.gloc.of |.list| 3 "../stdlib/core/syntax-case.scm" . 64519)
   (apply.gloc.of |.syntax-dispatch| "../stdlib/core/syntax-case.scm" . 64519))
 (set.gloc.of |.fn7.1`7|)
 (close
   (1 0)
   (push.const . with-syntax)
   (push.const . "value does not match to pattern")
   (push.const (a anew) (d dnew))
   (apply.gloc.of |.syntax-violation| "../stdlib/core/syntax-case.scm" . 115739))
 (set.gloc.of |.fn23.1`23|)
 (close
   (1 0)
   (push.const . with-syntax)
   (push.const . "value does not match to pattern")
   (push.const ((t ...) (generate-temporaries (syntax (q ...)))))
   (apply.gloc.of |.syntax-violation| "../stdlib/core/syntax-case.scm" . 105505))
 (set.gloc.of |.fn31.1`31|)
 (close
   (1 0)
   (push.const . with-syntax)
   (push.const . "value does not match to pattern")
   (push.const (((m ...) ...) (syntax ((t (... ...)) ...))))
   (apply.gloc.of |.syntax-violation| "../stdlib/core/syntax-case.scm" . 107558))
 (set.gloc.of |.fn14.1`14|)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (push.const . #(x ...))
   (push.const (x . 1))
   (push.const . #f)
   (push.const)
   (apply.gloc.of |.syntax-transcribe| "../stdlib/core/syntax-case.scm" . 122903))
 (set.gloc.of |.fn29.1`29|)
 (close
   (1 0)
   (call
     (iloc.0 . 0)
     (if.not.pair?.ret.const . #f)
     (push.iloc.0 . 0)
     (ret.subr.gloc.of |.car| "../stdlib/core/syntax-case.scm" . 25640))
   (push)
   (push.const . "misplaced auxiliary syntactic keyword")
   (push.iloc.0 . 0)
   (apply.gloc.of |.syntax-violation| "../stdlib/core/syntax-case.scm" . 25607))
 (set.gloc.of |.fn9.1`9|)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (push.const unsyntax-splicing . d)
   (push.const (d . 0))
   (push.const . #f)
   (push.const)
   (apply.gloc.of |.syntax-transcribe| "../stdlib/core/syntax-case.scm" . 89113))
 (set.gloc.of |.fn4.1`4|)
 (close
   (1 0)
   (push.const . with-syntax)
   (push.const . "value does not match to pattern")
   (push.const ((x ...) xnew*))
   (apply.gloc.of |.syntax-violation| "../stdlib/core/syntax-case.scm" . 130090))
 (set.gloc.of |.fn3.1`3|)
 (close
   (1 0)
   (push.const . with-syntax)
   (push.const . "value does not match to pattern")
   (push.const (d dnew))
   (apply.gloc.of |.syntax-violation| "../stdlib/core/syntax-case.scm" . 99348))
 (set.gloc.of |.fn27.1`27|)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (push.const m ... ... . d)
   (push.const (d . 0) (m . 2))
   (push.const . #f)
   (push.const)
   (apply.gloc.of |.syntax-transcribe| "../stdlib/core/syntax-case.scm" . 108569))
 (set.gloc.of |.fn18.1`18|)
 (close
   (1 0)
   (call
     (iloc.0 . 0)
     (if.not.pair?.ret.const . #f)
     (push.iloc.0 . 0)
     (ret.subr.gloc.of |.car| "../stdlib/core/syntax-case.scm" . 29736))
   (push)
   (push.const . "misplaced auxiliary syntactic keyword")
   (push.iloc.0 . 0)
   (apply.gloc.of |.syntax-violation| "../stdlib/core/syntax-case.scm" . 29703))
 (set.gloc.of |.fn1.1`1|)
 (close
   (1 0)
   (push.const . with-syntax)
   (push.const . "value does not match to pattern")
   (push.const ((t ...) (generate-temporaries (syntax (q ...)))))
   (apply.gloc.of |.syntax-violation| "../stdlib/core/syntax-case.scm" . 140326))
 (set.gloc.of |.fn6.1`6|)
 (close
   (1 0)
   (push.const . with-syntax)
   (push.const . "value does not match to pattern")
   (push.const (d dnew))
   (apply.gloc.of |.syntax-violation| "../stdlib/core/syntax-case.scm" . 78869))
 (set.gloc.of |.fn30.1`30|)
 (close
   (1 0)
   (push.gloc.of |.patvars|)
   (push.iloc.0 . 0)
   (push.const)
   (push.const _ ((p e0) ...) e1 e2 ...)
   (push.const . #f)
   (push.gloc.of |.fn13.1`13|)
   (push.subr.gloc.of |.list| 3 "../stdlib/core/syntax-case.scm" . 32773)
   (apply.gloc.of |.syntax-dispatch| "../stdlib/core/syntax-case.scm" . 32773))
 (set.gloc.of |.fn8.1`8|)
 (close
   (1 0)
   (push.const . with-syntax)
   (push.const . "value does not match to pattern")
   (push.const (((m ...) ...) (syntax ((t (... ...)) ...))))
   (apply.gloc.of |.syntax-violation| "../stdlib/core/syntax-case.scm" . 147499))
 (set.gloc.of |.fn24.1`24|)
 (close
   (1 0)
   (touch.gloc.of |qs`10|)
   (call
     (push.iloc.0 . 0)
     (push.const . x)
     (push.const (x . 0))
     (push.const . x)
     (push.const)
     (apply.gloc.of |.syntax-transcribe| "../stdlib/core/syntax-case.scm" . 154634))
   (push)
   (push.const . 0)
   (push.const)
   (push.close
     (2 0)
     (push.iloc.0 . 1)
     (call
       (push.iloc.1 . 0)
       (push.const . x)
       (push.const (x . 0))
       (push.const . x)
       (push.const)
       (apply.gloc.of |.syntax-transcribe| "../stdlib/core/syntax-case.scm" . 156692))
     (if.eq?
       (push.iloc.1 . 0)
       (push.const syntax x)
       (push.const (x . 0))
       (push.const . #f)
       (push.const)
       (apply.gloc.of |.syntax-transcribe| "../stdlib/core/syntax-case.scm" . 155662))
     (push.iloc.1 . 0)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.subr.gloc.of |.list| 2 "../stdlib/core/syntax-case.scm" . 156688)
     (push.const)
     (push.const (b ...) x)
     (push.const . #f)
     (push.gloc.of |.fn22.1`22|)
     (push.subr.gloc.of |.list| 3 "../stdlib/core/syntax-case.scm" . 155662)
     (push.const . _)
     (push.const . #f)
     (push.gloc.of |.fn16.1`16|)
     (push.subr.gloc.of |.list| 3 "../stdlib/core/syntax-case.scm" . 156688)
     (apply.gloc.of |.syntax-dispatch| "../stdlib/core/syntax-case.scm" . 155662))
   (apply.gloc.of |qs`10| "../stdlib/core/syntax-case.scm" . 154634))
 (set.gloc.of |.fn15.1`15|)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (push.const with-syntax (b ...) (syntax x))
   (push.const (x . 0) (b . 1))
   (push.const . #f)
   (push.const)
   (apply.gloc.of |.syntax-transcribe| "../stdlib/core/syntax-case.scm" . 158740))
 (set.gloc.of |.fn22.1`22|)
 (close
   (1 0)
   (push.const . with-syntax)
   (push.const . "value does not match to pattern")
   (push.const (d dnew))
   (apply.gloc.of |.syntax-violation| "../stdlib/core/syntax-case.scm" . 70677))
 (set.gloc.of |.fn28.1`28|)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (push.const unsyntax . d)
   (push.const (d . 0))
   (push.const . #f)
   (push.const)
   (apply.gloc.of |.syntax-transcribe| "../stdlib/core/syntax-case.scm" . 80921))
 (set.gloc.of |.fn25.1`25|)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (push.const t ... . d)
   (push.const (d . 0) (t . 1))
   (push.const . #f)
   (push.const)
   (apply.gloc.of |.syntax-transcribe| "../stdlib/core/syntax-case.scm" . 100375))
 (set.gloc.of |.fn19.1`19|)
 (close
   (1 0)
   (push.const . with-syntax)
   (push.const . "value does not match to pattern")
   (push.const (d dnew))
   (apply.gloc.of |.syntax-violation| "../stdlib/core/syntax-case.scm" . 108569))
 (set.gloc.of |.fn2.1`2|)
 (close
   (1 0)
   (push.const . with-syntax)
   (push.const . "value does not match to pattern")
   (push.const ((t) (generate-temporaries (syntax (q)))))
   (apply.gloc.of |.syntax-violation| "../stdlib/core/syntax-case.scm" . 92187))
 (set.gloc.of |.fn11.1`11|)
 (close
   (4 0 . vqs)
   (iloc.0 . 0)
   (if.null?
     (push.iloc.0 . 2)
     (push.const)
     (apply.iloc (0 . 3) "../stdlib/core/syntax-case.scm" . 134157))
   (touch.gloc.of |vqs`10|)
   (push.cdr.iloc (0 . 0) "../stdlib/core/syntax-case.scm" . 135186)
   (push.iloc.0 . 1)
   (push.iloc.0 . 2)
   (push.close
     (2 0)
     (push.gloc.of |.patvars|)
     (push.car.iloc (1 . 0) "../stdlib/core/syntax-case.scm" . 137249)
     (push.const unsyntax unsyntax-splicing)
     (push.const unsyntax q ...)
     (push.close
       (1 0)
       (push.iloc 2 . 1)
       (push.const . 0)
       (ret.subr.gloc.of |.=| "../stdlib/core/syntax-case.scm" . 139287))
     (push.close
       (1 0)
       (push.iloc.0 . 0)
       (call
         (call
           (push.iloc.0 . 0)
           (push.const q ...)
           (push.const (q . 1))
           (push.const . #f)
           (push.const)
           (apply.gloc.of |.syntax-transcribe| "../stdlib/core/syntax-case.scm" . 140311))
         (push)
         (apply.gloc.of |.generate-temporaries| "../stdlib/core/syntax-case.scm" . 140311))
       (push)
       (push.subr.gloc.of |.list| 1 "../stdlib/core/syntax-case.scm" . 140311)
       (push.const)
       (push.const (t ...))
       (push.const . #f)
       (push.close
         (1 0)
         (call
           (push.iloc.0 . 0)
           (push.const (t q) ...)
           (push.const (q . 1) (t . 1))
           (push.const . #f)
           (push.const)
           (apply.gloc.of |.syntax-transcribe| "../stdlib/core/syntax-case.scm" . 141337))
         (push)
         (push.iloc 2 . 0)
         (push.subr.gloc.of |.append| 2 "../stdlib/core/syntax-case.scm" . 141337)
         (call
           (push.iloc.0 . 0)
           (push.const t ...)
           (push.const (t . 1))
           (push.const . #f)
           (push.const)
           (apply.gloc.of |.syntax-transcribe| "../stdlib/core/syntax-case.scm" . 141337))
         (push)
         (push.iloc 2 . 1)
         (push.subr.gloc.of |.append| 2 "../stdlib/core/syntax-case.scm" . 141337)
         (apply.iloc (3 . 3) "../stdlib/core/syntax-case.scm" . 141337))
       (push.subr.gloc.of |.list| 3 "../stdlib/core/syntax-case.scm" . 140311)
       (push.const . _)
       (push.const . #f)
       (push.gloc.of |.fn6.1`6|)
       (push.subr.gloc.of |.list| 3 "../stdlib/core/syntax-case.scm" . 140334)
       (apply.gloc.of |.syntax-dispatch| "../stdlib/core/syntax-case.scm" . 140311))
     (push.subr.gloc.of |.list| 3 "../stdlib/core/syntax-case.scm" . 136210)
     (push.const unsyntax-splicing q ...)
     (push.close
       (1 0)
       (push.iloc 2 . 1)
       (push.const . 0)
       (ret.subr.gloc.of |.=| "../stdlib/core/syntax-case.scm" . 144407))
     (push.close
       (1 0)
       (push.iloc.0 . 0)
       (call
         (call
           (push.iloc.0 . 0)
           (push.const q ...)
           (push.const (q . 1))
           (push.const . #f)
           (push.const)
           (apply.gloc.of |.syntax-transcribe| "../stdlib/core/syntax-case.scm" . 145431))
         (push)
         (apply.gloc.of |.generate-temporaries| "../stdlib/core/syntax-case.scm" . 145431))
       (push)
       (push.subr.gloc.of |.list| 1 "../stdlib/core/syntax-case.scm" . 145431)
       (push.const)
       (push.const (t ...))
       (push.const . #f)
       (push.close
         (1 0)
         (call
           (push.iloc.0 . 0)
           (push.const ((t (... ...)) q) ...)
           (push.const (q . 1) (t . 1))
           (push.const . #f)
           (push.const)
           (apply.gloc.of |.syntax-transcribe| "../stdlib/core/syntax-case.scm" . 146457))
         (push)
         (push.iloc 2 . 0)
         (push.subr.gloc.of |.append| 2 "../stdlib/core/syntax-case.scm" . 146457)
         (call
           (push.iloc.0 . 0)
           (call
             (push.iloc.0 . 0)
             (push.const (t (... ...)) ...)
             (push.const (t . 1))
             (push.const . #f)
             (push.const)
             (apply.gloc.of |.syntax-transcribe| "../stdlib/core/syntax-case.scm" . 146457))
           (push)
           (push.subr.gloc.of |.list| 1 "../stdlib/core/syntax-case.scm" . 146457)
           (push.const)
           (push.const ((m ...) ...))
           (push.const . #f)
           (push.close
             (1 0)
             (call
               (push.iloc.0 . 0)
               (push.const m ... ...)
               (push.const (m . 2))
               (push.const . #f)
               (push.const)
               (apply.gloc.of |.syntax-transcribe| "../stdlib/core/syntax-case.scm" . 148510))
             (push)
             (push.iloc 3 . 1)
             (ret.subr.gloc.of |.append| "../stdlib/core/syntax-case.scm" . 148510))
           (push.subr.gloc.of |.list| 3 "../stdlib/core/syntax-case.scm" . 146457)
           (push.const . _)
           (push.const . #f)
           (push.gloc.of |.fn24.1`24|)
           (push.subr.gloc.of |.list| 3 "../stdlib/core/syntax-case.scm" . 147498)
           (apply.gloc.of |.syntax-dispatch| "../stdlib/core/syntax-case.scm" . 146457))
         (push)
         (apply.iloc (3 . 3) "../stdlib/core/syntax-case.scm" . 146457))
       (push.subr.gloc.of |.list| 3 "../stdlib/core/syntax-case.scm" . 145431)
       (push.const . _)
       (push.const . #f)
       (push.gloc.of |.fn17.1`17|)
       (push.subr.gloc.of |.list| 3 "../stdlib/core/syntax-case.scm" . 145454)
       (apply.gloc.of |.syntax-dispatch| "../stdlib/core/syntax-case.scm" . 145431))
     (push.subr.gloc.of |.list| 3 "../stdlib/core/syntax-case.scm" . 136210)
     (push.const . _)
     (push.const . #f)
     (push.close
       (1 0)
       (touch.gloc.of |qs`10|)
       (push.car.iloc (2 . 0) "../stdlib/core/syntax-case.scm" . 149533)
       (push.iloc 2 . 1)
       (push.iloc.1 . 0)
       (push.close
         (2 0)
         (push.iloc.0 . 0)
         (push.iloc.0 . 1)
         (iloc 2 . 1)
         (push.cons)
         (apply.iloc (3 . 3) "../stdlib/core/syntax-case.scm" . 151583))
       (apply.gloc.of |qs`10| "../stdlib/core/syntax-case.scm" . 149529))
     (push.subr.gloc.of |.list| 3 "../stdlib/core/syntax-case.scm" . 137249)
     (apply.gloc.of |.syntax-dispatch| "../stdlib/core/syntax-case.scm" . 136210))
   (apply.gloc.of |vqs`10| "../stdlib/core/syntax-case.scm" . 132103))
 (set.gloc.of |vqs`10|)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (push.const a . d)
   (push.const (d . 0) (a . 0))
   (push.const . #f)
   (push.const)
   (apply.gloc.of |.syntax-transcribe| "../stdlib/core/syntax-case.scm" . 117791))
 (set.gloc.of |.fn20.1`20|)
 (close
   (1 0)
   (push.const . with-syntax)
   (push.const . "value does not match to pattern")
   (push.const ((t ...) (generate-temporaries (syntax (q ...)))))
   (apply.gloc.of |.syntax-violation| "../stdlib/core/syntax-case.scm" . 98337))
 (set.gloc.of |.fn21.1`21|)
 (close
   (1 0)
   (subr.gloc.of |.backtrace| 0 "../stdlib/core/syntax-case.scm" . 35854)
   (if.true
     (push.iloc.0 . 0)
     (push.const
       syntax-case
       (list e0 ...)
       ()
       ((p ...) (let () e1 e2 ...))
       (_ (syntax-violation 'with-syntax "value does not match to pattern" '((p e0) ...))))
     (push.const (e2 . 1) (e1 . 0) (p . 1) (e0 . 1))
     (push.const . #f)
     (push.const)
     (apply.gloc.of |.syntax-transcribe| "../stdlib/core/syntax-case.scm" . 35850))
   (push.iloc.0 . 0)
   (push.const syntax-case (list e0 ...) () ((p ...) (let () e1 e2 ...)))
   (push.const (e2 . 1) (e1 . 0) (p . 1) (e0 . 1))
   (push.const . #f)
   (push.const)
   (apply.gloc.of |.syntax-transcribe| "../stdlib/core/syntax-case.scm" . 35850))
 (set.gloc.of |.fn13.1`13|)
 (close
   (1 0)
   (push.const . with-syntax)
   (push.const . "value does not match to pattern")
   (push.const (d dnew))
   (apply.gloc.of |.syntax-violation| "../stdlib/core/syntax-case.scm" . 87061))
 (set.gloc.of |.fn26.1`26|)
 (close
   (1 0)
   (push.const . with-syntax)
   (push.const . "value does not match to pattern")
   (push.const ((t ...) (generate-temporaries (syntax (q ...)))))
   (apply.gloc.of |.syntax-violation| "../stdlib/core/syntax-case.scm" . 145446))
 (set.gloc.of |.fn17.1`17|)
 (call
   (push.const core primitives)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/syntax-case.scm" . 6145))
 (call
   (push.const
     (with-syntax import . |core.syntax-case'with-syntax|)
     (- import . |.-|)
     (+ import . |.+|)
     (set! import . |.set!|)
     (list import . |.list|)
     (lambda import . |.lambda|)
     (quote import . |.quote|)
     (letrec* import . |.letrec*|)
     (car import . |.car|)
     (quasisyntax import . |core.syntax-case'quasisyntax|)
     (cons import . |.cons|)
     (define import . |.define|)
     (syntax-case import . |.syntax-case|)
     (... import . |....|)
     (syntax import . |.syntax|)
     (define-syntax import . |.define-syntax|)
     (append import . |.append|)
     (unsyntax-splicing import . |core.syntax-case'unsyntax-splicing|)
     (eq? import . |.eq?|)
     (or import . |.or|)
     (begin import . |.begin|)
     (pair? import . |.pair?|)
     (if import . |.if|)
     (null? import . |.null?|)
     (cdr import . |.cdr|)
     (= import . |.=|)
     (backtrace import . |.backtrace|)
     (and import . |.and|)
     (unsyntax import . |core.syntax-case'unsyntax|)
     (_ import . |._|)
     (let import . |.let|)
     (not import . |.not|)
     (syntax-violation import . |.syntax-violation|)
     (generate-temporaries import . |.generate-temporaries|))
   (extend . 1)
   (call
     (push.const . syntax)
     (push.const . |core.syntax-case'unsyntax|)
     (call
       (push.gloc.of |.fn9.1`9|)
       (apply.gloc.of |.transformer-thunk| "../stdlib/core/syntax-case.scm" . 6145))
     (push)
     (push.iloc.0 . 0)
     (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/syntax-case.scm" . 6145))
   (call
     (push.const . syntax)
     (push.const . |core.syntax-case'unsyntax-splicing|)
     (call
       (push.gloc.of |.fn1.1`1|)
       (apply.gloc.of |.transformer-thunk| "../stdlib/core/syntax-case.scm" . 6145))
     (push)
     (push.iloc.0 . 0)
     (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/syntax-case.scm" . 6145))
   (call
     (push.const . syntax)
     (push.const . |core.syntax-case'with-syntax|)
     (call
       (push.gloc.of |.fn8.1`8|)
       (apply.gloc.of |.transformer-thunk| "../stdlib/core/syntax-case.scm" . 6145))
     (push)
     (push.iloc.0 . 0)
     (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/syntax-case.scm" . 6145))
   (push.const . syntax)
   (push.const . |core.syntax-case'quasisyntax|)
   (call
     (push.gloc.of |.fn7.1`7|)
     (apply.gloc.of |.transformer-thunk| "../stdlib/core/syntax-case.scm" . 6145))
   (push)
   (push.iloc.0 . 0)
   (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/syntax-case.scm" . 6145))
 (push.const . core.syntax-case)
 (push.const . #f)
 (push.const
   (syntax-case import . |.syntax-case|)
   (syntax import . |.syntax|)
   (with-syntax import . |core.syntax-case'with-syntax|)
   (make-variable-transformer import . |.make-variable-transformer|)
   (identifier? import . |.identifier?|)
   (bound-identifier=? import . |.bound-identifier=?|)
   (free-identifier=? import . |.free-identifier=?|)
   (datum->syntax import . |.datum->syntax|)
   (syntax->datum import . |.syntax->datum|)
   (generate-temporaries import . |.generate-temporaries|)
   (quasisyntax import . |core.syntax-case'quasisyntax|)
   (unsyntax import . |core.syntax-case'unsyntax|)
   (unsyntax-splicing import . |core.syntax-case'unsyntax-splicing|)
   (syntax-violation import . |.syntax-violation|)
   (_ import . |._|)
   (... import . |....|))
 (apply.gloc.of |.intern-scheme-library| "../stdlib/core/syntax-case.scm" . 6145))

((call
   (push.const core primitives)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/r5rs.scm" . 6145))
 (close (1 0 . |core.r5rs'force|) (apply.iloc (0 . 0) "../stdlib/core/r5rs.scm" . 19463))
 (set.gloc.of |core.r5rs'force|)
 (close
   (1 0 . |core.r5rs'make-promise|)
   (push.const . #f)
   (push.const . #f)
   (extend . 2)
   (ret.close
     (0 0)
     (iloc.1 . 0)
     (if.true (ret.iloc 1 . 1))
     (call (apply.iloc (2 . 0) "../stdlib/core/r5rs.scm" . 28696))
     (push)
     (extend . 1)
     (iloc 2 . 0)
     (if.true (ret.iloc 2 . 1))
     (const . #t)
     (set.iloc 2 . 0)
     (iloc.0 . 0)
     (set.iloc 2 . 1)
     (ret.iloc 2 . 1)))
 (set.gloc.of |core.r5rs'make-promise|)
 (call
   (push.const . syntax)
   (push.const . |core.r5rs'delay|)
   (push.const
     ()
     ("../stdlib/core/r5rs.scm" . 36869)
     ((delay expression)
      (make-promise (lambda () expression))
      ((expression . 0) (delay . 0))
      (lambda make-promise)))
   (push.const
     (quote import . |.quote|)
     (if import . |.if|)
     (force import . |core.r5rs'force|)
     (set! import . |.set!|)
     (delay import . |core.r5rs'delay|)
     (define-syntax import . |.define-syntax|)
     (or import . |.or|)
     (let import . |.let|)
     (letrec* import . |.letrec*|)
     (define import . |.define|)
     (begin import . |.begin|)
     (and import . |.and|)
     (make-promise import . |core.r5rs'make-promise|)
     (syntax-rules import . |.syntax-rules|)
     (lambda import . |.lambda|))
   (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/r5rs.scm" . 6145))
 (push.const . core.r5rs)
 (push.const . #f)
 (push.const
   (inexact->exact import . |.exact|)
   (exact->inexact import . |.inexact|)
   (quotient import . |.quotient|)
   (remainder import . |.remainder|)
   (modulo import . |.modulo|)
   (delay import . |core.r5rs'delay|)
   (force import . |core.r5rs'force|))
 (apply.gloc.of |.intern-scheme-library| "../stdlib/core/r5rs.scm" . 6145))

((close
   (1 0)
   (push.gloc.of |.patvars|)
   (push.iloc.0 . 0)
   (push.const)
   (push.const _ (lst ...))
   (push.const . #f)
   (push.gloc.of |.fn2.1`2|)
   (push.subr.gloc.of |.list| 3 "../stdlib/core/control.scm" . 17413)
   (apply.gloc.of |.syntax-dispatch| "../stdlib/core/control.scm" . 17413))
 (set.gloc.of |.fn1.1`1|)
 (close
   (1 0)
   (call
     (push.iloc.0 . 0)
     (push.const . k)
     (push.const)
     (push.const . k)
     (push.const)
     (apply.gloc.of |.syntax-transcribe| "../stdlib/core/control.scm" . 19480))
   (push)
   (call
     (push.iloc.0 . 0)
     (push.const lst ...)
     (push.const (lst . 1))
     (push.const . #f)
     (push.const)
     (apply.gloc.of |.syntax-transcribe| "../stdlib/core/control.scm" . 19480))
   (push)
   (push.subr.gloc.of |.length| 1 "../stdlib/core/control.scm" . 19480)
   (apply.gloc.of |.datum->syntax| "../stdlib/core/control.scm" . 19480))
 (set.gloc.of |.fn2.1`2|)
 (call
   (push.const core syntax-case)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/control.scm" . 6145))
 (call
   (push.const core primitives)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/control.scm" . 6145))
 (call
   (push.const core intrinsics)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/control.scm" . 6145))
 (call
   (push.const
     (set! import . |.set!|)
     (case-lambda import . |core.control'case-lambda|)
     (lambda import . |.lambda|)
     (apply import . |.apply|)
     (case-lambda-help import . |core.control'case-lambda-help|)
     (letrec* import . |.letrec*|)
     (define import . |.define|)
     (syntax-case import . |.syntax-case|)
     (syntax-rules import . |.syntax-rules|)
     (define-syntax import . |.define-syntax|)
     (>= import . |.>=|)
     (unless import . |core.control'unless|)
     (_ import . |._|)
     (or import . |.or|)
     (begin import . |.begin|)
     (... import . |....|)
     (syntax import . |.syntax|)
     (if import . |.if|)
     (= import . |.=|)
     (when import . |core.control'when|)
     (length import . |.length|)
     (syntax-length import . |core.control'syntax-length|)
     (and import . |.and|)
     (assertion-violation import . |.assertion-violation|)
     (quote import . |.quote|)
     (not import . |.not|)
     (let import . |.let|)
     (datum->syntax import . |.datum->syntax|))
   (extend . 1)
   (call
     (push.const . syntax)
     (push.const . |core.control'syntax-length|)
     (call
       (push.gloc.of |.fn1.1`1|)
       (apply.gloc.of |.transformer-thunk| "../stdlib/core/control.scm" . 6145))
     (push)
     (push.iloc.0 . 0)
     (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/control.scm" . 6145))
   (call
     (push.const . syntax)
     (push.const . |core.control'when|)
     (push.const
       ()
       ("../stdlib/core/control.scm" . 22533)
       ((when test result1 result2 ...)
        (if test (begin result1 result2 ...))
        ((result2 . 1) (result1 . 0) (test . 0) (when . 0))
        (begin if)))
     (push.iloc.0 . 0)
     (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/control.scm" . 6145))
   (call
     (push.const . syntax)
     (push.const . |core.control'unless|)
     (push.const
       ()
       ("../stdlib/core/control.scm" . 28677)
       ((unless test result1 result2 ...)
        (if (not test) (begin result1 result2 ...))
        ((result2 . 1) (result1 . 0) (test . 0) (unless . 0))
        (begin not if)))
     (push.iloc.0 . 0)
     (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/control.scm" . 6145))
   (call
     (push.const . syntax)
     (push.const . |core.control'case-lambda-help|)
     (push.const
       ()
       ("../stdlib/core/control.scm" . 34821)
       ((_ args n)
        (assertion-violation #f "wrong number of arguments" args)
        ((n . 0) (args . 0))
        (assertion-violation))
       ((_ args n ((x ...) b1 b2 ...) more ...)
        (if (= n (syntax-length (x ...)))
            (apply (lambda (x ...) b1 b2 ...) args)
            (case-lambda-help args n more ...))
        ((more . 1) (b2 . 1) (b1 . 0) (x . 1) (n . 0) (args . 0))
        (case-lambda-help lambda apply syntax-length = if))
       ((_ args n ((x1 x2 ... . r) b1 b2 ...) more ...)
        (if (>= n (syntax-length (x1 x2 ...)))
            (apply (lambda (x1 x2 ... . r) b1 b2 ...) args)
            (case-lambda-help args n more ...))
        ((more . 1) (b2 . 1) (b1 . 0) (r . 0) (x2 . 1) (x1 . 0) (n . 0) (args . 0))
        (case-lambda-help lambda apply syntax-length >= if))
       ((_ args n (r b1 b2 ...) more ...)
        (apply (lambda r b1 b2 ...) args)
        ((more . 1) (b2 . 1) (b1 . 0) (r . 0) (n . 0) (args . 0))
        (lambda apply)))
     (push.iloc.0 . 0)
     (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/control.scm" . 6145))
   (push.const . syntax)
   (push.const . |core.control'case-lambda|)
   (push.const
     ()
     ("../stdlib/core/control.scm" . 50181)
     ((_ (fmls b1 b2 ...)) (lambda fmls b1 b2 ...) ((b2 . 1) (b1 . 0) (fmls . 0)) (lambda))
     ((_ (fmls b1 b2 ...) ...)
      (lambda args (let ((n (length args))) (case-lambda-help args n (fmls b1 b2 ...) ...)))
      ((b2 . 2) (b1 . 1) (fmls . 1))
      (case-lambda-help length n let args lambda)))
   (push.iloc.0 . 0)
   (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/control.scm" . 6145))
 (push.const . core.control)
 (push.const . #f)
 (push.const
   (when import . |core.control'when|)
   (unless import . |core.control'unless|)
   (do import . |.do|)
   (case-lambda import . |core.control'case-lambda|))
 (apply.gloc.of |.intern-scheme-library| "../stdlib/core/control.scm" . 6145))

((close
   (1 0)
   (push.gloc.of |.patvars|)
   (push.iloc.0 . 0)
   (push.const)
   (push.const _ (lst ...))
   (push.const . #f)
   (push.gloc.of |.fn2.1`2|)
   (push.subr.gloc.of |.list| 3 "../stdlib/core/optargs.scm" . 13317)
   (apply.gloc.of |.syntax-dispatch| "../stdlib/core/optargs.scm" . 13317))
 (set.gloc.of |.fn1.1`1|)
 (close
   (1 0)
   (call
     (push.iloc.0 . 0)
     (push.const . k)
     (push.const)
     (push.const . k)
     (push.const)
     (apply.gloc.of |.syntax-transcribe| "../stdlib/core/optargs.scm" . 16394))
   (push)
   (call
     (push.iloc.0 . 0)
     (push.const lst ...)
     (push.const (lst . 1))
     (push.const . #f)
     (push.const)
     (apply.gloc.of |.syntax-transcribe| "../stdlib/core/optargs.scm" . 16394))
   (push)
   (push.subr.gloc.of |.length| 1 "../stdlib/core/optargs.scm" . 16394)
   (apply.gloc.of |.datum->syntax| "../stdlib/core/optargs.scm" . 16394))
 (set.gloc.of |.fn2.1`2|)
 (call
   (push.const core syntax-case)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/optargs.scm" . 6145))
 (call
   (push.const core intrinsics)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/optargs.scm" . 6145))
 (call
   (push.const
     (quote import . |.quote|)
     (let-optionals-aux import . |core.optargs'let-optionals-aux|)
     (if import . |.if|)
     (syntax import . |.syntax|)
     (... import . |....|)
     (list import . |.list|)
     (car import . |.car|)
     (_ import . |._|)
     (append import . |.append|)
     (= import . |.=|)
     (define-syntax import . |.define-syntax|)
     (or import . |.or|)
     (datum->syntax import . |.datum->syntax|)
     (set! import . |.set!|)
     (apply import . |.apply|)
     (length import . |.length|)
     (define import . |.define|)
     (letrec* import . |.letrec*|)
     (begin import . |.begin|)
     (let-optionals import . |core.optargs'let-optionals|)
     (and import . |.and|)
     (let import . |.let|)
     (syntax-case import . |.syntax-case|)
     (syntax-length import . |core.optargs'syntax-length|)
     (pair? import . |.pair?|)
     (syntax-rules import . |.syntax-rules|)
     (lambda import . |.lambda|))
   (extend . 1)
   (call
     (push.const . syntax)
     (push.const . |core.optargs'syntax-length|)
     (call
       (push.gloc.of |.fn1.1`1|)
       (apply.gloc.of |.transformer-thunk| "../stdlib/core/optargs.scm" . 6145))
     (push)
     (push.iloc.0 . 0)
     (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/optargs.scm" . 6145))
   (call
     (push.const . syntax)
     (push.const . |core.optargs'let-optionals-aux|)
     (push.const
       ()
       ("../stdlib/core/optargs.scm" . 19461)
       ((_ _ _ (value ...) () ()) (list value ...) ((value . 1)) (list))
       ((_ argc args () (var1 ... var2) (def1 ... def2))
        (if (= argc (syntax-length (var1 ... var2)))
            args
            (let ((temp def2)) (let-optionals-aux argc args (temp) (var1 ...) (def1 ...))))
        ((def2 . 0) (def1 . 1) (var2 . 0) (var1 . 1) (args . 0) (argc . 0))
        (let-optionals-aux temp let syntax-length = if))
       ((_ argc args (value ...) (var) (def))
        (if (= argc 1) (append args (list value ...)) (list def value ...))
        ((def . 0) (var . 0) (value . 1) (args . 0) (argc . 0))
        (list append = if))
       ((_ argc args (value ...) (var1 ... var2) (def1 ... def2))
        (if (= argc (syntax-length (var1 ... var2)))
            (append args (list value ...))
            (let ((temp def2))
              (let-optionals-aux argc args (temp value ...) (var1 ...) (def1 ...))))
        ((def2 . 0) (def1 . 1) (var2 . 0) (var1 . 1) (value . 1) (args . 0) (argc . 0))
        (let-optionals-aux temp let list append syntax-length = if)))
     (push.iloc.0 . 0)
     (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/optargs.scm" . 6145))
   (push.const . syntax)
   (push.const . |core.optargs'let-optionals|)
   (push.const
     ()
     ("../stdlib/core/optargs.scm" . 38917)
     ((_ args ((var def)) body1 body2 ...)
      (let ((var (if (pair? args) (car args) def))) body1 body2 ...)
      ((body2 . 1) (body1 . 0) (def . 0) (var . 0) (args . 0))
      (car pair? if let))
     ((_ args ((var def) ...) body1 body2 ...)
      (apply
        (lambda (var ...) body1 body2 ...)
        (let ((argc (length args))) (let-optionals-aux argc args () (var ...) (def ...))))
      ((body2 . 1) (body1 . 0) (def . 1) (var . 1) (args . 0))
      (let-optionals-aux length argc let lambda apply)))
   (push.iloc.0 . 0)
   (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/optargs.scm" . 6145))
 (push.const . core.optargs)
 (push.const . #f)
 (push.const (let-optionals import . |core.optargs'let-optionals|))
 (apply.gloc.of |.intern-scheme-library| "../stdlib/core/optargs.scm" . 6145))

((close
   (1 0)
   (push.iloc.0 . 0)
   (push.const or test (assertion-violation 'who (format msg arg)))
   (push.const (arg . 0) (msg . 0) (who . 0) (test . 0))
   (push.const . #f)
   (push.const)
   (apply.gloc.of |.syntax-transcribe| "../stdlib/core/chkarg.scm" . 25612))
 (set.gloc.of |.fn1.1`1|)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (push.const check-argument n who arg expect (test arg))
   (push.const (test . 0) (expect . 0) (arg . 0) (who . 0) (n . 0))
   (push.const . #f)
   (push.const)
   (apply.gloc.of |.syntax-transcribe| "../stdlib/core/chkarg.scm" . 28682))
 (set.gloc.of |.fn2.1`2|)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (call
     (call
       (push.iloc.0 . 0)
       (push.const . k)
       (push.const)
       (push.const . k)
       (push.const)
       (apply.gloc.of |.syntax-transcribe| "../stdlib/core/chkarg.scm" . 24605))
     (push)
     (push.const . "expected ~a, but got ~a as argument ~a")
     (call
       (call
         (push.iloc.0 . 0)
         (push.const . expect)
         (push.const (expect . 0))
         (push.const . expect)
         (push.const)
         (apply.gloc.of |.syntax-transcribe| "../stdlib/core/chkarg.scm" . 24673))
       (push)
       (apply.gloc.of |.syntax->datum| "../stdlib/core/chkarg.scm" . 24673))
     (push)
     (push.const . "~s")
     (call
       (call
         (push.iloc.0 . 0)
         (push.const . n)
         (push.const (n . 0))
         (push.const . n)
         (push.const)
         (apply.gloc.of |.syntax-transcribe| "../stdlib/core/chkarg.scm" . 24703))
       (push)
       (apply.gloc.of |.syntax->datum| "../stdlib/core/chkarg.scm" . 24703))
     (push)
     (push.subr.gloc.of |.format| 4 "../stdlib/core/chkarg.scm" . 24624)
     (apply.gloc.of |.datum->syntax| "../stdlib/core/chkarg.scm" . 24605))
   (push)
   (push.subr.gloc.of |.list| 1 "../stdlib/core/chkarg.scm" . 24605)
   (push.const)
   (push.const msg)
   (push.const . #f)
   (push.gloc.of |.fn1.1`1|)
   (push.subr.gloc.of |.list| 3 "../stdlib/core/chkarg.scm" . 24586)
   (push.const . _)
   (push.const . #f)
   (push.gloc.of |.fn6.1`6|)
   (push.subr.gloc.of |.list| 3 "../stdlib/core/chkarg.scm" . 24605)
   (apply.gloc.of |.syntax-dispatch| "../stdlib/core/chkarg.scm" . 24586))
 (set.gloc.of |.fn3.1`3|)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (push.const or test (assertion-violation 'who (format msg arg)))
   (push.const (arg . 0) (msg . 0) (who . 0) (test . 0))
   (push.const . #f)
   (push.const)
   (apply.gloc.of |.syntax-transcribe| "../stdlib/core/chkarg.scm" . 21516))
 (set.gloc.of |.fn12.1`12|)
 (close
   (1 0)
   (call
     (call
       (push.iloc.0 . 0)
       (push.const . test)
       (push.const (test . 0))
       (push.const . test)
       (push.const)
       (apply.gloc.of |.syntax-transcribe| "../stdlib/core/chkarg.scm" . 19473))
     (push)
     (apply.gloc.of |.syntax->datum| "../stdlib/core/chkarg.scm" . 19473))
   (ret.pair? "../stdlib/core/chkarg.scm" . 19466))
 (set.gloc.of |.fn5.1`5|)
 (close
   (1 0)
   (push.const . with-syntax)
   (push.const . "value does not match to pattern")
   (push.const
     (msg
       (datum->syntax
         (syntax k)
         (format
           "expected ~a, but got ~a as argument ~a"
           (syntax->datum (syntax expect))
           "~s"
           (syntax->datum (syntax n))))))
   (apply.gloc.of |.syntax-violation| "../stdlib/core/chkarg.scm" . 24605))
 (set.gloc.of |.fn6.1`6|)
 (close
   (1 0)
   (push.gloc.of |.patvars|)
   (push.iloc.0 . 0)
   (push.const)
   (push.const _ e1 . e2)
   (push.gloc.of |.fn11.1`11|)
   (push.gloc.of |.fn4.1`4|)
   (push.subr.gloc.of |.list| 3 "../stdlib/core/chkarg.scm" . 13317)
   (push.const _ 0 who arg expect test)
   (push.gloc.of |.fn5.1`5|)
   (push.gloc.of |.fn9.1`9|)
   (push.subr.gloc.of |.list| 3 "../stdlib/core/chkarg.scm" . 13317)
   (push.const _ n who arg expect test)
   (push.gloc.of |.fn8.1`8|)
   (push.gloc.of |.fn3.1`3|)
   (push.subr.gloc.of |.list| 3 "../stdlib/core/chkarg.scm" . 13317)
   (push.const _ n who arg expect test)
   (push.gloc.of |.fn13.1`13|)
   (push.gloc.of |.fn2.1`2|)
   (push.subr.gloc.of |.list| 3 "../stdlib/core/chkarg.scm" . 13317)
   (push.const . _)
   (push.const . #f)
   (push.close
     (1 0)
     (push.const . check-argument)
     (push.const . "expected 4 or 5 clauses (<position> who arg expect test)")
     (push.iloc.1 . 0)
     (apply.gloc.of |.syntax-violation| "../stdlib/core/chkarg.scm" . 29708))
   (push.subr.gloc.of |.list| 3 "../stdlib/core/chkarg.scm" . 14343)
   (apply.gloc.of |.syntax-dispatch| "../stdlib/core/chkarg.scm" . 13317))
 (set.gloc.of |.fn7.1`7|)
 (close
   (1 0)
   (call
     (call
       (push.iloc.0 . 0)
       (push.const . test)
       (push.const (test . 0))
       (push.const . test)
       (push.const)
       (apply.gloc.of |.syntax-transcribe| "../stdlib/core/chkarg.scm" . 23569))
     (push)
     (apply.gloc.of |.syntax->datum| "../stdlib/core/chkarg.scm" . 23569))
   (ret.pair? "../stdlib/core/chkarg.scm" . 23562))
 (set.gloc.of |.fn8.1`8|)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (call
     (call
       (push.iloc.0 . 0)
       (push.const . k)
       (push.const)
       (push.const . k)
       (push.const)
       (apply.gloc.of |.syntax-transcribe| "../stdlib/core/chkarg.scm" . 20509))
     (push)
     (push.const . "expected ~a, but got ~a")
     (call
       (call
         (push.iloc.0 . 0)
         (push.const . expect)
         (push.const (expect . 0))
         (push.const . expect)
         (push.const)
         (apply.gloc.of |.syntax-transcribe| "../stdlib/core/chkarg.scm" . 20562))
       (push)
       (apply.gloc.of |.syntax->datum| "../stdlib/core/chkarg.scm" . 20562))
     (push)
     (push.const . "~s")
     (push.subr.gloc.of |.format| 3 "../stdlib/core/chkarg.scm" . 20528)
     (apply.gloc.of |.datum->syntax| "../stdlib/core/chkarg.scm" . 20509))
   (push)
   (push.subr.gloc.of |.list| 1 "../stdlib/core/chkarg.scm" . 20509)
   (push.const)
   (push.const msg)
   (push.const . #f)
   (push.gloc.of |.fn12.1`12|)
   (push.subr.gloc.of |.list| 3 "../stdlib/core/chkarg.scm" . 20490)
   (push.const . _)
   (push.const . #f)
   (push.gloc.of |.fn10.1`10|)
   (push.subr.gloc.of |.list| 3 "../stdlib/core/chkarg.scm" . 20509)
   (apply.gloc.of |.syntax-dispatch| "../stdlib/core/chkarg.scm" . 20490))
 (set.gloc.of |.fn9.1`9|)
 (close
   (1 0)
   (push.const . with-syntax)
   (push.const . "value does not match to pattern")
   (push.const
     (msg
       (datum->syntax
         (syntax k)
         (format "expected ~a, but got ~a" (syntax->datum (syntax expect)) "~s"))))
   (apply.gloc.of |.syntax-violation| "../stdlib/core/chkarg.scm" . 20509))
 (set.gloc.of |.fn10.1`10|)
 (close
   (1 0)
   (call
     (call
       (push.iloc.0 . 0)
       (push.const . e1)
       (push.const (e1 . 0))
       (push.const . e1)
       (push.const)
       (apply.gloc.of |.syntax-transcribe| "../stdlib/core/chkarg.scm" . 16403))
     (push)
     (apply.gloc.of |.syntax->datum| "../stdlib/core/chkarg.scm" . 16403))
   (push)
   (ret.subr.gloc.of |.symbol?| "../stdlib/core/chkarg.scm" . 16426))
 (set.gloc.of |.fn11.1`11|)
 (close
   (1 0)
   (call
     (call
       (push.iloc.0 . 0)
       (push.const . test)
       (push.const (test . 0))
       (push.const . test)
       (push.const)
       (apply.gloc.of |.syntax-transcribe| "../stdlib/core/chkarg.scm" . 27667))
     (push)
     (apply.gloc.of |.syntax->datum| "../stdlib/core/chkarg.scm" . 27667))
   (push)
   (ret.subr.gloc.of |.symbol?| "../stdlib/core/chkarg.scm" . 27658))
 (set.gloc.of |.fn13.1`13|)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (push.const check-argument 0 e1 . e2)
   (push.const (e2 . 0) (e1 . 0))
   (push.const . #f)
   (push.const)
   (apply.gloc.of |.syntax-transcribe| "../stdlib/core/chkarg.scm" . 17418))
 (set.gloc.of |.fn4.1`4|)
 (call
   (push.const core syntax-case)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/chkarg.scm" . 6145))
 (call
   (push.const core primitives)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/chkarg.scm" . 6145))
 (call
   (push.const . syntax)
   (push.const . |core.chkarg'check-argument|)
   (call
     (push.gloc.of |.fn7.1`7|)
     (apply.gloc.of |.transformer-thunk| "../stdlib/core/chkarg.scm" . 6145))
   (push)
   (push.const
     (syntax->datum import . |.syntax->datum|)
     (quote import . |.quote|)
     (symbol? import . |.symbol?|)
     (if import . |.if|)
     (datum->syntax import . |.datum->syntax|)
     (format import . |.format|)
     (check-argument import . |core.chkarg'check-argument|)
     (syntax import . |.syntax|)
     (syntax-violation import . |.syntax-violation|)
     (_ import . |._|)
     (define-syntax import . |.define-syntax|)
     (or import . |.or|)
     (let import . |.let|)
     (set! import . |.set!|)
     (letrec* import . |.letrec*|)
     (pair? import . |.pair?|)
     (define import . |.define|)
     (begin import . |.begin|)
     (syntax-case import . |.syntax-case|)
     (and import . |.and|)
     (with-syntax import . |core.syntax-case'with-syntax|)
     (assertion-violation import . |.assertion-violation|)
     (lambda import . |.lambda|))
   (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/chkarg.scm" . 6145))
 (push.const . core.chkarg)
 (push.const . #f)
 (push.const (check-argument import . |core.chkarg'check-argument|))
 (apply.gloc.of |.intern-scheme-library| "../stdlib/core/chkarg.scm" . 6145))

((close
   (1 0 . loop)
   (iloc.0 . 0)
   (if.not.pair?.ret.const . #f)
   (car.iloc (0 . 0) "../stdlib/core/lists.scm" . 292906)
   (if.not.symbol?.ret.const . #t)
   (push.car.iloc (0 . 0) "../stdlib/core/lists.scm" . 293922)
   (push.cdr.iloc (0 . 0) "../stdlib/core/lists.scm" . 293932)
   (subr.gloc.of |.memq| 2 "../stdlib/core/lists.scm" . 293916)
   (if.true.ret)
   (touch.gloc.of |loop`198|)
   (push.cdr.iloc (0 . 0) "../stdlib/core/lists.scm" . 294946)
   (apply.gloc.of |loop`198| "../stdlib/core/lists.scm" . 294940))
 (set.gloc.of |loop`198|)
 (close
   (1 0 . loop)
   (iloc.0 . 0)
   (if.null?.ret.const)
   (push.iloc.0 . 0)
   (subr.gloc.of |.cdar| 1 "../stdlib/core/lists.scm" . 30743)
   (if.null?
     (touch.gloc.of |loop`5|)
     (push.cdr.iloc (0 . 0) "../stdlib/core/lists.scm" . 30761)
     (apply.gloc.of |loop`5| "../stdlib/core/lists.scm" . 30755))
   (push.iloc.0 . 0)
   (push.subr.gloc.of |.cdar| 1 "../stdlib/core/lists.scm" . 31771)
   (call
     (touch.gloc.of |loop`5|)
     (push.cdr.iloc (0 . 0) "../stdlib/core/lists.scm" . 31788)
     (apply.gloc.of |loop`5| "../stdlib/core/lists.scm" . 31782))
   (ret.cons "../stdlib/core/lists.scm" . 31765))
 (set.gloc.of |loop`5|)
 (close
   (2 0 . loop)
   (iloc.0 . 0)
   (if.null? (push.iloc.0 . 1) (ret.subr.gloc.of |.reverse| "../stdlib/core/lists.scm" . 301069))
   (push.car.iloc (0 . 0) "../stdlib/core/lists.scm" . 302103)
   (push.iloc.0 . 1)
   (subr.gloc.of |.memq| 2 "../stdlib/core/lists.scm" . 302097)
   (if.true
     (touch.gloc.of |loop`206|)
     (push.cdr.iloc (0 . 0) "../stdlib/core/lists.scm" . 303127)
     (push.iloc.0 . 1)
     (apply.gloc.of |loop`206| "../stdlib/core/lists.scm" . 303121))
   (touch.gloc.of |loop`206|)
   (push.cdr.iloc (0 . 0) "../stdlib/core/lists.scm" . 304151)
   (push.car.iloc (0 . 0) "../stdlib/core/lists.scm" . 304167)
   (iloc.0 . 1)
   (push.cons)
   (apply.gloc.of |loop`206| "../stdlib/core/lists.scm" . 304145))
 (set.gloc.of |loop`206|)
 (call
   (push.const core optargs)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/lists.scm" . 6145))
 (call
   (push.const core primitives)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/lists.scm" . 6145))
 (close
   (1 0 . |core.lists'collect-cdr|)
   (touch.gloc.of |loop`5|)
   (push.iloc.0 . 0)
   (apply.gloc.of |loop`5| "../stdlib/core/lists.scm" . 28679))
 (set.gloc.of |core.lists'collect-cdr|)
 (close
   (2 0 . |core.lists'find|)
   (iloc.0 . 1)
   (if.null?.ret.const . #f)
   (iloc.0 . 1)
   (if.pair?
     (extend.enclose+
       (2 0 . loop)
       (call (push.iloc.0 . 0) (apply.iloc (2 . 0) "../stdlib/core/lists.scm" . 38935))
       (if.true (ret.iloc 0 . 0))
       (iloc.0 . 1)
       (if.null?.ret.const . #f)
       (iloc.0 . 1)
       (if.pair?
         (push.car.iloc (0 . 1) "../stdlib/core/lists.scm" . 41002)
         (push.cdr.iloc (0 . 1) "../stdlib/core/lists.scm" . 41013)
         (apply.iloc+ (1 . 0) "../stdlib/core/lists.scm" . 40996))
       (push.const . find)
       (push.const . "traversal reached to non-pair element ~s")
       (push.iloc.0 . 1)
       (push.subr.gloc.of |.format| 2 "../stdlib/core/lists.scm" . 43058)
       (push.iloc 2 . 0)
       (push.iloc 2 . 1)
       (push.subr.gloc.of |.list| 2 "../stdlib/core/lists.scm" . 43115)
       (apply.gloc.of |.assertion-violation| "../stdlib/core/lists.scm" . 43031))
     (push.car.iloc (1 . 1) "../stdlib/core/lists.scm" . 37919)
     (push.cdr.iloc (1 . 1) "../stdlib/core/lists.scm" . 37936)
     (apply.iloc+ (0 . 0) "../stdlib/core/lists.scm" . 37902))
   (push.const . find)
   (push.const . "expected chain of pairs, but got ~r, as argument 2")
   (push.iloc.0 . 1)
   (push.subr.gloc.of |.format| 2 "../stdlib/core/lists.scm" . 45097)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.subr.gloc.of |.list| 2 "../stdlib/core/lists.scm" . 45163)
   (apply.gloc.of |.assertion-violation| "../stdlib/core/lists.scm" . 45070))
 (set.gloc.of |core.lists'find|)
 (close
   (2 0 . |core.lists'for-all-n|)
   (push.iloc.0 . 1)
   (push.subr.gloc.of |.length| 1 "../stdlib/core/lists.scm" . 49171)
   (extend . 1)
   (extend.enclose+
     (1 0 . collect-car)
     (extend.enclose+
       (1 0 . loop)
       (iloc.0 . 0)
       (if.null?.ret.const)
       (car.iloc (0 . 0) "../stdlib/core/lists.scm" . 55325)
       (if.pair?
         (push.iloc.0 . 0)
         (push.subr.gloc.of |.caar| 1 "../stdlib/core/lists.scm" . 56348)
         (call
           (push.cdr.iloc (0 . 0) "../stdlib/core/lists.scm" . 56365)
           (apply.iloc+ (1 . 0) "../stdlib/core/lists.scm" . 56359))
         (ret.cons "../stdlib/core/lists.scm" . 56342))
       (push.const . for-all)
       (push.const . "traversal reached to non-pair element ~s")
       (push.car.iloc (0 . 0) "../stdlib/core/lists.scm" . 58471)
       (push.subr.gloc.of |.format| 2 "../stdlib/core/lists.scm" . 58420)
       (push.iloc 5 . 1)
       (apply.gloc.of |.assertion-violation| "../stdlib/core/lists.scm" . 58390))
     (push.iloc.1 . 0)
     (apply.iloc+ (0 . 0) "../stdlib/core/lists.scm" . 53261))
   (extend.enclose+
     (2 0 . loop)
     (push.iloc.0 . 0)
     (subr.gloc.of |.length| 1 "../stdlib/core/lists.scm" . 61458)
     (=.iloc (3 . 0) "../stdlib/core/lists.scm" . 61455)
     (if.false.call
       (push.const . for-all)
       (push.const . "expected same length chains of pairs")
       (push.iloc 4 . 1)
       (apply.gloc.of |.assertion-violation| "../stdlib/core/lists.scm" . 62479))
     (iloc.0 . 1)
     (if.null?
       (push.iloc 4 . 0)
       (push.iloc.0 . 0)
       (apply.gloc.of |.apply| "../stdlib/core/lists.scm" . 64527))
     (call
       (push.iloc 4 . 0)
       (push.iloc.0 . 0)
       (apply.gloc.of |.apply| "../stdlib/core/lists.scm" . 65556))
     (if.false.ret)
     (call (push.iloc.0 . 1) (apply.iloc+ (2 . 0) "../stdlib/core/lists.scm" . 66586))
     (push)
     (call
       (push.iloc.0 . 1)
       (apply.gloc.of |core.lists'collect-cdr| "../stdlib/core/lists.scm" . 66605))
     (push)
     (apply.iloc+ (1 . 0) "../stdlib/core/lists.scm" . 66580))
   (call (push.iloc 3 . 1) (apply.iloc+ (1 . 0) "../stdlib/core/lists.scm" . 60442))
   (push)
   (call
     (push.iloc 3 . 1)
     (apply.gloc.of |core.lists'collect-cdr| "../stdlib/core/lists.scm" . 60477))
   (push)
   (apply.iloc+ (0 . 0) "../stdlib/core/lists.scm" . 60425))
 (set.gloc.of |core.lists'for-all-n|)
 (close
   (2 0 . |core.lists'exists-n|)
   (push.iloc.0 . 1)
   (push.subr.gloc.of |.length| 1 "../stdlib/core/lists.scm" . 70675)
   (extend . 1)
   (extend.enclose+
     (1 0 . collect-car)
     (extend.enclose+
       (1 0 . loop)
       (iloc.0 . 0)
       (if.null?.ret.const)
       (car.iloc (0 . 0) "../stdlib/core/lists.scm" . 76829)
       (if.pair?
         (push.iloc.0 . 0)
         (push.subr.gloc.of |.caar| 1 "../stdlib/core/lists.scm" . 77852)
         (call
           (push.cdr.iloc (0 . 0) "../stdlib/core/lists.scm" . 77869)
           (apply.iloc+ (1 . 0) "../stdlib/core/lists.scm" . 77863))
         (ret.cons "../stdlib/core/lists.scm" . 77846))
       (push.const . exists)
       (push.const . "traversal reached to non-pair element ~s")
       (push.car.iloc (0 . 0) "../stdlib/core/lists.scm" . 79974)
       (push.subr.gloc.of |.format| 2 "../stdlib/core/lists.scm" . 79923)
       (push.iloc 5 . 1)
       (apply.gloc.of |.assertion-violation| "../stdlib/core/lists.scm" . 79894))
     (push.iloc.1 . 0)
     (apply.iloc+ (0 . 0) "../stdlib/core/lists.scm" . 74765))
   (extend.enclose+
     (2 0 . loop)
     (push.iloc.0 . 0)
     (subr.gloc.of |.length| 1 "../stdlib/core/lists.scm" . 82962)
     (=.iloc (3 . 0) "../stdlib/core/lists.scm" . 82959)
     (if.false.call
       (push.const . exists)
       (push.const . "expected same length chains of pairs")
       (push.iloc 4 . 1)
       (apply.gloc.of |.assertion-violation| "../stdlib/core/lists.scm" . 83983))
     (iloc.0 . 1)
     (if.null?
       (push.iloc 4 . 0)
       (push.iloc.0 . 0)
       (apply.gloc.of |.apply| "../stdlib/core/lists.scm" . 86031))
     (call
       (push.iloc 4 . 0)
       (push.iloc.0 . 0)
       (apply.gloc.of |.apply| "../stdlib/core/lists.scm" . 87059))
     (if.true.ret)
     (call (push.iloc.0 . 1) (apply.iloc+ (2 . 0) "../stdlib/core/lists.scm" . 88089))
     (push)
     (call
       (push.iloc.0 . 1)
       (apply.gloc.of |core.lists'collect-cdr| "../stdlib/core/lists.scm" . 88108))
     (push)
     (apply.iloc+ (1 . 0) "../stdlib/core/lists.scm" . 88083))
   (call (push.iloc 3 . 1) (apply.iloc+ (1 . 0) "../stdlib/core/lists.scm" . 81946))
   (push)
   (call
     (push.iloc 3 . 1)
     (apply.gloc.of |core.lists'collect-cdr| "../stdlib/core/lists.scm" . 81981))
   (push)
   (apply.iloc+ (0 . 0) "../stdlib/core/lists.scm" . 81929))
 (set.gloc.of |core.lists'exists-n|)
 (close
   (2 0 . |core.lists'for-all-n-quick|)
   (iloc.0 . 1)
   (if.null?.ret.const . #t)
   (extend.enclose+
     (2 0 . loop)
     (iloc.0 . 1)
     (if.null?
       (push.iloc 2 . 0)
       (push.iloc.0 . 0)
       (apply.gloc.of |.apply| "../stdlib/core/lists.scm" . 95249))
     (call
       (push.iloc 2 . 0)
       (push.iloc.0 . 0)
       (apply.gloc.of |.apply| "../stdlib/core/lists.scm" . 96278))
     (if.false.ret)
     (push.car.iloc (0 . 1) "../stdlib/core/lists.scm" . 97308)
     (push.cdr.iloc (0 . 1) "../stdlib/core/lists.scm" . 97319)
     (apply.iloc+ (1 . 0) "../stdlib/core/lists.scm" . 97302))
   (push.car.iloc (1 . 1) "../stdlib/core/lists.scm" . 93212)
   (push.cdr.iloc (1 . 1) "../stdlib/core/lists.scm" . 93229)
   (apply.iloc+ (0 . 0) "../stdlib/core/lists.scm" . 93195))
 (set.gloc.of |core.lists'for-all-n-quick|)
 (close
   (2 0 . |core.lists'exists-n-quick|)
   (iloc.0 . 1)
   (if.not.pair?.ret.const . #f)
   (extend.enclose+
     (2 0 . loop)
     (iloc.0 . 1)
     (if.null?
       (push.iloc 2 . 0)
       (push.iloc.0 . 0)
       (apply.gloc.of |.apply| "../stdlib/core/lists.scm" . 104466))
     (call
       (push.iloc 2 . 0)
       (push.iloc.0 . 0)
       (apply.gloc.of |.apply| "../stdlib/core/lists.scm" . 105494))
     (if.true.ret)
     (push.car.iloc (0 . 1) "../stdlib/core/lists.scm" . 106524)
     (push.cdr.iloc (0 . 1) "../stdlib/core/lists.scm" . 106535)
     (apply.iloc+ (1 . 0) "../stdlib/core/lists.scm" . 106518))
   (push.car.iloc (1 . 1) "../stdlib/core/lists.scm" . 102429)
   (push.cdr.iloc (1 . 1) "../stdlib/core/lists.scm" . 102446)
   (apply.iloc+ (0 . 0) "../stdlib/core/lists.scm" . 102412))
 (set.gloc.of |core.lists'exists-n-quick|)
 (close
   (2 0 . |core.lists'for-all-1|)
   (iloc.0 . 1)
   (if.null?.ret.const . #t)
   (iloc.0 . 1)
   (if.pair?
     (extend.enclose+
       (2 0 . loop)
       (iloc.0 . 1)
       (if.null? (push.iloc.0 . 0) (apply.iloc (2 . 0) "../stdlib/core/lists.scm" . 113700))
       (iloc.0 . 1)
       (if.pair?
         (call (push.iloc.0 . 0) (apply.iloc (2 . 0) "../stdlib/core/lists.scm" . 115740))
         (if.false.ret)
         (push.car.iloc (0 . 1) "../stdlib/core/lists.scm" . 116770)
         (push.cdr.iloc (0 . 1) "../stdlib/core/lists.scm" . 116781)
         (apply.iloc+ (1 . 0) "../stdlib/core/lists.scm" . 116764))
       (push.const . for-all)
       (push.const . "traversal reached to non-pair element ~s")
       (push.iloc.0 . 1)
       (push.subr.gloc.of |.format| 2 "../stdlib/core/lists.scm" . 118837)
       (push.iloc 2 . 0)
       (push.iloc 2 . 1)
       (push.subr.gloc.of |.list| 2 "../stdlib/core/lists.scm" . 118894)
       (apply.gloc.of |.assertion-violation| "../stdlib/core/lists.scm" . 118807))
     (push.car.iloc (1 . 1) "../stdlib/core/lists.scm" . 112671)
     (push.cdr.iloc (1 . 1) "../stdlib/core/lists.scm" . 112688)
     (apply.iloc+ (0 . 0) "../stdlib/core/lists.scm" . 112654))
   (push.const . for-all)
   (push.const . "expected chain of pairs, but got ~r, as argument 2")
   (push.iloc.0 . 1)
   (push.subr.gloc.of |.format| 2 "../stdlib/core/lists.scm" . 120876)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.subr.gloc.of |.list| 2 "../stdlib/core/lists.scm" . 120942)
   (apply.gloc.of |.assertion-violation| "../stdlib/core/lists.scm" . 120846))
 (set.gloc.of |core.lists'for-all-1|)
 (close
   (2 0 . |core.lists'exists-1|)
   (iloc.0 . 1)
   (if.null?.ret.const . #f)
   (iloc.0 . 1)
   (if.pair?
     (extend.enclose+
       (2 0 . loop)
       (iloc.0 . 1)
       (if.null? (push.iloc.0 . 0) (apply.iloc (2 . 0) "../stdlib/core/lists.scm" . 128036))
       (call (push.iloc.0 . 0) (apply.iloc (2 . 0) "../stdlib/core/lists.scm" . 129047))
       (if.true.ret)
       (iloc.0 . 1)
       (if.pair?
         (push.car.iloc (0 . 1) "../stdlib/core/lists.scm" . 130090)
         (push.cdr.iloc (0 . 1) "../stdlib/core/lists.scm" . 130101)
         (apply.iloc+ (1 . 0) "../stdlib/core/lists.scm" . 130084))
       (push.const . exists)
       (push.const . "traversal reached to non-pair element ~s")
       (push.iloc.0 . 1)
       (push.subr.gloc.of |.format| 2 "../stdlib/core/lists.scm" . 132148)
       (push.iloc 2 . 0)
       (push.iloc 2 . 1)
       (push.subr.gloc.of |.list| 2 "../stdlib/core/lists.scm" . 132205)
       (apply.gloc.of |.assertion-violation| "../stdlib/core/lists.scm" . 132119))
     (push.car.iloc (1 . 1) "../stdlib/core/lists.scm" . 127007)
     (push.cdr.iloc (1 . 1) "../stdlib/core/lists.scm" . 127024)
     (apply.iloc+ (0 . 0) "../stdlib/core/lists.scm" . 126990))
   (push.const . exists)
   (push.const . "expected chain of pairs, but got ~r, as argument 2")
   (push.iloc.0 . 1)
   (push.subr.gloc.of |.format| 2 "../stdlib/core/lists.scm" . 134187)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.subr.gloc.of |.list| 2 "../stdlib/core/lists.scm" . 134253)
   (apply.gloc.of |.assertion-violation| "../stdlib/core/lists.scm" . 134158))
 (set.gloc.of |core.lists'exists-1|)
 (close
   (2 1 . |core.lists'for-all|)
   (iloc.0 . 2)
   (if.null?
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (apply.gloc.of |core.lists'for-all-1| "../stdlib/core/lists.scm" . 139278))
   (call
     (push.gloc.of |.list-transpose+|)
     (push.iloc.0 . 1)
     (push.iloc.0 . 2)
     (apply.gloc.of |.apply| "../stdlib/core/lists.scm" . 140302))
   (push)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (push.iloc.1 . 0)
     (push.iloc.0 . 0)
     (apply.gloc.of |core.lists'for-all-n-quick| "../stdlib/core/lists.scm" . 141343))
   (push.iloc.1 . 0)
   (push.iloc.1 . 1)
   (iloc.1 . 2)
   (push.cons)
   (apply.gloc.of |core.lists'for-all-n| "../stdlib/core/lists.scm" . 143374))
 (set.gloc.of |core.lists'for-all|)
 (close
   (2 1 . |core.lists'exists|)
   (iloc.0 . 2)
   (if.null?
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (apply.gloc.of |core.lists'exists-1| "../stdlib/core/lists.scm" . 148494))
   (call
     (push.gloc.of |.list-transpose+|)
     (push.iloc.0 . 1)
     (push.iloc.0 . 2)
     (apply.gloc.of |.apply| "../stdlib/core/lists.scm" . 149518))
   (push)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (push.iloc.1 . 0)
     (push.iloc.0 . 0)
     (apply.gloc.of |core.lists'exists-n-quick| "../stdlib/core/lists.scm" . 150559))
   (push.iloc.1 . 0)
   (push.iloc.1 . 1)
   (iloc.1 . 2)
   (push.cons)
   (apply.gloc.of |core.lists'exists-n| "../stdlib/core/lists.scm" . 152590))
 (set.gloc.of |core.lists'exists|)
 (close
   (2 0 . |core.lists'filter|)
   (extend.enclose+
     (1 0 . loop)
     (iloc.0 . 0)
     (if.null?.ret.const)
     (call
       (push.car.iloc (0 . 0) "../stdlib/core/lists.scm" . 158742)
       (apply.iloc (2 . 0) "../stdlib/core/lists.scm" . 158736))
     (if.true
       (push.car.iloc (0 . 0) "../stdlib/core/lists.scm" . 158759)
       (call
         (push.cdr.iloc (0 . 0) "../stdlib/core/lists.scm" . 158775)
         (apply.iloc+ (1 . 0) "../stdlib/core/lists.scm" . 158769))
       (ret.cons "../stdlib/core/lists.scm" . 158753))
     (push.cdr.iloc (0 . 0) "../stdlib/core/lists.scm" . 159771)
     (apply.iloc+ (1 . 0) "../stdlib/core/lists.scm" . 159765))
   (push.iloc.1 . 1)
   (apply.iloc+ (0 . 0) "../stdlib/core/lists.scm" . 156679))
 (set.gloc.of |core.lists'filter|)
 (close
   (2 0 . |core.lists'partition|)
   (extend.enclose+
     (3 0 . loop)
     (iloc.0 . 0)
     (if.null?
       (push.iloc.0 . 1)
       (push.subr.gloc.of |.reverse| 1 "../stdlib/core/lists.scm" . 164900)
       (push.iloc.0 . 2)
       (push.subr.gloc.of |.reverse| 1 "../stdlib/core/lists.scm" . 164915)
       (ret.subr.gloc.of |.values| "../stdlib/core/lists.scm" . 164892))
     (call
       (push.car.iloc (0 . 0) "../stdlib/core/lists.scm" . 165910)
       (apply.iloc (2 . 0) "../stdlib/core/lists.scm" . 165904))
     (if.true
       (push.cdr.iloc (0 . 0) "../stdlib/core/lists.scm" . 165927)
       (push.car.iloc (0 . 0) "../stdlib/core/lists.scm" . 165943)
       (iloc.0 . 1)
       (push.cons)
       (push.iloc.0 . 2)
       (apply.iloc+ (1 . 0) "../stdlib/core/lists.scm" . 165921))
     (push.cdr.iloc (0 . 0) "../stdlib/core/lists.scm" . 166939)
     (push.iloc.0 . 1)
     (push.car.iloc (0 . 0) "../stdlib/core/lists.scm" . 166960)
     (iloc.0 . 2)
     (push.cons)
     (apply.iloc+ (1 . 0) "../stdlib/core/lists.scm" . 166933))
   (push.iloc.1 . 1)
   (push.const)
   (push.const)
   (apply.iloc+ (0 . 0) "../stdlib/core/lists.scm" . 163847))
 (set.gloc.of |core.lists'partition|)
 (close
   (3 0 . |core.lists'fold-left-1|)
   (iloc.0 . 2)
   (if.null? (ret.iloc 0 . 1))
   (push.iloc.0 . 0)
   (call
     (push.iloc.0 . 1)
     (push.car.iloc (0 . 2) "../stdlib/core/lists.scm" . 173099)
     (apply.iloc (0 . 0) "../stdlib/core/lists.scm" . 173088))
   (push)
   (push.cdr.iloc (0 . 2) "../stdlib/core/lists.scm" . 173110)
   (apply.gloc.of |core.lists'fold-left-1| "../stdlib/core/lists.scm" . 173070))
 (set.gloc.of |core.lists'fold-left-1|)
 (close
   (3 0 . |core.lists'fold-left-n|)
   (iloc.0 . 2)
   (if.null? (ret.iloc 0 . 1))
   (push.iloc.0 . 0)
   (call
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.subr.gloc.of |.list| 1 "../stdlib/core/lists.scm" . 179252)
     (push.car.iloc (0 . 2) "../stdlib/core/lists.scm" . 179264)
     (push.subr.gloc.of |.append| 2 "../stdlib/core/lists.scm" . 179244)
     (apply.gloc.of |.apply| "../stdlib/core/lists.scm" . 179232))
   (push)
   (push.cdr.iloc (0 . 2) "../stdlib/core/lists.scm" . 179276)
   (apply.gloc.of |core.lists'fold-left-n| "../stdlib/core/lists.scm" . 179214))
 (set.gloc.of |core.lists'fold-left-n|)
 (close
   (3 1 . |core.lists'fold-left|)
   (iloc.0 . 3)
   (if.null?
     (push.iloc.0 . 2)
     (subr.gloc.of |.list?| 1 "../stdlib/core/lists.scm" . 184335)
     (if.true
       (push.iloc.0 . 0)
       (push.iloc.0 . 1)
       (push.iloc.0 . 2)
       (apply.gloc.of |core.lists'fold-left-1| "../stdlib/core/lists.scm" . 185359))
     (push.const . fold-left)
     (push.const . "expected proper list, but got ~r, as argument 3")
     (push.iloc.0 . 2)
     (push.subr.gloc.of |.format| 2 "../stdlib/core/lists.scm" . 186415)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.iloc.0 . 2)
     (push.iloc.0 . 3)
     (push.subr.gloc.of |.cons*| 4 "../stdlib/core/lists.scm" . 186479)
     (apply.gloc.of |.assertion-violation| "../stdlib/core/lists.scm" . 186383))
   (call
     (push.gloc.of |.list-transpose+|)
     (push.iloc.0 . 2)
     (push.iloc.0 . 3)
     (apply.gloc.of |.apply| "../stdlib/core/lists.scm" . 187410))
   (push)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (push.iloc.1 . 0)
     (push.iloc.1 . 1)
     (push.iloc.0 . 0)
     (apply.gloc.of |core.lists'fold-left-n| "../stdlib/core/lists.scm" . 188451))
   (push.const . fold-left)
   (push.const . "expected same length proper lists")
   (push.iloc.1 . 0)
   (push.iloc.1 . 1)
   (push.iloc.1 . 2)
   (push.iloc.1 . 3)
   (push.subr.gloc.of |.cons*| 4 "../stdlib/core/lists.scm" . 190550)
   (apply.gloc.of |.assertion-violation| "../stdlib/core/lists.scm" . 190482))
 (set.gloc.of |core.lists'fold-left|)
 (close
   (3 0 . |core.lists'fold-right-1|)
   (iloc.0 . 2)
   (if.null? (ret.iloc 0 . 1))
   (push.car.iloc (0 . 2) "../stdlib/core/lists.scm" . 196628)
   (call
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.cdr.iloc (0 . 2) "../stdlib/core/lists.scm" . 196662)
     (apply.gloc.of |core.lists'fold-right-1| "../stdlib/core/lists.scm" . 196638))
   (push)
   (apply.iloc (0 . 0) "../stdlib/core/lists.scm" . 196622))
 (set.gloc.of |core.lists'fold-right-1|)
 (close
   (3 0 . |core.lists'fold-right-n|)
   (iloc.0 . 2)
   (if.null? (ret.iloc 0 . 1))
   (push.iloc.0 . 0)
   (push.car.iloc (0 . 2) "../stdlib/core/lists.scm" . 202786)
   (call
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.cdr.iloc (0 . 2) "../stdlib/core/lists.scm" . 202826)
     (apply.gloc.of |core.lists'fold-right-n| "../stdlib/core/lists.scm" . 202802))
   (push)
   (push.subr.gloc.of |.list| 1 "../stdlib/core/lists.scm" . 202796)
   (push.subr.gloc.of |.append| 2 "../stdlib/core/lists.scm" . 202778)
   (apply.gloc.of |.apply| "../stdlib/core/lists.scm" . 202766))
 (set.gloc.of |core.lists'fold-right-n|)
 (close
   (3 1 . |core.lists'fold-right|)
   (iloc.0 . 3)
   (if.null?
     (push.iloc.0 . 2)
     (subr.gloc.of |.list?| 1 "../stdlib/core/lists.scm" . 207887)
     (if.true
       (push.iloc.0 . 0)
       (push.iloc.0 . 1)
       (push.iloc.0 . 2)
       (apply.gloc.of |core.lists'fold-right-1| "../stdlib/core/lists.scm" . 208911))
     (push.const . fold-right)
     (push.const . "expected proper list, but got ~r, as argument 3")
     (push.iloc.0 . 2)
     (push.subr.gloc.of |.format| 2 "../stdlib/core/lists.scm" . 209968)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.iloc.0 . 2)
     (push.iloc.0 . 3)
     (push.subr.gloc.of |.cons*| 4 "../stdlib/core/lists.scm" . 210032)
     (apply.gloc.of |.assertion-violation| "../stdlib/core/lists.scm" . 209935))
   (call
     (push.gloc.of |.list-transpose+|)
     (push.iloc.0 . 2)
     (push.iloc.0 . 3)
     (apply.gloc.of |.apply| "../stdlib/core/lists.scm" . 210962))
   (push)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (push.iloc.1 . 0)
     (push.iloc.1 . 1)
     (push.iloc.0 . 0)
     (apply.gloc.of |core.lists'fold-right-n| "../stdlib/core/lists.scm" . 212003))
   (push.const . fold-right)
   (push.const . "expected same length proper lists")
   (push.iloc.1 . 0)
   (push.iloc.1 . 1)
   (push.iloc.1 . 2)
   (push.iloc.1 . 3)
   (push.subr.gloc.of |.cons*| 4 "../stdlib/core/lists.scm" . 214103)
   (apply.gloc.of |.assertion-violation| "../stdlib/core/lists.scm" . 214034))
 (set.gloc.of |core.lists'fold-right|)
 (close
   (2 0 . |core.lists'remp|)
   (extend.enclose+
     (1 0 . loop)
     (iloc.0 . 0)
     (if.null?.ret.const)
     (call
       (push.car.iloc (0 . 0) "../stdlib/core/lists.scm" . 220182)
       (apply.iloc (2 . 0) "../stdlib/core/lists.scm" . 220176))
     (if.true
       (push.cdr.iloc (0 . 0) "../stdlib/core/lists.scm" . 221206)
       (apply.iloc+ (1 . 0) "../stdlib/core/lists.scm" . 221200))
     (push.car.iloc (0 . 0) "../stdlib/core/lists.scm" . 223254)
     (call
       (push.cdr.iloc (0 . 0) "../stdlib/core/lists.scm" . 224284)
       (apply.iloc+ (1 . 0) "../stdlib/core/lists.scm" . 224278))
     (ret.cons "../stdlib/core/lists.scm" . 223248))
   (push.iloc.1 . 1)
   (apply.iloc+ (0 . 0) "../stdlib/core/lists.scm" . 218119))
 (set.gloc.of |core.lists'remp|)
 (close
   (2 0 . |core.lists'remove|)
   (extend.enclose+
     (1 0 . loop)
     (iloc.0 . 0)
     (if.null?.ret.const)
     (push.car.iloc (0 . 0) "../stdlib/core/lists.scm" . 230424)
     (push.iloc 2 . 0)
     (subr.gloc.of |.equal?| 2 "../stdlib/core/lists.scm" . 230416)
     (if.true
       (push.cdr.iloc (0 . 0) "../stdlib/core/lists.scm" . 231446)
       (apply.iloc+ (1 . 0) "../stdlib/core/lists.scm" . 231440))
     (push.car.iloc (0 . 0) "../stdlib/core/lists.scm" . 233494)
     (call
       (push.cdr.iloc (0 . 0) "../stdlib/core/lists.scm" . 234524)
       (apply.iloc+ (1 . 0) "../stdlib/core/lists.scm" . 234518))
     (ret.cons "../stdlib/core/lists.scm" . 233488))
   (push.iloc.1 . 1)
   (apply.iloc+ (0 . 0) "../stdlib/core/lists.scm" . 228359))
 (set.gloc.of |core.lists'remove|)
 (close
   (2 0 . |core.lists'remv|)
   (extend.enclose+
     (1 0 . loop)
     (iloc.0 . 0)
     (if.null?.ret.const)
     (push.car.iloc (0 . 0) "../stdlib/core/lists.scm" . 240662)
     (push.iloc 2 . 0)
     (subr.gloc.of |.eqv?| 2 "../stdlib/core/lists.scm" . 240656)
     (if.true
       (push.cdr.iloc (0 . 0) "../stdlib/core/lists.scm" . 241686)
       (apply.iloc+ (1 . 0) "../stdlib/core/lists.scm" . 241680))
     (push.car.iloc (0 . 0) "../stdlib/core/lists.scm" . 243734)
     (call
       (push.cdr.iloc (0 . 0) "../stdlib/core/lists.scm" . 244764)
       (apply.iloc+ (1 . 0) "../stdlib/core/lists.scm" . 244758))
     (ret.cons "../stdlib/core/lists.scm" . 243728))
   (push.iloc.1 . 1)
   (apply.iloc+ (0 . 0) "../stdlib/core/lists.scm" . 238599))
 (set.gloc.of |core.lists'remv|)
 (close
   (2 0 . |core.lists'remq|)
   (extend.enclose+
     (1 0 . loop)
     (iloc.0 . 0)
     (if.null?.ret.const)
     (push.car.iloc (0 . 0) "../stdlib/core/lists.scm" . 250901)
     (iloc 2 . 0)
     (if.eq?
       (push.cdr.iloc (0 . 0) "../stdlib/core/lists.scm" . 251926)
       (apply.iloc+ (1 . 0) "../stdlib/core/lists.scm" . 251920))
     (push.car.iloc (0 . 0) "../stdlib/core/lists.scm" . 253974)
     (call
       (push.cdr.iloc (0 . 0) "../stdlib/core/lists.scm" . 255004)
       (apply.iloc+ (1 . 0) "../stdlib/core/lists.scm" . 254998))
     (ret.cons "../stdlib/core/lists.scm" . 253968))
   (push.iloc.1 . 1)
   (apply.iloc+ (0 . 0) "../stdlib/core/lists.scm" . 248839))
 (set.gloc.of |core.lists'remq|)
 (close
   (2 0 . |core.lists'memp|)
   (iloc.0 . 1)
   (if.null?.ret.const . #f)
   (call
     (push.car.iloc (0 . 1) "../stdlib/core/lists.scm" . 261135)
     (apply.iloc (0 . 0) "../stdlib/core/lists.scm" . 261129))
   (if.true (ret.iloc 0 . 1))
   (push.iloc.0 . 0)
   (push.cdr.iloc (0 . 1) "../stdlib/core/lists.scm" . 263188)
   (apply.gloc.of |core.lists'memp| "../stdlib/core/lists.scm" . 263177))
 (set.gloc.of |core.lists'memp|)
 (close
   (2 0 . |core.lists'assp|)
   (iloc.0 . 1)
   (if.null?.ret.const . #f)
   (call
     (push.iloc.0 . 1)
     (push.subr.gloc.of |.caar| 1 "../stdlib/core/lists.scm" . 269327)
     (apply.iloc (0 . 0) "../stdlib/core/lists.scm" . 269321))
   (if.true (push.iloc.0 . 1) (ret.subr.gloc.of |.car| "../stdlib/core/lists.scm" . 269339))
   (push.iloc.0 . 0)
   (push.cdr.iloc (0 . 1) "../stdlib/core/lists.scm" . 271380)
   (apply.gloc.of |core.lists'assp| "../stdlib/core/lists.scm" . 271369))
 (set.gloc.of |core.lists'assp|)
 (close
   (1 1 . |core.lists'iota|)
   (push.close
     (2 0)
     (extend.enclose+
       (2 0 . loop)
       (<n.iloc (0 . 0) 0 "../stdlib/core/lists.scm" . 277522)
       (if.true (ret.iloc 0 . 1))
       (push.n+.iloc (0 . 0) -1 "../stdlib/core/lists.scm" . 278557)
       (push.iloc 2 . 0)
       (push.iloc.0 . 0)
       (push.iloc 2 . 1)
       (push.subr.gloc.of |.*| 2 "../stdlib/core/lists.scm" . 278580)
       (push.subr.gloc.of |.+| 2 "../stdlib/core/lists.scm" . 278571)
       (iloc.0 . 1)
       (push.cons)
       (apply.iloc+ (1 . 0) "../stdlib/core/lists.scm" . 278551))
     (push.n+.iloc (2 . 0) -1 "../stdlib/core/lists.scm" . 276503)
     (push.const)
     (apply.iloc+ (0 . 0) "../stdlib/core/lists.scm" . 276489))
   (call
     (push.iloc.0 . 1)
     (push.subr.gloc.of |.length| 1 "../stdlib/core/lists.scm" . 276489)
     (extend . 1)
     (=n.iloc (0 . 0) 2 "../stdlib/core/lists.scm" . 276489)
     (if.true (ret.iloc 1 . 1))
     (=n.iloc (0 . 0) 1 "../stdlib/core/lists.scm" . 276489)
     (if.true
       (push.iloc.1 . 1)
       (push.const . 1)
       (push.subr.gloc.of |.list| 1 "../stdlib/core/lists.scm" . 276489)
       (ret.subr.gloc.of |.append| "../stdlib/core/lists.scm" . 276489))
     (push.const . 0)
     (push.const . 1)
     (ret.subr.gloc.of |.list| "../stdlib/core/lists.scm" . 276489))
   (push)
   (apply.gloc.of |.apply| "../stdlib/core/lists.scm" . 6145))
 (set.gloc.of |core.lists'iota|)
 (close
   (1 1 . |core.lists'make-list|)
   (call
     (iloc.0 . 1)
     (if.pair? (push.iloc.0 . 1) (ret.subr.gloc.of |.car| "../stdlib/core/lists.scm" . 283657))
     (ret.const . #f))
   (push)
   (extend . 1)
   (extend.enclose+
     (2 0 . loop)
     (<=n.iloc (0 . 1) 0 "../stdlib/core/lists.scm" . 284690)
     (if.true (ret.iloc 0 . 0))
     (push.iloc 2 . 0)
     (iloc.0 . 0)
     (push.cons)
     (push.n+.iloc (0 . 1) -1 "../stdlib/core/lists.scm" . 285741)
     (apply.iloc+ (1 . 0) "../stdlib/core/lists.scm" . 285719))
   (push.const)
   (push.iloc 2 . 0)
   (apply.iloc+ (0 . 0) "../stdlib/core/lists.scm" . 283657))
 (set.gloc.of |core.lists'make-list|)
 (close
   (1 0 . |core.lists'list-of-unique-symbols?|)
   (push.iloc.0 . 0)
   (subr.gloc.of |.list?| 1 "../stdlib/core/lists.scm" . 289804)
   (if.false.ret)
   (call
     (touch.gloc.of |loop`198|)
     (push.iloc.0 . 0)
     (apply.gloc.of |loop`198| "../stdlib/core/lists.scm" . 290833))
   (push)
   (ret.subr.gloc.of |.not| "../stdlib/core/lists.scm" . 289799))
 (set.gloc.of |core.lists'list-of-unique-symbols?|)
 (close
   (1 0 . |core.lists'remove-duplicate-symbols|)
   (touch.gloc.of |loop`206|)
   (push.iloc.0 . 0)
   (push.const)
   (apply.gloc.of |loop`206| "../stdlib/core/lists.scm" . 299015))
 (set.gloc.of |core.lists'remove-duplicate-symbols|)
 (close
   (2 0 . |core.lists'break|)
   (push.const)
   (extend . 1)
   (call
     (extend.enclose
       (1 0 . loop)
       (iloc.0 . 0)
       (if.null?.ret.const)
       (call
         (push.car.iloc (0 . 0) "../stdlib/core/lists.scm" . 312351)
         (apply.iloc (3 . 0) "../stdlib/core/lists.scm" . 312345))
       (if.true (iloc.0 . 0) (set.iloc 2 . 0) (ret.const))
       (push.car.iloc (0 . 0) "../stdlib/core/lists.scm" . 315423)
       (call
         (push.cdr.iloc (0 . 0) "../stdlib/core/lists.scm" . 315439)
         (apply.iloc (1 . 0) "../stdlib/core/lists.scm" . 315433))
       (ret.cons "../stdlib/core/lists.scm" . 315417))
     (push.iloc 2 . 1)
     (apply.iloc (0 . 0) "../stdlib/core/lists.scm" . 310288))
   (push)
   (push.iloc.0 . 0)
   (ret.subr.gloc.of |.values| "../stdlib/core/lists.scm" . 308231))
 (set.gloc.of |core.lists'break|)
 (gloc.of |.list-head|)
 (set.gloc.of |core.lists'take|)
 (gloc.of |.list-tail|)
 (set.gloc.of |core.lists'drop|)
 (push.const . core.lists)
 (push.const . #f)
 (push.const
   (find import . |core.lists'find|)
   (for-all import . |core.lists'for-all|)
   (exists import . |core.lists'exists|)
   (filter import . |core.lists'filter|)
   (partition import . |core.lists'partition|)
   (fold-left import . |core.lists'fold-left|)
   (fold-right import . |core.lists'fold-right|)
   (remp import . |core.lists'remp|)
   (remove import . |core.lists'remove|)
   (remv import . |core.lists'remv|)
   (remq import . |core.lists'remq|)
   (memp import . |core.lists'memp|)
   (member import . |.member|)
   (memv import . |.memv|)
   (memq import . |.memq|)
   (assp import . |core.lists'assp|)
   (assoc import . |.assoc|)
   (assv import . |.assv|)
   (assq import . |.assq|)
   (cons* import . |.cons*|)
   (iota import . |core.lists'iota|)
   (make-list import . |core.lists'make-list|)
   (list-of-unique-symbols? import . |core.lists'list-of-unique-symbols?|)
   (remove-duplicate-symbols import . |core.lists'remove-duplicate-symbols|)
   (take import . |core.lists'take|)
   (drop import . |core.lists'drop|)
   (break import . |core.lists'break|))
 (apply.gloc.of |.intern-scheme-library| "../stdlib/core/lists.scm" . 6145))

((close
   (1 0)
   (push.iloc.0 . 0)
   (push.const
     let
     ((?datum ?expr) (?pred-lhs ?pred-rhs) ... (?mem #f) ...)
     (let* (?subexprs ...) (cond ?dispatch ... (else #f))))
   (push.const
     (?dispatch . 1)
     (?subexprs . 1)
     (?mem . 1)
     (?pred-rhs . 1)
     (?pred-lhs . 1)
     (?expr . 0)
     (?datum . 0))
   (push.const . #f)
   (push.const)
   (apply.gloc.of |.syntax-transcribe| "../stdlib/core/destructuring.scm" . 357396))
 (set.gloc.of |.fn33.1`33|)
 (close
   (1 0)
   (push.gloc.of |core.destructuring'cd---r|)
   (push.car.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 366645)
   (push.cdr.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 366653)
   (ret.subr.gloc.of |.core-hashtable-set!| "../stdlib/core/destructuring.scm" . 366617))
 (set.gloc.of |.fn12.1`12|)
 (close
   (3 0 . loop)
   (call
     (iloc.0 . 1)
     (if.null?.ret.const . #t)
     (iloc.0 . 2)
     (if.null?.ret.const . #t)
     (push.car.iloc (0 . 1) "../stdlib/core/destructuring.scm" . 228407)
     (push.car.iloc (0 . 2) "../stdlib/core/destructuring.scm" . 228416)
     (push.subr.gloc.of |.equal?| 2 "../stdlib/core/destructuring.scm" . 228399)
     (ret.subr.gloc.of |.not| "../stdlib/core/destructuring.scm" . 228394))
   (if.true (ret.iloc 0 . 0))
   (touch.gloc.of |loop`213|)
   (push.n+.iloc (0 . 0) 1 "../stdlib/core/destructuring.scm" . 229403)
   (push.cdr.iloc (0 . 1) "../stdlib/core/destructuring.scm" . 229411)
   (push.cdr.iloc (0 . 2) "../stdlib/core/destructuring.scm" . 229420)
   (apply.gloc.of |loop`213| "../stdlib/core/destructuring.scm" . 229397))
 (set.gloc.of |loop`213|)
 (close
   (1 0 . loop)
   (cdr.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 75806)
   (if.pair?
     (push.car.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 75823)
     (call
       (touch.gloc.of |loop`117|)
       (push.cdr.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 75839)
       (apply.gloc.of |loop`117| "../stdlib/core/destructuring.scm" . 75833))
     (ret.cons "../stdlib/core/destructuring.scm" . 75817))
   (ret.const))
 (set.gloc.of |loop`117|)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (push.const . 2)
   (ret.subr.gloc.of |.>=| "../stdlib/core/destructuring.scm" . 239662))
 (set.gloc.of |.fn34.1`34|)
 (close
   (2 0 . loop)
   (iloc.0 . 0)
   (if.pair?
     (call
       (push.iloc.0 . 0)
       (apply.gloc.of
         |core.destructuring'predicate-pair?|
         "../stdlib/core/destructuring.scm"
         .
         129047))
     (if.true (ret.iloc 0 . 1))
     (touch.gloc.of |loop`169|)
     (push.cdr.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 130082)
     (push.n+.iloc (0 . 1) 1 "../stdlib/core/destructuring.scm" . 130092)
     (apply.gloc.of |loop`169| "../stdlib/core/destructuring.scm" . 130076))
   (ret.iloc 0 . 1))
 (set.gloc.of |loop`169|)
 (close
   (1 0 . loop)
   (cdr.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 92190)
   (if.pair?
     (touch.gloc.of |loop`133|)
     (push.cdr.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 92207)
     (apply.gloc.of |loop`133| "../stdlib/core/destructuring.scm" . 92201))
   (ret.iloc 0 . 0))
 (set.gloc.of |loop`133|)
 (close
   (1 0 . loop)
   (iloc.0 . 0)
   (if.pair?
     (push.car.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 84009)
     (call
       (touch.gloc.of |loop`125|)
       (push.cdr.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 84025)
       (apply.gloc.of |loop`125| "../stdlib/core/destructuring.scm" . 84019))
     (ret.cons "../stdlib/core/destructuring.scm" . 84003))
   (ret.const))
 (set.gloc.of |loop`125|)
 (close
   (2 0 . loop)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (subr.gloc.of |.memq| 2 "../stdlib/core/destructuring.scm" . 39954)
   (if.true.ret)
   (iloc.0 . 1)
   (if.not.pair?.ret.const . #f)
   (touch.gloc.of |loop`101|)
   (push.car.iloc (0 . 1) "../stdlib/core/destructuring.scm" . 42013)
   (push.cdr.iloc (0 . 1) "../stdlib/core/destructuring.scm" . 42024)
   (apply.gloc.of |loop`101| "../stdlib/core/destructuring.scm" . 42007))
 (set.gloc.of |loop`101|)
 (close
   (1 0)
   (push.car.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 327732)
   (push.const . and)
   (cadr.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 327747)
   (push.cons)
   (ret.subr.gloc.of |.list| "../stdlib/core/destructuring.scm" . 327717))
 (set.gloc.of |.fn23.1`23|)
 (close
   (2 0 . loop)
   (iloc.0 . 0)
   (if.pair?
     (touch.gloc.of |loop`149|)
     (push.cdr.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 106530)
     (push.n+.iloc (0 . 1) 1 "../stdlib/core/destructuring.scm" . 106540)
     (apply.gloc.of |loop`149| "../stdlib/core/destructuring.scm" . 106524))
   (ret.iloc 0 . 1))
 (set.gloc.of |loop`149|)
 (close
   (3 0 . loop)
   (iloc.0 . 1)
   (if.null?
     (push.iloc.0 . 2)
     (push.iloc.0 . 0)
     (ret.subr.gloc.of |.append| "../stdlib/core/destructuring.scm" . 215053))
   (push.close
     (0 0)
     (push.close
       (1 0)
       (push.car.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 216132)
       (push.car.iloc (2 . 1) "../stdlib/core/destructuring.scm" . 216140)
       (ret.subr.gloc.of |.memq| "../stdlib/core/destructuring.scm" . 216126))
     (push.iloc.1 . 0)
     (apply.gloc.of |core.lists'partition| "../stdlib/core/destructuring.scm" . 216103))
   (push.close
     (2 0)
     (touch.gloc.of |loop`197|)
     (push.iloc.0 . 1)
     (push.cdr.iloc (1 . 1) "../stdlib/core/destructuring.scm" . 217114)
     (push.iloc.1 . 2)
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.append| 2 "../stdlib/core/destructuring.scm" . 217126)
     (apply.gloc.of |loop`197| "../stdlib/core/destructuring.scm" . 217103))
   (apply.gloc.of |.call-with-values| "../stdlib/core/destructuring.scm" . 212999))
 (set.gloc.of |loop`197|)
 (close
   (2 0 . loop)
   (<=n.iloc (0 . 1) 0 "../stdlib/core/destructuring.scm" . 120855)
   (if.true.ret.const)
   (cdr.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 121886)
   (if.pair?
     (push.car.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 121903)
     (call
       (touch.gloc.of |loop`161|)
       (push.cdr.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 121919)
       (push.n+.iloc (0 . 1) -1 "../stdlib/core/destructuring.scm" . 121929)
       (apply.gloc.of |loop`161| "../stdlib/core/destructuring.scm" . 121913))
     (ret.cons "../stdlib/core/destructuring.scm" . 121897))
   (ret.const))
 (set.gloc.of |loop`161|)
 (close
   (1 0)
   (push.gloc.of |.patvars|)
   (push.iloc.0 . 0)
   (push.const)
   (push.const ?_ ?expr ?clauses ...)
   (push.const . #f)
   (push.close
     (1 0)
     (call (apply.gloc.of |.generate-temporary-symbol| "../stdlib/core/destructuring.scm" . 294935))
     (push)
     (subr.gloc.of |.make-core-hashtable| 0)
     (push)
     (push.const)
     (push.subr.gloc.of |.vector| 1 "../stdlib/core/destructuring.scm" . 296981)
     (extend . 3)
     (call
       (call
         (call
           (push.close
             (1 0)
             (push.iloc 2 . 0)
             (push.iloc.0 . 0)
             (push.const)
             (push.const ?pat)
             (push.const . #f)
             (push.close
               (1 0)
               (call
                 (call
                   (push.iloc.0 . 0)
                   (push.const . ?pat)
                   (push.const (?pat . 0))
                   (push.const . ?pat)
                   (push.const)
                   (apply.gloc.of |.syntax-transcribe| "../stdlib/core/destructuring.scm" . 305194))
                 (push)
                 (apply.gloc.of |.syntax->datum| "../stdlib/core/destructuring.scm" . 305194))
               (push)
               (extend . 1)
               (push.close
                 (0 0)
                 (push.iloc 4 . 1)
                 (push.iloc 4 . 2)
                 (push.iloc.1 . 0)
                 (push.iloc 4 . 0)
                 (push.const)
                 (push.const)
                 (push.const)
                 (apply.gloc.of
                   |core.destructuring'compile-match|
                   "../stdlib/core/destructuring.scm"
                   .
                   306242))
               (push.close
                 (3 0)
                 (call
                   (push.iloc.0 . 2)
                   (apply.gloc.of
                     |core.destructuring'duplicates?|
                     "../stdlib/core/destructuring.scm"
                     .
                     307242))
                 (if.true
                   (push.const . destructuring-match)
                   (push.const . "duplicate variables")
                   (push.iloc 6 . 0)
                   (push.iloc.1 . 0)
                   (apply.gloc.of |.syntax-violation| "../stdlib/core/destructuring.scm" . 307261))
                 (iloc.0 . 0)
                 (if.true
                   (push.const . #f)
                   (push.iloc.0 . 0)
                   (push.subr.gloc.of |.reverse| 1 "../stdlib/core/destructuring.scm" . 308281)
                   (push.const)
                   (push.const)
                   (call
                     (push.iloc 2 . 0)
                     (push.const . #t)
                     (push.const)
                     (push.const . #f)
                     (push.const)
                     (apply.gloc.of
                       |.syntax-transcribe|
                       "../stdlib/core/destructuring.scm"
                       .
                       306209))
                   (push)
                   (call
                     (push.iloc 2 . 0)
                     (push.const . #t)
                     (push.const)
                     (push.const . #f)
                     (push.const)
                     (apply.gloc.of
                       |.syntax-transcribe|
                       "../stdlib/core/destructuring.scm"
                       .
                       306209))
                   (push)
                   (ret.subr.gloc.of |.list| "../stdlib/core/destructuring.scm" . 306209))
                 (push.const . destructuring-match)
                 (push.const . "malformed pattern")
                 (push.iloc 6 . 0)
                 (push.iloc.1 . 0)
                 (apply.gloc.of |.syntax-violation| "../stdlib/core/destructuring.scm" . 309295))
               (apply.gloc.of |.call-with-values| "../stdlib/core/destructuring.scm" . 305183))
             (push.subr.gloc.of |.list| 3 "../stdlib/core/destructuring.scm" . 301082)
             (push.const ?pat ?body)
             (push.const . #f)
             (push.close
               (1 0)
               (call
                 (call
                   (push.iloc.0 . 0)
                   (push.const . ?pat)
                   (push.const (?pat . 0))
                   (push.const . ?pat)
                   (push.const)
                   (apply.gloc.of |.syntax-transcribe| "../stdlib/core/destructuring.scm" . 311338))
                 (push)
                 (apply.gloc.of |.syntax->datum| "../stdlib/core/destructuring.scm" . 311338))
               (push)
               (extend . 1)
               (push.close
                 (0 0)
                 (push.iloc 4 . 1)
                 (push.iloc 4 . 2)
                 (push.iloc.1 . 0)
                 (push.iloc 4 . 0)
                 (push.const)
                 (push.const)
                 (push.const)
                 (apply.gloc.of
                   |core.destructuring'compile-match|
                   "../stdlib/core/destructuring.scm"
                   .
                   312386))
               (push.close
                 (3 0)
                 (call
                   (push.iloc.0 . 2)
                   (apply.gloc.of
                     |core.destructuring'duplicates?|
                     "../stdlib/core/destructuring.scm"
                     .
                     313386))
                 (if.true
                   (push.const . destructuring-match)
                   (push.const . "duplicate variables")
                   (push.iloc 6 . 0)
                   (push.iloc.1 . 0)
                   (apply.gloc.of |.syntax-violation| "../stdlib/core/destructuring.scm" . 313405))
                 (iloc.0 . 0)
                 (if.true
                   (push.const . #f)
                   (push.iloc.0 . 0)
                   (push.subr.gloc.of |.reverse| 1 "../stdlib/core/destructuring.scm" . 314425)
                   (push.iloc.0 . 2)
                   (push.iloc.0 . 1)
                   (call
                     (push.iloc 2 . 0)
                     (push.const . ?body)
                     (push.const (?body . 0))
                     (push.const . ?body)
                     (push.const)
                     (apply.gloc.of
                       |.syntax-transcribe|
                       "../stdlib/core/destructuring.scm"
                       .
                       314452))
                   (push)
                   (call
                     (push.iloc 2 . 0)
                     (push.const . #t)
                     (push.const)
                     (push.const . #f)
                     (push.const)
                     (apply.gloc.of
                       |.syntax-transcribe|
                       "../stdlib/core/destructuring.scm"
                       .
                       312353))
                   (push)
                   (ret.subr.gloc.of |.list| "../stdlib/core/destructuring.scm" . 312353))
                 (push.const . destructuring-match)
                 (push.const . "malformed pattern")
                 (push.iloc 6 . 0)
                 (push.iloc.1 . 0)
                 (apply.gloc.of |.syntax-violation| "../stdlib/core/destructuring.scm" . 315439))
               (apply.gloc.of |.call-with-values| "../stdlib/core/destructuring.scm" . 311327))
             (push.subr.gloc.of |.list| 3 "../stdlib/core/destructuring.scm" . 301082)
             (push.const ?pat ?fender ?body)
             (push.const . #f)
             (push.close
               (1 0)
               (call
                 (call
                   (push.iloc.0 . 0)
                   (push.const . ?pat)
                   (push.const (?pat . 0))
                   (push.const . ?pat)
                   (push.const)
                   (apply.gloc.of |.syntax-transcribe| "../stdlib/core/destructuring.scm" . 317482))
                 (push)
                 (apply.gloc.of |.syntax->datum| "../stdlib/core/destructuring.scm" . 317482))
               (push)
               (extend . 1)
               (push.close
                 (0 0)
                 (push.iloc 4 . 1)
                 (push.iloc 4 . 2)
                 (push.iloc.1 . 0)
                 (push.iloc 4 . 0)
                 (push.const)
                 (push.const)
                 (push.const)
                 (apply.gloc.of
                   |core.destructuring'compile-match|
                   "../stdlib/core/destructuring.scm"
                   .
                   318530))
               (push.close
                 (3 0)
                 (call
                   (push.iloc.0 . 2)
                   (apply.gloc.of
                     |core.destructuring'duplicates?|
                     "../stdlib/core/destructuring.scm"
                     .
                     319530))
                 (if.true
                   (push.const . destructuring-match)
                   (push.const . "duplicate variables")
                   (push.iloc 6 . 0)
                   (push.iloc.1 . 0)
                   (apply.gloc.of |.syntax-violation| "../stdlib/core/destructuring.scm" . 319549))
                 (iloc.0 . 0)
                 (if.true
                   (push.const . #f)
                   (push.iloc.0 . 0)
                   (push.subr.gloc.of |.reverse| 1 "../stdlib/core/destructuring.scm" . 320569)
                   (push.iloc.0 . 2)
                   (push.iloc.0 . 1)
                   (call
                     (push.iloc 2 . 0)
                     (push.const . ?body)
                     (push.const (?body . 0))
                     (push.const . ?body)
                     (push.const)
                     (apply.gloc.of
                       |.syntax-transcribe|
                       "../stdlib/core/destructuring.scm"
                       .
                       320596))
                   (push)
                   (call
                     (push.iloc 2 . 0)
                     (push.const . ?fender)
                     (push.const (?fender . 0))
                     (push.const . ?fender)
                     (push.const)
                     (apply.gloc.of
                       |.syntax-transcribe|
                       "../stdlib/core/destructuring.scm"
                       .
                       320611))
                   (push)
                   (ret.subr.gloc.of |.list| "../stdlib/core/destructuring.scm" . 320560))
                 (push.const . destructuring-match)
                 (push.const . "malformed pattern")
                 (push.iloc 6 . 0)
                 (push.iloc.1 . 0)
                 (apply.gloc.of |.syntax-violation| "../stdlib/core/destructuring.scm" . 321583))
               (apply.gloc.of |.call-with-values| "../stdlib/core/destructuring.scm" . 317471))
             (push.subr.gloc.of |.list| 3 "../stdlib/core/destructuring.scm" . 301082)
             (push.const . _)
             (push.const . #f)
             (push.close
               (1 0)
               (push.const . destructuring-match)
               (push.const . "malformed clause")
               (push.iloc 4 . 0)
               (push.iloc.1 . 0)
               (apply.gloc.of |.syntax-violation| "../stdlib/core/destructuring.scm" . 323615))
             (push.subr.gloc.of |.list| 3 "../stdlib/core/destructuring.scm" . 303132)
             (apply.gloc.of |.syntax-dispatch| "../stdlib/core/destructuring.scm" . 301082))
           (call
             (push.iloc.1 . 0)
             (push.const ?clauses ...)
             (push.const (?clauses . 1))
             (push.const . #f)
             (push.const)
             (apply.gloc.of |.syntax-transcribe| "../stdlib/core/destructuring.scm" . 297996))
           (push)
           (apply.gloc.of |.map| "../stdlib/core/destructuring.scm" . 297996))
         (push)
         (apply.gloc.of |core.destructuring'reorder| "../stdlib/core/destructuring.scm" . 297996))
       (push)
       (apply.gloc.of |core.destructuring'cse| "../stdlib/core/destructuring.scm" . 297996))
     (push)
     (extend . 1)
     (push.close
       (0 0)
       (push.gloc.of |.car|)
       (push.iloc.1 . 0)
       (apply.gloc.of |core.lists'partition| "../stdlib/core/destructuring.scm" . 326700))
     (push.close
       (2 0)
       (call
         (push.gloc.of |.fn23.1`23|)
         (push.iloc.0 . 0)
         (apply.gloc.of |.map| "../stdlib/core/destructuring.scm" . 327712))
       (push)
       (call
         (push.gloc.of |.cdr|)
         (push.iloc.0 . 1)
         (apply.gloc.of |.map| "../stdlib/core/destructuring.scm" . 328735))
       (push)
       (extend . 2)
       (push.iloc 4 . 0)
       (call
         (call
           (push.iloc 4 . 0)
           (push.const . k)
           (push.const)
           (push.const . k)
           (push.const)
           (apply.gloc.of |.syntax-transcribe| "../stdlib/core/destructuring.scm" . 330783))
         (push)
         (push.iloc 3 . 0)
         (apply.gloc.of |.datum->syntax| "../stdlib/core/destructuring.scm" . 330783))
       (push)
       (call
         (push.close
           (1 0)
           (call
             (call
               (push.iloc 5 . 0)
               (push.const . k)
               (push.const)
               (push.const . k)
               (push.const)
               (apply.gloc.of |.syntax-transcribe| "../stdlib/core/destructuring.scm" . 333861))
             (push)
             (push.cdr.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 333880)
             (apply.gloc.of |.datum->syntax| "../stdlib/core/destructuring.scm" . 333861))
           (push)
           (call
             (call
               (push.iloc 5 . 0)
               (push.const . ?_)
               (push.const (?_ . 0))
               (push.const . ?_)
               (push.const)
               (apply.gloc.of |.syntax-transcribe| "../stdlib/core/destructuring.scm" . 334885))
             (push)
             (push.car.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 334905)
             (apply.gloc.of |.datum->syntax| "../stdlib/core/destructuring.scm" . 334885))
           (push)
           (ret.subr.gloc.of |.list| "../stdlib/core/destructuring.scm" . 333855))
         (push.iloc 3 . 1)
         (push.subr.gloc.of |.core-hashtable->alist| 1 "../stdlib/core/destructuring.scm" . 335901)
         (apply.gloc.of |.map| "../stdlib/core/destructuring.scm" . 332824))
       (push)
       (call
         (push.close
           (1 0)
           (call
             (push.iloc 5 . 0)
             (push.const . k)
             (push.const)
             (push.const . k)
             (push.const)
             (apply.gloc.of |.syntax-transcribe| "../stdlib/core/destructuring.scm" . 337961))
           (push)
           (push.cdr.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 337980)
           (apply.gloc.of |.datum->syntax| "../stdlib/core/destructuring.scm" . 337961))
         (push.iloc 3 . 2)
         (push.const . 0)
         (push.subr.gloc.of |.vector-ref| 2 "../stdlib/core/destructuring.scm" . 337990)
         (apply.gloc.of |.map| "../stdlib/core/destructuring.scm" . 337944))
       (push)
       (call
         (push.close
           (1 0)
           (call
             (push.iloc 5 . 0)
             (push.const . k)
             (push.const)
             (push.const . k)
             (push.const)
             (apply.gloc.of |.syntax-transcribe| "../stdlib/core/destructuring.scm" . 340009))
           (push)
           (push.iloc.0 . 0)
           (apply.gloc.of |.datum->syntax| "../stdlib/core/destructuring.scm" . 340009))
         (push.iloc.0 . 0)
         (apply.gloc.of |.map| "../stdlib/core/destructuring.scm" . 339992))
       (push)
       (call
         (push.close
           (1 0)
           (push.close
             (0 0)
             (push.gloc.of |.values|)
             (push.iloc.1 . 0)
             (apply.gloc.of |.apply| "../stdlib/core/destructuring.scm" . 343116))
           (push.close
             (5 0)
             (push.iloc 6 . 0)
             (call
               (push.close
                 (1 0)
                 (call
                   (push.iloc 7 . 0)
                   (push.const . ?_)
                   (push.const (?_ . 0))
                   (push.const . ?_)
                   (push.const)
                   (apply.gloc.of |.syntax-transcribe| "../stdlib/core/destructuring.scm" . 345156))
                 (push)
                 (push.iloc.0 . 0)
                 (apply.gloc.of |.datum->syntax| "../stdlib/core/destructuring.scm" . 345156))
               (push.iloc.0 . 1)
               (apply.gloc.of |.map| "../stdlib/core/destructuring.scm" . 345139))
             (push)
             (call
               (push.close
                 (1 0)
                 (call
                   (push.iloc 7 . 0)
                   (push.const . k)
                   (push.const)
                   (push.const . k)
                   (push.const)
                   (apply.gloc.of |.syntax-transcribe| "../stdlib/core/destructuring.scm" . 346181))
                 (push)
                 (push.iloc.0 . 0)
                 (apply.gloc.of |.datum->syntax| "../stdlib/core/destructuring.scm" . 346181))
               (push.iloc.0 . 2)
               (apply.gloc.of |.map| "../stdlib/core/destructuring.scm" . 346164))
             (push)
             (call
               (push.close
                 (1 0)
                 (call
                   (push.iloc 7 . 0)
                   (push.const . k)
                   (push.const)
                   (push.const . k)
                   (push.const)
                   (apply.gloc.of |.syntax-transcribe| "../stdlib/core/destructuring.scm" . 347205))
                 (push)
                 (push.iloc.0 . 0)
                 (apply.gloc.of |.datum->syntax| "../stdlib/core/destructuring.scm" . 347205))
               (push.iloc.0 . 0)
               (apply.gloc.of |.map| "../stdlib/core/destructuring.scm" . 347188))
             (push)
             (push.iloc.0 . 4)
             (push.iloc.0 . 3)
             (push.subr.gloc.of |.list| 5 "../stdlib/core/destructuring.scm" . 345139)
             (push.const)
             (push.const (?vars ...) (?inits ...) (?tests ...) ?fender ?body)
             (push.const . #f)
             (push.gloc.of |.fn24.1`24|)
             (push.subr.gloc.of |.list| 3 "../stdlib/core/destructuring.scm" . 343071)
             (push.const . _)
             (push.const . #f)
             (push.gloc.of |.fn14.1`14|)
             (push.subr.gloc.of |.list| 3 "../stdlib/core/destructuring.scm" . 345139)
             (apply.gloc.of |.syntax-dispatch| "../stdlib/core/destructuring.scm" . 343071))
           (apply.gloc.of |.call-with-values| "../stdlib/core/destructuring.scm" . 342045))
         (push.iloc.0 . 1)
         (apply.gloc.of |.map| "../stdlib/core/destructuring.scm" . 327696))
       (push)
       (push.subr.gloc.of |.list| 5 "../stdlib/core/destructuring.scm" . 327696)
       (push.const)
       (push.const ?datum ((?pred-lhs ?pred-rhs) ...) (?mem ...) (?subexprs ...) (?dispatch ...))
       (push.const . #f)
       (push.gloc.of |.fn33.1`33|)
       (push.subr.gloc.of |.list| 3 "../stdlib/core/destructuring.scm" . 327696)
       (push.const . _)
       (push.const . #f)
       (push.gloc.of |.fn32.1`32|)
       (push.subr.gloc.of |.list| 3 "../stdlib/core/destructuring.scm" . 330783)
       (apply.gloc.of |.syntax-dispatch| "../stdlib/core/destructuring.scm" . 327696))
     (apply.gloc.of |.call-with-values| "../stdlib/core/destructuring.scm" . 297996))
   (push.subr.gloc.of |.list| 3 "../stdlib/core/destructuring.scm" . 291845)
   (apply.gloc.of |.syntax-dispatch| "../stdlib/core/destructuring.scm" . 291845))
 (set.gloc.of |.fn8.1`8|)
 (close
   (1 0)
   (push.const . with-syntax)
   (push.const . "value does not match to pattern")
   (push.const
     (?datum (datum->syntax (syntax k) datum))
     (((?pred-lhs ?pred-rhs) ...)
      (map (lambda (a)
             (list (datum->syntax (syntax k) (cdr a)) (datum->syntax (syntax ?_) (car a))))
           (core-hashtable->alist ren)))
     ((?mem ...) (map (lambda (e) (datum->syntax (syntax k) (cdr e))) (vector-ref mem 0)))
     ((?subexprs ...) (map (lambda (e) (datum->syntax (syntax k) e)) subexprs))
     ((?dispatch ...)
      (map (lambda (clause)
             (let-values (((tests vars inits body fender) (apply values clause)))
               (with-syntax (((?vars ...) (map (lambda (e) (datum->syntax (syntax ?_) e)) vars))
                             ((?inits ...) (map (lambda (e) (datum->syntax (syntax k) e)) inits))
                             ((?tests ...) (map (lambda (e) (datum->syntax (syntax k) e)) tests))
                             (?fender fender)
                             (?body body))
                 (if (eq? (syntax->datum (syntax ?fender)) #t)
                     (syntax ((and ?tests ...) (let ((?vars ?inits) ...) ?body)))
                     (syntax
                       ((and ?tests ... (let ((?vars ?inits) ...) ?fender))
                        (let ((?vars ?inits) ...) ?body)))))))
           clauses)))
   (apply.gloc.of |.syntax-violation| "../stdlib/core/destructuring.scm" . 330783))
 (set.gloc.of |.fn32.1`32|)
 (close
   (1 0)
   (push.gloc.of |core.destructuring'ca---r|)
   (push.car.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 362549)
   (push.cdr.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 362557)
   (ret.subr.gloc.of |.core-hashtable-set!| "../stdlib/core/destructuring.scm" . 362521))
 (set.gloc.of |.fn31.1`31|)
 (close
   (1 0 . loop)
   (cdr.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 99358)
   (if.pair?
     (touch.gloc.of |loop`141|)
     (push.cdr.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 99375)
     (apply.gloc.of |loop`141| "../stdlib/core/destructuring.scm" . 99369))
   (push.iloc.0 . 0)
   (ret.subr.gloc.of |.cdr| "../stdlib/core/destructuring.scm" . 100380))
 (set.gloc.of |loop`141|)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (push.const let ((?datum ?expr)) (let ((?vars ?inits) ...) ?body ...))
   (push.const (?body . 1) (?inits . 1) (?vars . 1) (?expr . 0) (?datum . 0))
   (push.const . #f)
   (push.const)
   (apply.gloc.of |.syntax-transcribe| "../stdlib/core/destructuring.scm" . 283671))
 (set.gloc.of |.fn42.1`42|)
 (close
   (1 0)
   (push.const . with-syntax)
   (push.const . "value does not match to pattern")
   (push.const
     (?datum (datum->syntax (syntax k) datum))
     ((?vars ...) (map (lambda (e) (datum->syntax (syntax ?_) e)) vars))
     ((?inits ...) (map (lambda (e) (datum->syntax (syntax k) e)) inits)))
   (apply.gloc.of |.syntax-violation| "../stdlib/core/destructuring.scm" . 280610))
 (set.gloc.of |.fn16.1`16|)
 (close
   (1 0)
   (call
     (call
       (push.iloc.0 . 0)
       (push.const . ?fender)
       (push.const (?fender . 0))
       (push.const . ?fender)
       (push.const)
       (apply.gloc.of |.syntax-transcribe| "../stdlib/core/destructuring.scm" . 350267))
     (push)
     (apply.gloc.of |.syntax->datum| "../stdlib/core/destructuring.scm" . 350252))
   (push)
   (const . #t)
   (if.eq?
     (push.iloc.0 . 0)
     (push.const (and ?tests ...) (let ((?vars ?inits) ...) ?body))
     (push.const (?body . 0) (?inits . 1) (?vars . 1) (?tests . 1))
     (push.const . #f)
     (push.const)
     (apply.gloc.of |.syntax-transcribe| "../stdlib/core/destructuring.scm" . 350243))
   (push.iloc.0 . 0)
   (push.const (and ?tests ... (let ((?vars ?inits) ...) ?fender)) (let ((?vars ?inits) ...) ?body))
   (push.const (?body . 0) (?fender . 0) (?inits . 1) (?vars . 1) (?tests . 1))
   (push.const . #f)
   (push.const)
   (apply.gloc.of |.syntax-transcribe| "../stdlib/core/destructuring.scm" . 350243))
 (set.gloc.of |.fn24.1`24|)
 (close
   (1 0)
   (push.gloc.of |.patvars|)
   (push.iloc.0 . 0)
   (push.const)
   (push.const ?_ ?pat ?expr ?body ...)
   (push.const . #f)
   (push.close
     (1 0)
     (call
       (call
         (push.iloc.0 . 0)
         (push.const . ?pat)
         (push.const (?pat . 0))
         (push.const . ?pat)
         (push.const)
         (apply.gloc.of |.syntax-transcribe| "../stdlib/core/destructuring.scm" . 268309))
       (push)
       (apply.gloc.of |.syntax->datum| "../stdlib/core/destructuring.scm" . 268309))
     (push)
     (call (apply.gloc.of |.generate-temporary-symbol| "../stdlib/core/destructuring.scm" . 269335))
     (push)
     (subr.gloc.of |.make-core-hashtable| 0)
     (push)
     (push.const)
     (push.subr.gloc.of |.vector| 1 "../stdlib/core/destructuring.scm" . 271381)
     (extend . 4)
     (push.close
       (0 0)
       (push.iloc.1 . 2)
       (push.iloc.1 . 3)
       (push.iloc.1 . 0)
       (push.iloc.1 . 1)
       (push.const)
       (push.const)
       (push.const)
       (apply.gloc.of
         |core.destructuring'compile-match|
         "../stdlib/core/destructuring.scm"
         .
         273434))
     (push.close
       (3 0)
       (push.iloc.1 . 3)
       (push.const . 0)
       (push.subr.gloc.of |.vector-ref| 2 "../stdlib/core/destructuring.scm" . 274465)
       (push.subr.gloc.of |.null?| 1 "../stdlib/core/destructuring.scm" . 274458)
       (subr.gloc.of |.not| 1 "../stdlib/core/destructuring.scm" . 274453)
       (if.true
         (push.const . destructuring-bind)
         (push.const . "tail match not supported")
         (push.iloc 3 . 0)
         (push.iloc.1 . 0)
         (apply.gloc.of |.syntax-violation| "../stdlib/core/destructuring.scm" . 275477))
       (call
         (push.iloc.0 . 2)
         (apply.gloc.of
           |core.destructuring'duplicates?|
           "../stdlib/core/destructuring.scm"
           .
           276501))
       (if.true
         (push.const . destructuring-bind)
         (push.const . "duplicate variables")
         (push.iloc 3 . 0)
         (push.iloc.1 . 0)
         (apply.gloc.of |.syntax-violation| "../stdlib/core/destructuring.scm" . 277525))
       (iloc.0 . 0)
       (if.true
         (push.iloc 2 . 0)
         (call
           (call
             (push.iloc 2 . 0)
             (push.const . k)
             (push.const)
             (push.const . k)
             (push.const)
             (apply.gloc.of |.syntax-transcribe| "../stdlib/core/destructuring.scm" . 280610))
           (push)
           (push.iloc.1 . 1)
           (apply.gloc.of |.datum->syntax| "../stdlib/core/destructuring.scm" . 280610))
         (push)
         (call
           (push.close
             (1 0)
             (call
               (push.iloc 3 . 0)
               (push.const . ?_)
               (push.const (?_ . 0))
               (push.const . ?_)
               (push.const)
               (apply.gloc.of |.syntax-transcribe| "../stdlib/core/destructuring.scm" . 281656))
             (push)
             (push.iloc.0 . 0)
             (apply.gloc.of |.datum->syntax| "../stdlib/core/destructuring.scm" . 281656))
           (push.iloc.0 . 2)
           (apply.gloc.of |.map| "../stdlib/core/destructuring.scm" . 281639))
         (push)
         (call
           (push.close
             (1 0)
             (call
               (push.iloc 3 . 0)
               (push.const . k)
               (push.const)
               (push.const . k)
               (push.const)
               (apply.gloc.of |.syntax-transcribe| "../stdlib/core/destructuring.scm" . 282681))
             (push)
             (push.iloc.0 . 0)
             (apply.gloc.of |.datum->syntax| "../stdlib/core/destructuring.scm" . 282681))
           (push.iloc.0 . 1)
           (apply.gloc.of |.map| "../stdlib/core/destructuring.scm" . 282664))
         (push)
         (push.subr.gloc.of |.list| 3 "../stdlib/core/destructuring.scm" . 280610)
         (push.const)
         (push.const ?datum (?vars ...) (?inits ...))
         (push.const . #f)
         (push.gloc.of |.fn42.1`42|)
         (push.subr.gloc.of |.list| 3 "../stdlib/core/destructuring.scm" . 272396)
         (push.const . _)
         (push.const . #f)
         (push.gloc.of |.fn16.1`16|)
         (push.subr.gloc.of |.list| 3 "../stdlib/core/destructuring.scm" . 280610)
         (apply.gloc.of |.syntax-dispatch| "../stdlib/core/destructuring.scm" . 272396))
       (push.const . destructuring-bind)
       (push.const . "malformed pattern")
       (push.iloc 3 . 0)
       (push.iloc.1 . 0)
       (apply.gloc.of |.syntax-violation| "../stdlib/core/destructuring.scm" . 288789))
     (apply.gloc.of |.call-with-values| "../stdlib/core/destructuring.scm" . 268298))
   (push.subr.gloc.of |.list| 3 "../stdlib/core/destructuring.scm" . 265221)
   (apply.gloc.of |.syntax-dispatch| "../stdlib/core/destructuring.scm" . 265221))
 (set.gloc.of |.fn4.1`4|)
 (close
   (1 0)
   (push.car.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 222225)
   (call
     (push.cadr.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 222254)
     (push.const (pair? and) (null?) (list?))
     (apply.gloc.of |core.destructuring'reorder-tests| "../stdlib/core/destructuring.scm" . 222239))
   (push)
   (push.cddr.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 222302)
   (ret.subr.gloc.of |.cons*| "../stdlib/core/destructuring.scm" . 221196))
 (set.gloc.of |.fn10.1`10|)
 (close
   (1 0)
   (push.const . with-syntax)
   (push.const . "value does not match to pattern")
   (push.const
     ((?vars ...) (map (lambda (e) (datum->syntax (syntax ?_) e)) vars))
     ((?inits ...) (map (lambda (e) (datum->syntax (syntax k) e)) inits))
     ((?tests ...) (map (lambda (e) (datum->syntax (syntax k) e)) tests))
     (?fender fender)
     (?body body))
   (apply.gloc.of |.syntax-violation| "../stdlib/core/destructuring.scm" . 345127))
 (set.gloc.of |.fn14.1`14|)
 (call
   (push.const core syntax-case)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/destructuring.scm" . 6145))
 (call
   (push.const core lists)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/destructuring.scm" . 6145))
 (call
   (push.const core primitives)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/destructuring.scm" . 6145))
 (subr.gloc.of |.make-core-hashtable| 0 "../stdlib/core/destructuring.scm" . 15378)
 (set.gloc.of |core.destructuring'ca---r|)
 (subr.gloc.of |.make-core-hashtable| 0 "../stdlib/core/destructuring.scm" . 17426)
 (set.gloc.of |core.destructuring'cd---r|)
 (close
   (1 0 . |core.destructuring'car+|)
   (call
     (iloc.0 . 0)
     (if.not.pair?.ret.const . #f)
     (push.gloc.of |core.destructuring'ca---r|)
     (push.car.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 21563)
     (push.const . #f)
     (ret.subr.gloc.of |.core-hashtable-ref| "../stdlib/core/destructuring.scm" . 21536))
   (push)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (push.iloc.0 . 0)
     (cdr.iloc (1 . 0) "../stdlib/core/destructuring.scm" . 23579)
     (ret.cons "../stdlib/core/destructuring.scm" . 23571))
   (push.const . car)
   (push.iloc.1 . 0)
   (ret.subr.gloc.of |.list| "../stdlib/core/destructuring.scm" . 25614))
 (set.gloc.of |core.destructuring'car+|)
 (close
   (1 0 . |core.destructuring'cdr+|)
   (call
     (iloc.0 . 0)
     (if.not.pair?.ret.const . #f)
     (push.gloc.of |core.destructuring'cd---r|)
     (push.car.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 29755)
     (push.const . #f)
     (ret.subr.gloc.of |.core-hashtable-ref| "../stdlib/core/destructuring.scm" . 29728))
   (push)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (push.iloc.0 . 0)
     (cdr.iloc (1 . 0) "../stdlib/core/destructuring.scm" . 31771)
     (ret.cons "../stdlib/core/destructuring.scm" . 31763))
   (push.const . cdr)
   (push.iloc.1 . 0)
   (ret.subr.gloc.of |.list| "../stdlib/core/destructuring.scm" . 33806))
 (set.gloc.of |core.destructuring'cdr+|)
 (close
   (1 0 . |core.destructuring'duplicates?|)
   (iloc.0 . 0)
   (if.not.pair?.ret.const . #f)
   (touch.gloc.of |loop`101|)
   (push.car.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 38941)
   (push.cdr.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 38958)
   (apply.gloc.of |loop`101| "../stdlib/core/destructuring.scm" . 38924))
 (set.gloc.of |core.destructuring'duplicates?|)
 (close
   (1 0 . |core.destructuring'ellipsis-pair?|)
   (iloc.0 . 0)
   (if.not.pair?.ret.const . #f)
   (car.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 47125)
   (if.not.symbol?.ret.const . #f)
   (cdr.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 48147)
   (if.not.pair?.ret.const . #f)
   (push.cadr.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 49169)
   (const . ...)
   (ret.eq? "../stdlib/core/destructuring.scm" . 49164))
 (set.gloc.of |core.destructuring'ellipsis-pair?|)
 (close
   (1 0 . |core.destructuring'quoted-pair?|)
   (iloc.0 . 0)
   (if.not.pair?.ret.const . #f)
   (push.car.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 54289)
   (const . quote)
   (if.not.eq?.ret.const . #f)
   (cdr.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 55315)
   (if.not.pair?.ret.const . #f)
   (cddr.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 56339)
   (ret.null? "../stdlib/core/destructuring.scm" . 56332))
 (set.gloc.of |core.destructuring'quoted-pair?|)
 (close
   (1 0 . |core.destructuring'predicate-pair?|)
   (iloc.0 . 0)
   (if.not.pair?.ret.const . #f)
   (push.car.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 61457)
   (const . ?)
   (if.not.eq?.ret.const . #f)
   (cdr.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 62483)
   (ret.pair? "../stdlib/core/destructuring.scm" . 62476))
 (set.gloc.of |core.destructuring'predicate-pair?|)
 (close
   (1 0 . |core.destructuring'choose-pred|)
   (call
     (iloc.0 . 0)
     (if.symbol?.ret.const . #t)
     (push.iloc.0 . 0)
     (subr.gloc.of |.boolean?| 1 "../stdlib/core/destructuring.scm" . 66592)
     (if.true.ret)
     (iloc.0 . 0)
     (if.null?.ret.const . #t)
     (push.iloc.0 . 0)
     (subr.gloc.of |.char?| 1 "../stdlib/core/destructuring.scm" . 66619)
     (if.true.ret)
     (push.iloc.0 . 0)
     (ret.subr.gloc.of |.fixnum?| "../stdlib/core/destructuring.scm" . 66631))
   (if.true.ret.const . eq?)
   (push.iloc.0 . 0)
   (subr.gloc.of |.number?| 1 "../stdlib/core/destructuring.scm" . 67598)
   (if.true.ret.const . eqv?)
   (ret.const . equal?))
 (set.gloc.of |core.destructuring'choose-pred|)
 (close
   (1 0 . |core.destructuring'drop-last-pair|)
   (iloc.0 . 0)
   (if.null?.ret.const)
   (touch.gloc.of |loop`117|)
   (push.iloc.0 . 0)
   (apply.gloc.of |loop`117| "../stdlib/core/destructuring.scm" . 74766))
 (set.gloc.of |core.destructuring'drop-last-pair|)
 (close
   (1 0 . |core.destructuring'drop-last-cdr|)
   (iloc.0 . 0)
   (if.null?.ret.const)
   (touch.gloc.of |loop`125|)
   (push.iloc.0 . 0)
   (apply.gloc.of |loop`125| "../stdlib/core/destructuring.scm" . 82958))
 (set.gloc.of |core.destructuring'drop-last-cdr|)
 (close
   (1 0 . |core.destructuring'last-pair|)
   (iloc.0 . 0)
   (if.null?.ret.const)
   (touch.gloc.of |loop`133|)
   (push.iloc.0 . 0)
   (apply.gloc.of |loop`133| "../stdlib/core/destructuring.scm" . 91150))
 (set.gloc.of |core.destructuring'last-pair|)
 (close
   (1 0 . |core.destructuring'last-cdr|)
   (iloc.0 . 0)
   (if.pair?
     (touch.gloc.of |loop`141|)
     (push.iloc.0 . 0)
     (apply.gloc.of |loop`141| "../stdlib/core/destructuring.scm" . 98318))
   (ret.iloc 0 . 0))
 (set.gloc.of |core.destructuring'last-cdr|)
 (close
   (1 0 . |core.destructuring'count-pair|)
   (touch.gloc.of |loop`149|)
   (push.iloc.0 . 0)
   (push.const . 0)
   (apply.gloc.of |loop`149| "../stdlib/core/destructuring.scm" . 105479))
 (set.gloc.of |core.destructuring'count-pair|)
 (close
   (2 0 . |core.destructuring'last-n-pair|)
   (call
     (push.iloc.0 . 1)
     (apply.gloc.of |core.destructuring'count-pair| "../stdlib/core/destructuring.scm" . 111632))
   (push)
   (extend . 1)
   (iloc.0 . 0)
   (<.iloc (1 . 0) "../stdlib/core/destructuring.scm" . 112656)
   (if.true.ret.const)
   (push.iloc.1 . 1)
   (push.iloc.0 . 0)
   (push.iloc.1 . 0)
   (push.subr.gloc.of |.-| 2 "../stdlib/core/destructuring.scm" . 113700)
   (ret.subr.gloc.of |.list-tail| "../stdlib/core/destructuring.scm" . 113685))
 (set.gloc.of |core.destructuring'last-n-pair|)
 (close
   (2 0 . |core.destructuring'drop-last-n-pair|)
   (iloc.0 . 1)
   (if.null?.ret.const)
   (touch.gloc.of |loop`161|)
   (push.iloc.0 . 1)
   (call
     (push.iloc.0 . 1)
     (apply.gloc.of |core.destructuring'count-pair| "../stdlib/core/destructuring.scm" . 119849))
   (push)
   (push.iloc.0 . 0)
   (push.subr.gloc.of |.-| 2 "../stdlib/core/destructuring.scm" . 119846)
   (apply.gloc.of |loop`161| "../stdlib/core/destructuring.scm" . 119822))
 (set.gloc.of |core.destructuring'drop-last-n-pair|)
 (close
   (1 0 . |core.destructuring'count-non-dotted-pattern|)
   (touch.gloc.of |loop`169|)
   (push.iloc.0 . 0)
   (push.const . 0)
   (apply.gloc.of |loop`169| "../stdlib/core/destructuring.scm" . 126983))
 (set.gloc.of |core.destructuring'count-non-dotted-pattern|)
 (close
   (2 0 . |core.destructuring'memoize-ref|)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.const . 0)
   (push.subr.gloc.of |.vector-ref| 2 "../stdlib/core/destructuring.scm" . 135191)
   (push.subr.gloc.of |.assoc| 2 "../stdlib/core/destructuring.scm" . 135182)
   (extend . 1)
   (iloc.0 . 0)
   (if.true (push.iloc.0 . 0) (ret.subr.gloc.of |.cdr| "../stdlib/core/destructuring.scm" . 135175))
   (call (apply.gloc.of |.generate-temporary-symbol| "../stdlib/core/destructuring.scm" . 137242))
   (push)
   (extend . 1)
   (push.iloc 2 . 1)
   (push.const . 0)
   (push.iloc 2 . 0)
   (iloc.0 . 0)
   (push.cons)
   (push.iloc 2 . 1)
   (push.const . 0)
   (subr.gloc.of |.vector-ref| 2 "../stdlib/core/destructuring.scm" . 138302)
   (push.cons)
   (subr.gloc.of |.vector-set!| 3 "../stdlib/core/destructuring.scm" . 138263)
   (ret.iloc 0 . 0))
 (set.gloc.of |core.destructuring'memoize-ref|)
 (close
   (7 0 . |core.destructuring'compile-match|)
   (call
     (push.iloc.0 . 2)
     (apply.gloc.of |core.destructuring'quoted-pair?| "../stdlib/core/destructuring.scm" . 142350))
   (if.true
     (call
       (push.cadr.iloc (0 . 2) "../stdlib/core/destructuring.scm" . 143404)
       (apply.gloc.of |core.destructuring'choose-pred| "../stdlib/core/destructuring.scm" . 143391))
     (push)
     (push.iloc.0 . 3)
     (push.const . quote)
     (push.cadr.iloc (0 . 2) "../stdlib/core/destructuring.scm" . 143423)
     (push.subr.gloc.of |.list| 2 "../stdlib/core/destructuring.scm" . 143382)
     (push.subr.gloc.of |.list| 3 "../stdlib/core/destructuring.scm" . 143382)
     (iloc.0 . 4)
     (push.cons)
     (push.iloc.0 . 5)
     (push.iloc.0 . 6)
     (ret.subr.gloc.of |.values| "../stdlib/core/destructuring.scm" . 143374))
   (call
     (push.iloc.0 . 2)
     (apply.gloc.of
       |core.destructuring'ellipsis-pair?|
       "../stdlib/core/destructuring.scm"
       .
       144398))
   (if.true
     (cddr.iloc (0 . 2) "../stdlib/core/destructuring.scm" . 145436)
     (if.null?
       (push.car.iloc (0 . 2) "../stdlib/core/destructuring.scm" . 146462)
       (const . _)
       (if.eq?
         (push.const . list?)
         (push.iloc.0 . 3)
         (push.subr.gloc.of |.list| 2 "../stdlib/core/destructuring.scm" . 147489)
         (iloc.0 . 4)
         (push.cons)
         (push.iloc.0 . 5)
         (push.iloc.0 . 6)
         (ret.subr.gloc.of |.values| "../stdlib/core/destructuring.scm" . 147481))
       (push.const . list?)
       (push.iloc.0 . 3)
       (push.subr.gloc.of |.list| 2 "../stdlib/core/destructuring.scm" . 148513)
       (iloc.0 . 4)
       (push.cons)
       (push.iloc.0 . 3)
       (iloc.0 . 5)
       (push.cons)
       (push.car.iloc (0 . 2) "../stdlib/core/destructuring.scm" . 148562)
       (iloc.0 . 6)
       (push.cons)
       (ret.subr.gloc.of |.values| "../stdlib/core/destructuring.scm" . 148505))
     (call
       (cddr.iloc (0 . 2) "../stdlib/core/destructuring.scm" . 149541)
       (if.not.pair?.ret.const . #t)
       (push.cddr.iloc (0 . 2) "../stdlib/core/destructuring.scm" . 149571)
       (apply.gloc.of
         |core.destructuring'predicate-pair?|
         "../stdlib/core/destructuring.scm"
         .
         149554))
     (if.true
       (push.car.iloc (0 . 2) "../stdlib/core/destructuring.scm" . 150558)
       (const . _)
       (if.eq?
         (push.iloc.0 . 0)
         (push.iloc.0 . 1)
         (push.cddr.iloc (0 . 2) "../stdlib/core/destructuring.scm" . 151600)
         (push.const . last-cdr)
         (push.iloc.0 . 3)
         (push.subr.gloc.of |.list| 2 "../stdlib/core/destructuring.scm" . 151577)
         (push.iloc.0 . 4)
         (push.iloc.0 . 5)
         (push.iloc.0 . 6)
         (apply.gloc.of
           |core.destructuring'compile-match|
           "../stdlib/core/destructuring.scm"
           .
           151577))
       (push.iloc.0 . 0)
       (push.iloc.0 . 1)
       (push.cddr.iloc (0 . 2) "../stdlib/core/destructuring.scm" . 155696)
       (push.const . last-cdr)
       (push.iloc.0 . 3)
       (push.subr.gloc.of |.list| 2 "../stdlib/core/destructuring.scm" . 155673)
       (push.iloc.0 . 4)
       (push.const . drop-last-cdr)
       (push.iloc.0 . 3)
       (push.subr.gloc.of |.list| 2 "../stdlib/core/destructuring.scm" . 157736)
       (iloc.0 . 5)
       (push.cons)
       (push.car.iloc (0 . 2) "../stdlib/core/destructuring.scm" . 158766)
       (iloc.0 . 6)
       (push.cons)
       (apply.gloc.of
         |core.destructuring'compile-match|
         "../stdlib/core/destructuring.scm"
         .
         155673))
     (cddr.iloc (0 . 2) "../stdlib/core/destructuring.scm" . 159772)
     (if.pair?
       (call
         (apply.gloc.of |.generate-temporary-symbol| "../stdlib/core/destructuring.scm" . 160804))
       (push.iloc.0 . 2)
       (subr.gloc.of |.cdddr| 1 "../stdlib/core/destructuring.scm" . 161829)
       (if.null?
         (call
           (push.const . last-pair)
           (push.iloc.0 . 3)
           (push.subr.gloc.of |.list| 2 "../stdlib/core/destructuring.scm" . 162861)
           (push.iloc.0 . 1)
           (apply.gloc.of
             |core.destructuring'memoize-ref|
             "../stdlib/core/destructuring.scm"
             .
             162861))
         (push)
         (extend . 1)
         (push.car.iloc (1 . 2) "../stdlib/core/destructuring.scm" . 163881)
         (const . _)
         (if.eq?
           (push.iloc.1 . 0)
           (push.iloc.1 . 1)
           (push.cddr.iloc (1 . 2) "../stdlib/core/destructuring.scm" . 164923)
           (push.iloc.0 . 0)
           (push.const . and)
           (push.const . pair?)
           (push.iloc.1 . 3)
           (push.subr.gloc.of |.list| 2 "../stdlib/core/destructuring.scm" . 165939)
           (push.const . set!)
           (push.iloc.0 . 0)
           (push.const . last-pair)
           (push.iloc.1 . 3)
           (push.subr.gloc.of |.list| 2 "../stdlib/core/destructuring.scm" . 165939)
           (push.subr.gloc.of |.list| 3 "../stdlib/core/destructuring.scm" . 165939)
           (push.subr.gloc.of |.list| 3 "../stdlib/core/destructuring.scm" . 165939)
           (iloc.1 . 4)
           (push.cons)
           (push.iloc.1 . 5)
           (push.iloc.1 . 6)
           (apply.gloc.of
             |core.destructuring'compile-match|
             "../stdlib/core/destructuring.scm"
             .
             164900))
         (push.iloc.1 . 0)
         (push.iloc.1 . 1)
         (push.cddr.iloc (1 . 2) "../stdlib/core/destructuring.scm" . 169019)
         (push.iloc.0 . 0)
         (push.const . and)
         (push.const . pair?)
         (push.iloc.1 . 3)
         (push.subr.gloc.of |.list| 2 "../stdlib/core/destructuring.scm" . 170035)
         (push.const . set!)
         (push.iloc.0 . 0)
         (push.const . last-pair)
         (push.iloc.1 . 3)
         (push.subr.gloc.of |.list| 2 "../stdlib/core/destructuring.scm" . 170035)
         (push.subr.gloc.of |.list| 3 "../stdlib/core/destructuring.scm" . 170035)
         (push.subr.gloc.of |.list| 3 "../stdlib/core/destructuring.scm" . 170035)
         (iloc.1 . 4)
         (push.cons)
         (push.const . drop-last-pair)
         (push.iloc.1 . 3)
         (push.subr.gloc.of |.list| 2 "../stdlib/core/destructuring.scm" . 171059)
         (iloc.1 . 5)
         (push.cons)
         (push.car.iloc (1 . 2) "../stdlib/core/destructuring.scm" . 172089)
         (iloc.1 . 6)
         (push.cons)
         (apply.gloc.of
           |core.destructuring'compile-match|
           "../stdlib/core/destructuring.scm"
           .
           168996))
       (call
         (push.iloc.0 . 2)
         (apply.gloc.of
           |core.destructuring'count-non-dotted-pattern|
           "../stdlib/core/destructuring.scm"
           .
           174122))
       (push)
       (push.const . 2)
       (push.subr.gloc.of |.-| 2 "../stdlib/core/destructuring.scm" . 174119)
       (extend . 1)
       (call
         (push.const . last-n-pair)
         (push.iloc.0 . 0)
         (push.iloc.1 . 3)
         (push.subr.gloc.of |.list| 3 "../stdlib/core/destructuring.scm" . 175151)
         (push.iloc.1 . 1)
         (apply.gloc.of
           |core.destructuring'memoize-ref|
           "../stdlib/core/destructuring.scm"
           .
           175151))
       (push)
       (extend . 1)
       (push.car.iloc (2 . 2) "../stdlib/core/destructuring.scm" . 176171)
       (const . _)
       (if.eq?
         (push.iloc 2 . 0)
         (push.iloc 2 . 1)
         (push.cddr.iloc (2 . 2) "../stdlib/core/destructuring.scm" . 177213)
         (push.iloc.0 . 0)
         (push.const . and)
         (push.const . pair?)
         (push.iloc 2 . 3)
         (push.subr.gloc.of |.list| 2 "../stdlib/core/destructuring.scm" . 178229)
         (push.const . set!)
         (push.iloc.0 . 0)
         (push.const . last-n-pair)
         (push.iloc.1 . 0)
         (push.iloc 2 . 3)
         (push.subr.gloc.of |.list| 3 "../stdlib/core/destructuring.scm" . 178229)
         (push.subr.gloc.of |.list| 3 "../stdlib/core/destructuring.scm" . 178229)
         (push.subr.gloc.of |.list| 3 "../stdlib/core/destructuring.scm" . 178229)
         (iloc 2 . 4)
         (push.cons)
         (push.iloc 2 . 5)
         (push.iloc 2 . 6)
         (apply.gloc.of
           |core.destructuring'compile-match|
           "../stdlib/core/destructuring.scm"
           .
           177190))
       (push.iloc 2 . 0)
       (push.iloc 2 . 1)
       (push.cddr.iloc (2 . 2) "../stdlib/core/destructuring.scm" . 181309)
       (push.iloc.0 . 0)
       (push.const . and)
       (push.const . pair?)
       (push.iloc 2 . 3)
       (push.subr.gloc.of |.list| 2 "../stdlib/core/destructuring.scm" . 182325)
       (push.const . set!)
       (push.iloc.0 . 0)
       (push.const . last-n-pair)
       (push.iloc.1 . 0)
       (push.iloc 2 . 3)
       (push.subr.gloc.of |.list| 3 "../stdlib/core/destructuring.scm" . 182325)
       (push.subr.gloc.of |.list| 3 "../stdlib/core/destructuring.scm" . 182325)
       (push.subr.gloc.of |.list| 3 "../stdlib/core/destructuring.scm" . 182325)
       (iloc 2 . 4)
       (push.cons)
       (push.const . drop-last-n-pair)
       (push.iloc.1 . 0)
       (push.iloc 2 . 3)
       (push.subr.gloc.of |.list| 3 "../stdlib/core/destructuring.scm" . 183349)
       (iloc 2 . 5)
       (push.cons)
       (push.car.iloc (2 . 2) "../stdlib/core/destructuring.scm" . 184379)
       (iloc 2 . 6)
       (push.cons)
       (apply.gloc.of
         |core.destructuring'compile-match|
         "../stdlib/core/destructuring.scm"
         .
         181286))
     (push.const . #f)
     (push.const . #f)
     (push.const . #f)
     (ret.subr.gloc.of |.values| "../stdlib/core/destructuring.scm" . 186389))
   (call
     (push.iloc.0 . 2)
     (apply.gloc.of
       |core.destructuring'predicate-pair?|
       "../stdlib/core/destructuring.scm"
       .
       187406))
   (if.true
     (call
       (push.iloc.0 . 0)
       (push.cadr.iloc (0 . 2) "../stdlib/core/destructuring.scm" . 188473)
       (push.const . #f)
       (subr.gloc.of |.core-hashtable-ref| 3 "../stdlib/core/destructuring.scm" . 188449)
       (if.true.ret)
       (apply.gloc.of |.generate-temporary-symbol| "../stdlib/core/destructuring.scm" . 188488))
     (push)
     (extend . 1)
     (push.iloc.1 . 0)
     (push.cadr.iloc (1 . 2) "../stdlib/core/destructuring.scm" . 189481)
     (push.iloc.0 . 0)
     (subr.gloc.of |.core-hashtable-set!| 3 "../stdlib/core/destructuring.scm" . 189456)
     (cddr.iloc (1 . 2) "../stdlib/core/destructuring.scm" . 190491)
     (if.null?
       (push.iloc.0 . 0)
       (push.iloc.1 . 3)
       (push.subr.gloc.of |.list| 2 "../stdlib/core/destructuring.scm" . 191516)
       (iloc.1 . 4)
       (push.cons)
       (push.iloc.1 . 5)
       (push.iloc.1 . 6)
       (ret.subr.gloc.of |.values| "../stdlib/core/destructuring.scm" . 191508))
     (push.iloc.1 . 0)
     (push.iloc.1 . 1)
     (push.iloc.1 . 2)
     (push.subr.gloc.of |.caddr| 1 "../stdlib/core/destructuring.scm" . 192555)
     (push.iloc.1 . 3)
     (push.iloc.0 . 0)
     (push.iloc.1 . 3)
     (push.subr.gloc.of |.list| 2 "../stdlib/core/destructuring.scm" . 192571)
     (iloc.1 . 4)
     (push.cons)
     (push.iloc.1 . 5)
     (push.iloc.1 . 6)
     (apply.gloc.of |core.destructuring'compile-match| "../stdlib/core/destructuring.scm" . 192532))
   (iloc.0 . 2)
   (if.pair?
     (push.close
       (0 0)
       (push.iloc.1 . 0)
       (push.iloc.1 . 1)
       (push.car.iloc (1 . 2) "../stdlib/core/destructuring.scm" . 196651)
       (call
         (push.iloc.1 . 3)
         (apply.gloc.of |core.destructuring'car+| "../stdlib/core/destructuring.scm" . 196661))
       (push)
       (push.const . pair?)
       (push.iloc.1 . 3)
       (push.subr.gloc.of |.list| 2 "../stdlib/core/destructuring.scm" . 196672)
       (iloc.1 . 4)
       (push.cons)
       (push.iloc.1 . 5)
       (push.iloc.1 . 6)
       (apply.gloc.of
         |core.destructuring'compile-match|
         "../stdlib/core/destructuring.scm"
         .
         196628))
     (push.close
       (3 0)
       (iloc.0 . 0)
       (if.true
         (push.iloc.1 . 0)
         (push.iloc.1 . 1)
         (push.cdr.iloc (1 . 2) "../stdlib/core/destructuring.scm" . 197685)
         (call
           (push.iloc.1 . 3)
           (apply.gloc.of |core.destructuring'cdr+| "../stdlib/core/destructuring.scm" . 197695))
         (push)
         (push.iloc.0 . 0)
         (push.iloc.0 . 1)
         (push.iloc.0 . 2)
         (apply.gloc.of
           |core.destructuring'compile-match|
           "../stdlib/core/destructuring.scm"
           .
           197662))
       (push.const . #f)
       (push.const . #f)
       (push.const . #f)
       (ret.subr.gloc.of |.values| "../stdlib/core/destructuring.scm" . 198684))
     (apply.gloc.of |.call-with-values| "../stdlib/core/destructuring.scm" . 141317))
   (push.iloc.0 . 2)
   (const . ...)
   (if.eq?
     (push.const . #f)
     (push.const . #f)
     (push.const . #f)
     (ret.subr.gloc.of |.values| "../stdlib/core/destructuring.scm" . 200718))
   (push.iloc.0 . 2)
   (const . _)
   (if.eq?
     (push.iloc.0 . 4)
     (push.iloc.0 . 5)
     (push.iloc.0 . 6)
     (ret.subr.gloc.of |.values| "../stdlib/core/destructuring.scm" . 202766))
   (iloc.0 . 2)
   (if.symbol?
     (push.iloc.0 . 4)
     (push.iloc.0 . 3)
     (iloc.0 . 5)
     (push.cons)
     (push.iloc.0 . 2)
     (iloc.0 . 6)
     (push.cons)
     (ret.subr.gloc.of |.values| "../stdlib/core/destructuring.scm" . 204814))
   (iloc.0 . 2)
   (if.null?
     (push.const . null?)
     (push.iloc.0 . 3)
     (push.subr.gloc.of |.list| 2 "../stdlib/core/destructuring.scm" . 206870)
     (iloc.0 . 4)
     (push.cons)
     (push.iloc.0 . 5)
     (push.iloc.0 . 6)
     (ret.subr.gloc.of |.values| "../stdlib/core/destructuring.scm" . 206862))
   (call
     (push.iloc.0 . 2)
     (apply.gloc.of |core.destructuring'choose-pred| "../stdlib/core/destructuring.scm" . 208927))
   (push)
   (push.iloc.0 . 3)
   (push.iloc.0 . 2)
   (push.subr.gloc.of |.list| 3 "../stdlib/core/destructuring.scm" . 208918)
   (iloc.0 . 4)
   (push.cons)
   (push.iloc.0 . 5)
   (push.iloc.0 . 6)
   (ret.subr.gloc.of |.values| "../stdlib/core/destructuring.scm" . 208910))
 (set.gloc.of |core.destructuring'compile-match|)
 (close
   (2 0 . |core.destructuring'reorder-tests|)
   (touch.gloc.of |loop`197|)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.const)
   (apply.gloc.of |loop`197| "../stdlib/core/destructuring.scm" . 212999))
 (set.gloc.of |core.destructuring'reorder-tests|)
 (close
   (1 0 . |core.destructuring'reorder|)
   (push.gloc.of |.fn10.1`10|)
   (push.iloc.0 . 0)
   (apply.gloc.of |.map| "../stdlib/core/destructuring.scm" . 221191))
 (set.gloc.of |core.destructuring'reorder|)
 (close
   (2 0 . |core.destructuring'cse-length|)
   (touch.gloc.of |loop`213|)
   (push.const . 0)
   (push.cadr.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 227356)
   (push.cadr.iloc (0 . 1) "../stdlib/core/destructuring.scm" . 227376)
   (apply.gloc.of |loop`213| "../stdlib/core/destructuring.scm" . 227335))
 (set.gloc.of |core.destructuring'cse-length|)
 (close
   (2 0 . |core.destructuring'cse-1|)
   (call
     (push.close
       (1 0)
       (push.iloc.0 . 0)
       (iloc.1 . 1)
       (if.eq?.ret.const . -1)
       (push.iloc.0 . 0)
       (push.iloc.1 . 1)
       (apply.gloc.of |core.destructuring'cse-length| "../stdlib/core/destructuring.scm" . 236578))
     (push.iloc.0 . 0)
     (apply.gloc.of |.map| "../stdlib/core/destructuring.scm" . 233479))
   (push)
   (extend . 1)
   (call
     (call
       (push.gloc.of |.fn34.1`34|)
       (push.iloc.0 . 0)
       (apply.gloc.of |core.lists'filter| "../stdlib/core/destructuring.scm" . 239642))
     (push)
     (extend . 1)
     (iloc.0 . 0)
     (if.null?.ret.const . 0)
     (push.gloc.of |.min|)
     (push.iloc.0 . 0)
     (apply.gloc.of |.apply| "../stdlib/core/destructuring.scm" . 241693))
   (push)
   (extend . 1)
   (>=n.iloc (0 . 0) 2 "../stdlib/core/destructuring.scm" . 242702)
   (if.false.ret)
   (call (apply.gloc.of |.generate-temporary-symbol| "../stdlib/core/destructuring.scm" . 243741))
   (push)
   (extend . 1)
   (push.cadr.iloc (3 . 1) "../stdlib/core/destructuring.scm" . 244777)
   (push.iloc.1 . 0)
   (push.subr.gloc.of |.list-head| 2 "../stdlib/core/destructuring.scm" . 244766)
   (extend . 1)
   (call
     (push.close
       (2 0)
       (call
         (=n.iloc (0 . 1) -1 "../stdlib/core/destructuring.scm" . 247848)
         (if.true.ret)
         (push.iloc.0 . 1)
         (push.iloc 3 . 0)
         (ret.subr.gloc.of |.>=| "../stdlib/core/destructuring.scm" . 247859))
       (if.true
         (push.car.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 248871)
         (push.iloc 2 . 0)
         (push.cadr.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 248909)
         (push.iloc 3 . 0)
         (subr.gloc.of |.list-tail| 2 "../stdlib/core/destructuring.scm" . 248898)
         (push.cons)
         (push.cddr.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 248934)
         (ret.subr.gloc.of |.cons*| "../stdlib/core/destructuring.scm" . 247843))
       (ret.iloc 0 . 0))
     (push.iloc 4 . 0)
     (push.iloc 3 . 0)
     (apply.gloc.of |.map| "../stdlib/core/destructuring.scm" . 243726))
   (push)
   (extend . 1)
   (car.iloc (1 . 0) "../stdlib/core/destructuring.scm" . 251933)
   (if.symbol?
     (push.iloc.0 . 0)
     (push.iloc 2 . 0)
     (push.iloc.1 . 0)
     (push.subr.gloc.of |.list| 2 "../stdlib/core/destructuring.scm" . 252970)
     (push.subr.gloc.of |.list| 1 "../stdlib/core/destructuring.scm" . 252964)
     (ret.subr.gloc.of |.append| "../stdlib/core/destructuring.scm" . 252948))
   (push.iloc 2 . 0)
   (push.iloc.1 . 0)
   (push.subr.gloc.of |.list| 2 "../stdlib/core/destructuring.scm" . 253978)
   (iloc.0 . 0)
   (ret.cons "../stdlib/core/destructuring.scm" . 253972))
 (set.gloc.of |core.destructuring'cse-1|)
 (close
   (1 0 . |core.destructuring'cse|)
   (extend.enclose+
     (1 0 . loop)
     (iloc.0 . 0)
     (if.null? (ret.iloc 2 . 0))
     (call
       (push.iloc 2 . 0)
       (push.car.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 261155)
       (apply.gloc.of |core.destructuring'cse-1| "../stdlib/core/destructuring.scm" . 261140))
     (push)
     (extend . 1)
     (iloc.0 . 0)
     (if.true
       (push.iloc.0 . 0)
       (apply.gloc.of |core.destructuring'cse| "../stdlib/core/destructuring.scm" . 261133))
     (push.cdr.iloc (1 . 0) "../stdlib/core/destructuring.scm" . 262175)
     (apply.iloc+ (2 . 0) "../stdlib/core/destructuring.scm" . 262169))
   (push.iloc.1 . 0)
   (apply.iloc+ (0 . 0) "../stdlib/core/destructuring.scm" . 258055))
 (set.gloc.of |core.destructuring'cse|)
 (call
   (push.gloc.of |.fn31.1`31|)
   (push.const
     (car . caar)
     (cdr . cadr)
     (caar . caaar)
     (cadr . caadr)
     (cdar . cadar)
     (cddr . caddr)
     (caaar . caaaar)
     (caadr . caaadr)
     (cadar . caadar)
     (caddr . caaddr)
     (cdaar . cadaar)
     (cdadr . cadadr)
     (cddar . caddar)
     (cdddr . cadddr))
   (apply.gloc.of |.for-each| "../stdlib/core/destructuring.scm" . 362499))
 (call
   (push.gloc.of |.fn12.1`12|)
   (push.const
     (car . cdar)
     (cdr . cddr)
     (caar . cdaar)
     (cadr . cdadr)
     (cdar . cddar)
     (cddr . cdddr)
     (caaar . cdaaar)
     (caadr . cdaadr)
     (cadar . cdadar)
     (caddr . cdaddr)
     (cdaar . cddaar)
     (cdadr . cddadr)
     (cddar . cdddar)
     (cdddr . cddddr))
   (apply.gloc.of |.for-each| "../stdlib/core/destructuring.scm" . 366595))
 (call
   (push.const
     (caar import . |.caar|)
     (fixnum? import . |.fixnum?|)
     (reorder-tests import . |core.destructuring'reorder-tests|)
     (caddr import . |.caddr|)
     (+ import . |.+|)
     (caadar import . |.caadar|)
     (unquote import . |.unquote|)
     (cddar import . |.cddar|)
     (symbol? import . |.symbol?|)
     (cdar import . |.cdar|)
     (choose-pred import . |core.destructuring'choose-pred|)
     (null? import . |.null?|)
     (destructuring-match import . |core.destructuring'destructuring-match|)
     (quote import . |.quote|)
     (let* import . |.let*|)
     (count-pair import . |core.destructuring'count-pair|)
     (cse import . |core.destructuring'cse|)
     (cdaddr import . |.cdaddr|)
     (cdr import . |.cdr|)
     (memoize-ref import . |core.destructuring'memoize-ref|)
     (cdadar import . |.cdadar|)
     (number? import . |.number?|)
     (memq import . |.memq|)
     (list import . |.list|)
     (ellipsis-pair? import . |core.destructuring'ellipsis-pair?|)
     (reorder import . |core.destructuring'reorder|)
     (>= import . |.>=|)
     (datum->syntax import . |.datum->syntax|)
     (drop-last-cdr import . |core.destructuring'drop-last-cdr|)
     (cse-1 import . |core.destructuring'cse-1|)
     (caaadr import . |.caaadr|)
     (boolean? import . |.boolean?|)
     (list-head import . |.list-head|)
     (unquote-splicing import . |.unquote-splicing|)
     (cond import . |.cond|)
     (cadr import . |.cadr|)
     (vector import . |.vector|)
     (cse-length import . |core.destructuring'cse-length|)
     (cdaar import . |.cdaar|)
     (- import . |.-|)
     (drop-last-n-pair import . |core.destructuring'drop-last-n-pair|)
     (not import . |.not|)
     (set! import . |.set!|)
     (cddadr import . |.cddadr|)
     (quasiquote import . |.quasiquote|)
     (pair? import . |.pair?|)
     (syntax->datum import . |.syntax->datum|)
     (last-cdr import . |core.destructuring'last-cdr|)
     (define-syntax import . |.define-syntax|)
     (_ import . |._|)
     (ca---r import . |core.destructuring'ca---r|)
     (cadaar import . |.cadaar|)
     (eq? import . |.eq?|)
     (vector-ref import . |.vector-ref|)
     (list? import . |.list?|)
     (else import . |.else|)
     (cadadr import . |.cadadr|)
     (drop-last-pair import . |core.destructuring'drop-last-pair|)
     (car+ import . |core.destructuring'car+|)
     (char? import . |.char?|)
     (generate-temporary-symbol import . |.generate-temporary-symbol|)
     (cddaar import . |.cddaar|)
     (count-non-dotted-pattern import . |core.destructuring'count-non-dotted-pattern|)
     (equal? import . |.equal?|)
     (list-tail import . |.list-tail|)
     (caaaar import . |.caaaar|)
     (cd---r import . |core.destructuring'cd---r|)
     (cadddr import . |.cadddr|)
     (for-each import . |.for-each|)
     (duplicates? import . |core.destructuring'duplicates?|)
     (cdddar import . |.cdddar|)
     (cddr import . |.cddr|)
     (= import . |.=|)
     (reverse import . |.reverse|)
     (last-pair import . |core.destructuring'last-pair|)
     (syntax-case import . |.syntax-case|)
     (partition import . |core.lists'partition|)
     (cdadr import . |.cdadr|)
     (destructuring-bind import . |core.destructuring'destructuring-bind|)
     (filter import . |core.lists'filter|)
     (cons import . |.cons|)
     (... import . |....|)
     (assoc import . |.assoc|)
     (make-core-hashtable import . |.make-core-hashtable|)
     (caaddr import . |.caaddr|)
     (syntax-violation import . |.syntax-violation|)
     (eqv? import . |.eqv?|)
     (cdddr import . |.cdddr|)
     (caddar import . |.caddar|)
     (and import . |.and|)
     (begin import . |.begin|)
     (predicate-pair? import . |core.destructuring'predicate-pair?|)
     (cadar import . |.cadar|)
     (vector-set! import . |.vector-set!|)
     (caaar import . |.caaar|)
     (<= import . |.<=|)
     (map import . |.map|)
     (min import . |.min|)
     (lambda import . |.lambda|)
     (last-n-pair import . |core.destructuring'last-n-pair|)
     (cdaaar import . |.cdaaar|)
     (cddddr import . |.cddddr|)
     (< import . |.<|)
     (with-syntax import . |core.syntax-case'with-syntax|)
     (define import . |.define|)
     (append import . |.append|)
     (core-hashtable-ref import . |.core-hashtable-ref|)
     (compile-match import . |core.destructuring'compile-match|)
     (core-hashtable->alist import . |.core-hashtable->alist|)
     (letrec* import . |.letrec*|)
     (values import . |.values|)
     (car import . |.car|)
     (let-values import . |.let-values|)
     (cdr+ import . |core.destructuring'cdr+|)
     (=> import . |.=>|)
     (core-hashtable-set! import . |.core-hashtable-set!|)
     (caadr import . |.caadr|)
     (apply import . |.apply|)
     (quoted-pair? import . |core.destructuring'quoted-pair?|)
     (let import . |.let|)
     (cdaadr import . |.cdaadr|)
     (or import . |.or|)
     (if import . |.if|)
     (syntax import . |.syntax|))
   (extend . 1)
   (call
     (push.const . syntax)
     (push.const . |core.destructuring'destructuring-bind|)
     (call
       (push.gloc.of |.fn4.1`4|)
       (apply.gloc.of |.transformer-thunk| "../stdlib/core/destructuring.scm" . 6145))
     (push)
     (push.iloc.0 . 0)
     (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/destructuring.scm" . 6145))
   (push.const . syntax)
   (push.const . |core.destructuring'destructuring-match|)
   (call
     (push.gloc.of |.fn8.1`8|)
     (apply.gloc.of |.transformer-thunk| "../stdlib/core/destructuring.scm" . 6145))
   (push)
   (push.iloc.0 . 0)
   (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/destructuring.scm" . 6145))
 (push.const . core.destructuring)
 (push.const . #f)
 (push.const
   (destructuring-match import . |core.destructuring'destructuring-match|)
   (destructuring-bind import . |core.destructuring'destructuring-bind|))
 (apply.gloc.of |.intern-scheme-library| "../stdlib/core/destructuring.scm" . 6145))

((close
   (1 0)
   (call
     (call
       (push.iloc.0 . 0)
       (push.const . record-name)
       (push.const (record-name . 0))
       (push.const . record-name)
       (push.const)
       (apply.gloc.of |.syntax-transcribe| "../stdlib/core/records.scm" . 157756))
     (push)
     (apply.gloc.of |.syntax->datum| "../stdlib/core/records.scm" . 157741))
   (push)
   (push.subr.gloc.of |.symbol->string| 1 "../stdlib/core/records.scm" . 157725)
   (extend . 1)
   (push.iloc.1 . 0)
   (call
     (call
       (push.iloc.1 . 0)
       (push.const . record-name)
       (push.const (record-name . 0))
       (push.const . record-name)
       (push.const)
       (apply.gloc.of |.syntax-transcribe| "../stdlib/core/records.scm" . 158766))
     (push)
     (push.const . "make-")
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.string-append| 2 "../stdlib/core/records.scm" . 158811)
     (push.subr.gloc.of |.string->symbol| 1 "../stdlib/core/records.scm" . 158795)
     (apply.gloc.of |.datum->syntax| "../stdlib/core/records.scm" . 158766))
   (push)
   (call
     (call
       (push.iloc.1 . 0)
       (push.const . record-name)
       (push.const (record-name . 0))
       (push.const . record-name)
       (push.const)
       (apply.gloc.of |.syntax-transcribe| "../stdlib/core/records.scm" . 159788))
     (push)
     (push.iloc.0 . 0)
     (push.const . "?")
     (push.subr.gloc.of |.string-append| 2 "../stdlib/core/records.scm" . 159833)
     (push.subr.gloc.of |.string->symbol| 1 "../stdlib/core/records.scm" . 159817)
     (apply.gloc.of |.datum->syntax| "../stdlib/core/records.scm" . 159788))
   (push)
   (push.subr.gloc.of |.list| 2 "../stdlib/core/records.scm" . 158766)
   (push.const)
   (push.const constructor-name predicate-name)
   (push.const . #f)
   (push.gloc.of |.fn9.1`9|)
   (push.subr.gloc.of |.list| 3 "../stdlib/core/records.scm" . 157708)
   (push.const . _)
   (push.const . #f)
   (push.gloc.of |.fn19.1`19|)
   (push.subr.gloc.of |.list| 3 "../stdlib/core/records.scm" . 158766)
   (apply.gloc.of |.syntax-dispatch| "../stdlib/core/records.scm" . 157708))
 (set.gloc.of |.fn5.1`5|)
 (close
   (1 0)
   (call
     (push.iloc.0 . 0)
     (push.const . e1)
     (push.const (e1 . 0))
     (push.const . e1)
     (push.const)
     (apply.gloc.of |.syntax-transcribe| "../stdlib/core/records.scm" . 69651))
   (push)
   (apply.gloc.of |.identifier?| "../stdlib/core/records.scm" . 69651))
 (set.gloc.of |.fn17.1`17|)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (push.const define-record-type (record-name constructor-name predicate-name) record-clauses ...)
   (push.const (record-clauses . 1) (predicate-name . 0) (constructor-name . 0) (record-name . 0))
   (push.const . #f)
   (push.const)
   (apply.gloc.of |.syntax-transcribe| "../stdlib/core/records.scm" . 160784))
 (set.gloc.of |.fn9.1`9|)
 (close
   (1 0)
   (call
     (push.iloc.0 . 0)
     (push.const . name)
     (push.const (name . 0))
     (push.const . name)
     (push.const)
     (apply.gloc.of |.syntax-transcribe| "../stdlib/core/records.scm" . 165907))
   (push)
   (apply.gloc.of |.identifier?| "../stdlib/core/records.scm" . 165907))
 (set.gloc.of |.fn7.1`7|)
 (close
   (1 0)
   (push.gloc.of |.patvars|)
   (push.iloc.0 . 0)
   (push.const)
   (push.const _ name)
   (push.gloc.of |.fn7.1`7|)
   (push.gloc.of |.fn14.1`14|)
   (push.subr.gloc.of |.list| 3 "../stdlib/core/records.scm" . 163845)
   (apply.gloc.of |.syntax-dispatch| "../stdlib/core/records.scm" . 163845))
 (set.gloc.of |.fn8.1`8|)
 (close
   (1 0)
   (push.const . with-syntax)
   (push.const . "value does not match to pattern")
   (push.const
     (rtd-parent
       (cond ((stash-ref 'parent-rtd #f) => car)
             ((stash-ref 'parent #f) (syntax (record-type-rtd parent)))
             (else (syntax #f))))
     (rcd-parent
       (cond ((stash-ref 'parent-rtd #f) => cdr)
             ((stash-ref 'parent #f) (syntax (record-type-rcd parent)))
             (else (syntax #f))))
     (uid (stash-ref 'nongenerative (syntax #f)))
     (sealed (stash-ref 'sealed (syntax #f)))
     (opaque (stash-ref 'opaque (syntax #f)))
     (protocol (stash-ref 'protocol (syntax #f)))
     (((fields _ _) ...) (datum->syntax (syntax k) (stash-ref 'fields '()))))
   (apply.gloc.of |.syntax-violation| "../stdlib/core/records.scm" . 115760))
 (set.gloc.of |.fn24.1`24|)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (push.const define name (record-accessor (record-type-rtd record-name) n))
   (push.const (n . 0) (record-name . 0) (name . 0))
   (push.const . #f)
   (push.const)
   (apply.gloc.of |.syntax-transcribe| "../stdlib/core/records.scm" . 142380))
 (set.gloc.of |.fn25.1`25|)
 (close
   (1 0)
   (push.const . with-syntax)
   (push.const . "value does not match to pattern")
   (push.const (parent (stash-ref 'parent (syntax #f))))
   (apply.gloc.of |.syntax-violation| "../stdlib/core/records.scm" . 114730))
 (set.gloc.of |.fn12.1`12|)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (push.const begin record-type constructor predicate accessors ... mutators ...)
   (push.const (mutators . 1) (accessors . 1) (predicate . 0) (constructor . 0) (record-type . 0))
   (push.const . #f)
   (push.const)
   (apply.gloc.of |.syntax-transcribe| "../stdlib/core/records.scm" . 153616))
 (set.gloc.of |.fn23.1`23|)
 (close
   (1 0)
   (subr.gloc.of |.make-core-hashtable| 0)
   (push)
   (extend . 1)
   (extend.unbound . 3)
   (push.close
     (2 0 . stash-set!)
     (call
       (push.iloc 2 . 0)
       (push.iloc.0 . 0)
       (push.const . #f)
       (subr.gloc.of |.core-hashtable-ref| 3 "../stdlib/core/records.scm" . 40978)
       (if.false.ret)
       (push.const . define-record-type)
       (push.const . "duplicate ~a clause")
       (push.iloc.0 . 0)
       (push.subr.gloc.of |.format| 2 "../stdlib/core/records.scm" . 42040)
       (push.iloc 3 . 0)
       (apply.gloc.of |.syntax-violation| "../stdlib/core/records.scm" . 42002))
     (push.iloc 2 . 0)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.subr.gloc.of |.list| 1 "../stdlib/core/records.scm" . 43052)
     (ret.subr.gloc.of |.core-hashtable-set!| "../stdlib/core/records.scm" . 43021))
   (push.close
     (2 0 . stash-ref)
     (push.iloc 2 . 0)
     (push.iloc.0 . 0)
     (push.const . #f)
     (push.subr.gloc.of |.core-hashtable-ref| 3 "../stdlib/core/records.scm" . 47124)
     (extend . 1)
     (iloc.0 . 0)
     (if.true (push.iloc.0 . 0) (ret.subr.gloc.of |.car| "../stdlib/core/records.scm" . 47117))
     (ret.iloc 1 . 1))
   (push.close
     (2 0 . parse-record-clauses)
     (push.close
       (1 0)
       (push.gloc.of |.patvars|)
       (push.iloc.0 . 0)
       (push.const parent protocol parent-rtd sealed opaque nongenerative fields)
       (push.const parent e1)
       (push.gloc.of |.fn16.1`16|)
       (push.close
         (1 0)
         (push.const . parent)
         (call
           (push.iloc.0 . 0)
           (push.const . e1)
           (push.const (e1 . 0))
           (push.const . e1)
           (push.const)
           (apply.gloc.of |.syntax-transcribe| "../stdlib/core/records.scm" . 57363))
         (push)
         (apply.iloc (3 . 0) "../stdlib/core/records.scm" . 57363))
       (push.subr.gloc.of |.list| 3 "../stdlib/core/records.scm" . 54288)
       (push.const protocol e1)
       (push.const . #f)
       (push.close
         (1 0)
         (push.const . protocol)
         (call
           (push.iloc.0 . 0)
           (push.const . e1)
           (push.const (e1 . 0))
           (push.const . e1)
           (push.const)
           (apply.gloc.of |.syntax-transcribe| "../stdlib/core/records.scm" . 59411))
         (push)
         (apply.iloc (3 . 0) "../stdlib/core/records.scm" . 59411))
       (push.subr.gloc.of |.list| 3 "../stdlib/core/records.scm" . 54288)
       (push.const parent-rtd e1 e2)
       (push.const . #f)
       (push.close
         (1 0)
         (push.const . parent-rtd)
         (call
           (push.iloc.0 . 0)
           (push.const . e1)
           (push.const (e1 . 0))
           (push.const . e1)
           (push.const)
           (apply.gloc.of |.syntax-transcribe| "../stdlib/core/records.scm" . 61483))
         (push)
         (call
           (push.iloc.0 . 0)
           (push.const . e2)
           (push.const (e2 . 0))
           (push.const . e2)
           (push.const)
           (apply.gloc.of |.syntax-transcribe| "../stdlib/core/records.scm" . 61483))
         (push.cons)
         (apply.iloc (3 . 0) "../stdlib/core/records.scm" . 61459))
       (push.subr.gloc.of |.list| 3 "../stdlib/core/records.scm" . 54288)
       (push.const sealed e1)
       (push.gloc.of |.fn22.1`22|)
       (push.close
         (1 0)
         (push.const . sealed)
         (call
           (push.iloc.0 . 0)
           (push.const . e1)
           (push.const (e1 . 0))
           (push.const . e1)
           (push.const)
           (apply.gloc.of |.syntax-transcribe| "../stdlib/core/records.scm" . 64531))
         (push)
         (apply.iloc (3 . 0) "../stdlib/core/records.scm" . 64531))
       (push.subr.gloc.of |.list| 3 "../stdlib/core/records.scm" . 54288)
       (push.const opaque e1)
       (push.gloc.of |.fn18.1`18|)
       (push.close
         (1 0)
         (push.const . opaque)
         (call
           (push.iloc.0 . 0)
           (push.const . e1)
           (push.const (e1 . 0))
           (push.const . e1)
           (push.const)
           (apply.gloc.of |.syntax-transcribe| "../stdlib/core/records.scm" . 67603))
         (push)
         (apply.iloc (3 . 0) "../stdlib/core/records.scm" . 67603))
       (push.subr.gloc.of |.list| 3 "../stdlib/core/records.scm" . 54288)
       (push.const nongenerative e1)
       (push.gloc.of |.fn17.1`17|)
       (push.close
         (1 0)
         (push.const . nongenerative)
         (call
           (push.iloc.0 . 0)
           (push.const . e1)
           (push.const (e1 . 0))
           (push.const . e1)
           (push.const)
           (apply.gloc.of |.syntax-transcribe| "../stdlib/core/records.scm" . 70675))
         (push)
         (apply.iloc (3 . 0) "../stdlib/core/records.scm" . 70675))
       (push.subr.gloc.of |.list| 3 "../stdlib/core/records.scm" . 54288)
       (push.const nongenerative)
       (push.const . #f)
       (push.close
         (1 0)
         (push.const . nongenerative)
         (call
           (call
             (push.iloc.0 . 0)
             (push.const . k)
             (push.const)
             (push.const . k)
             (push.const)
             (apply.gloc.of |.syntax-transcribe| "../stdlib/core/records.scm" . 72750))
           (push)
           (push.const . "non-generative-record-type ~a")
           (subr.gloc.of |.gensym| 0)
           (push)
           (push.subr.gloc.of |.format| 2 "../stdlib/core/records.scm" . 72785)
           (push.subr.gloc.of |.string->symbol| 1 "../stdlib/core/records.scm" . 72769)
           (apply.gloc.of |.datum->syntax| "../stdlib/core/records.scm" . 72750))
         (push)
         (apply.iloc (3 . 0) "../stdlib/core/records.scm" . 72723))
       (push.subr.gloc.of |.list| 3 "../stdlib/core/records.scm" . 54288)
       (push.const fields specs ...)
       (push.const . #f)
       (push.close
         (1 0)
         (push.const . fields)
         (call
           (push.close
             (1 0)
             (call
               (iloc.0 . 0)
               (if.not.pair?.ret.const . #f)
               (cdr.iloc (0 . 0) "../stdlib/core/records.scm" . 77851)
               (ret.pair? "../stdlib/core/records.scm" . 77851))
             (push)
             (extend . 1)
             (call
               (iloc.0 . 0)
               (if.false.ret)
               (cddr.iloc (1 . 0) "../stdlib/core/records.scm" . 77851)
               (ret.pair? "../stdlib/core/records.scm" . 77851))
             (push)
             (extend . 1)
             (call
               (iloc.1 . 0)
               (if.false.ret)
               (cddr.iloc (2 . 0) "../stdlib/core/records.scm" . 77851)
               (ret.null? "../stdlib/core/records.scm" . 77851))
             (push)
             (extend . 1)
             (call
               (iloc.1 . 0)
               (if.false.ret)
               (push.iloc 3 . 0)
               (subr.gloc.of |.cdddr| 1 "../stdlib/core/records.scm" . 77851)
               (if.not.null?.ret.const . #f)
               (push.car.iloc (3 . 0) "../stdlib/core/records.scm" . 77851)
               (const . immutable)
               (if.not.eq?.ret.const . #f)
               (cadr.iloc (3 . 0) "../stdlib/core/records.scm" . 77851)
               (if.not.symbol?.ret.const . #f)
               (push.iloc 3 . 0)
               (push.subr.gloc.of |.caddr| 1 "../stdlib/core/records.scm" . 77851)
               (ret.subr.gloc.of |.symbol?| "../stdlib/core/records.scm" . 77851))
             (if.true
               (push.const . immutable)
               (push.cadr.iloc (3 . 0) "../stdlib/core/records.scm" . 77851)
               (push.subr.gloc.of |.list| 2 "../stdlib/core/records.scm" . 77851)
               (push.iloc 3 . 0)
               (push.subr.gloc.of |.caddr| 1 "../stdlib/core/records.scm" . 77851)
               (push.const #f)
               (ret.subr.gloc.of |.cons*| "../stdlib/core/records.scm" . 77851))
             (call
               (iloc.1 . 0)
               (if.false.ret)
               (push.iloc 3 . 0)
               (subr.gloc.of |.cdddr| 1 "../stdlib/core/records.scm" . 77851)
               (if.not.pair?.ret.const . #f)
               (push.iloc 3 . 0)
               (subr.gloc.of |.cddddr| 1 "../stdlib/core/records.scm" . 77851)
               (if.not.null?.ret.const . #f)
               (push.car.iloc (3 . 0) "../stdlib/core/records.scm" . 77851)
               (const . mutable)
               (if.not.eq?.ret.const . #f)
               (cadr.iloc (3 . 0) "../stdlib/core/records.scm" . 77851)
               (if.not.symbol?.ret.const . #f)
               (push.iloc 3 . 0)
               (subr.gloc.of |.caddr| 1 "../stdlib/core/records.scm" . 77851)
               (if.not.symbol?.ret.const . #f)
               (push.iloc 3 . 0)
               (push.subr.gloc.of |.cadddr| 1 "../stdlib/core/records.scm" . 77851)
               (ret.subr.gloc.of |.symbol?| "../stdlib/core/records.scm" . 77851))
             (if.true
               (push.const . mutable)
               (push.cadr.iloc (3 . 0) "../stdlib/core/records.scm" . 77851)
               (push.subr.gloc.of |.list| 2 "../stdlib/core/records.scm" . 77851)
               (push.iloc 3 . 0)
               (push.subr.gloc.of |.caddr| 1 "../stdlib/core/records.scm" . 77851)
               (push.iloc 3 . 0)
               (push.subr.gloc.of |.cadddr| 1 "../stdlib/core/records.scm" . 77851)
               (ret.subr.gloc.of |.list| "../stdlib/core/records.scm" . 77851))
             (call
               (iloc.0 . 0)
               (if.false.ret)
               (push.car.iloc (3 . 0) "../stdlib/core/records.scm" . 77851)
               (const . immutable)
               (if.not.eq?.ret.const . #f)
               (push.cadr.iloc (3 . 0) "../stdlib/core/records.scm" . 77851)
               (ret.subr.gloc.of |.symbol?| "../stdlib/core/records.scm" . 77851))
             (if.true
               (push.const . immutable)
               (push.cadr.iloc (3 . 0) "../stdlib/core/records.scm" . 77851)
               (push.subr.gloc.of |.list| 2 "../stdlib/core/records.scm" . 77851)
               (push.const . "~a-~a")
               (push.iloc 6 . 0)
               (push.cadr.iloc (3 . 0) "../stdlib/core/records.scm" . 77851)
               (push.subr.gloc.of |.format| 3 "../stdlib/core/records.scm" . 77851)
               (push.subr.gloc.of |.string->symbol| 1 "../stdlib/core/records.scm" . 77851)
               (push.const #f)
               (ret.subr.gloc.of |.cons*| "../stdlib/core/records.scm" . 77851))
             (call
               (iloc.0 . 0)
               (if.false.ret)
               (push.car.iloc (3 . 0) "../stdlib/core/records.scm" . 77851)
               (const . mutable)
               (if.not.eq?.ret.const . #f)
               (push.cadr.iloc (3 . 0) "../stdlib/core/records.scm" . 77851)
               (ret.subr.gloc.of |.symbol?| "../stdlib/core/records.scm" . 77851))
             (if.true
               (push.cadr.iloc (3 . 0) "../stdlib/core/records.scm" . 77851)
               (extend . 1)
               (push.const . mutable)
               (push.iloc.0 . 0)
               (push.subr.gloc.of |.list| 2 "../stdlib/core/records.scm" . 77851)
               (push.const . "~a-~a")
               (push.iloc 7 . 0)
               (push.iloc.0 . 0)
               (push.subr.gloc.of |.format| 3 "../stdlib/core/records.scm" . 77851)
               (push.subr.gloc.of |.string->symbol| 1 "../stdlib/core/records.scm" . 77851)
               (push.const . "~a-~a-set!")
               (push.iloc 7 . 0)
               (push.iloc.0 . 0)
               (push.subr.gloc.of |.format| 3 "../stdlib/core/records.scm" . 77851)
               (push.subr.gloc.of |.string->symbol| 1 "../stdlib/core/records.scm" . 77851)
               (ret.subr.gloc.of |.list| "../stdlib/core/records.scm" . 77851))
             (iloc 3 . 0)
             (if.symbol?
               (push.const . immutable)
               (push.iloc 3 . 0)
               (push.subr.gloc.of |.list| 2 "../stdlib/core/records.scm" . 77851)
               (push.const . "~a-~a")
               (push.iloc 6 . 0)
               (push.iloc 3 . 0)
               (push.subr.gloc.of |.format| 3 "../stdlib/core/records.scm" . 77851)
               (push.subr.gloc.of |.string->symbol| 1 "../stdlib/core/records.scm" . 77851)
               (push.const #f)
               (ret.subr.gloc.of |.cons*| "../stdlib/core/records.scm" . 77851))
             (push.const . define-record-type)
             (push.const . "malformed field spec")
             (push.iloc 9 . 0)
             (push.iloc 3 . 0)
             (apply.gloc.of |.syntax-violation| "../stdlib/core/records.scm" . 77851))
           (call
             (call
               (push.iloc.0 . 0)
               (push.const specs ...)
               (push.const (specs . 1))
               (push.const . #f)
               (push.const)
               (apply.gloc.of |.syntax-transcribe| "../stdlib/core/records.scm" . 74771))
             (push)
             (apply.gloc.of |.syntax->datum| "../stdlib/core/records.scm" . 74771))
           (push)
           (apply.gloc.of |.map| "../stdlib/core/records.scm" . 74771))
         (push)
         (apply.iloc (3 . 0) "../stdlib/core/records.scm" . 74771))
       (push.subr.gloc.of |.list| 3 "../stdlib/core/records.scm" . 53262)
       (push.const . _)
       (push.const . #f)
       (push.close
         (1 0)
         (push.const . define-record-type)
         (push.const . "malformed record clauses")
         (push.iloc 5 . 0)
         (call
           (push.iloc.1 . 0)
           (apply.gloc.of |.syntax->datum| "../stdlib/core/records.scm" . 101464))
         (push)
         (apply.gloc.of |.syntax-violation| "../stdlib/core/records.scm" . 101397))
       (push.subr.gloc.of |.list| 3 "../stdlib/core/records.scm" . 54288)
       (apply.gloc.of |.syntax-dispatch| "../stdlib/core/records.scm" . 53262))
     (push.iloc.0 . 1)
     (apply.gloc.of |.for-each| "../stdlib/core/records.scm" . 51211))
   (enclose . 3)
   (push.gloc.of |.patvars|)
   (push.iloc 2 . 0)
   (push.const)
   (push.const _ (record-name constructor-name predicate-name) record-clauses ...)
   (push.gloc.of |.fn6.1`6|)
   (push.close
     (1 0)
     (call
       (call
         (call
           (push.iloc.0 . 0)
           (push.const . record-name)
           (push.const (record-name . 0))
           (push.const . record-name)
           (push.const)
           (apply.gloc.of |.syntax-transcribe| "../stdlib/core/records.scm" . 108580))
         (push)
         (apply.gloc.of |.syntax->datum| "../stdlib/core/records.scm" . 108580))
       (push)
       (call
         (push.iloc.0 . 0)
         (push.const record-clauses ...)
         (push.const (record-clauses . 1))
         (push.const . #f)
         (push.const)
         (apply.gloc.of |.syntax-transcribe| "../stdlib/core/records.scm" . 107532))
       (push)
       (apply.iloc (1 . 2) "../stdlib/core/records.scm" . 107532))
     (call
       (call
         (push.const . parent-rtd)
         (push.const . #f)
         (apply.iloc (1 . 1) "../stdlib/core/records.scm" . 109587))
       (if.false.ret)
       (call
         (push.const . parent)
         (push.const . #f)
         (apply.iloc (1 . 1) "../stdlib/core/records.scm" . 110611))
       (if.false.ret)
       (push.const . define-record-type)
       (push.const . "definition have both parent and parent-rtd clause")
       (push.iloc 3 . 0)
       (apply.gloc.of |.syntax-violation| "../stdlib/core/records.scm" . 111635))
     (push.iloc.0 . 0)
     (call
       (push.iloc.0 . 0)
       (call
         (push.const . parent)
         (call
           (push.iloc.0 . 0)
           (push.const . #f)
           (push.const)
           (push.const . #f)
           (push.const)
           (apply.gloc.of |.syntax-transcribe| "../stdlib/core/records.scm" . 107532))
         (push)
         (apply.iloc (1 . 1) "../stdlib/core/records.scm" . 107532))
       (push)
       (push.subr.gloc.of |.list| 1 "../stdlib/core/records.scm" . 107532)
       (push.const)
       (push.const parent)
       (push.const . #f)
       (push.close
         (1 0)
         (push.iloc.0 . 0)
         (call
           (call
             (push.const . parent-rtd)
             (push.const . #f)
             (apply.iloc (2 . 1) "../stdlib/core/records.scm" . 115767))
           (push)
           (extend . 1)
           (iloc.0 . 0)
           (if.true
             (push.iloc.0 . 0)
             (ret.subr.gloc.of |.car| "../stdlib/core/records.scm" . 115760))
           (call
             (push.const . parent)
             (push.const . #f)
             (apply.iloc (3 . 1) "../stdlib/core/records.scm" . 116791))
           (if.true
             (push.iloc.1 . 0)
             (push.const record-type-rtd parent)
             (push.const (parent . 0))
             (push.const . #f)
             (push.const)
             (apply.gloc.of |.syntax-transcribe| "../stdlib/core/records.scm" . 115760))
           (push.iloc.1 . 0)
           (push.const . #f)
           (push.const)
           (push.const . #f)
           (push.const)
           (apply.gloc.of |.syntax-transcribe| "../stdlib/core/records.scm" . 115760))
         (push)
         (call
           (call
             (push.const . parent-rtd)
             (push.const . #f)
             (apply.iloc (2 . 1) "../stdlib/core/records.scm" . 118839))
           (push)
           (extend . 1)
           (iloc.0 . 0)
           (if.true
             (push.iloc.0 . 0)
             (ret.subr.gloc.of |.cdr| "../stdlib/core/records.scm" . 118832))
           (call
             (push.const . parent)
             (push.const . #f)
             (apply.iloc (3 . 1) "../stdlib/core/records.scm" . 119863))
           (if.true
             (push.iloc.1 . 0)
             (push.const record-type-rcd parent)
             (push.const (parent . 0))
             (push.const . #f)
             (push.const)
             (apply.gloc.of |.syntax-transcribe| "../stdlib/core/records.scm" . 118832))
           (push.iloc.1 . 0)
           (push.const . #f)
           (push.const)
           (push.const . #f)
           (push.const)
           (apply.gloc.of |.syntax-transcribe| "../stdlib/core/records.scm" . 118832))
         (push)
         (call
           (push.const . nongenerative)
           (call
             (push.iloc.0 . 0)
             (push.const . #f)
             (push.const)
             (push.const . #f)
             (push.const)
             (apply.gloc.of |.syntax-transcribe| "../stdlib/core/records.scm" . 115747))
           (push)
           (apply.iloc (2 . 1) "../stdlib/core/records.scm" . 115747))
         (push)
         (call
           (push.const . sealed)
           (call
             (push.iloc.0 . 0)
             (push.const . #f)
             (push.const)
             (push.const . #f)
             (push.const)
             (apply.gloc.of |.syntax-transcribe| "../stdlib/core/records.scm" . 115747))
           (push)
           (apply.iloc (2 . 1) "../stdlib/core/records.scm" . 115747))
         (push)
         (call
           (push.const . opaque)
           (call
             (push.iloc.0 . 0)
             (push.const . #f)
             (push.const)
             (push.const . #f)
             (push.const)
             (apply.gloc.of |.syntax-transcribe| "../stdlib/core/records.scm" . 115747))
           (push)
           (apply.iloc (2 . 1) "../stdlib/core/records.scm" . 115747))
         (push)
         (call
           (push.const . protocol)
           (call
             (push.iloc.0 . 0)
             (push.const . #f)
             (push.const)
             (push.const . #f)
             (push.const)
             (apply.gloc.of |.syntax-transcribe| "../stdlib/core/records.scm" . 115747))
           (push)
           (apply.iloc (2 . 1) "../stdlib/core/records.scm" . 115747))
         (push)
         (call
           (call
             (push.iloc.0 . 0)
             (push.const . k)
             (push.const)
             (push.const . k)
             (push.const)
             (apply.gloc.of |.syntax-transcribe| "../stdlib/core/records.scm" . 126008))
           (push)
           (call
             (push.const . fields)
             (push.const)
             (apply.iloc (2 . 1) "../stdlib/core/records.scm" . 126027))
           (push)
           (apply.gloc.of |.datum->syntax| "../stdlib/core/records.scm" . 126008))
         (push)
         (push.subr.gloc.of |.list| 7 "../stdlib/core/records.scm" . 115747)
         (push.const)
         (push.const rtd-parent rcd-parent uid sealed opaque protocol ((fields _ _) ...))
         (push.const . #f)
         (push.gloc.of |.fn1.1`1|)
         (push.subr.gloc.of |.list| 3 "../stdlib/core/records.scm" . 115747)
         (push.const . _)
         (push.const . #f)
         (push.gloc.of |.fn24.1`24|)
         (push.subr.gloc.of |.list| 3 "../stdlib/core/records.scm" . 115760)
         (apply.gloc.of |.syntax-dispatch| "../stdlib/core/records.scm" . 115747))
       (push.subr.gloc.of |.list| 3 "../stdlib/core/records.scm" . 107532)
       (push.const . _)
       (push.const . #f)
       (push.gloc.of |.fn12.1`12|)
       (push.subr.gloc.of |.list| 3 "../stdlib/core/records.scm" . 114730)
       (apply.gloc.of |.syntax-dispatch| "../stdlib/core/records.scm" . 107532))
     (push)
     (call
       (push.iloc.0 . 0)
       (push.const define constructor-name (record-constructor (record-type-rcd record-name)))
       (push.const (record-name . 0) (constructor-name . 0))
       (push.const . #f)
       (push.const)
       (apply.gloc.of |.syntax-transcribe| "../stdlib/core/records.scm" . 107532))
     (push)
     (call
       (push.iloc.0 . 0)
       (push.const define predicate-name (record-predicate (record-type-rtd record-name)))
       (push.const (record-name . 0) (predicate-name . 0))
       (push.const . #f)
       (push.const)
       (apply.gloc.of |.syntax-transcribe| "../stdlib/core/records.scm" . 107532))
     (push)
     (call
       (push.const . -1)
       (extend . 1)
       (push.gloc.of |.values|)
       (call
         (push.close
           (1 0)
           (n+.iloc (1 . 0) 1 "../stdlib/core/records.scm" . 139313)
           (set.iloc 1 . 0)
           (cadr.iloc (0 . 0) "../stdlib/core/records.scm" . 140330)
           (if.false.ret)
           (push.iloc 2 . 0)
           (call
             (call
               (push.iloc 2 . 0)
               (push.const . record-name)
               (push.const (record-name . 0))
               (push.const . record-name)
               (push.const)
               (apply.gloc.of |.syntax-transcribe| "../stdlib/core/records.scm" . 141374))
             (push)
             (push.cadr.iloc (0 . 0) "../stdlib/core/records.scm" . 141403)
             (apply.gloc.of |.datum->syntax| "../stdlib/core/records.scm" . 141374))
           (push)
           (call
             (call
               (push.iloc 2 . 0)
               (push.const . k)
               (push.const)
               (push.const . k)
               (push.const)
               (apply.gloc.of |.syntax-transcribe| "../stdlib/core/records.scm" . 141420))
             (push)
             (push.iloc.1 . 0)
             (apply.gloc.of |.datum->syntax| "../stdlib/core/records.scm" . 141420))
           (push)
           (push.subr.gloc.of |.list| 2 "../stdlib/core/records.scm" . 141374)
           (push.const)
           (push.const name n)
           (push.const . #f)
           (push.gloc.of |.fn25.1`25|)
           (push.subr.gloc.of |.list| 3 "../stdlib/core/records.scm" . 140325)
           (push.const . _)
           (push.const . #f)
           (push.gloc.of |.fn13.1`13|)
           (push.subr.gloc.of |.list| 3 "../stdlib/core/records.scm" . 141374)
           (apply.gloc.of |.syntax-dispatch| "../stdlib/core/records.scm" . 140325))
         (call
           (push.const . fields)
           (push.const)
           (apply.iloc (2 . 1) "../stdlib/core/records.scm" . 143395))
         (push)
         (apply.gloc.of |.map| "../stdlib/core/records.scm" . 136212))
       (push)
       (apply.gloc.of |core.lists'filter| "../stdlib/core/records.scm" . 136212))
     (push)
     (call
       (push.const . -1)
       (extend . 1)
       (push.gloc.of |.values|)
       (call
         (push.close
           (1 0)
           (n+.iloc (1 . 0) 1 "../stdlib/core/records.scm" . 148529)
           (set.iloc 1 . 0)
           (push.iloc.0 . 0)
           (subr.gloc.of |.caddr| 1 "../stdlib/core/records.scm" . 149546)
           (if.false.ret)
           (push.iloc 2 . 0)
           (call
             (call
               (push.iloc 2 . 0)
               (push.const . record-name)
               (push.const (record-name . 0))
               (push.const . record-name)
               (push.const)
               (apply.gloc.of |.syntax-transcribe| "../stdlib/core/records.scm" . 150590))
             (push)
             (push.iloc.0 . 0)
             (push.subr.gloc.of |.caddr| 1 "../stdlib/core/records.scm" . 150619)
             (apply.gloc.of |.datum->syntax| "../stdlib/core/records.scm" . 150590))
           (push)
           (call
             (call
               (push.iloc 2 . 0)
               (push.const . k)
               (push.const)
               (push.const . k)
               (push.const)
               (apply.gloc.of |.syntax-transcribe| "../stdlib/core/records.scm" . 150637))
             (push)
             (push.iloc.1 . 0)
             (apply.gloc.of |.datum->syntax| "../stdlib/core/records.scm" . 150637))
           (push)
           (push.subr.gloc.of |.list| 2 "../stdlib/core/records.scm" . 150590)
           (push.const)
           (push.const name n)
           (push.const . #f)
           (push.gloc.of |.fn11.1`11|)
           (push.subr.gloc.of |.list| 3 "../stdlib/core/records.scm" . 149541)
           (push.const . _)
           (push.const . #f)
           (push.gloc.of |.fn10.1`10|)
           (push.subr.gloc.of |.list| 3 "../stdlib/core/records.scm" . 150590)
           (apply.gloc.of |.syntax-dispatch| "../stdlib/core/records.scm" . 149541))
         (call
           (push.const . fields)
           (push.const)
           (apply.iloc (2 . 1) "../stdlib/core/records.scm" . 152611))
         (push)
         (apply.gloc.of |.map| "../stdlib/core/records.scm" . 145428))
       (push)
       (apply.gloc.of |core.lists'filter| "../stdlib/core/records.scm" . 145428))
     (push)
     (push.subr.gloc.of |.list| 5 "../stdlib/core/records.scm" . 107532)
     (push.const)
     (push.const record-type constructor predicate (accessors ...) (mutators ...))
     (push.const . #f)
     (push.gloc.of |.fn23.1`23|)
     (push.subr.gloc.of |.list| 3 "../stdlib/core/records.scm" . 107532)
     (push.const . _)
     (push.const . #f)
     (push.gloc.of |.fn20.1`20|)
     (push.subr.gloc.of |.list| 3 "../stdlib/core/records.scm" . 114721)
     (apply.gloc.of |.syntax-dispatch| "../stdlib/core/records.scm" . 107532))
   (push.subr.gloc.of |.list| 3 "../stdlib/core/records.scm" . 38921)
   (push.const _ record-name record-clauses ...)
   (push.gloc.of |.fn4.1`4|)
   (push.gloc.of |.fn5.1`5|)
   (push.subr.gloc.of |.list| 3 "../stdlib/core/records.scm" . 38921)
   (apply.gloc.of |.syntax-dispatch| "../stdlib/core/records.scm" . 38921))
 (set.gloc.of |.fn21.1`21|)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (push.const define name (record-mutator (record-type-rtd record-name) n))
   (push.const (n . 0) (record-name . 0) (name . 0))
   (push.const . #f)
   (push.const)
   (apply.gloc.of |.syntax-transcribe| "../stdlib/core/records.scm" . 151596))
 (set.gloc.of |.fn11.1`11|)
 (close
   (1 0)
   (call
     (call
       (push.iloc.0 . 0)
       (push.const . record-name)
       (push.const (record-name . 0))
       (push.const . record-name)
       (push.const)
       (apply.gloc.of |.syntax-transcribe| "../stdlib/core/records.scm" . 106513))
     (push)
     (apply.gloc.of |.identifier?| "../stdlib/core/records.scm" . 106513))
   (if.false.ret)
   (call
     (call
       (push.iloc.0 . 0)
       (push.const . constructor-name)
       (push.const (constructor-name . 0))
       (push.const . constructor-name)
       (push.const)
       (apply.gloc.of |.syntax-transcribe| "../stdlib/core/records.scm" . 106541))
     (push)
     (apply.gloc.of |.identifier?| "../stdlib/core/records.scm" . 106541))
   (if.false.ret)
   (call
     (push.iloc.0 . 0)
     (push.const . predicate-name)
     (push.const (predicate-name . 0))
     (push.const . predicate-name)
     (push.const)
     (apply.gloc.of |.syntax-transcribe| "../stdlib/core/records.scm" . 106574))
   (push)
   (apply.gloc.of |.identifier?| "../stdlib/core/records.scm" . 106574))
 (set.gloc.of |.fn6.1`6|)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (push.const record-type-rcd name)
   (push.const (name . 0))
   (push.const . #f)
   (push.const)
   (apply.gloc.of |.syntax-transcribe| "../stdlib/core/records.scm" . 171048))
 (set.gloc.of |.fn2.1`2|)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (push.const
     define
     record-name
     (let* ((rtd
              (make-record-type-descriptor
                'record-name
                rtd-parent
                'uid
                sealed
                opaque
                '#(fields ...)))
            (rcd (make-record-constructor-descriptor rtd rcd-parent protocol)))
       (make-record-type 'record-name rtd rcd)))
   (push.const
     (protocol . 0)
     (rcd-parent . 0)
     (fields . 1)
     (opaque . 0)
     (sealed . 0)
     (uid . 0)
     (rtd-parent . 0)
     (record-name . 0))
   (push.const . #f)
   (push.const)
   (apply.gloc.of |.syntax-transcribe| "../stdlib/core/records.scm" . 128046))
 (set.gloc.of |.fn1.1`1|)
 (close
   (1 0)
   (call
     (push.iloc.0 . 0)
     (push.const . record-name)
     (push.const (record-name . 0))
     (push.const . record-name)
     (push.const)
     (apply.gloc.of |.syntax-transcribe| "../stdlib/core/records.scm" . 156684))
   (push)
   (apply.gloc.of |.identifier?| "../stdlib/core/records.scm" . 156684))
 (set.gloc.of |.fn4.1`4|)
 (close
   (1 0)
   (push.const . with-syntax)
   (push.const . "value does not match to pattern")
   (push.const
     (name (datum->syntax (syntax record-name) (cadr spec)))
     (n (datum->syntax (syntax k) index)))
   (apply.gloc.of |.syntax-violation| "../stdlib/core/records.scm" . 141374))
 (set.gloc.of |.fn13.1`13|)
 (close
   (1 0)
   (call
     (call
       (push.iloc.0 . 0)
       (push.const . e1)
       (push.const (e1 . 0))
       (push.const . e1)
       (push.const)
       (apply.gloc.of |.syntax-transcribe| "../stdlib/core/records.scm" . 66589))
     (push)
     (apply.gloc.of |.syntax->datum| "../stdlib/core/records.scm" . 66589))
   (push)
   (ret.subr.gloc.of |.boolean?| "../stdlib/core/records.scm" . 66579))
 (set.gloc.of |.fn18.1`18|)
 (close
   (1 0)
   (call
     (call
       (push.iloc.0 . 0)
       (push.const . e1)
       (push.const (e1 . 0))
       (push.const . e1)
       (push.const)
       (apply.gloc.of |.syntax-transcribe| "../stdlib/core/records.scm" . 63517))
     (push)
     (apply.gloc.of |.syntax->datum| "../stdlib/core/records.scm" . 63517))
   (push)
   (ret.subr.gloc.of |.boolean?| "../stdlib/core/records.scm" . 63507))
 (set.gloc.of |.fn22.1`22|)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (push.const record-type-rtd name)
   (push.const (name . 0))
   (push.const . #f)
   (push.const)
   (apply.gloc.of |.syntax-transcribe| "../stdlib/core/records.scm" . 165928))
 (set.gloc.of |.fn14.1`14|)
 (close
   (1 0)
   (call
     (push.iloc.0 . 0)
     (push.const . name)
     (push.const (name . 0))
     (push.const . name)
     (push.const)
     (apply.gloc.of |.syntax-transcribe| "../stdlib/core/records.scm" . 171027))
   (push)
   (apply.gloc.of |.identifier?| "../stdlib/core/records.scm" . 171027))
 (set.gloc.of |.fn15.1`15|)
 (close
   (1 0)
   (call
     (push.iloc.0 . 0)
     (push.const . e1)
     (push.const (e1 . 0))
     (push.const . e1)
     (push.const)
     (apply.gloc.of |.syntax-transcribe| "../stdlib/core/records.scm" . 56339))
   (push)
   (apply.gloc.of |.identifier?| "../stdlib/core/records.scm" . 56339))
 (set.gloc.of |.fn16.1`16|)
 (close
   (1 0)
   (push.const . with-syntax)
   (push.const . "value does not match to pattern")
   (push.const
     (constructor-name
       (datum->syntax (syntax record-name) (string->symbol (string-append "make-" base-name))))
     (predicate-name
       (datum->syntax (syntax record-name) (string->symbol (string-append base-name "?")))))
   (apply.gloc.of |.syntax-violation| "../stdlib/core/records.scm" . 158766))
 (set.gloc.of |.fn19.1`19|)
 (close
   (1 0)
   (push.const . with-syntax)
   (push.const . "value does not match to pattern")
   (push.const
     (name (datum->syntax (syntax record-name) (caddr spec)))
     (n (datum->syntax (syntax k) index)))
   (apply.gloc.of |.syntax-violation| "../stdlib/core/records.scm" . 150590))
 (set.gloc.of |.fn10.1`10|)
 (close
   (1 0)
   (push.const . with-syntax)
   (push.const . "value does not match to pattern")
   (push.const
     (record-type
       (with-syntax ((parent (stash-ref 'parent (syntax #f))))
         (with-syntax ((rtd-parent
                         (cond ((stash-ref 'parent-rtd #f) => car)
                               ((stash-ref 'parent #f) (syntax (record-type-rtd parent)))
                               (else (syntax #f))))
                       (rcd-parent
                         (cond ((stash-ref 'parent-rtd #f) => cdr)
                               ((stash-ref 'parent #f) (syntax (record-type-rcd parent)))
                               (else (syntax #f))))
                       (uid (stash-ref 'nongenerative (syntax #f)))
                       (sealed (stash-ref 'sealed (syntax #f)))
                       (opaque (stash-ref 'opaque (syntax #f)))
                       (protocol (stash-ref 'protocol (syntax #f)))
                       (((fields _ _) ...) (datum->syntax (syntax k) (stash-ref 'fields '()))))
           (syntax
             (define record-name
               (let* ((rtd
                        (make-record-type-descriptor
                          'record-name
                          rtd-parent
                          'uid
                          sealed
                          opaque
                          '#(fields ...)))
                      (rcd (make-record-constructor-descriptor rtd rcd-parent protocol)))
                 (make-record-type 'record-name rtd rcd)))))))
     (constructor
       (syntax (define constructor-name (record-constructor (record-type-rcd record-name)))))
     (predicate (syntax (define predicate-name (record-predicate (record-type-rtd record-name)))))
     ((accessors ...)
      (let ((index -1))
        (filter
          values
          (map (lambda (spec)
                 (set! index (+ index 1))
                 (and (cadr spec)
                      (with-syntax ((name (datum->syntax (syntax record-name) (cadr spec)))
                                    (n (datum->syntax (syntax k) index)))
                        (syntax (define name (record-accessor (record-type-rtd record-name) n))))))
               (stash-ref 'fields '())))))
     ((mutators ...)
      (let ((index -1))
        (filter
          values
          (map (lambda (spec)
                 (set! index (+ index 1))
                 (and (caddr spec)
                      (with-syntax ((name (datum->syntax (syntax record-name) (caddr spec)))
                                    (n (datum->syntax (syntax k) index)))
                        (syntax (define name (record-mutator (record-type-rtd record-name) n))))))
               (stash-ref 'fields '()))))))
   (apply.gloc.of |.syntax-violation| "../stdlib/core/records.scm" . 114721))
 (set.gloc.of |.fn20.1`20|)
 (close
   (1 0)
   (push.gloc.of |.patvars|)
   (push.iloc.0 . 0)
   (push.const)
   (push.const _ name)
   (push.gloc.of |.fn15.1`15|)
   (push.gloc.of |.fn2.1`2|)
   (push.subr.gloc.of |.list| 3 "../stdlib/core/records.scm" . 168965)
   (apply.gloc.of |.syntax-dispatch| "../stdlib/core/records.scm" . 168965))
 (set.gloc.of |.fn3.1`3|)
 (call
   (push.const core destructuring)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/records.scm" . 6145))
 (call
   (push.const core syntax-case)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/records.scm" . 6145))
 (call
   (push.const core lists)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/records.scm" . 6145))
 (call
   (push.const core primitives)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/records.scm" . 6145))
 (call
   (push.const
     (datum->syntax import . |.datum->syntax|)
     (lambda import . |.lambda|)
     (unquote import . |.unquote|)
     (core-hashtable-set! import . |.core-hashtable-set!|)
     (and import . |.and|)
     (or import . |.or|)
     (let* import . |.let*|)
     (let import . |.let|)
     (string->symbol import . |.string->symbol|)
     (... import . |....|)
     (gensym import . |.gensym|)
     (record-type-rcd import . |.record-type-rcd|)
     (letrec* import . |.letrec*|)
     (quote import . |.quote|)
     (map import . |.map|)
     (syntax-case import . |.syntax-case|)
     (record-predicate import . |.record-predicate|)
     (make-record-type-descriptor import . |.make-record-type-descriptor|)
     (+ import . |.+|)
     (record-constructor-descriptor import . |core.records'record-constructor-descriptor|)
     (define import . |.define|)
     (cdr import . |.cdr|)
     (destructuring-match import . |core.destructuring'destructuring-match|)
     (record-mutator import . |.record-mutator|)
     (filter import . |core.lists'filter|)
     (quasiquote import . |.quasiquote|)
     (=> import . |.=>|)
     (caddr import . |.caddr|)
     (for-each import . |.for-each|)
     (_ import . |._|)
     (syntax-violation import . |.syntax-violation|)
     (cond import . |.cond|)
     (define-syntax import . |.define-syntax|)
     (cadr import . |.cadr|)
     (record-type-descriptor import . |core.records'record-type-descriptor|)
     (begin import . |.begin|)
     (string-append import . |.string-append|)
     (make-record-constructor-descriptor import . |.make-record-constructor-descriptor|)
     (core-hashtable-ref import . |.core-hashtable-ref|)
     (cons import . |.cons|)
     (record-accessor import . |.record-accessor|)
     (define-record-type import . |core.records'define-record-type|)
     (syntax->datum import . |.syntax->datum|)
     (if import . |.if|)
     (syntax import . |.syntax|)
     (identifier? import . |.identifier?|)
     (symbol->string import . |.symbol->string|)
     (set! import . |.set!|)
     (list import . |.list|)
     (symbol? import . |.symbol?|)
     (format import . |.format|)
     (make-record-type import . |.make-record-type|)
     (else import . |.else|)
     (make-core-hashtable import . |.make-core-hashtable|)
     (record-constructor import . |.record-constructor|)
     (car import . |.car|)
     (record-type-rtd import . |.record-type-rtd|)
     (boolean? import . |.boolean?|)
     (with-syntax import . |core.syntax-case'with-syntax|)
     (values import . |.values|))
   (extend . 1)
   (call
     (push.const . syntax)
     (push.const . |core.records'define-record-type|)
     (call
       (push.gloc.of |.fn21.1`21|)
       (apply.gloc.of |.transformer-thunk| "../stdlib/core/records.scm" . 6145))
     (push)
     (push.iloc.0 . 0)
     (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/records.scm" . 6145))
   (call
     (push.const . syntax)
     (push.const . |core.records'record-type-descriptor|)
     (call
       (push.gloc.of |.fn8.1`8|)
       (apply.gloc.of |.transformer-thunk| "../stdlib/core/records.scm" . 6145))
     (push)
     (push.iloc.0 . 0)
     (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/records.scm" . 6145))
   (push.const . syntax)
   (push.const . |core.records'record-constructor-descriptor|)
   (call
     (push.gloc.of |.fn3.1`3|)
     (apply.gloc.of |.transformer-thunk| "../stdlib/core/records.scm" . 6145))
   (push)
   (push.iloc.0 . 0)
   (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/records.scm" . 6145))
 (push.const . core.records)
 (push.const . #f)
 (push.const
   (make-record-type-descriptor import . |.make-record-type-descriptor|)
   (record-type-descriptor? import . |.record-type-descriptor?|)
   (make-record-constructor-descriptor import . |.make-record-constructor-descriptor|)
   (record-constructor import . |.record-constructor|)
   (record-predicate import . |.record-predicate|)
   (record-accessor import . |.record-accessor|)
   (record-mutator import . |.record-mutator|)
   (record? import . |.record?|)
   (record-rtd import . |.record-rtd|)
   (record-type-name import . |.record-type-name|)
   (record-type-parent import . |.record-type-parent|)
   (record-type-uid import . |.record-type-uid|)
   (record-type-generative? import . |.record-type-generative?|)
   (record-type-sealed? import . |.record-type-sealed?|)
   (record-type-opaque? import . |.record-type-opaque?|)
   (record-type-field-names import . |.record-type-field-names|)
   (record-field-mutable? import . |.record-field-mutable?|)
   (record-type-descriptor import . |core.records'record-type-descriptor|)
   (record-constructor-descriptor import . |core.records'record-constructor-descriptor|)
   (define-record-type import . |core.records'define-record-type|))
 (apply.gloc.of |.intern-scheme-library| "../stdlib/core/records.scm" . 6145))

((close
   (1 0)
   (push.iloc.0 . 0)
   (push.const
     begin
     (define-record-type
       (condition-type constructor temp)
       (parent supertype)
       (fields (immutable cond-fields rec-accessors) ...))
     (define predicate (condition-predicate (record-type-descriptor condition-type)))
     (define cond-accessors
       (condition-accessor (record-type-descriptor condition-type) rec-accessors))
     ...)
   (push.const
     (cond-accessors . 1)
     (predicate . 0)
     (rec-accessors . 1)
     (cond-fields . 1)
     (supertype . 0)
     (constructor . 0)
     (condition-type . 0))
   (push.const . #f)
   (push.const)
   (apply.gloc.of |.syntax-transcribe| "../stdlib/core/conditions.scm" . 40972))
 (set.gloc.of |.fn1.1`1|)
 (close
   (1 0)
   (push.gloc.of |.patvars|)
   (push.iloc.0 . 0)
   (push.const)
   (push.const _ condition-type supertype constructor predicate (cond-fields cond-accessors) ...)
   (push.const . #f)
   (push.gloc.of |.fn3.1`3|)
   (push.subr.gloc.of |.list| 3 "../stdlib/core/conditions.scm" . 31749)
   (apply.gloc.of |.syntax-dispatch| "../stdlib/core/conditions.scm" . 31749))
 (set.gloc.of |.fn2.1`2|)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (call
     (push.close
       (1 0)
       (call
         (push.iloc.1 . 0)
         (push.const . condition-type)
         (push.const (condition-type . 0))
         (push.const . condition-type)
         (push.const)
         (apply.gloc.of |.syntax-transcribe| "../stdlib/core/conditions.scm" . 38944))
       (push)
       (push.const . "~a-~a")
       (call
         (call
           (push.iloc.1 . 0)
           (push.const . condition-type)
           (push.const (condition-type . 0))
           (push.const . condition-type)
           (push.const)
           (apply.gloc.of |.syntax-transcribe| "../stdlib/core/conditions.scm" . 39008))
         (push)
         (apply.gloc.of |.syntax->datum| "../stdlib/core/conditions.scm" . 39008))
       (push)
       (call
         (push.iloc.0 . 0)
         (apply.gloc.of |.syntax->datum| "../stdlib/core/conditions.scm" . 39041))
       (push)
       (push.subr.gloc.of |.format| 3 "../stdlib/core/conditions.scm" . 38992)
       (push.subr.gloc.of |.string->symbol| 1 "../stdlib/core/conditions.scm" . 38976)
       (apply.gloc.of |.datum->syntax| "../stdlib/core/conditions.scm" . 38944))
     (call
       (push.iloc.0 . 0)
       (push.const cond-fields ...)
       (push.const (cond-fields . 1))
       (push.const . #f)
       (push.const)
       (apply.gloc.of |.syntax-transcribe| "../stdlib/core/conditions.scm" . 36874))
     (push)
     (apply.gloc.of |.map| "../stdlib/core/conditions.scm" . 36874))
   (push)
   (push.subr.gloc.of |.list| 1 "../stdlib/core/conditions.scm" . 36874)
   (push.const)
   (push.const (rec-accessors ...))
   (push.const . #f)
   (push.gloc.of |.fn1.1`1|)
   (push.subr.gloc.of |.list| 3 "../stdlib/core/conditions.scm" . 36874)
   (push.const . _)
   (push.const . #f)
   (push.gloc.of |.fn4.1`4|)
   (push.subr.gloc.of |.list| 3 "../stdlib/core/conditions.scm" . 37913)
   (apply.gloc.of |.syntax-dispatch| "../stdlib/core/conditions.scm" . 36874))
 (set.gloc.of |.fn3.1`3|)
 (close
   (1 0)
   (push.const . with-syntax)
   (push.const . "value does not match to pattern")
   (push.const
     ((rec-accessors ...)
      (map (lambda (a)
             (datum->syntax
               (syntax condition-type)
               (string->symbol
                 (format "~a-~a" (syntax->datum (syntax condition-type)) (syntax->datum a)))))
           (syntax (cond-fields ...)))))
   (apply.gloc.of |.syntax-violation| "../stdlib/core/conditions.scm" . 36889))
 (set.gloc.of |.fn4.1`4|)
 (call
   (push.const core records)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/conditions.scm" . 6145))
 (call
   (push.const core syntax-case)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/conditions.scm" . 6145))
 (call
   (push.const core primitives)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/conditions.scm" . 6145))
 (call
   (push.const . syntax)
   (push.const . |core.conditions'define-condition-type|)
   (call
     (push.gloc.of |.fn2.1`2|)
     (apply.gloc.of |.transformer-thunk| "../stdlib/core/conditions.scm" . 6145))
   (push)
   (push.const
     (syntax->datum import . |.syntax->datum|)
     (condition-predicate import . |.condition-predicate|)
     (format import . |.format|)
     (if import . |.if|)
     (datum->syntax import . |.datum->syntax|)
     (condition-accessor import . |.condition-accessor|)
     (define-syntax import . |.define-syntax|)
     (quote import . |.quote|)
     (... import . |....|)
     (syntax import . |.syntax|)
     (_ import . |._|)
     (record-type-descriptor import . |core.records'record-type-descriptor|)
     (or import . |.or|)
     (let import . |.let|)
     (set! import . |.set!|)
     (letrec* import . |.letrec*|)
     (string->symbol import . |.string->symbol|)
     (define import . |.define|)
     (begin import . |.begin|)
     (syntax-case import . |.syntax-case|)
     (and import . |.and|)
     (map import . |.map|)
     (with-syntax import . |core.syntax-case'with-syntax|)
     (define-record-type import . |core.records'define-record-type|)
     (define-condition-type import . |core.conditions'define-condition-type|)
     (lambda import . |.lambda|))
   (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/conditions.scm" . 6145))
 (push.const . core.conditions)
 (push.const . #f)
 (push.const
   (define-condition-type import . |core.conditions'define-condition-type|)
   (condition import . |.condition|)
   (simple-conditions import . |.simple-conditions|)
   (condition? import . |.condition?|)
   (condition-predicate import . |.condition-predicate|)
   (condition-accessor import . |.condition-accessor|)
   (&condition import . |.&condition|)
   (&message import . |.&message|)
   (make-message-condition import . |.make-message-condition|)
   (message-condition? import . |.message-condition?|)
   (condition-message import . |.condition-message|)
   (&warning import . |.&warning|)
   (make-warning import . |.make-warning|)
   (warning? import . |.warning?|)
   (&serious import . |.&serious|)
   (make-serious-condition import . |.make-serious-condition|)
   (serious-condition? import . |.serious-condition?|)
   (&error import . |.&error|)
   (make-error import . |.make-error|)
   (error? import . |.error?|)
   (&violation import . |.&violation|)
   (make-violation import . |.make-violation|)
   (violation? import . |.violation?|)
   (&assertion import . |.&assertion|)
   (make-assertion-violation import . |.make-assertion-violation|)
   (assertion-violation? import . |.assertion-violation?|)
   (&irritants import . |.&irritants|)
   (make-irritants-condition import . |.make-irritants-condition|)
   (irritants-condition? import . |.irritants-condition?|)
   (condition-irritants import . |.condition-irritants|)
   (&who import . |.&who|)
   (make-who-condition import . |.make-who-condition|)
   (who-condition? import . |.who-condition?|)
   (condition-who import . |.condition-who|)
   (&non-continuable import . |.&non-continuable|)
   (make-non-continuable-violation import . |.make-non-continuable-violation|)
   (non-continuable-violation? import . |.non-continuable-violation?|)
   (&implementation-restriction import . |.&implementation-restriction|)
   (make-implementation-restriction-violation import . |.make-implementation-restriction-violation|)
   (implementation-restriction-violation? import . |.implementation-restriction-violation?|)
   (&lexical import . |.&lexical|)
   (make-lexical-violation import . |.make-lexical-violation|)
   (lexical-violation? import . |.lexical-violation?|)
   (&syntax import . |.&syntax|)
   (make-syntax-violation import . |.make-syntax-violation|)
   (syntax-violation? import . |.syntax-violation?|)
   (syntax-violation-form import . |.syntax-violation-form|)
   (syntax-violation-subform import . |.syntax-violation-subform|)
   (&undefined import . |.&undefined|)
   (make-undefined-violation import . |.make-undefined-violation|)
   (undefined-violation? import . |.undefined-violation?|))
 (apply.gloc.of |.intern-scheme-library| "../stdlib/core/conditions.scm" . 6145))

((close
   (1 0)
   (call
     (push.iloc.0 . 0)
     (push.const . k)
     (push.const)
     (push.const . k)
     (push.const)
     (apply.gloc.of |.syntax-transcribe| "../stdlib/core/io.scm" . 71690))
   (push)
   (call
     (push.const . output)
     (push.gloc.of |core.io.assistants'direction-codes|)
     (apply.gloc.of |core.io.assistants'lookup| "../stdlib/core/io.scm" . 71709))
   (push)
   (apply.gloc.of |.datum->syntax| "../stdlib/core/io.scm" . 71690))
 (set.gloc.of |.fn14.1`14|)
 (close
   (1 0)
   (call
     (push.iloc.0 . 0)
     (push.const . k)
     (push.const)
     (push.const . k)
     (push.const)
     (apply.gloc.of |.syntax-transcribe| "../stdlib/core/io.scm" . 69642))
   (push)
   (call
     (push.const . input)
     (push.gloc.of |core.io.assistants'direction-codes|)
     (apply.gloc.of |core.io.assistants'lookup| "../stdlib/core/io.scm" . 69661))
   (push)
   (apply.gloc.of |.datum->syntax| "../stdlib/core/io.scm" . 69642))
 (set.gloc.of |.fn8.1`8|)
 (close
   (1 0)
   (push.gloc.of |.patvars|)
   (push.iloc.0 . 0)
   (push.const)
   (push.const _ type)
   (push.const . #f)
   (push.close
     (1 0)
     (call
       (push.iloc.0 . 0)
       (push.const . k)
       (push.const)
       (push.const . k)
       (push.const)
       (apply.gloc.of |.syntax-transcribe| "../stdlib/core/io.scm" . 57354))
     (push)
     (call
       (call
         (call
           (push.iloc.0 . 0)
           (push.const . type)
           (push.const (type . 0))
           (push.const . type)
           (push.const)
           (apply.gloc.of |.syntax-transcribe| "../stdlib/core/io.scm" . 59431))
         (push)
         (apply.gloc.of |.syntax->datum| "../stdlib/core/io.scm" . 59416))
       (push)
       (push.gloc.of |core.io.assistants'type-codes|)
       (push.subr.gloc.of |.assq| 2 "../stdlib/core/io.scm" . 59410)
       (extend . 1)
       (iloc.0 . 0)
       (if.true (push.iloc.0 . 0) (ret.subr.gloc.of |.cdr| "../stdlib/core/io.scm" . 59403))
       (push.const . port-type)
       (push.const . "invalid port type")
       (push.iloc 2 . 0)
       (apply.gloc.of |.syntax-violation| "../stdlib/core/io.scm" . 61458))
     (push)
     (apply.gloc.of |.datum->syntax| "../stdlib/core/io.scm" . 57354))
   (push.subr.gloc.of |.list| 3 "../stdlib/core/io.scm" . 54277)
   (push.const . _)
   (push.const . #f)
   (push.close
     (1 0)
     (push.const . port-type)
     (push.const . "invalid port type")
     (push.iloc.1 . 0)
     (apply.gloc.of |.syntax-violation| "../stdlib/core/io.scm" . 63498))
   (push.subr.gloc.of |.list| 3 "../stdlib/core/io.scm" . 55303)
   (apply.gloc.of |.syntax-dispatch| "../stdlib/core/io.scm" . 54277))
 (set.gloc.of |.fn12.1`12|)
 (close
   (1 0)
   (push.cdr.iloc (0 . 0) "../stdlib/core/io.scm" . 43061)
   (car.iloc (0 . 0) "../stdlib/core/io.scm" . 43069)
   (ret.cons "../stdlib/core/io.scm" . 43055))
 (set.gloc.of |.fn4.1`4|)
 (close
   (1 0)
   (call
     (push.iloc.0 . 0)
     (push.const . k)
     (push.const)
     (push.const . k)
     (push.const)
     (apply.gloc.of |.syntax-transcribe| "../stdlib/core/io.scm" . 73738))
   (push)
   (call
     (push.const . input/output)
     (push.gloc.of |core.io.assistants'direction-codes|)
     (apply.gloc.of |core.io.assistants'lookup| "../stdlib/core/io.scm" . 73757))
   (push)
   (apply.gloc.of |.datum->syntax| "../stdlib/core/io.scm" . 73738))
 (set.gloc.of |.fn7.1`7|)
 (close
   (1 0)
   (push.gloc.of |.patvars|)
   (push.iloc.0 . 0)
   (push.const input output)
   (push.const _ input)
   (push.const . #f)
   (push.gloc.of |.fn8.1`8|)
   (push.subr.gloc.of |.list| 3 "../stdlib/core/io.scm" . 67591)
   (push.const _ output)
   (push.const . #f)
   (push.gloc.of |.fn14.1`14|)
   (push.subr.gloc.of |.list| 3 "../stdlib/core/io.scm" . 67591)
   (push.const _ input output)
   (push.const . #f)
   (push.gloc.of |.fn7.1`7|)
   (push.subr.gloc.of |.list| 3 "../stdlib/core/io.scm" . 67591)
   (push.const . _)
   (push.const . #f)
   (push.close
     (1 0)
     (push.const . port-direction)
     (push.const . "invalid port direction")
     (push.iloc.1 . 0)
     (apply.gloc.of |.syntax-violation| "../stdlib/core/io.scm" . 75786))
   (push.subr.gloc.of |.list| 3 "../stdlib/core/io.scm" . 67591)
   (apply.gloc.of |.syntax-dispatch| "../stdlib/core/io.scm" . 67591))
 (set.gloc.of |.fn13.1`13|)
 (call
   (push.const core primitives)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/io.scm" . 6145))
 (const (input . 1) (output . 2) (input/output . 3))
 (set.gloc.of |core.io.assistants'direction-codes|)
 (const (file . 1) (bytevector . 2) (custom . 3))
 (set.gloc.of |core.io.assistants'type-codes|)
 (const (no-create . 1) (no-fail . 2) (no-truncate . 4))
 (set.gloc.of |core.io.assistants'file-option-codes|)
 (const (none . 1) (line . 2) (block . 3))
 (set.gloc.of |core.io.assistants'buffer-mode-codes|)
 (const (latin-1 . 1) (utf-8 . 2) (utf-16 . 3))
 (set.gloc.of |core.io.assistants'codec-codes|)
 (const (none . 1) (lf . 2) (cr . 3) (crlf . 4) (nel . 5) (crnel . 6) (ls . 7))
 (set.gloc.of |core.io.assistants'eol-style-codes|)
 (const (ignore . 1) (raise . 2) (replace . 3))
 (set.gloc.of |core.io.assistants'error-handling-mode-codes|)
 (close
   (1 0 . |core.io.assistants'flip|)
   (push.gloc.of |.fn4.1`4|)
   (push.iloc.0 . 0)
   (apply.gloc.of |.map| "../stdlib/core/io.scm" . 43038))
 (set.gloc.of |core.io.assistants'flip|)
 (call
   (push.gloc.of |core.io.assistants'codec-codes|)
   (apply.gloc.of |core.io.assistants'flip| "../stdlib/core/io.scm" . 45087))
 (set.gloc.of |core.io.assistants'flipped-codec-codes|)
 (call
   (push.gloc.of |core.io.assistants'eol-style-codes|)
   (apply.gloc.of |core.io.assistants'flip| "../stdlib/core/io.scm" . 47139))
 (set.gloc.of |core.io.assistants'flipped-eol-style-codes|)
 (call
   (push.gloc.of |core.io.assistants'error-handling-mode-codes|)
   (apply.gloc.of |core.io.assistants'flip| "../stdlib/core/io.scm" . 49197))
 (set.gloc.of |core.io.assistants'flipped-error-handling-mode-codes|)
 (close
   (2 0 . |core.io.assistants'lookup|)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.subr.gloc.of |.assq| 2 "../stdlib/core/io.scm" . 51245)
   (extend . 1)
   (iloc.0 . 0)
   (if.true (push.iloc.0 . 0) (ret.subr.gloc.of |.cdr| "../stdlib/core/io.scm" . 51238))
   (ret.const . #f))
 (set.gloc.of |core.io.assistants'lookup|)
 (close
   (1 0 . |core.io.assistants'port-lookup-file-option-code|)
   (push.iloc.0 . 0)
   (push.gloc.of |core.io.assistants'file-option-codes|)
   (apply.gloc.of |core.io.assistants'lookup| "../stdlib/core/io.scm" . 77878))
 (set.gloc.of |core.io.assistants'port-lookup-file-option-code|)
 (close
   (1 0 . |core.io.assistants'port-lookup-buffer-mode-code|)
   (push.iloc.0 . 0)
   (push.gloc.of |core.io.assistants'buffer-mode-codes|)
   (apply.gloc.of |core.io.assistants'lookup| "../stdlib/core/io.scm" . 78902))
 (set.gloc.of |core.io.assistants'port-lookup-buffer-mode-code|)
 (close
   (1 0 . |core.io.assistants'port-lookup-codec-code|)
   (push.iloc.0 . 0)
   (push.gloc.of |core.io.assistants'codec-codes|)
   (apply.gloc.of |core.io.assistants'lookup| "../stdlib/core/io.scm" . 79920))
 (set.gloc.of |core.io.assistants'port-lookup-codec-code|)
 (close
   (1 0 . |core.io.assistants'port-lookup-eol-style-code|)
   (push.iloc.0 . 0)
   (push.gloc.of |core.io.assistants'eol-style-codes|)
   (apply.gloc.of |core.io.assistants'lookup| "../stdlib/core/io.scm" . 80948))
 (set.gloc.of |core.io.assistants'port-lookup-eol-style-code|)
 (close
   (1 0 . |core.io.assistants'port-lookup-error-handling-mode-code|)
   (push.iloc.0 . 0)
   (push.gloc.of |core.io.assistants'error-handling-mode-codes|)
   (apply.gloc.of |core.io.assistants'lookup| "../stdlib/core/io.scm" . 81982))
 (set.gloc.of |core.io.assistants'port-lookup-error-handling-mode-code|)
 (close
   (1 0 . |core.io.assistants'port-reverse-lookup-codec-code|)
   (push.iloc.0 . 0)
   (push.gloc.of |core.io.assistants'flipped-codec-codes|)
   (apply.gloc.of |core.io.assistants'lookup| "../stdlib/core/io.scm" . 83000))
 (set.gloc.of |core.io.assistants'port-reverse-lookup-codec-code|)
 (close
   (1 0 . |core.io.assistants'port-reverse-lookup-eol-style-code|)
   (push.iloc.0 . 0)
   (push.gloc.of |core.io.assistants'flipped-eol-style-codes|)
   (apply.gloc.of |core.io.assistants'lookup| "../stdlib/core/io.scm" . 84028))
 (set.gloc.of |core.io.assistants'port-reverse-lookup-eol-style-code|)
 (close
   (1 0 . |core.io.assistants'port-reverse-lookup-error-handling-mode-code|)
   (push.iloc.0 . 0)
   (push.gloc.of |core.io.assistants'flipped-error-handling-mode-codes|)
   (apply.gloc.of |core.io.assistants'lookup| "../stdlib/core/io.scm" . 85062))
 (set.gloc.of |core.io.assistants'port-reverse-lookup-error-handling-mode-code|)
 (call
   (push.const
     (buffer-mode-codes import . |core.io.assistants'buffer-mode-codes|)
     (port-lookup-eol-style-code import . |core.io.assistants'port-lookup-eol-style-code|)
     (set! import . |.set!|)
     (port-reverse-lookup-error-handling-mode-code
       import
       .
       |core.io.assistants'port-reverse-lookup-error-handling-mode-code|)
     (syntax->datum import . |.syntax->datum|)
     (=> import . |.=>|)
     (flipped-codec-codes import . |core.io.assistants'flipped-codec-codes|)
     (lambda import . |.lambda|)
     (flip import . |core.io.assistants'flip|)
     (port-lookup-error-handling-mode-code
       import
       .
       |core.io.assistants'port-lookup-error-handling-mode-code|)
     (quote import . |.quote|)
     (define-syntax import . |.define-syntax|)
     (letrec* import . |.letrec*|)
     (port-lookup-buffer-mode-code import . |core.io.assistants'port-lookup-buffer-mode-code|)
     (assq import . |.assq|)
     (cons import . |.cons|)
     (define import . |.define|)
     (eol-style-codes import . |core.io.assistants'eol-style-codes|)
     (port-direction import . |core.io.assistants'port-direction|)
     (syntax-case import . |.syntax-case|)
     (port-reverse-lookup-codec-code import . |core.io.assistants'port-reverse-lookup-codec-code|)
     (type-codes import . |core.io.assistants'type-codes|)
     (flipped-error-handling-mode-codes
       import
       .
       |core.io.assistants'flipped-error-handling-mode-codes|)
     (lookup import . |core.io.assistants'lookup|)
     (let import . |.let|)
     (else import . |.else|)
     (raise import . |.raise|)
     (map import . |.map|)
     (or import . |.or|)
     (error-handling-mode-codes import . |core.io.assistants'error-handling-mode-codes|)
     (datum->syntax import . |.datum->syntax|)
     (syntax-violation import . |.syntax-violation|)
     (syntax import . |.syntax|)
     (if import . |.if|)
     (flipped-eol-style-codes import . |core.io.assistants'flipped-eol-style-codes|)
     (port-lookup-file-option-code import . |core.io.assistants'port-lookup-file-option-code|)
     (cdr import . |.cdr|)
     (begin import . |.begin|)
     (direction-codes import . |core.io.assistants'direction-codes|)
     (codec-codes import . |core.io.assistants'codec-codes|)
     (and import . |.and|)
     (port-lookup-codec-code import . |core.io.assistants'port-lookup-codec-code|)
     (port-type import . |core.io.assistants'port-type|)
     (port-reverse-lookup-eol-style-code
       import
       .
       |core.io.assistants'port-reverse-lookup-eol-style-code|)
     (_ import . |._|)
     (file-option-codes import . |core.io.assistants'file-option-codes|)
     (car import . |.car|)
     (cond import . |.cond|))
   (extend . 1)
   (call
     (push.const . syntax)
     (push.const . |core.io.assistants'port-type|)
     (call
       (push.gloc.of |.fn12.1`12|)
       (apply.gloc.of |.transformer-thunk| "../stdlib/core/io.scm" . 6145))
     (push)
     (push.iloc.0 . 0)
     (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/io.scm" . 6145))
   (push.const . syntax)
   (push.const . |core.io.assistants'port-direction|)
   (call
     (push.gloc.of |.fn13.1`13|)
     (apply.gloc.of |.transformer-thunk| "../stdlib/core/io.scm" . 6145))
   (push)
   (push.iloc.0 . 0)
   (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/io.scm" . 6145))
 (push.const . core.io.assistants)
 (push.const . #f)
 (push.const
   (port-type import . |core.io.assistants'port-type|)
   (port-direction import . |core.io.assistants'port-direction|)
   (port-lookup-file-option-code import . |core.io.assistants'port-lookup-file-option-code|)
   (port-lookup-buffer-mode-code import . |core.io.assistants'port-lookup-buffer-mode-code|)
   (port-lookup-codec-code import . |core.io.assistants'port-lookup-codec-code|)
   (port-lookup-eol-style-code import . |core.io.assistants'port-lookup-eol-style-code|)
   (port-lookup-error-handling-mode-code
     import
     .
     |core.io.assistants'port-lookup-error-handling-mode-code|)
   (port-reverse-lookup-codec-code import . |core.io.assistants'port-reverse-lookup-codec-code|)
   (port-reverse-lookup-eol-style-code
     import
     .
     |core.io.assistants'port-reverse-lookup-eol-style-code|)
   (port-reverse-lookup-error-handling-mode-code
     import
     .
     |core.io.assistants'port-reverse-lookup-error-handling-mode-code|))
 (apply.gloc.of |.intern-scheme-library| "../stdlib/core/io.scm" . 6145))
((close (0 0) (ret.const . #f))
 (set.gloc.of |.fn27.1`27|)
 (close (0 0) (apply.gloc.of |core.io'open-string-output-port| "../stdlib/core/io.scm" . 321571))
 (set.gloc.of |.fn43.1`43|)
 (close
   (2 0)
   (push.iloc.0 . 0)
   (call
     (iloc.0 . 1)
     (if.false.ret)
     (push.iloc.0 . 1)
     (apply.gloc.of |core.io'transcoder-descriptor| "../stdlib/core/io.scm" . 691256))
   (push)
   (ret.subr.gloc.of |.make-temporary-file-port| "../stdlib/core/io.scm" . 691209))
 (set.gloc.of |.fn37.1`37|)
 (close (0 0) (ret.const . #f))
 (set.gloc.of |.fn2.1`2|)
 (close
   (1 0)
   (call
     (call
       (push.iloc.0 . 0)
       (push.const options ...)
       (push.const (options . 1))
       (push.const . #f)
       (push.const)
       (apply.gloc.of |.syntax-transcribe| "../stdlib/core/io.scm" . 223242))
     (push)
     (apply.gloc.of |.syntax->datum| "../stdlib/core/io.scm" . 223242))
   (push)
   (apply.gloc.of |core.lists'list-of-unique-symbols?| "../stdlib/core/io.scm" . 223242))
 (set.gloc.of |.fn50.1`50|)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (push.const quote mode)
   (push.const (mode . 0))
   (push.const . #f)
   (push.const)
   (apply.gloc.of |.syntax-transcribe| "../stdlib/core/io.scm" . 245770))
 (set.gloc.of |.fn5.1`5|)
 (close
   (1 0)
   (push.const . with-syntax)
   (push.const . "value does not match to pattern")
   (push.const
     (bits
       (datum->syntax
         (syntax k)
         (apply
           +
           (map (lambda (e)
                  (or (port-lookup-file-option-code e)
                      (syntax-violation 'file-options "invalid file options" x)))
                (syntax->datum (syntax (options ...))))))))
   (apply.gloc.of |.syntax-violation| "../stdlib/core/io.scm" . 225301))
 (set.gloc.of |.fn44.1`44|)
 (close (0 0) (apply.gloc.of |core.io'open-string-output-port| "../stdlib/core/io.scm" . 488486))
 (set.gloc.of |.fn52.1`52|)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (push.const quote style)
   (push.const (style . 0))
   (push.const . #f)
   (push.const)
   (apply.gloc.of |.syntax-transcribe| "../stdlib/core/io.scm" . 270346))
 (set.gloc.of |.fn41.1`41|)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (push.const quote mode)
   (push.const (mode . 0))
   (push.const . #f)
   (push.const)
   (apply.gloc.of |.syntax-transcribe| "../stdlib/core/io.scm" . 280586))
 (set.gloc.of |.fn17.1`17|)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (push.const tuple 'type:file-options bits)
   (push.const (bits . 0))
   (push.const . #f)
   (push.const)
   (apply.gloc.of |.syntax-transcribe| "../stdlib/core/io.scm" . 233484))
 (set.gloc.of |.fn23.1`23|)
 (close
   (1 0)
   (push.gloc.of |.patvars|)
   (push.iloc.0 . 0)
   (push.const)
   (push.const _ options ...)
   (push.gloc.of |.fn50.1`50|)
   (push.close
     (1 0)
     (push.iloc.0 . 0)
     (call
       (call
         (push.iloc.0 . 0)
         (push.const . k)
         (push.const)
         (push.const . k)
         (push.const)
         (apply.gloc.of |.syntax-transcribe| "../stdlib/core/io.scm" . 225301))
       (push)
       (call
         (push.gloc.of |.+|)
         (call
           (push.close
             (1 0)
             (call
               (push.iloc.0 . 0)
               (apply.gloc.of
                 |core.io.assistants'port-lookup-file-option-code|
                 "../stdlib/core/io.scm"
                 .
                 230434))
             (if.true.ret)
             (push.const . file-options)
             (push.const . "invalid file options")
             (push.iloc 2 . 0)
             (apply.gloc.of |.syntax-violation| "../stdlib/core/io.scm" . 231458))
           (call
             (call
               (push.iloc.0 . 0)
               (push.const options ...)
               (push.const (options . 1))
               (push.const . #f)
               (push.const)
               (apply.gloc.of |.syntax-transcribe| "../stdlib/core/io.scm" . 224266))
             (push)
             (apply.gloc.of |.syntax->datum| "../stdlib/core/io.scm" . 224266))
           (push)
           (apply.gloc.of |.map| "../stdlib/core/io.scm" . 224266))
         (push)
         (apply.gloc.of |.apply| "../stdlib/core/io.scm" . 224266))
       (push)
       (apply.gloc.of |.datum->syntax| "../stdlib/core/io.scm" . 224266))
     (push)
     (push.subr.gloc.of |.list| 1 "../stdlib/core/io.scm" . 224266)
     (push.const)
     (push.const bits)
     (push.const . #f)
     (push.gloc.of |.fn23.1`23|)
     (push.subr.gloc.of |.list| 3 "../stdlib/core/io.scm" . 224266)
     (push.const . _)
     (push.const . #f)
     (push.gloc.of |.fn44.1`44|)
     (push.subr.gloc.of |.list| 3 "../stdlib/core/io.scm" . 225301)
     (apply.gloc.of |.syntax-dispatch| "../stdlib/core/io.scm" . 224266))
   (push.subr.gloc.of |.list| 3 "../stdlib/core/io.scm" . 220165)
   (push.const . _)
   (push.const . #f)
   (push.close
     (1 0)
     (push.const . file-options)
     (push.const . "invalid file options")
     (push.iloc.1 . 0)
     (apply.gloc.of |.syntax-violation| "../stdlib/core/io.scm" . 235530))
   (push.subr.gloc.of |.list| 3 "../stdlib/core/io.scm" . 221191)
   (apply.gloc.of |.syntax-dispatch| "../stdlib/core/io.scm" . 220165))
 (set.gloc.of |.fn8.1`8|)
 (close
   (1 0)
   (push.gloc.of |.patvars|)
   (push.iloc.0 . 0)
   (push.const)
   (push.const _ mode)
   (push.close
     (1 0)
     (call
       (call
         (call
           (push.iloc.0 . 0)
           (push.const . mode)
           (push.const (mode . 0))
           (push.const . mode)
           (push.const)
           (apply.gloc.of |.syntax-transcribe| "../stdlib/core/io.scm" . 243771))
         (push)
         (apply.gloc.of |.syntax->datum| "../stdlib/core/io.scm" . 243756))
       (push)
       (apply.gloc.of
         |core.io.assistants'port-lookup-buffer-mode-code|
         "../stdlib/core/io.scm"
         .
         243726))
     (if.true.ret)
     (push.const . buffer-mode)
     (push.const . "invalid buffer mode")
     (push.iloc.1 . 0)
     (apply.gloc.of |.syntax-violation| "../stdlib/core/io.scm" . 244750))
   (push.gloc.of |.fn5.1`5|)
   (push.subr.gloc.of |.list| 3 "../stdlib/core/io.scm" . 240645)
   (push.const . _)
   (push.const . #f)
   (push.close
     (1 0)
     (push.const . buffer-mode)
     (push.const . "invalid buffer mode")
     (push.iloc.1 . 0)
     (apply.gloc.of |.syntax-violation| "../stdlib/core/io.scm" . 247818))
   (push.subr.gloc.of |.list| 3 "../stdlib/core/io.scm" . 241671)
   (apply.gloc.of |.syntax-dispatch| "../stdlib/core/io.scm" . 240645))
 (set.gloc.of |.fn6.1`6|)
 (close
   (1 0)
   (push.gloc.of |.patvars|)
   (push.iloc.0 . 0)
   (push.const)
   (push.const _ style)
   (push.close
     (1 0)
     (call
       (call
         (call
           (push.iloc.0 . 0)
           (push.const . style)
           (push.const (style . 0))
           (push.const . style)
           (push.const)
           (apply.gloc.of |.syntax-transcribe| "../stdlib/core/io.scm" . 268345))
         (push)
         (apply.gloc.of |.syntax->datum| "../stdlib/core/io.scm" . 268330))
       (push)
       (apply.gloc.of
         |core.io.assistants'port-lookup-eol-style-code|
         "../stdlib/core/io.scm"
         .
         268302))
     (if.true.ret)
     (push.const . eol-style)
     (push.const . "invalid eol style")
     (push.iloc.1 . 0)
     (apply.gloc.of |.syntax-violation| "../stdlib/core/io.scm" . 269326))
   (push.gloc.of |.fn41.1`41|)
   (push.subr.gloc.of |.list| 3 "../stdlib/core/io.scm" . 265221)
   (push.const . _)
   (push.const . #f)
   (push.close
     (1 0)
     (push.const . eol-style)
     (push.const . "invalid eol style")
     (push.iloc.1 . 0)
     (apply.gloc.of |.syntax-violation| "../stdlib/core/io.scm" . 272394))
   (push.subr.gloc.of |.list| 3 "../stdlib/core/io.scm" . 266247)
   (apply.gloc.of |.syntax-dispatch| "../stdlib/core/io.scm" . 265221))
 (set.gloc.of |.fn32.1`32|)
 (close (0 0) (ret.const . #f))
 (set.gloc.of |.fn45.1`45|)
 (close (0 0) (ret.const . #f))
 (set.gloc.of |.fn53.1`53|)
 (close
   (1 0)
   (push.gloc.of |.patvars|)
   (push.iloc.0 . 0)
   (push.const)
   (push.const _ mode)
   (push.close
     (1 0)
     (call
       (call
         (call
           (push.iloc.0 . 0)
           (push.const . mode)
           (push.const (mode . 0))
           (push.const . mode)
           (push.const)
           (apply.gloc.of |.syntax-transcribe| "../stdlib/core/io.scm" . 278595))
         (push)
         (apply.gloc.of |.syntax->datum| "../stdlib/core/io.scm" . 278580))
       (push)
       (apply.gloc.of
         |core.io.assistants'port-lookup-error-handling-mode-code|
         "../stdlib/core/io.scm"
         .
         278542))
     (if.true.ret)
     (push.const . error-handling-mode)
     (push.const . "invalid directive")
     (push.iloc.1 . 0)
     (apply.gloc.of |.syntax-violation| "../stdlib/core/io.scm" . 279566))
   (push.gloc.of |.fn17.1`17|)
   (push.subr.gloc.of |.list| 3 "../stdlib/core/io.scm" . 275461)
   (push.const . _)
   (push.const . #f)
   (push.close
     (1 0)
     (push.const . error-handling-mode)
     (push.const . "invalid directive")
     (push.iloc.1 . 0)
     (apply.gloc.of |.syntax-violation| "../stdlib/core/io.scm" . 282634))
   (push.subr.gloc.of |.list| 3 "../stdlib/core/io.scm" . 276487)
   (apply.gloc.of |.syntax-dispatch| "../stdlib/core/io.scm" . 275461))
 (set.gloc.of |.fn13.1`13|)
 (call
   (push.const core chkarg)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/io.scm" . 87041))
 (call
   (push.const core optargs)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/io.scm" . 87041))
 (call
   (push.const core bytevectors)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/io.scm" . 87041))
 (call
   (push.const core conditions)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/io.scm" . 87041))
 (call
   (push.const core lists)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/io.scm" . 87041))
 (call
   (push.const core syntax-case)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/io.scm" . 87041))
 (call
   (push.const core primitives)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/io.scm" . 87041))
 (call
   (push.const core io assistants)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/io.scm" . 87041))
 (close
   (1 0 . |core.io'buffer-mode?|)
   (call
     (push.iloc.0 . 0)
     (apply.gloc.of
       |core.io.assistants'port-lookup-buffer-mode-code|
       "../stdlib/core/io.scm"
       .
       251916))
   (if.false.ret)
   (ret.const . #t))
 (set.gloc.of |core.io'buffer-mode?|)
 (push.const . type:codec)
 (push.const . utf-8)
 (subr.gloc.of |.tuple| 2 "../stdlib/core/io.scm" . 256034)
 (set.gloc.of |core.io'predefined-utf-8-codec|)
 (push.const . type:codec)
 (push.const . utf-16)
 (subr.gloc.of |.tuple| 2 "../stdlib/core/io.scm" . 257059)
 (set.gloc.of |core.io'predefined-utf-16-codec|)
 (push.const . type:codec)
 (push.const . latin-1)
 (subr.gloc.of |.tuple| 2 "../stdlib/core/io.scm" . 258084)
 (set.gloc.of |core.io'predefined-latin-1-codec|)
 (close (0 0 . |core.io'utf-8-codec|) (ret.gloc.of |core.io'predefined-utf-8-codec|))
 (set.gloc.of |core.io'utf-8-codec|)
 (close (0 0 . |core.io'utf-16-codec|) (ret.gloc.of |core.io'predefined-utf-16-codec|))
 (set.gloc.of |core.io'utf-16-codec|)
 (close (0 0 . |core.io'latin-1-codec|) (ret.gloc.of |core.io'predefined-latin-1-codec|))
 (set.gloc.of |core.io'latin-1-codec|)
 (close
   (1 1 . |core.io'make-transcoder|)
   (push.close
     (2 0)
     (push.const . 3)
     (push.subr.gloc.of |.make-bytevector| 1 "../stdlib/core/io.scm" . 287763)
     (extend . 1)
     (push.iloc.0 . 0)
     (push.const . 0)
     (call
       (push.iloc 2 . 0)
       (push.const . 1)
       (push.subr.gloc.of |.tuple-ref| 2 "../stdlib/core/io.scm" . 288828)
       (apply.gloc.of |core.io.assistants'port-lookup-codec-code| "../stdlib/core/io.scm" . 288804))
     (push)
     (subr.gloc.of |.bytevector-u8-set!| 3 "../stdlib/core/io.scm" . 288779)
     (push.iloc.0 . 0)
     (push.const . 1)
     (call
       (push.iloc.1 . 0)
       (apply.gloc.of
         |core.io.assistants'port-lookup-eol-style-code|
         "../stdlib/core/io.scm"
         .
         289828))
     (push)
     (subr.gloc.of |.bytevector-u8-set!| 3 "../stdlib/core/io.scm" . 289803)
     (push.iloc.0 . 0)
     (push.const . 2)
     (call
       (push.iloc.1 . 1)
       (apply.gloc.of
         |core.io.assistants'port-lookup-error-handling-mode-code|
         "../stdlib/core/io.scm"
         .
         290852))
     (push)
     (subr.gloc.of |.bytevector-u8-set!| 3 "../stdlib/core/io.scm" . 290827)
     (push.const . type:transcoder)
     (push.iloc.0 . 0)
     (ret.subr.gloc.of |.tuple| "../stdlib/core/io.scm" . 291851))
   (call
     (push.iloc.0 . 1)
     (push.subr.gloc.of |.length| 1 "../stdlib/core/io.scm" . 286762)
     (extend . 1)
     (=n.iloc (0 . 0) 2 "../stdlib/core/io.scm" . 286782)
     (if.true (ret.iloc 1 . 1))
     (=n.iloc (0 . 0) 1 "../stdlib/core/io.scm" . 286762)
     (if.true
       (push.iloc.1 . 1)
       (push.const . replace)
       (push.subr.gloc.of |.list| 1 "../stdlib/core/io.scm" . 286762)
       (ret.subr.gloc.of |.append| "../stdlib/core/io.scm" . 286762))
     (call (apply.gloc.of |core.io'native-eol-style| "../stdlib/core/io.scm" . 286762))
     (push)
     (push.const . replace)
     (ret.subr.gloc.of |.list| "../stdlib/core/io.scm" . 286762))
   (push)
   (apply.gloc.of |.apply| "../stdlib/core/io.scm" . 87041))
 (set.gloc.of |core.io'make-transcoder|)
 (close
   (1 0 . |core.io'transcoder-descriptor|)
   (push.iloc.0 . 0)
   (push.const . 1)
   (ret.subr.gloc.of |.tuple-ref| "../stdlib/core/io.scm" . 295943))
 (set.gloc.of |core.io'transcoder-descriptor|)
 (close
   (1 0 . |core.io'transcoder-codec|)
   (call
     (call
       (push.iloc.0 . 0)
       (apply.gloc.of |core.io'transcoder-descriptor| "../stdlib/core/io.scm" . 300096))
     (push)
     (push.const . 0)
     (push.subr.gloc.of |.bytevector-u8-ref| 2 "../stdlib/core/io.scm" . 300077)
     (apply.gloc.of
       |core.io.assistants'port-reverse-lookup-codec-code|
       "../stdlib/core/io.scm"
       .
       300045))
   (push)
   (extend . 1)
   (push.iloc.0 . 0)
   (const . latin-1)
   (if.eq? (apply.gloc.of |core.io'latin-1-codec| "../stdlib/core/io.scm" . 301076))
   (push.iloc.0 . 0)
   (const . utf-8)
   (if.eq? (apply.gloc.of |core.io'utf-8-codec| "../stdlib/core/io.scm" . 302098))
   (push.iloc.0 . 0)
   (const . utf-16)
   (if.eq? (apply.gloc.of |core.io'utf-16-codec| "../stdlib/core/io.scm" . 303123))
   (ret.const.unspec))
 (set.gloc.of |core.io'transcoder-codec|)
 (close
   (1 0 . |core.io'transcoder-eol-style|)
   (call
     (push.iloc.0 . 0)
     (apply.gloc.of |core.io'transcoder-descriptor| "../stdlib/core/io.scm" . 307262))
   (push)
   (push.const . 1)
   (push.subr.gloc.of |.bytevector-u8-ref| 2 "../stdlib/core/io.scm" . 307243)
   (apply.gloc.of
     |core.io.assistants'port-reverse-lookup-eol-style-code|
     "../stdlib/core/io.scm"
     .
     307207))
 (set.gloc.of |core.io'transcoder-eol-style|)
 (close
   (1 0 . |core.io'transcoder-error-handling-mode|)
   (call
     (push.iloc.0 . 0)
     (apply.gloc.of |core.io'transcoder-descriptor| "../stdlib/core/io.scm" . 311368))
   (push)
   (push.const . 2)
   (push.subr.gloc.of |.bytevector-u8-ref| 2 "../stdlib/core/io.scm" . 311349)
   (apply.gloc.of
     |core.io.assistants'port-reverse-lookup-error-handling-mode-code|
     "../stdlib/core/io.scm"
     .
     311303))
 (set.gloc.of |core.io'transcoder-error-handling-mode|)
 (call
   (push.const . type:transcoder)
   (subr.gloc.of |.native-transcoder-descriptor| 0)
   (push)
   (push.subr.gloc.of |.tuple| 2 "../stdlib/core/io.scm" . 314391)
   (extend . 1)
   (ret.close (0 0) (ret.iloc 1 . 0)))
 (set.gloc.of |core.io'native-transcoder|)
 (close
   (0 0 . |core.io'native-eol-style|)
   (call (apply.gloc.of |core.io'native-transcoder| "../stdlib/core/io.scm" . 317501))
   (push)
   (apply.gloc.of |core.io'transcoder-eol-style| "../stdlib/core/io.scm" . 317479))
 (set.gloc.of |core.io'native-eol-style|)
 (close
   (2 0 . |core.io'bytevector->string|)
   (push.gloc.of |.fn43.1`43|)
   (push.close
     (2 0)
     (call
       (push.iloc.1 . 0)
       (push.iloc.1 . 1)
       (apply.gloc.of |core.io'open-bytevector-input-port| "../stdlib/core/io.scm" . 323596))
     (push)
     (push.close
       (1 0)
       (extend.enclose+
         (1 0 . loop)
         (push.iloc.0 . 0)
         (subr.gloc.of |.eof-object?| 1 "../stdlib/core/io.scm" . 326679)
         (if.true (apply.iloc (3 . 1) "../stdlib/core/io.scm" . 326695))
         (push.iloc 3 . 0)
         (push.iloc.0 . 0)
         (subr.gloc.of |.put-char| 2 "../stdlib/core/io.scm" . 328727)
         (push.iloc 2 . 0)
         (push.subr.gloc.of |.get-char| 1 "../stdlib/core/io.scm" . 329757)
         (apply.iloc+ (1 . 0) "../stdlib/core/io.scm" . 329751))
       (push.iloc.1 . 0)
       (push.subr.gloc.of |.get-char| 1 "../stdlib/core/io.scm" . 325660)
       (apply.iloc+ (0 . 0) "../stdlib/core/io.scm" . 325646))
     (apply.gloc.of |.call-with-port| "../stdlib/core/io.scm" . 321543))
   (apply.gloc.of |.call-with-values| "../stdlib/core/io.scm" . 87041))
 (set.gloc.of |core.io'bytevector->string|)
 (close
   (2 0 . |core.io'string->bytevector|)
   (push.close
     (0 0)
     (push.iloc.1 . 1)
     (apply.gloc.of |core.io'open-bytevector-output-port| "../stdlib/core/io.scm" . 333859))
   (push.close
     (2 0)
     (call
       (push.iloc.1 . 0)
       (apply.gloc.of |core.io'open-string-input-port| "../stdlib/core/io.scm" . 335882))
     (push)
     (push.close
       (1 0)
       (extend.enclose+
         (1 0 . loop)
         (push.iloc.0 . 0)
         (subr.gloc.of |.eof-object?| 1 "../stdlib/core/io.scm" . 338965)
         (if.true (apply.iloc (3 . 1) "../stdlib/core/io.scm" . 338981))
         (push.iloc 3 . 0)
         (push.iloc.0 . 0)
         (subr.gloc.of |.put-char| 2 "../stdlib/core/io.scm" . 341013)
         (push.iloc 2 . 0)
         (push.subr.gloc.of |.get-char| 1 "../stdlib/core/io.scm" . 342043)
         (apply.iloc+ (1 . 0) "../stdlib/core/io.scm" . 342037))
       (push.iloc.1 . 0)
       (push.subr.gloc.of |.get-char| 1 "../stdlib/core/io.scm" . 337946)
       (apply.iloc+ (0 . 0) "../stdlib/core/io.scm" . 337932))
     (apply.gloc.of |.call-with-port| "../stdlib/core/io.scm" . 333831))
   (apply.gloc.of |.call-with-values| "../stdlib/core/io.scm" . 87041))
 (set.gloc.of |core.io'string->bytevector|)
 (close
   (1 0 . |core.io'port-transcoder|)
   (push.iloc.0 . 0)
   (push.subr.gloc.of |.port-transcoder-descriptor| 1 "../stdlib/core/io.scm" . 348179)
   (extend . 1)
   (iloc.0 . 0)
   (if.false.ret)
   (push.iloc.0 . 0)
   (const . #t)
   (if.eq? (apply.gloc.of |core.io'native-transcoder| "../stdlib/core/io.scm" . 351250))
   (push.const . type:transcoder)
   (push.iloc.0 . 0)
   (ret.subr.gloc.of |.tuple| "../stdlib/core/io.scm" . 352274))
 (set.gloc.of |core.io'port-transcoder|)
 (close
   (1 0 . |core.io'textual-port?|)
   (push.iloc.0 . 0)
   (subr.gloc.of |.port-transcoder-descriptor| 1 "../stdlib/core/io.scm" . 356364)
   (if.false.ret)
   (ret.const . #t))
 (set.gloc.of |core.io'textual-port?|)
 (close
   (1 0 . |core.io'binary-port?|)
   (push.iloc.0 . 0)
   (push.subr.gloc.of |.port-transcoder-descriptor| 1 "../stdlib/core/io.scm" . 360460)
   (ret.subr.gloc.of |.not| "../stdlib/core/io.scm" . 360455))
 (set.gloc.of |core.io'binary-port?|)
 (close
   (2 0 . |core.io'transcoded-port|)
   (push.iloc.0 . 0)
   (call
     (push.iloc.0 . 1)
     (apply.gloc.of |core.io'transcoder-descriptor| "../stdlib/core/io.scm" . 364578))
   (push)
   (ret.subr.gloc.of |.make-transcoded-port| "../stdlib/core/io.scm" . 364551))
 (set.gloc.of |core.io'transcoded-port|)
 (close
   (1 1 . |core.io'open-file-input-port|)
   (push.close
     (3 0)
     (push.const . 1)
     (push.const . 1)
     (push.iloc.1 . 0)
     (push.iloc.0 . 0)
     (push.const . 1)
     (push.subr.gloc.of |.tuple-ref| 2 "../stdlib/core/io.scm" . 377876)
     (call
       (push.iloc.0 . 1)
       (apply.gloc.of
         |core.io.assistants'port-lookup-buffer-mode-code|
         "../stdlib/core/io.scm"
         .
         378900))
     (push)
     (call
       (iloc.0 . 2)
       (if.false.ret)
       (push.iloc.0 . 2)
       (apply.gloc.of |core.io'transcoder-descriptor| "../stdlib/core/io.scm" . 379940))
     (push)
     (ret.subr.gloc.of |.open-port| "../stdlib/core/io.scm" . 374793))
   (call
     (push.iloc.0 . 1)
     (push.subr.gloc.of |.length| 1 "../stdlib/core/io.scm" . 371738)
     (extend . 1)
     (=n.iloc (0 . 0) 3 "../stdlib/core/io.scm" . 371738)
     (if.true (ret.iloc 1 . 1))
     (=n.iloc (0 . 0) 2 "../stdlib/core/io.scm" . 372748)
     (if.true
       (push.iloc.1 . 1)
       (push.const . #f)
       (push.subr.gloc.of |.list| 1 "../stdlib/core/io.scm" . 371738)
       (ret.subr.gloc.of |.append| "../stdlib/core/io.scm" . 371738))
     (=n.iloc (0 . 0) 1 "../stdlib/core/io.scm" . 371738)
     (if.true
       (push.iloc.1 . 1)
       (push.const . block)
       (push.const . #f)
       (push.subr.gloc.of |.list| 2 "../stdlib/core/io.scm" . 371738)
       (ret.subr.gloc.of |.append| "../stdlib/core/io.scm" . 371738))
     (push.const . type:file-options)
     (push.const . 0)
     (push.subr.gloc.of |.tuple| 2 "../stdlib/core/io.scm" . 371738)
     (push.const . block)
     (push.const . #f)
     (ret.subr.gloc.of |.list| "../stdlib/core/io.scm" . 371738))
   (push)
   (apply.gloc.of |.apply| "../stdlib/core/io.scm" . 87041))
 (set.gloc.of |core.io'open-file-input-port|)
 (close
   (1 1 . |core.io'open-bytevector-input-port|)
   (call
     (iloc.0 . 1)
     (if.pair? (push.iloc.0 . 1) (ret.subr.gloc.of |.car| "../stdlib/core/io.scm" . 385033))
     (ret.const . #f))
   (push)
   (extend . 1)
   (push.const . 2)
   (push.const . 1)
   (push.const . bytevector)
   (push.iloc.1 . 0)
   (push.const . #f)
   (call
     (iloc.0 . 0)
     (if.false.ret)
     (push.iloc.0 . 0)
     (apply.gloc.of |core.io'transcoder-descriptor| "../stdlib/core/io.scm" . 390180))
   (push)
   (ret.subr.gloc.of |.open-port| "../stdlib/core/io.scm" . 385033))
 (set.gloc.of |core.io'open-bytevector-input-port|)
 (close
   (1 0 . |core.io'open-string-input-port|)
   (push.iloc.0 . 0)
   (ret.subr.gloc.of |.make-string-input-port| "../stdlib/core/io.scm" . 394247))
 (set.gloc.of |core.io'open-string-input-port|)
 (close
   (5 0 . |core.io'make-custom-binary-input-port|)
   (push.const . 3)
   (push.const . 1)
   (push.iloc.0 . 0)
   (push.const . #f)
   (push.iloc.0 . 1)
   (push.const . #f)
   (push.iloc.0 . 2)
   (push.iloc.0 . 3)
   (push.iloc.0 . 4)
   (push.subr.gloc.of |.vector| 6 "../stdlib/core/io.scm" . 401426)
   (push.const . #f)
   (push.const . #f)
   (ret.subr.gloc.of |.open-port| "../stdlib/core/io.scm" . 398343))
 (set.gloc.of |core.io'make-custom-binary-input-port|)
 (close
   (5 0 . |core.io'make-custom-textual-input-port|)
   (extend.unbound . 5)
   (push.close
     (3 0 . bv-read!)
     (=n.iloc (0 . 2) 0 "../stdlib/core/io.scm" . 413714)
     (if.true.ret.const . 0)
     (push.iloc.0 . 2)
     (push.const . 4)
     (push.subr.gloc.of |.div| 2 "../stdlib/core/io.scm" . 415774)
     (extend . 1)
     (push.iloc.0 . 0)
     (push.const . #\nul)
     (push.subr.gloc.of |.make-string| 2 "../stdlib/core/io.scm" . 416798)
     (extend . 1)
     (call
       (push.iloc.0 . 0)
       (push.const . 0)
       (push.iloc.1 . 0)
       (apply.iloc (4 . 1) "../stdlib/core/io.scm" . 417824))
     (push)
     (extend . 1)
     (=n.iloc (0 . 0) 0 "../stdlib/core/io.scm" . 418843)
     (if.true.ret.const . 0)
     (push.iloc.1 . 0)
     (push.const . 0)
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.substring| 3 "../stdlib/core/io.scm" . 420921)
     (push.subr.gloc.of |.string->utf8| 1 "../stdlib/core/io.scm" . 420907)
     (extend . 1)
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.bytevector-length| 1 "../stdlib/core/io.scm" . 421929)
     (extend . 1)
     (push.iloc.1 . 0)
     (push.const . 0)
     (push.iloc 5 . 0)
     (push.iloc 5 . 1)
     (push.iloc.0 . 0)
     (subr.gloc.of |.bytevector-copy!| 5 "../stdlib/core/io.scm" . 422941)
     (ret.iloc 0 . 0))
   (push.close
     (1 0 . bv-get-position)
     (push.iloc.1 . 4)
     (push.iloc.0 . 0)
     (call (apply.iloc (2 . 2) "../stdlib/core/io.scm" . 428079))
     (push)
     (subr.gloc.of |.core-hashtable-set!| 3 "../stdlib/core/io.scm" . 428043)
     (ret.iloc 0 . 0))
   (push.close
     (1 0 . bv-set-position!)
     (push.iloc.1 . 4)
     (push.iloc.0 . 0)
     (push.const . #f)
     (push.subr.gloc.of |.core-hashtable-ref| 3 "../stdlib/core/io.scm" . 433170)
     (extend . 1)
     (iloc.0 . 0)
     (if.true (push.iloc.0 . 0) (apply.iloc (3 . 3) "../stdlib/core/io.scm" . 434211))
     (push.const . set-port-position)
     (push.const . "expected position which returned by port-position procedure")
     (apply.gloc.of |.assertion-violation| "../stdlib/core/io.scm" . 436242))
   (enclose . 3)
   (const.unspec)
   (set.iloc 0 . 3)
   (push.const . eqv?)
   (subr.gloc.of |.make-core-hashtable| 1 "../stdlib/core/io.scm" . 409624)
   (set.iloc 0 . 4)
   (push.const . 3)
   (push.const . 1)
   (push.iloc.1 . 0)
   (push.const . #t)
   (call (iloc.1 . 1) (if.false.ret) (ret.iloc 0 . 0))
   (push)
   (push.const . #f)
   (call (iloc.1 . 2) (if.false.ret) (ret.iloc 0 . 1))
   (push)
   (call (iloc.1 . 3) (if.false.ret) (ret.iloc 0 . 2))
   (push)
   (push.iloc.1 . 4)
   (push.subr.gloc.of |.vector| 6 "../stdlib/core/io.scm" . 441373)
   (push.const . #f)
   (push.const . #t)
   (subr.gloc.of |.open-port| 6 "../stdlib/core/io.scm" . 438290)
   (set.iloc 0 . 3)
   (ret.iloc 0 . 3))
 (set.gloc.of |core.io'make-custom-textual-input-port|)
 (close
   (1 1 . |core.io'open-file-output-port|)
   (push.close
     (3 0)
     (push.const . 1)
     (push.const . 2)
     (push.iloc.1 . 0)
     (push.iloc.0 . 0)
     (push.const . 1)
     (push.subr.gloc.of |.tuple-ref| 2 "../stdlib/core/io.scm" . 457748)
     (call
       (push.iloc.0 . 1)
       (apply.gloc.of
         |core.io.assistants'port-lookup-buffer-mode-code|
         "../stdlib/core/io.scm"
         .
         458772))
     (push)
     (call
       (iloc.0 . 2)
       (if.false.ret)
       (push.iloc.0 . 2)
       (apply.gloc.of |core.io'transcoder-descriptor| "../stdlib/core/io.scm" . 459812))
     (push)
     (ret.subr.gloc.of |.open-port| "../stdlib/core/io.scm" . 454665))
   (call
     (push.iloc.0 . 1)
     (push.subr.gloc.of |.length| 1 "../stdlib/core/io.scm" . 451610)
     (extend . 1)
     (=n.iloc (0 . 0) 3 "../stdlib/core/io.scm" . 451610)
     (if.true (ret.iloc 1 . 1))
     (=n.iloc (0 . 0) 2 "../stdlib/core/io.scm" . 452620)
     (if.true
       (push.iloc.1 . 1)
       (push.const . #f)
       (push.subr.gloc.of |.list| 1 "../stdlib/core/io.scm" . 451610)
       (ret.subr.gloc.of |.append| "../stdlib/core/io.scm" . 451610))
     (=n.iloc (0 . 0) 1 "../stdlib/core/io.scm" . 451610)
     (if.true
       (push.iloc.1 . 1)
       (push.const . block)
       (push.const . #f)
       (push.subr.gloc.of |.list| 2 "../stdlib/core/io.scm" . 451610)
       (ret.subr.gloc.of |.append| "../stdlib/core/io.scm" . 451610))
     (push.const . type:file-options)
     (push.const . 0)
     (push.subr.gloc.of |.tuple| 2 "../stdlib/core/io.scm" . 451610)
     (push.const . block)
     (push.const . #f)
     (ret.subr.gloc.of |.list| "../stdlib/core/io.scm" . 451610))
   (push)
   (apply.gloc.of |.apply| "../stdlib/core/io.scm" . 87041))
 (set.gloc.of |core.io'open-file-output-port|)
 (close
   (1 0 . |core.io'bytevector-output-port-values|)
   (push.iloc.0 . 0)
   (push.close
     (0 0)
     (push.iloc.1 . 0)
     (ret.subr.gloc.of |.extract-accumulated-bytevector| "../stdlib/core/io.scm" . 463903))
   (ret.subr.gloc.of |.values| "../stdlib/core/io.scm" . 463879))
 (set.gloc.of |core.io'bytevector-output-port-values|)
 (close
   (0 1 . |core.io'open-bytevector-output-port|)
   (call
     (iloc.0 . 0)
     (if.pair? (push.iloc.0 . 0) (ret.subr.gloc.of |.car| "../stdlib/core/io.scm" . 469001))
     (ret.const . #f))
   (push)
   (extend . 1)
   (push.const . 2)
   (push.const . 2)
   (push.const . bytevector)
   (push.const . #f)
   (push.const . #f)
   (call
     (iloc.0 . 0)
     (if.false.ret)
     (push.iloc.0 . 0)
     (apply.gloc.of |core.io'transcoder-descriptor| "../stdlib/core/io.scm" . 475173))
   (push)
   (push.subr.gloc.of |.open-port| 6 "../stdlib/core/io.scm" . 470026)
   (apply.gloc.of |core.io'bytevector-output-port-values| "../stdlib/core/io.scm" . 469001))
 (set.gloc.of |core.io'open-bytevector-output-port|)
 (close
   (1 1 . |core.io'call-with-bytevector-output-port|)
   (call
     (iloc.0 . 1)
     (if.pair? (push.iloc.0 . 1) (ret.subr.gloc.of |.car| "../stdlib/core/io.scm" . 480265))
     (ret.const . #f))
   (push)
   (extend . 1)
   (push.close
     (0 0)
     (push.iloc.1 . 0)
     (apply.gloc.of |core.io'open-bytevector-output-port| "../stdlib/core/io.scm" . 480296))
   (push.close
     (2 0)
     (push.gloc.of |.fn45.1`45|)
     (push.close
       (0 0)
       (call (push.iloc.1 . 0) (apply.iloc (3 . 0) "../stdlib/core/io.scm" . 483351))
       (apply.iloc (1 . 1) "../stdlib/core/io.scm" . 483363))
     (push.close
       (0 0)
       (push.iloc.1 . 0)
       (ret.subr.gloc.of |.close-port| "../stdlib/core/io.scm" . 484375))
     (apply.gloc.of |.dynamic-wind| "../stdlib/core/io.scm" . 481291))
   (apply.gloc.of |.call-with-values| "../stdlib/core/io.scm" . 480265))
 (set.gloc.of |core.io'call-with-bytevector-output-port|)
 (close
   (1 0 . |core.io'call-with-string-output-port|)
   (push.gloc.of |.fn52.1`52|)
   (push.close
     (2 0)
     (push.gloc.of |.fn27.1`27|)
     (push.close
       (0 0)
       (call (push.iloc.1 . 0) (apply.iloc (2 . 0) "../stdlib/core/io.scm" . 491541))
       (apply.iloc (1 . 1) "../stdlib/core/io.scm" . 491553))
     (push.close
       (0 0)
       (push.iloc.1 . 0)
       (ret.subr.gloc.of |.close-port| "../stdlib/core/io.scm" . 492565))
     (apply.gloc.of |.dynamic-wind| "../stdlib/core/io.scm" . 489481))
   (apply.gloc.of |.call-with-values| "../stdlib/core/io.scm" . 487429))
 (set.gloc.of |core.io'call-with-string-output-port|)
 (close
   (1 0 . |core.io'string-output-port-values|)
   (push.iloc.0 . 0)
   (push.close
     (0 0)
     (push.iloc.1 . 0)
     (ret.subr.gloc.of |.extract-accumulated-string| "../stdlib/core/io.scm" . 496671))
   (ret.subr.gloc.of |.values| "../stdlib/core/io.scm" . 496647))
 (set.gloc.of |core.io'string-output-port-values|)
 (close
   (0 0 . |core.io'open-string-output-port|)
   (subr.gloc.of |.make-string-output-port| 0)
   (push)
   (apply.gloc.of |core.io'string-output-port-values| "../stdlib/core/io.scm" . 500743))
 (set.gloc.of |core.io'open-string-output-port|)
 (close
   (5 0 . |core.io'make-custom-binary-output-port|)
   (push.const . 3)
   (push.const . 2)
   (push.iloc.0 . 0)
   (push.const . #f)
   (push.const . #f)
   (push.iloc.0 . 1)
   (push.iloc.0 . 2)
   (push.iloc.0 . 3)
   (push.iloc.0 . 4)
   (push.subr.gloc.of |.vector| 6 "../stdlib/core/io.scm" . 507922)
   (push.const . #f)
   (push.const . #f)
   (ret.subr.gloc.of |.open-port| "../stdlib/core/io.scm" . 504839))
 (set.gloc.of |core.io'make-custom-binary-output-port|)
 (close
   (5 0 . |core.io'make-custom-textual-output-port|)
   (extend.unbound . 5)
   (push.close
     (3 0 . bv-write!)
     (=n.iloc (0 . 2) 0 "../stdlib/core/io.scm" . 521234)
     (if.true
       (call
         (push.const . "")
         (push.const . 0)
         (push.const . 0)
         (apply.iloc (2 . 1) "../stdlib/core/io.scm" . 521246))
       (ret.const . 0))
     (push.iloc.0 . 2)
     (push.subr.gloc.of |.make-bytevector| 1 "../stdlib/core/io.scm" . 523297)
     (extend . 1)
     (push.iloc.1 . 0)
     (push.iloc.1 . 1)
     (push.iloc.0 . 0)
     (push.const . 0)
     (push.iloc.1 . 2)
     (subr.gloc.of |.bytevector-copy!| 5 "../stdlib/core/io.scm" . 524308)
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.utf8->string| 1 "../stdlib/core/io.scm" . 525344)
     (extend . 1)
     (push.iloc.0 . 0)
     (push.const . 0)
     (call
       (push.iloc.0 . 0)
       (push.const . 0)
       (push.iloc.0 . 0)
       (push.subr.gloc.of |.string-length| 1 "../stdlib/core/io.scm" . 526368)
       (apply.iloc (4 . 1) "../stdlib/core/io.scm" . 527397))
     (push)
     (push.subr.gloc.of |.substring| 3 "../stdlib/core/io.scm" . 528441)
     (push.subr.gloc.of |.string->utf8| 1 "../stdlib/core/io.scm" . 528427)
     (ret.subr.gloc.of |.bytevector-length| "../stdlib/core/io.scm" . 528408))
   (push.close
     (1 0 . bv-get-position)
     (push.iloc.1 . 4)
     (push.iloc.0 . 0)
     (call (apply.iloc (2 . 2) "../stdlib/core/io.scm" . 532527))
     (push)
     (subr.gloc.of |.core-hashtable-set!| 3 "../stdlib/core/io.scm" . 532491)
     (ret.iloc 0 . 0))
   (push.close
     (1 0 . bv-set-position!)
     (push.iloc.1 . 4)
     (push.iloc.0 . 0)
     (push.const . #f)
     (push.subr.gloc.of |.core-hashtable-ref| 3 "../stdlib/core/io.scm" . 537618)
     (extend . 1)
     (iloc.0 . 0)
     (if.true (push.iloc.0 . 0) (apply.iloc (3 . 3) "../stdlib/core/io.scm" . 538659))
     (push.const . set-port-position)
     (push.const . "expected position which returned by port-position procedure")
     (apply.gloc.of |.assertion-violation| "../stdlib/core/io.scm" . 540690))
   (enclose . 3)
   (const.unspec)
   (set.iloc 0 . 3)
   (push.const . eqv?)
   (subr.gloc.of |.make-core-hashtable| 1 "../stdlib/core/io.scm" . 517144)
   (set.iloc 0 . 4)
   (push.const . 3)
   (push.const . 2)
   (push.iloc.1 . 0)
   (push.const . #t)
   (push.const . #f)
   (call (iloc.1 . 1) (if.false.ret) (ret.iloc 0 . 0))
   (push)
   (call (iloc.1 . 2) (if.false.ret) (ret.iloc 0 . 1))
   (push)
   (call (iloc.1 . 3) (if.false.ret) (ret.iloc 0 . 2))
   (push)
   (push.iloc.1 . 4)
   (push.subr.gloc.of |.vector| 6 "../stdlib/core/io.scm" . 545821)
   (push.const . #f)
   (push.const . #t)
   (subr.gloc.of |.open-port| 6 "../stdlib/core/io.scm" . 542738)
   (set.iloc 0 . 3)
   (ret.iloc 0 . 3))
 (set.gloc.of |core.io'make-custom-textual-output-port|)
 (close
   (1 1 . |core.io'open-file-input/output-port|)
   (push.close
     (3 0)
     (push.const . 1)
     (push.const . 3)
     (push.iloc.1 . 0)
     (push.iloc.0 . 0)
     (push.const . 1)
     (push.subr.gloc.of |.tuple-ref| 2 "../stdlib/core/io.scm" . 562196)
     (call
       (push.iloc.0 . 1)
       (apply.gloc.of
         |core.io.assistants'port-lookup-buffer-mode-code|
         "../stdlib/core/io.scm"
         .
         563220))
     (push)
     (call
       (iloc.0 . 2)
       (if.false.ret)
       (push.iloc.0 . 2)
       (apply.gloc.of |core.io'transcoder-descriptor| "../stdlib/core/io.scm" . 564260))
     (push)
     (ret.subr.gloc.of |.open-port| "../stdlib/core/io.scm" . 559113))
   (call
     (push.iloc.0 . 1)
     (push.subr.gloc.of |.length| 1 "../stdlib/core/io.scm" . 556058)
     (extend . 1)
     (=n.iloc (0 . 0) 3 "../stdlib/core/io.scm" . 556058)
     (if.true (ret.iloc 1 . 1))
     (=n.iloc (0 . 0) 2 "../stdlib/core/io.scm" . 557068)
     (if.true
       (push.iloc.1 . 1)
       (push.const . #f)
       (push.subr.gloc.of |.list| 1 "../stdlib/core/io.scm" . 556058)
       (ret.subr.gloc.of |.append| "../stdlib/core/io.scm" . 556058))
     (=n.iloc (0 . 0) 1 "../stdlib/core/io.scm" . 556058)
     (if.true
       (push.iloc.1 . 1)
       (push.const . block)
       (push.const . #f)
       (push.subr.gloc.of |.list| 2 "../stdlib/core/io.scm" . 556058)
       (ret.subr.gloc.of |.append| "../stdlib/core/io.scm" . 556058))
     (push.const . type:file-options)
     (push.const . 0)
     (push.subr.gloc.of |.tuple| 2 "../stdlib/core/io.scm" . 556058)
     (push.const . block)
     (push.const . #f)
     (ret.subr.gloc.of |.list| "../stdlib/core/io.scm" . 556058))
   (push)
   (apply.gloc.of |.apply| "../stdlib/core/io.scm" . 87041))
 (set.gloc.of |core.io'open-file-input/output-port|)
 (close
   (6 0 . |core.io'make-custom-binary-input/output-port|)
   (push.const . 3)
   (push.const . 3)
   (push.iloc.0 . 0)
   (push.const . #f)
   (push.iloc.0 . 1)
   (push.iloc.0 . 2)
   (push.iloc.0 . 3)
   (push.iloc.0 . 4)
   (push.iloc.0 . 5)
   (push.subr.gloc.of |.vector| 6 "../stdlib/core/io.scm" . 571410)
   (push.const . #f)
   (push.const . #f)
   (ret.subr.gloc.of |.open-port| "../stdlib/core/io.scm" . 568327))
 (set.gloc.of |core.io'make-custom-binary-input/output-port|)
 (close
   (6 0 . |core.io'make-custom-textual-input/output-port|)
   (extend.unbound . 6)
   (push.close
     (3 0 . bv-read!)
     (=n.iloc (0 . 2) 0 "../stdlib/core/io.scm" . 584722)
     (if.true.ret.const . 0)
     (push.iloc.0 . 2)
     (push.const . 4)
     (push.subr.gloc.of |.div| 2 "../stdlib/core/io.scm" . 586782)
     (extend . 1)
     (push.iloc.0 . 0)
     (push.const . #\nul)
     (push.subr.gloc.of |.make-string| 2 "../stdlib/core/io.scm" . 587806)
     (extend . 1)
     (call
       (push.iloc.0 . 0)
       (push.const . 0)
       (push.iloc.1 . 0)
       (apply.iloc (4 . 1) "../stdlib/core/io.scm" . 588832))
     (push)
     (extend . 1)
     (=n.iloc (0 . 0) 0 "../stdlib/core/io.scm" . 589851)
     (if.true.ret.const . 0)
     (push.iloc.1 . 0)
     (push.const . 0)
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.substring| 3 "../stdlib/core/io.scm" . 591929)
     (push.subr.gloc.of |.string->utf8| 1 "../stdlib/core/io.scm" . 591915)
     (extend . 1)
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.bytevector-length| 1 "../stdlib/core/io.scm" . 592937)
     (extend . 1)
     (push.iloc.1 . 0)
     (push.const . 0)
     (push.iloc 5 . 0)
     (push.iloc 5 . 1)
     (push.iloc.0 . 0)
     (subr.gloc.of |.bytevector-copy!| 5 "../stdlib/core/io.scm" . 593949)
     (ret.iloc 0 . 0))
   (push.close
     (3 0 . bv-write!)
     (=n.iloc (0 . 2) 0 "../stdlib/core/io.scm" . 599058)
     (if.true
       (call
         (push.const . "")
         (push.const . 0)
         (push.const . 0)
         (apply.iloc (2 . 2) "../stdlib/core/io.scm" . 599070))
       (ret.const . 0))
     (push.iloc.0 . 2)
     (push.subr.gloc.of |.make-bytevector| 1 "../stdlib/core/io.scm" . 601121)
     (extend . 1)
     (push.iloc.1 . 0)
     (push.iloc.1 . 1)
     (push.iloc.0 . 0)
     (push.const . 0)
     (push.iloc.1 . 2)
     (subr.gloc.of |.bytevector-copy!| 5 "../stdlib/core/io.scm" . 602132)
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.utf8->string| 1 "../stdlib/core/io.scm" . 603168)
     (extend . 1)
     (push.iloc.0 . 0)
     (push.const . 0)
     (call
       (push.iloc.0 . 0)
       (push.const . 0)
       (push.iloc.0 . 0)
       (push.subr.gloc.of |.string-length| 1 "../stdlib/core/io.scm" . 604192)
       (apply.iloc (4 . 2) "../stdlib/core/io.scm" . 605221))
     (push)
     (push.subr.gloc.of |.substring| 3 "../stdlib/core/io.scm" . 606265)
     (push.subr.gloc.of |.string->utf8| 1 "../stdlib/core/io.scm" . 606251)
     (ret.subr.gloc.of |.bytevector-length| "../stdlib/core/io.scm" . 606232))
   (push.close
     (1 0 . bv-get-position)
     (push.iloc.1 . 5)
     (push.iloc.0 . 0)
     (call (apply.iloc (2 . 3) "../stdlib/core/io.scm" . 610351))
     (push)
     (subr.gloc.of |.core-hashtable-set!| 3 "../stdlib/core/io.scm" . 610315)
     (ret.iloc 0 . 0))
   (push.close
     (1 0 . bv-set-position!)
     (push.iloc.1 . 5)
     (push.iloc.0 . 0)
     (push.const . #f)
     (push.subr.gloc.of |.core-hashtable-ref| 3 "../stdlib/core/io.scm" . 615442)
     (extend . 1)
     (iloc.0 . 0)
     (if.true (push.iloc.0 . 0) (apply.iloc (3 . 4) "../stdlib/core/io.scm" . 616483))
     (push.const . set-port-position)
     (push.const . "expected position which returned by port-position procedure")
     (apply.gloc.of |.assertion-violation| "../stdlib/core/io.scm" . 618514))
   (enclose . 4)
   (const.unspec)
   (set.iloc 0 . 4)
   (push.const . eqv?)
   (subr.gloc.of |.make-core-hashtable| 1 "../stdlib/core/io.scm" . 580632)
   (set.iloc 0 . 5)
   (push.const . 3)
   (push.const . 3)
   (push.iloc.1 . 0)
   (push.const . #t)
   (call (iloc.1 . 1) (if.false.ret) (ret.iloc 0 . 0))
   (push)
   (call (iloc.1 . 2) (if.false.ret) (ret.iloc 0 . 1))
   (push)
   (call (iloc.1 . 3) (if.false.ret) (ret.iloc 0 . 2))
   (push)
   (call (iloc.1 . 4) (if.false.ret) (ret.iloc 0 . 3))
   (push)
   (push.iloc.1 . 5)
   (push.subr.gloc.of |.vector| 6 "../stdlib/core/io.scm" . 623645)
   (push.const . #f)
   (push.const . #t)
   (subr.gloc.of |.open-port| 6 "../stdlib/core/io.scm" . 620562)
   (set.iloc 0 . 4)
   (ret.iloc 0 . 4))
 (set.gloc.of |core.io'make-custom-textual-input/output-port|)
 (close
   (2 0 . |core.io'call-with-input-file|)
   (call
     (push.iloc.0 . 0)
     (apply.gloc.of |core.io'open-input-file| "../stdlib/core/io.scm" . 632851))
   (push)
   (extend . 1)
   (push.gloc.of |.fn53.1`53|)
   (push.close (0 0) (push.iloc.1 . 0) (apply.iloc (2 . 1) "../stdlib/core/io.scm" . 635925))
   (push.close
     (0 0)
     (push.iloc.1 . 0)
     (apply.gloc.of |core.io'close-input-port| "../stdlib/core/io.scm" . 636949))
   (apply.gloc.of |.dynamic-wind| "../stdlib/core/io.scm" . 633865))
 (set.gloc.of |core.io'call-with-input-file|)
 (close
   (2 0 . |core.io'call-with-output-file|)
   (call
     (push.iloc.0 . 0)
     (apply.gloc.of |core.io'open-output-file| "../stdlib/core/io.scm" . 641043))
   (push)
   (extend . 1)
   (push.gloc.of |.fn2.1`2|)
   (push.close (0 0) (push.iloc.1 . 0) (apply.iloc (2 . 1) "../stdlib/core/io.scm" . 644117))
   (push.close
     (0 0)
     (push.iloc.1 . 0)
     (apply.gloc.of |core.io'close-output-port| "../stdlib/core/io.scm" . 645141))
   (apply.gloc.of |.dynamic-wind| "../stdlib/core/io.scm" . 642057))
 (set.gloc.of |core.io'call-with-output-file|)
 (close
   (2 0 . |core.io'with-input-from-file|)
   (call
     (push.iloc.0 . 0)
     (apply.gloc.of |core.io'open-input-file| "../stdlib/core/io.scm" . 649235))
   (push)
   (subr.gloc.of |.current-input-port| 0)
   (push)
   (extend . 2)
   (push.close
     (0 0)
     (push.iloc.1 . 0)
     (ret.subr.gloc.of |.set-current-input-port!| "../stdlib/core/io.scm" . 652309))
   (push.close (0 0) (apply.iloc (2 . 1) "../stdlib/core/io.scm" . 653333))
   (push.close
     (0 0)
     (push.iloc.1 . 1)
     (subr.gloc.of |.set-current-input-port!| 1 "../stdlib/core/io.scm" . 655372)
     (push.iloc.1 . 0)
     (apply.gloc.of |core.io'close-input-port| "../stdlib/core/io.scm" . 656396))
   (apply.gloc.of |.dynamic-wind| "../stdlib/core/io.scm" . 651273))
 (set.gloc.of |core.io'with-input-from-file|)
 (close
   (2 0 . |core.io'with-output-to-file|)
   (call
     (push.iloc.0 . 0)
     (apply.gloc.of |core.io'open-output-file| "../stdlib/core/io.scm" . 660499))
   (push)
   (subr.gloc.of |.current-output-port| 0)
   (push)
   (extend . 2)
   (push.close
     (0 0)
     (push.iloc.1 . 0)
     (ret.subr.gloc.of |.set-current-output-port!| "../stdlib/core/io.scm" . 663573))
   (push.close (0 0) (apply.iloc (2 . 1) "../stdlib/core/io.scm" . 664597))
   (push.close
     (0 0)
     (push.iloc.1 . 1)
     (subr.gloc.of |.set-current-output-port!| 1 "../stdlib/core/io.scm" . 666636)
     (push.iloc.1 . 0)
     (apply.gloc.of |core.io'close-output-port| "../stdlib/core/io.scm" . 667660))
   (apply.gloc.of |.dynamic-wind| "../stdlib/core/io.scm" . 662537))
 (set.gloc.of |core.io'with-output-to-file|)
 (close
   (1 0 . |core.io'open-input-file|)
   (push.iloc.0 . 0)
   (push.const . type:file-options)
   (push.const . 0)
   (push.subr.gloc.of |.tuple| 2 "../stdlib/core/io.scm" . 671751)
   (push.const . block)
   (call (apply.gloc.of |core.io'native-transcoder| "../stdlib/core/io.scm" . 671817))
   (push)
   (apply.gloc.of |core.io'open-file-input-port| "../stdlib/core/io.scm" . 671751))
 (set.gloc.of |core.io'open-input-file|)
 (close
   (1 0 . |core.io'open-output-file|)
   (push.iloc.0 . 0)
   (push.const . type:file-options)
   (push.const . 0)
   (push.subr.gloc.of |.tuple| 2 "../stdlib/core/io.scm" . 675847)
   (push.const . block)
   (call (apply.gloc.of |core.io'native-transcoder| "../stdlib/core/io.scm" . 675914))
   (push)
   (apply.gloc.of |core.io'open-file-output-port| "../stdlib/core/io.scm" . 675847))
 (set.gloc.of |core.io'open-output-file|)
 (close
   (1 0 . |core.io'close-input-port|)
   (push.iloc.0 . 0)
   (ret.subr.gloc.of |.close-port| "../stdlib/core/io.scm" . 679943))
 (set.gloc.of |core.io'close-input-port|)
 (close
   (1 0 . |core.io'close-output-port|)
   (push.iloc.0 . 0)
   (ret.subr.gloc.of |.close-port| "../stdlib/core/io.scm" . 684039))
 (set.gloc.of |core.io'close-output-port|)
 (close
   (0 1 . |core.io'open-temporary-file-port|)
   (push.gloc.of |.fn37.1`37|)
   (call
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.length| 1 "../stdlib/core/io.scm" . 691209)
     (extend . 1)
     (=n.iloc (0 . 0) 2 "../stdlib/core/io.scm" . 691209)
     (if.true (ret.iloc 1 . 0))
     (=n.iloc (0 . 0) 1 "../stdlib/core/io.scm" . 691209)
     (if.true
       (push.iloc.1 . 0)
       (push.const . #f)
       (push.subr.gloc.of |.list| 1 "../stdlib/core/io.scm" . 691209)
       (ret.subr.gloc.of |.append| "../stdlib/core/io.scm" . 691209))
     (push.const . "temporary file")
     (push.const . #f)
     (ret.subr.gloc.of |.list| "../stdlib/core/io.scm" . 691209))
   (push)
   (apply.gloc.of |.apply| "../stdlib/core/io.scm" . 87041))
 (set.gloc.of |core.io'open-temporary-file-port|)
 (call
   (push.const
     (make-string import . |.make-string|)
     (latin-1-codec import . |core.io'latin-1-codec|)
     (define-syntax import . |.define-syntax|)
     (port-lookup-codec-code import . |core.io.assistants'port-lookup-codec-code|)
     (native-transcoder import . |core.io'native-transcoder|)
     (+ import . |.+|)
     (transcoder-eol-style import . |core.io'transcoder-eol-style|)
     (string import . |.string|)
     (call-with-input-file import . |core.io'call-with-input-file|)
     (port-lookup-buffer-mode-code import . |core.io.assistants'port-lookup-buffer-mode-code|)
     (open-bytevector-output-port import . |core.io'open-bytevector-output-port|)
     (transcoder-codec import . |core.io'transcoder-codec|)
     (else import . |.else|)
     (set-current-output-port! import . |.set-current-output-port!|)
     (call-with-bytevector-output-port import . |core.io'call-with-bytevector-output-port|)
     (lambda import . |.lambda|)
     (make-custom-binary-input-port import . |core.io'make-custom-binary-input-port|)
     (bytevector->string import . |core.io'bytevector->string|)
     (quote import . |.quote|)
     (make-temporary-file-port import . |.make-temporary-file-port|)
     (let* import . |.let*|)
     (not import . |.not|)
     (port-lookup-error-handling-mode-code
       import
       .
       |core.io.assistants'port-lookup-error-handling-mode-code|)
     (get-char import . |.get-char|)
     (extract-accumulated-string import . |.extract-accumulated-string|)
     (bytevector-length import . |.bytevector-length|)
     (or import . |.or|)
     (dynamic-wind import . |.dynamic-wind|)
     (eof-object? import . |.eof-object?|)
     (datum->syntax import . |.datum->syntax|)
     (open-bytevector-input-port import . |core.io'open-bytevector-input-port|)
     (with-output-to-file import . |core.io'with-output-to-file|)
     (core-hashtable-set! import . |.core-hashtable-set!|)
     (eol-style import . |core.io'eol-style|)
     (buffer-mode? import . |core.io'buffer-mode?|)
     (open-string-output-port import . |core.io'open-string-output-port|)
     (cond import . |.cond|)
     (close-output-port import . |core.io'close-output-port|)
     (call-with-port import . |.call-with-port|)
     (open-file-input-port import . |core.io'open-file-input-port|)
     (port-reverse-lookup-error-handling-mode-code
       import
       .
       |core.io.assistants'port-reverse-lookup-error-handling-mode-code|)
     (open-file-input/output-port import . |core.io'open-file-input/output-port|)
     (native-eol-style import . |core.io'native-eol-style|)
     (vector import . |.vector|)
     (substring import . |.substring|)
     (make-bytevector import . |.make-bytevector|)
     (set! import . |.set!|)
     (define import . |.define|)
     (transcoded-port import . |core.io'transcoded-port|)
     (syntax->datum import . |.syntax->datum|)
     (make-transcoded-port import . |.make-transcoded-port|)
     (_ import . |._|)
     (put-char import . |.put-char|)
     (eq? import . |.eq?|)
     (make-string-input-port import . |.make-string-input-port|)
     (port-lookup-eol-style-code import . |core.io.assistants'port-lookup-eol-style-code|)
     (with-input-from-file import . |core.io'with-input-from-file|)
     (current-output-port import . |.current-output-port|)
     (transcoder-error-handling-mode import . |core.io'transcoder-error-handling-mode|)
     (call-with-output-file import . |core.io'call-with-output-file|)
     (call-with-string-output-port import . |core.io'call-with-string-output-port|)
     (textual-port? import . |core.io'textual-port?|)
     (open-file-output-port import . |core.io'open-file-output-port|)
     (port-transcoder import . |core.io'port-transcoder|)
     (tuple import . |.tuple|)
     (utf-8-codec import . |core.io'utf-8-codec|)
     (port-reverse-lookup-eol-style-code
       import
       .
       |core.io.assistants'port-reverse-lookup-eol-style-code|)
     (bytevector-output-port-values import . |core.io'bytevector-output-port-values|)
     (make-string-output-port import . |.make-string-output-port|)
     (native-transcoder-descriptor import . |.native-transcoder-descriptor|)
     (close-input-port import . |core.io'close-input-port|)
     (utf8->string import . |.utf8->string|)
     (= import . |.=|)
     (make-custom-binary-input/output-port import . |core.io'make-custom-binary-input/output-port|)
     (current-input-port import . |.current-input-port|)
     (syntax-case import . |.syntax-case|)
     (let-optionals import . |core.optargs'let-optionals|)
     (bytevector-u8-set! import . |.bytevector-u8-set!|)
     (string-output-port-values import . |core.io'string-output-port-values|)
     (... import . |....|)
     (open-string-input-port import . |core.io'open-string-input-port|)
     (utf-16-codec import . |core.io'utf-16-codec|)
     (make-core-hashtable import . |.make-core-hashtable|)
     (make-custom-textual-input/output-port
       import
       .
       |core.io'make-custom-textual-input/output-port|)
     (syntax-violation import . |.syntax-violation|)
     (eqv? import . |.eqv?|)
     (predefined-latin-1-codec import . |core.io'predefined-latin-1-codec|)
     (predefined-utf-16-codec import . |core.io'predefined-utf-16-codec|)
     (div import . |.div|)
     (predefined-utf-8-codec import . |core.io'predefined-utf-8-codec|)
     (case import . |.case|)
     (buffer-mode import . |core.io'buffer-mode|)
     (and import . |.and|)
     (begin import . |.begin|)
     (port-reverse-lookup-codec-code import . |core.io.assistants'port-reverse-lookup-codec-code|)
     (string->utf8 import . |.string->utf8|)
     (syntax import . |.syntax|)
     (port-transcoder-descriptor import . |.port-transcoder-descriptor|)
     (set-current-input-port! import . |.set-current-input-port!|)
     (bytevector-copy! import . |.bytevector-copy!|)
     (map import . |.map|)
     (file-options import . |core.io'file-options|)
     (list-of-unique-symbols? import . |core.lists'list-of-unique-symbols?|)
     (make-transcoder import . |core.io'make-transcoder|)
     (port-direction import . |core.io.assistants'port-direction|)
     (tuple-ref import . |.tuple-ref|)
     (open-port import . |.open-port|)
     (open-output-file import . |core.io'open-output-file|)
     (string->bytevector import . |core.io'string->bytevector|)
     (with-syntax import . |core.syntax-case'with-syntax|)
     (port-lookup-file-option-code import . |core.io.assistants'port-lookup-file-option-code|)
     (make-custom-binary-output-port import . |core.io'make-custom-binary-output-port|)
     (string-length import . |.string-length|)
     (binary-port? import . |core.io'binary-port?|)
     (core-hashtable-ref import . |.core-hashtable-ref|)
     (make-custom-textual-output-port import . |core.io'make-custom-textual-output-port|)
     (assertion-violation import . |.assertion-violation|)
     (error-handling-mode import . |core.io'error-handling-mode|)
     (letrec* import . |.letrec*|)
     (values import . |.values|)
     (open-temporary-file-port import . |core.io'open-temporary-file-port|)
     (transcoder-descriptor import . |core.io'transcoder-descriptor|)
     (open-input-file import . |core.io'open-input-file|)
     (port-type import . |core.io.assistants'port-type|)
     (=> import . |.=>|)
     (let-values import . |.let-values|)
     (apply import . |.apply|)
     (let import . |.let|)
     (extract-accumulated-bytevector import . |.extract-accumulated-bytevector|)
     (if import . |.if|)
     (bytevector-u8-ref import . |.bytevector-u8-ref|)
     (close-port import . |.close-port|)
     (make-custom-textual-input-port import . |core.io'make-custom-textual-input-port|))
   (extend . 1)
   (call
     (push.const . syntax)
     (push.const . |core.io'file-options|)
     (call
       (push.gloc.of |.fn8.1`8|)
       (apply.gloc.of |.transformer-thunk| "../stdlib/core/io.scm" . 87041))
     (push)
     (push.iloc.0 . 0)
     (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/io.scm" . 87041))
   (call
     (push.const . syntax)
     (push.const . |core.io'buffer-mode|)
     (call
       (push.gloc.of |.fn6.1`6|)
       (apply.gloc.of |.transformer-thunk| "../stdlib/core/io.scm" . 87041))
     (push)
     (push.iloc.0 . 0)
     (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/io.scm" . 87041))
   (call
     (push.const . syntax)
     (push.const . |core.io'eol-style|)
     (call
       (push.gloc.of |.fn32.1`32|)
       (apply.gloc.of |.transformer-thunk| "../stdlib/core/io.scm" . 87041))
     (push)
     (push.iloc.0 . 0)
     (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/io.scm" . 87041))
   (push.const . syntax)
   (push.const . |core.io'error-handling-mode|)
   (call
     (push.gloc.of |.fn13.1`13|)
     (apply.gloc.of |.transformer-thunk| "../stdlib/core/io.scm" . 87041))
   (push)
   (push.iloc.0 . 0)
   (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/io.scm" . 87041))
 (push.const . core.io)
 (push.const . #f)
 (push.const
   (file-options import . |core.io'file-options|)
   (buffer-mode import . |core.io'buffer-mode|)
   (buffer-mode? import . |core.io'buffer-mode?|)
   (utf-8-codec import . |core.io'utf-8-codec|)
   (utf-16-codec import . |core.io'utf-16-codec|)
   (latin-1-codec import . |core.io'latin-1-codec|)
   (eol-style import . |core.io'eol-style|)
   (error-handling-mode import . |core.io'error-handling-mode|)
   (make-transcoder import . |core.io'make-transcoder|)
   (transcoder-codec import . |core.io'transcoder-codec|)
   (transcoder-eol-style import . |core.io'transcoder-eol-style|)
   (transcoder-error-handling-mode import . |core.io'transcoder-error-handling-mode|)
   (native-transcoder import . |core.io'native-transcoder|)
   (native-eol-style import . |core.io'native-eol-style|)
   (bytevector->string import . |core.io'bytevector->string|)
   (string->bytevector import . |core.io'string->bytevector|)
   (eof-object import . |.eof-object|)
   (eof-object? import . |.eof-object?|)
   (port? import . |.port?|)
   (port-transcoder import . |core.io'port-transcoder|)
   (textual-port? import . |core.io'textual-port?|)
   (binary-port? import . |core.io'binary-port?|)
   (transcoded-port import . |core.io'transcoded-port|)
   (port-has-port-position? import . |.port-has-port-position?|)
   (port-position import . |.port-position|)
   (port-has-set-port-position!? import . |.port-has-set-port-position!?|)
   (set-port-position! import . |.set-port-position!|)
   (close-port import . |.close-port|)
   (call-with-port import . |.call-with-port|)
   (input-port? import . |.input-port?|)
   (port-eof? import . |.port-eof?|)
   (open-file-input-port import . |core.io'open-file-input-port|)
   (open-bytevector-input-port import . |core.io'open-bytevector-input-port|)
   (open-string-input-port import . |core.io'open-string-input-port|)
   (standard-input-port import . |.standard-input-port|)
   (current-input-port import . |.current-input-port|)
   (get-u8 import . |.get-u8|)
   (lookahead-u8 import . |.lookahead-u8|)
   (get-bytevector-n import . |.get-bytevector-n|)
   (get-bytevector-n! import . |.get-bytevector-n!|)
   (get-bytevector-some import . |.get-bytevector-some|)
   (get-bytevector-all import . |.get-bytevector-all|)
   (get-char import . |.get-char|)
   (lookahead-char import . |.lookahead-char|)
   (get-string-n import . |.get-string-n|)
   (get-string-n! import . |.get-string-n!|)
   (get-string-all import . |.get-string-all|)
   (get-line import . |.get-line|)
   (get-datum import . |.get-datum|)
   (output-port? import . |.output-port?|)
   (flush-output-port import . |.flush-output-port|)
   (output-port-buffer-mode import . |.output-port-buffer-mode|)
   (open-file-output-port import . |core.io'open-file-output-port|)
   (open-bytevector-output-port import . |core.io'open-bytevector-output-port|)
   (call-with-bytevector-output-port import . |core.io'call-with-bytevector-output-port|)
   (open-string-output-port import . |core.io'open-string-output-port|)
   (call-with-string-output-port import . |core.io'call-with-string-output-port|)
   (standard-output-port import . |.standard-output-port|)
   (standard-error-port import . |.standard-error-port|)
   (current-output-port import . |.current-output-port|)
   (current-error-port import . |.current-error-port|)
   (put-u8 import . |.put-u8|)
   (put-bytevector import . |.put-bytevector|)
   (put-char import . |.put-char|)
   (put-string import . |.put-string|)
   (put-datum import . |.put-datum|)
   (open-file-input/output-port import . |core.io'open-file-input/output-port|)
   (call-with-input-file import . |core.io'call-with-input-file|)
   (call-with-output-file import . |core.io'call-with-output-file|)
   (with-input-from-file import . |core.io'with-input-from-file|)
   (with-output-to-file import . |core.io'with-output-to-file|)
   (open-input-file import . |core.io'open-input-file|)
   (open-output-file import . |core.io'open-output-file|)
   (close-input-port import . |core.io'close-input-port|)
   (close-output-port import . |core.io'close-output-port|)
   (read-char import . |.read-char|)
   (peek-char import . |.peek-char|)
   (read import . |.read|)
   (write-char import . |.write-char|)
   (newline import . |.newline|)
   (display import . |.display|)
   (write import . |.write|)
   (make-custom-binary-input-port import . |core.io'make-custom-binary-input-port|)
   (make-custom-textual-input-port import . |core.io'make-custom-textual-input-port|)
   (make-custom-binary-output-port import . |core.io'make-custom-binary-output-port|)
   (make-custom-textual-output-port import . |core.io'make-custom-textual-output-port|)
   (make-custom-binary-input/output-port import . |core.io'make-custom-binary-input/output-port|)
   (make-custom-textual-input/output-port import . |core.io'make-custom-textual-input/output-port|)
   (&i/o import . |.&i/o|)
   (make-i/o-error import . |.make-i/o-error|)
   (i/o-error? import . |.i/o-error?|)
   (&i/o-read import . |.&i/o-read|)
   (make-i/o-read-error import . |.make-i/o-read-error|)
   (i/o-read-error? import . |.i/o-read-error?|)
   (&i/o-write import . |.&i/o-write|)
   (make-i/o-write-error import . |.make-i/o-write-error|)
   (i/o-write-error? import . |.i/o-write-error?|)
   (&i/o-invalid-position import . |.&i/o-invalid-position|)
   (make-i/o-invalid-position-error import . |.make-i/o-invalid-position-error|)
   (i/o-invalid-position-error? import . |.i/o-invalid-position-error?|)
   (i/o-error-position import . |.i/o-error-position|)
   (&i/o-filename import . |.&i/o-filename|)
   (make-i/o-filename-error import . |.make-i/o-filename-error|)
   (i/o-filename-error? import . |.i/o-filename-error?|)
   (i/o-error-filename import . |.i/o-error-filename|)
   (&i/o-file-protection import . |.&i/o-file-protection|)
   (make-i/o-file-protection-error import . |.make-i/o-file-protection-error|)
   (i/o-file-protection-error? import . |.i/o-file-protection-error?|)
   (&i/o-file-is-read-only import . |.&i/o-file-is-read-only|)
   (make-i/o-file-is-read-only-error import . |.make-i/o-file-is-read-only-error|)
   (i/o-file-is-read-only-error? import . |.i/o-file-is-read-only-error?|)
   (&i/o-file-already-exists import . |.&i/o-file-already-exists|)
   (make-i/o-file-already-exists-error import . |.make-i/o-file-already-exists-error|)
   (i/o-file-already-exists-error? import . |.i/o-file-already-exists-error?|)
   (&i/o-file-does-not-exist import . |.&i/o-file-does-not-exist|)
   (make-i/o-file-does-not-exist-error import . |.make-i/o-file-does-not-exist-error|)
   (i/o-file-does-not-exist-error? import . |.i/o-file-does-not-exist-error?|)
   (&i/o-port import . |.&i/o-port|)
   (make-i/o-port-error import . |.make-i/o-port-error|)
   (i/o-port-error? import . |.i/o-port-error?|)
   (i/o-error-port import . |.i/o-error-port|)
   (&i/o-decoding import . |.&i/o-decoding|)
   (make-i/o-decoding-error import . |.make-i/o-decoding-error|)
   (i/o-decoding-error? import . |.i/o-decoding-error?|)
   (&i/o-encoding import . |.&i/o-encoding|)
   (make-i/o-encoding-error import . |.make-i/o-encoding-error|)
   (i/o-encoding-error? import . |.i/o-encoding-error?|)
   (i/o-encoding-error-char import . |.i/o-encoding-error-char|)
   (open-temporary-file-port import . |core.io'open-temporary-file-port|)
   (format import . |.format|))
 (apply.gloc.of |.intern-scheme-library| "../stdlib/core/io.scm" . 87041))

((call
   (push.const core optargs)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/files.scm" . 6145))
 (call
   (push.const core lists)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/files.scm" . 6145))
 (call
   (push.const core io)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/files.scm" . 6145))
 (call
   (push.const core primitives)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/files.scm" . 6145))
 (push.const . core.files)
 (push.const . #f)
 (push.const
   (file-exists? import . |.file-exists?|)
   (delete-file import . |.delete-file|)
   (directory-list import . |.directory-list|)
   (current-directory import . |.current-directory|)
   (&i/o import . |.&i/o|)
   (make-i/o-error import . |.make-i/o-error|)
   (i/o-error? import . |.i/o-error?|)
   (&i/o-read import . |.&i/o-read|)
   (make-i/o-read-error import . |.make-i/o-read-error|)
   (i/o-read-error? import . |.i/o-read-error?|)
   (&i/o-write import . |.&i/o-write|)
   (make-i/o-write-error import . |.make-i/o-write-error|)
   (i/o-write-error? import . |.i/o-write-error?|)
   (&i/o-invalid-position import . |.&i/o-invalid-position|)
   (make-i/o-invalid-position-error import . |.make-i/o-invalid-position-error|)
   (i/o-invalid-position-error? import . |.i/o-invalid-position-error?|)
   (i/o-error-position import . |.i/o-error-position|)
   (&i/o-filename import . |.&i/o-filename|)
   (make-i/o-filename-error import . |.make-i/o-filename-error|)
   (i/o-filename-error? import . |.i/o-filename-error?|)
   (i/o-error-filename import . |.i/o-error-filename|)
   (&i/o-file-protection import . |.&i/o-file-protection|)
   (make-i/o-file-protection-error import . |.make-i/o-file-protection-error|)
   (i/o-file-protection-error? import . |.i/o-file-protection-error?|)
   (&i/o-file-is-read-only import . |.&i/o-file-is-read-only|)
   (make-i/o-file-is-read-only-error import . |.make-i/o-file-is-read-only-error|)
   (i/o-file-is-read-only-error? import . |.i/o-file-is-read-only-error?|)
   (&i/o-file-already-exists import . |.&i/o-file-already-exists|)
   (make-i/o-file-already-exists-error import . |.make-i/o-file-already-exists-error|)
   (i/o-file-already-exists-error? import . |.i/o-file-already-exists-error?|)
   (&i/o-file-does-not-exist import . |.&i/o-file-does-not-exist|)
   (make-i/o-file-does-not-exist-error import . |.make-i/o-file-does-not-exist-error|)
   (i/o-file-does-not-exist-error? import . |.i/o-file-does-not-exist-error?|)
   (&i/o-port import . |.&i/o-port|)
   (make-i/o-port-error import . |.make-i/o-port-error|)
   (i/o-port-error? import . |.i/o-port-error?|)
   (i/o-error-port import . |.i/o-error-port|))
 (apply.gloc.of |.intern-scheme-library| "../stdlib/core/files.scm" . 6145))

((close
   (0 0)
   (apply.gloc.of
     |core.io'open-string-output-port|
     "../stdlib/core/bytevector-transcoders.scm"
     .
     120870))
 (set.gloc.of |.fn1.1`1|)
 (close
   (0 0)
   (apply.gloc.of
     |core.io'open-string-output-port|
     "../stdlib/core/bytevector-transcoders.scm"
     .
     151592))
 (set.gloc.of |.fn12.1`12|)
 (close
   (0 0)
   (apply.gloc.of
     |core.io'open-string-output-port|
     "../stdlib/core/bytevector-transcoders.scm"
     .
     61480))
 (set.gloc.of |.fn15.1`15|)
 (close
   (0 0)
   (apply.gloc.of
     |core.io'open-string-output-port|
     "../stdlib/core/bytevector-transcoders.scm"
     .
     45094))
 (set.gloc.of |.fn11.1`11|)
 (close
   (0 0)
   (apply.gloc.of
     |core.io'open-bytevector-output-port|
     "../stdlib/core/bytevector-transcoders.scm"
     .
     101422))
 (set.gloc.of |.fn8.1`8|)
 (close
   (0 0)
   (apply.gloc.of
     |core.io'open-bytevector-output-port|
     "../stdlib/core/bytevector-transcoders.scm"
     .
     25646))
 (set.gloc.of |.fn5.1`5|)
 (call
   (push.const core bytevectors)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/bytevector-transcoders.scm" . 6145))
 (call
   (push.const core primitives)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/bytevector-transcoders.scm" . 6145))
 (call
   (push.const core io)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/bytevector-transcoders.scm" . 6145))
 (call
   (push.const core optargs)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/bytevector-transcoders.scm" . 6145))
 (call
   (push.const core intrinsics)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/bytevector-transcoders.scm" . 6145))
 (close
   (1 1 . |core.bytevector-transcoders'string->utf32|)
   (call
     (iloc.0 . 1)
     (if.pair?
       (push.iloc.0 . 1)
       (ret.subr.gloc.of |.car| "../stdlib/core/bytevector-transcoders.scm" . 20515))
     (ret.const . big))
   (push)
   (extend . 1)
   (push.iloc.1 . 0)
   (push.subr.gloc.of |.string-length| 1 "../stdlib/core/bytevector-transcoders.scm" . 21520)
   (push.const . 0)
   (subr.gloc.of |.=| 2 "../stdlib/core/bytevector-transcoders.scm" . 21517)
   (if.true.ret.const . #vu8())
   (call
     (push.iloc.1 . 0)
     (apply.gloc.of
       |core.io'open-string-input-port|
       "../stdlib/core/bytevector-transcoders.scm"
       .
       23578))
   (push)
   (push.const . 4)
   (push.subr.gloc.of |.make-bytevector| 1 "../stdlib/core/bytevector-transcoders.scm" . 24600)
   (extend . 2)
   (push.gloc.of |.fn5.1`5|)
   (push.close
     (2 0)
     (extend.enclose+
       (1 0 . loop)
       (push.iloc.0 . 0)
       (subr.gloc.of |.eof-object?| 1 "../stdlib/core/bytevector-transcoders.scm" . 27674)
       (if.true (apply.iloc (2 . 1) "../stdlib/core/bytevector-transcoders.scm" . 27691))
       (push.iloc 3 . 1)
       (push.const . 0)
       (push.iloc.0 . 0)
       (push.subr.gloc.of |.char->integer| 1 "../stdlib/core/bytevector-transcoders.scm" . 29749)
       (push.iloc 4 . 0)
       (subr.gloc.of |.bytevector-u32-set!| 4 "../stdlib/core/bytevector-transcoders.scm" . 29722)
       (push.iloc 2 . 0)
       (push.iloc 3 . 1)
       (subr.gloc.of |.put-bytevector| 2 "../stdlib/core/bytevector-transcoders.scm" . 30746)
       (push.iloc 3 . 0)
       (push.subr.gloc.of |.get-char| 1 "../stdlib/core/bytevector-transcoders.scm" . 31776)
       (apply.iloc+ (1 . 0) "../stdlib/core/bytevector-transcoders.scm" . 31770))
     (push.iloc 2 . 0)
     (push.subr.gloc.of |.get-char| 1 "../stdlib/core/bytevector-transcoders.scm" . 26656)
     (apply.iloc+ (0 . 0) "../stdlib/core/bytevector-transcoders.scm" . 26641))
   (apply.gloc.of |.call-with-values| "../stdlib/core/bytevector-transcoders.scm" . 23565))
 (set.gloc.of |core.bytevector-transcoders'string->utf32|)
 (close
   (1 0 . |core.bytevector-transcoders'test-utf32-bom|)
   (push.iloc.0 . 0)
   (push.subr.gloc.of |.bytevector-length| 1 "../stdlib/core/bytevector-transcoders.scm" . 35856)
   (push.const . 4)
   (subr.gloc.of |.>=| 2 "../stdlib/core/bytevector-transcoders.scm" . 35852)
   (if.false.ret)
   (push.const . 4)
   (push.subr.gloc.of |.make-bytevector| 1 "../stdlib/core/bytevector-transcoders.scm" . 36887)
   (extend . 1)
   (push.iloc.1 . 0)
   (push.const . 0)
   (push.iloc.0 . 0)
   (push.const . 0)
   (push.const . 4)
   (subr.gloc.of |.bytevector-copy!| 5 "../stdlib/core/bytevector-transcoders.scm" . 37902)
   (push.iloc.0 . 0)
   (push.const . #vu8(0 0 254 255))
   (subr.gloc.of |.equal?| 2 "../stdlib/core/bytevector-transcoders.scm" . 38933)
   (if.true.ret.const . big)
   (push.iloc.0 . 0)
   (push.const . #vu8(255 254 0 0))
   (subr.gloc.of |.equal?| 2 "../stdlib/core/bytevector-transcoders.scm" . 39957)
   (if.true.ret.const . little)
   (ret.const . #f))
 (set.gloc.of |core.bytevector-transcoders'test-utf32-bom|)
 (close
   (4 0 . |core.bytevector-transcoders'transcode-utf32->string|)
   (push.gloc.of |.fn11.1`11|)
   (push.close
     (2 0)
     (extend.enclose+
       (2 0 . loop)
       (=n.iloc (0 . 1) 0 "../stdlib/core/bytevector-transcoders.scm" . 47122)
       (if.true (apply.iloc (2 . 1) "../stdlib/core/bytevector-transcoders.scm" . 47133))
       (>=n.iloc (0 . 1) 4 "../stdlib/core/bytevector-transcoders.scm" . 48146)
       (if.true
         (call
           (push.iloc 3 . 2)
           (push.iloc.0 . 0)
           (push.iloc 3 . 3)
           (push.subr.gloc.of
             |.bytevector-u32-ref|
             3
             "../stdlib/core/bytevector-transcoders.scm"
             .
             49180)
           (extend . 1)
           (>n.iloc (0 . 0) 1114111 "../stdlib/core/bytevector-transcoders.scm" . 50203)
           (if.true
             (push.iloc 3 . 0)
             (push.const . #\�)
             (ret.subr.gloc.of |.put-char| "../stdlib/core/bytevector-transcoders.scm" . 50219))
           (push.const . 55296)
           (push.iloc.0 . 0)
           (push.const . 57343)
           (subr.gloc.of |.<=| 3 "../stdlib/core/bytevector-transcoders.scm" . 51227)
           (if.true
             (push.iloc 3 . 0)
             (push.const . #\�)
             (ret.subr.gloc.of |.put-char| "../stdlib/core/bytevector-transcoders.scm" . 51249))
           (push.iloc 3 . 0)
           (push.iloc.0 . 0)
           (push.subr.gloc.of
             |.integer->char|
             1
             "../stdlib/core/bytevector-transcoders.scm"
             .
             52273)
           (ret.subr.gloc.of |.put-char| "../stdlib/core/bytevector-transcoders.scm" . 52256))
         (push.n+.iloc (0 . 0) 4 "../stdlib/core/bytevector-transcoders.scm" . 53272)
         (push.n+.iloc (0 . 1) -4 "../stdlib/core/bytevector-transcoders.scm" . 53280)
         (apply.iloc+ (1 . 0) "../stdlib/core/bytevector-transcoders.scm" . 53266))
       (push.iloc 2 . 0)
       (push.const . #\�)
       (subr.gloc.of |.put-char| 2 "../stdlib/core/bytevector-transcoders.scm" . 55314)
       (apply.iloc (2 . 1) "../stdlib/core/bytevector-transcoders.scm" . 56338))
     (push.iloc 2 . 0)
     (push.iloc 2 . 1)
     (apply.iloc+ (0 . 0) "../stdlib/core/bytevector-transcoders.scm" . 46089))
   (apply.gloc.of |.call-with-values| "../stdlib/core/bytevector-transcoders.scm" . 6145))
 (set.gloc.of |core.bytevector-transcoders'transcode-utf32->string|)
 (close
   (2 1 . |core.bytevector-transcoders'utf32->string|)
   (call
     (iloc.0 . 2)
     (if.pair?
       (push.iloc.0 . 2)
       (ret.subr.gloc.of |.car| "../stdlib/core/bytevector-transcoders.scm" . 61449))
     (ret.const . #f))
   (push)
   (extend . 1)
   (push.gloc.of |.fn15.1`15|)
   (push.close
     (2 0)
     (iloc.1 . 0)
     (if.true
       (push.const . 0)
       (push.iloc 2 . 0)
       (push.subr.gloc.of
         |.bytevector-length|
         1
         "../stdlib/core/bytevector-transcoders.scm"
         .
         63533)
       (push.iloc 2 . 0)
       (push.iloc 2 . 1)
       (apply.gloc.of
         |core.bytevector-transcoders'transcode-utf32->string|
         "../stdlib/core/bytevector-transcoders.scm"
         .
         63506))
     (call
       (push.iloc 2 . 0)
       (apply.gloc.of
         |core.bytevector-transcoders'test-utf32-bom|
         "../stdlib/core/bytevector-transcoders.scm"
         .
         64530))
     (push)
     (extend . 1)
     (iloc.0 . 0)
     (if.true
       (push.const . 4)
       (push.iloc 3 . 0)
       (push.subr.gloc.of
         |.bytevector-length|
         1
         "../stdlib/core/bytevector-transcoders.scm"
         .
         66613)
       (push.const . 4)
       (push.subr.gloc.of |.-| 2 "../stdlib/core/bytevector-transcoders.scm" . 66610)
       (push.iloc 3 . 0)
       (push.iloc.0 . 0)
       (apply.gloc.of
         |core.bytevector-transcoders'transcode-utf32->string|
         "../stdlib/core/bytevector-transcoders.scm"
         .
         66583))
     (push.const . 0)
     (push.iloc 3 . 0)
     (push.subr.gloc.of |.bytevector-length| 1 "../stdlib/core/bytevector-transcoders.scm" . 68653)
     (push.iloc 3 . 0)
     (push.iloc 3 . 1)
     (apply.gloc.of
       |core.bytevector-transcoders'transcode-utf32->string|
       "../stdlib/core/bytevector-transcoders.scm"
       .
       68626))
   (apply.gloc.of |.call-with-values| "../stdlib/core/bytevector-transcoders.scm" . 61449))
 (set.gloc.of |core.bytevector-transcoders'utf32->string|)
 (close
   (1 0 . |core.bytevector-transcoders'encode-surrogates|)
   (push.n+.iloc (0 . 0) -65536 "../stdlib/core/bytevector-transcoders.scm" . 72720)
   (extend . 1)
   (push.iloc.0 . 0)
   (push.const . 1024)
   (push.subr.gloc.of |.div| 2 "../stdlib/core/bytevector-transcoders.scm" . 73749)
   (push.const . 55296)
   (push.subr.gloc.of |.+| 2 "../stdlib/core/bytevector-transcoders.scm" . 73746)
   (call
     (push.iloc.0 . 0)
     (push.const . 1024)
     (apply.gloc.of |.mod| "../stdlib/core/bytevector-transcoders.scm" . 74773))
   (push)
   (push.const . 56320)
   (push.subr.gloc.of |.+| 2 "../stdlib/core/bytevector-transcoders.scm" . 74770)
   (ret.subr.gloc.of |.values| "../stdlib/core/bytevector-transcoders.scm" . 75787))
 (set.gloc.of |core.bytevector-transcoders'encode-surrogates|)
 (close
   (2 0 . |core.bytevector-transcoders'decode-surrogates|)
   (push.n+.iloc (0 . 0) -55296 "../stdlib/core/bytevector-transcoders.scm" . 79895)
   (push.const . 1024)
   (push.subr.gloc.of |.*| 2 "../stdlib/core/bytevector-transcoders.scm" . 79892)
   (push.n+.iloc (0 . 1) -56320 "../stdlib/core/bytevector-transcoders.scm" . 79917)
   (push.const . 65536)
   (push.subr.gloc.of |.+| 3 "../stdlib/core/bytevector-transcoders.scm" . 79889)
   (extend . 1)
   (>n.iloc (0 . 0) 1114111 "../stdlib/core/bytevector-transcoders.scm" . 80912)
   (if.true.ret.const . #\�)
   (push.const . 55296)
   (push.iloc.0 . 0)
   (push.const . 57343)
   (subr.gloc.of |.<=| 3 "../stdlib/core/bytevector-transcoders.scm" . 81936)
   (if.true.ret.const . #\�)
   (push.iloc.0 . 0)
   (ret.subr.gloc.of |.integer->char| "../stdlib/core/bytevector-transcoders.scm" . 82965))
 (set.gloc.of |core.bytevector-transcoders'decode-surrogates|)
 (close
   (1 0 . |core.bytevector-transcoders'test-utf16-bom|)
   (push.iloc.0 . 0)
   (push.subr.gloc.of |.bytevector-length| 1 "../stdlib/core/bytevector-transcoders.scm" . 87056)
   (push.const . 2)
   (subr.gloc.of |.>=| 2 "../stdlib/core/bytevector-transcoders.scm" . 87052)
   (if.false.ret)
   (push.const . 2)
   (push.subr.gloc.of |.make-bytevector| 1 "../stdlib/core/bytevector-transcoders.scm" . 88087)
   (extend . 1)
   (push.iloc.1 . 0)
   (push.const . 0)
   (push.iloc.0 . 0)
   (push.const . 0)
   (push.const . 2)
   (subr.gloc.of |.bytevector-copy!| 5 "../stdlib/core/bytevector-transcoders.scm" . 89102)
   (push.iloc.0 . 0)
   (push.const . #vu8(254 255))
   (subr.gloc.of |.equal?| 2 "../stdlib/core/bytevector-transcoders.scm" . 90133)
   (if.true.ret.const . big)
   (push.iloc.0 . 0)
   (push.const . #vu8(255 254))
   (subr.gloc.of |.equal?| 2 "../stdlib/core/bytevector-transcoders.scm" . 91157)
   (if.true.ret.const . little)
   (ret.const . #f))
 (set.gloc.of |core.bytevector-transcoders'test-utf16-bom|)
 (close
   (1 1 . |core.bytevector-transcoders'string->utf16|)
   (call
     (iloc.0 . 1)
     (if.pair?
       (push.iloc.0 . 1)
       (ret.subr.gloc.of |.car| "../stdlib/core/bytevector-transcoders.scm" . 96291))
     (ret.const . big))
   (push)
   (extend . 1)
   (push.iloc.1 . 0)
   (push.subr.gloc.of |.string-length| 1 "../stdlib/core/bytevector-transcoders.scm" . 97296)
   (push.const . 0)
   (subr.gloc.of |.=| 2 "../stdlib/core/bytevector-transcoders.scm" . 97293)
   (if.true.ret.const . #vu8())
   (call
     (push.iloc.1 . 0)
     (apply.gloc.of
       |core.io'open-string-input-port|
       "../stdlib/core/bytevector-transcoders.scm"
       .
       99354))
   (push)
   (push.const . 2)
   (push.subr.gloc.of |.make-bytevector| 1 "../stdlib/core/bytevector-transcoders.scm" . 100376)
   (extend . 2)
   (push.gloc.of |.fn8.1`8|)
   (push.close
     (2 0)
     (extend.enclose+
       (1 0 . loop)
       (push.iloc.0 . 0)
       (subr.gloc.of |.eof-object?| 1 "../stdlib/core/bytevector-transcoders.scm" . 103450)
       (if.true (apply.iloc (2 . 1) "../stdlib/core/bytevector-transcoders.scm" . 103467))
       (push.iloc.0 . 0)
       (push.subr.gloc.of |.char->integer| 1 "../stdlib/core/bytevector-transcoders.scm" . 105508)
       (extend . 1)
       (>=n.iloc (0 . 0) 65536 "../stdlib/core/bytevector-transcoders.scm" . 106531)
       (if.true
         (call
           (push.close
             (0 0)
             (push.iloc.1 . 0)
             (apply.gloc.of
               |core.bytevector-transcoders'encode-surrogates|
               "../stdlib/core/bytevector-transcoders.scm"
               .
               107582))
           (push.close
             (2 0)
             (push.iloc 5 . 1)
             (push.const . 0)
             (push.iloc.0 . 0)
             (push.iloc 6 . 0)
             (subr.gloc.of
               |.bytevector-u16-set!|
               4
               "../stdlib/core/bytevector-transcoders.scm"
               .
               108581)
             (push.iloc 4 . 0)
             (push.iloc 5 . 1)
             (subr.gloc.of |.put-bytevector| 2 "../stdlib/core/bytevector-transcoders.scm" . 109605)
             (push.iloc 5 . 1)
             (push.const . 0)
             (push.iloc.0 . 1)
             (push.iloc 6 . 0)
             (subr.gloc.of
               |.bytevector-u16-set!|
               4
               "../stdlib/core/bytevector-transcoders.scm"
               .
               110629)
             (push.iloc 4 . 0)
             (push.iloc 5 . 1)
             (ret.subr.gloc.of
               |.put-bytevector|
               "../stdlib/core/bytevector-transcoders.scm"
               .
               111653))
           (apply.gloc.of |.call-with-values| "../stdlib/core/bytevector-transcoders.scm" . 106524))
         (push.iloc 4 . 0)
         (push.subr.gloc.of |.get-char| 1 "../stdlib/core/bytevector-transcoders.scm" . 112681)
         (apply.iloc+ (2 . 0) "../stdlib/core/bytevector-transcoders.scm" . 112675))
       (push.iloc 4 . 1)
       (push.const . 0)
       (push.iloc.0 . 0)
       (push.iloc 5 . 0)
       (subr.gloc.of |.bytevector-u16-set!| 4 "../stdlib/core/bytevector-transcoders.scm" . 114723)
       (push.iloc 3 . 0)
       (push.iloc 4 . 1)
       (subr.gloc.of |.put-bytevector| 2 "../stdlib/core/bytevector-transcoders.scm" . 115747)
       (push.iloc 4 . 0)
       (push.subr.gloc.of |.get-char| 1 "../stdlib/core/bytevector-transcoders.scm" . 116777)
       (apply.iloc+ (2 . 0) "../stdlib/core/bytevector-transcoders.scm" . 116771))
     (push.iloc 2 . 0)
     (push.subr.gloc.of |.get-char| 1 "../stdlib/core/bytevector-transcoders.scm" . 102432)
     (apply.iloc+ (0 . 0) "../stdlib/core/bytevector-transcoders.scm" . 102417))
   (apply.gloc.of |.call-with-values| "../stdlib/core/bytevector-transcoders.scm" . 99341))
 (set.gloc.of |core.bytevector-transcoders'string->utf16|)
 (close
   (4 0 . |core.bytevector-transcoders'transcode-utf16->string|)
   (push.gloc.of |.fn1.1`1|)
   (push.close
     (2 0)
     (extend.enclose+
       (2 0 . loop)
       (=n.iloc (0 . 1) 0 "../stdlib/core/bytevector-transcoders.scm" . 122898)
       (if.true (apply.iloc (2 . 1) "../stdlib/core/bytevector-transcoders.scm" . 122909))
       (>=n.iloc (0 . 1) 2 "../stdlib/core/bytevector-transcoders.scm" . 123922)
       (if.true
         (push.iloc 3 . 2)
         (push.iloc.0 . 0)
         (push.iloc 3 . 3)
         (push.subr.gloc.of
           |.bytevector-u16-ref|
           3
           "../stdlib/core/bytevector-transcoders.scm"
           .
           124956)
         (extend . 1)
         (push.const . 55296)
         (push.iloc.0 . 0)
         (push.const . 56319)
         (subr.gloc.of |.<=| 3 "../stdlib/core/bytevector-transcoders.scm" . 125979)
         (if.true
           (>=n.iloc (1 . 1) 4 "../stdlib/core/bytevector-transcoders.scm" . 127010)
           (if.true
             (push.iloc 4 . 2)
             (push.n+.iloc (1 . 0) 2 "../stdlib/core/bytevector-transcoders.scm" . 128073)
             (push.iloc 4 . 3)
             (push.subr.gloc.of
               |.bytevector-u16-ref|
               3
               "../stdlib/core/bytevector-transcoders.scm"
               .
               128047)
             (extend . 1)
             (push.const . 56320)
             (push.iloc.0 . 0)
             (push.const . 57343)
             (subr.gloc.of |.<=| 3 "../stdlib/core/bytevector-transcoders.scm" . 129067)
             (if.true
               (push.iloc 4 . 0)
               (call
                 (push.iloc.1 . 0)
                 (push.iloc.0 . 0)
                 (apply.gloc.of
                   |core.bytevector-transcoders'decode-surrogates|
                   "../stdlib/core/bytevector-transcoders.scm"
                   .
                   130108))
               (push)
               (subr.gloc.of |.put-char| 2 "../stdlib/core/bytevector-transcoders.scm" . 130091)
               (push.n+.iloc (2 . 0) 4 "../stdlib/core/bytevector-transcoders.scm" . 131121)
               (push.n+.iloc (2 . 1) -4 "../stdlib/core/bytevector-transcoders.scm" . 131129)
               (apply.iloc+ (3 . 0) "../stdlib/core/bytevector-transcoders.scm" . 131115))
             (push.iloc 4 . 0)
             (push.const . #\�)
             (subr.gloc.of |.put-char| 2 "../stdlib/core/bytevector-transcoders.scm" . 133163)
             (push.n+.iloc (2 . 0) 2 "../stdlib/core/bytevector-transcoders.scm" . 134193)
             (push.n+.iloc (2 . 1) -2 "../stdlib/core/bytevector-transcoders.scm" . 134201)
             (apply.iloc+ (3 . 0) "../stdlib/core/bytevector-transcoders.scm" . 134187))
           (push.iloc 3 . 0)
           (push.const . #\�)
           (subr.gloc.of |.put-char| 2 "../stdlib/core/bytevector-transcoders.scm" . 136226)
           (apply.iloc (3 . 1) "../stdlib/core/bytevector-transcoders.scm" . 137250))
         (push.const . 56320)
         (push.iloc.0 . 0)
         (push.const . 57343)
         (subr.gloc.of |.<=| 3 "../stdlib/core/bytevector-transcoders.scm" . 138267)
         (if.true
           (push.iloc 3 . 0)
           (push.const . #\�)
           (subr.gloc.of |.put-char| 2 "../stdlib/core/bytevector-transcoders.scm" . 139291)
           (push.n+.iloc (1 . 0) 2 "../stdlib/core/bytevector-transcoders.scm" . 140321)
           (push.n+.iloc (1 . 1) -2 "../stdlib/core/bytevector-transcoders.scm" . 140329)
           (apply.iloc+ (2 . 0) "../stdlib/core/bytevector-transcoders.scm" . 140315))
         (push.iloc 3 . 0)
         (push.iloc.0 . 0)
         (push.subr.gloc.of |.integer->char| 1 "../stdlib/core/bytevector-transcoders.scm" . 142380)
         (subr.gloc.of |.put-char| 2 "../stdlib/core/bytevector-transcoders.scm" . 142363)
         (push.n+.iloc (1 . 0) 2 "../stdlib/core/bytevector-transcoders.scm" . 143393)
         (push.n+.iloc (1 . 1) -2 "../stdlib/core/bytevector-transcoders.scm" . 143401)
         (apply.iloc+ (2 . 0) "../stdlib/core/bytevector-transcoders.scm" . 143387))
       (push.iloc 2 . 0)
       (push.const . #\�)
       (subr.gloc.of |.put-char| 2 "../stdlib/core/bytevector-transcoders.scm" . 145426)
       (apply.iloc (2 . 1) "../stdlib/core/bytevector-transcoders.scm" . 146450))
     (push.iloc 2 . 0)
     (push.iloc 2 . 1)
     (apply.iloc+ (0 . 0) "../stdlib/core/bytevector-transcoders.scm" . 121865))
   (apply.gloc.of |.call-with-values| "../stdlib/core/bytevector-transcoders.scm" . 6145))
 (set.gloc.of |core.bytevector-transcoders'transcode-utf16->string|)
 (close
   (2 1 . |core.bytevector-transcoders'utf16->string|)
   (call
     (iloc.0 . 2)
     (if.pair?
       (push.iloc.0 . 2)
       (ret.subr.gloc.of |.car| "../stdlib/core/bytevector-transcoders.scm" . 151561))
     (ret.const . #f))
   (push)
   (extend . 1)
   (push.gloc.of |.fn12.1`12|)
   (push.close
     (2 0)
     (iloc.1 . 0)
     (if.true
       (push.const . 0)
       (push.iloc 2 . 0)
       (push.subr.gloc.of
         |.bytevector-length|
         1
         "../stdlib/core/bytevector-transcoders.scm"
         .
         153645)
       (push.iloc 2 . 0)
       (push.iloc 2 . 1)
       (apply.gloc.of
         |core.bytevector-transcoders'transcode-utf16->string|
         "../stdlib/core/bytevector-transcoders.scm"
         .
         153618))
     (call
       (push.iloc 2 . 0)
       (apply.gloc.of
         |core.bytevector-transcoders'test-utf16-bom|
         "../stdlib/core/bytevector-transcoders.scm"
         .
         154642))
     (push)
     (extend . 1)
     (iloc.0 . 0)
     (if.true
       (push.const . 2)
       (push.iloc 3 . 0)
       (push.subr.gloc.of
         |.bytevector-length|
         1
         "../stdlib/core/bytevector-transcoders.scm"
         .
         156725)
       (push.const . 2)
       (push.subr.gloc.of |.-| 2 "../stdlib/core/bytevector-transcoders.scm" . 156722)
       (push.iloc 3 . 0)
       (push.iloc.0 . 0)
       (apply.gloc.of
         |core.bytevector-transcoders'transcode-utf16->string|
         "../stdlib/core/bytevector-transcoders.scm"
         .
         156695))
     (push.const . 0)
     (push.iloc 3 . 0)
     (push.subr.gloc.of |.bytevector-length| 1 "../stdlib/core/bytevector-transcoders.scm" . 158765)
     (push.iloc 3 . 0)
     (push.iloc 3 . 1)
     (apply.gloc.of
       |core.bytevector-transcoders'transcode-utf16->string|
       "../stdlib/core/bytevector-transcoders.scm"
       .
       158738))
   (apply.gloc.of |.call-with-values| "../stdlib/core/bytevector-transcoders.scm" . 151561))
 (set.gloc.of |core.bytevector-transcoders'utf16->string|)
 (push.const . core.bytevector-transcoders)
 (push.const . #f)
 (push.const
   (string->utf8 import . |.string->utf8|)
   (utf8->string import . |.utf8->string|)
   (string->utf16 import . |core.bytevector-transcoders'string->utf16|)
   (utf16->string import . |core.bytevector-transcoders'utf16->string|)
   (string->utf32 import . |core.bytevector-transcoders'string->utf32|)
   (utf32->string import . |core.bytevector-transcoders'utf32->string|))
 (apply.gloc.of |.intern-scheme-library| "../stdlib/core/bytevector-transcoders.scm" . 6145))

((close
   (1 0)
   (push.iloc.0 . 0)
   (ret.subr.gloc.of |.get-datum| "../stdlib/core/unicode-assistants.scm" . 52234))
 (set.gloc.of |.fn26.1`26|)
 (close
   (1 0)
   (push.const . eqv?)
   (push.subr.gloc.of |.make-core-hashtable| 1 "../stdlib/core/unicode-assistants.scm" . 38932)
   (extend . 1)
   (call
     (extend.enclose+
       (1 0 . loop)
       (iloc.0 . 0)
       (if.null?.ret.const . #t)
       (push.iloc 2 . 0)
       (push.iloc.0 . 0)
       (push.subr.gloc.of |.caar| 1 "../stdlib/core/unicode-assistants.scm" . 43053)
       (push.iloc.0 . 0)
       (push.subr.gloc.of |.cdar| 1 "../stdlib/core/unicode-assistants.scm" . 43064)
       (subr.gloc.of |.core-hashtable-set!| 3 "../stdlib/core/unicode-assistants.scm" . 43029)
       (push.cdr.iloc (0 . 0) "../stdlib/core/unicode-assistants.scm" . 44059)
       (apply.iloc+ (1 . 0) "../stdlib/core/unicode-assistants.scm" . 44053))
     (push.iloc 2 . 0)
     (push.subr.gloc.of |.get-datum| 1 "../stdlib/core/unicode-assistants.scm" . 39964)
     (apply.iloc+ (0 . 0) "../stdlib/core/unicode-assistants.scm" . 39948))
   (push.iloc.0 . 0)
   (push.const . #t)
   (ret.subr.gloc.of |.core-hashtable-copy| "../stdlib/core/unicode-assistants.scm" . 45068))
 (set.gloc.of |.fn10.1`10|)
 (call
   (push.const core bytevector-transcoders)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/unicode-assistants.scm" . 6145))
 (call
   (push.const core bytevectors)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/unicode-assistants.scm" . 6145))
 (call
   (push.const core lists)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/unicode-assistants.scm" . 6145))
 (call
   (push.const core files)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/unicode-assistants.scm" . 6145))
 (call
   (push.const core io)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/unicode-assistants.scm" . 6145))
 (call
   (push.const core primitives)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/unicode-assistants.scm" . 6145))
 (close
   (1 0 . |core.unicode-assistants'load-unicode-table-file|)
   (push.iloc.0 . 0)
   (push.subr.gloc.of
     |.open-builtin-data-input-port|
     1
     "../stdlib/core/unicode-assistants.scm"
     .
     36872)
   (push.gloc.of |.fn10.1`10|)
   (apply.gloc.of |.call-with-port| "../stdlib/core/unicode-assistants.scm" . 35847))
 (set.gloc.of |core.unicode-assistants'load-unicode-table-file|)
 (close
   (1 0 . |core.unicode-assistants'load-unicode-list-file|)
   (push.iloc.0 . 0)
   (push.subr.gloc.of
     |.open-builtin-data-input-port|
     1
     "../stdlib/core/unicode-assistants.scm"
     .
     50184)
   (push.gloc.of |.fn26.1`26|)
   (apply.gloc.of |.call-with-port| "../stdlib/core/unicode-assistants.scm" . 49159))
 (set.gloc.of |core.unicode-assistants'load-unicode-list-file|)
 (close
   (0 0 . |core.unicode-assistants'general-category-table-1|)
   (call
     (push.const . "general-category-1")
     (apply.gloc.of
       |core.unicode-assistants'load-unicode-table-file|
       "../stdlib/core/unicode-assistants.scm"
       .
       64516))
   (push)
   (extend . 1)
   (close (0 0 . |core.unicode-assistants'general-category-table-1|) (ret.iloc 1 . 0))
   (set.gloc.of |core.unicode-assistants'general-category-table-1|)
   (ret.iloc 0 . 0))
 (set.gloc.of |core.unicode-assistants'general-category-table-1|)
 (close
   (0 0 . |core.unicode-assistants'general-category-table-2|)
   (call
     (push.const . "general-category-2")
     (apply.gloc.of
       |core.unicode-assistants'load-unicode-table-file|
       "../stdlib/core/unicode-assistants.scm"
       .
       68612))
   (push)
   (extend . 1)
   (close (0 0 . |core.unicode-assistants'general-category-table-2|) (ret.iloc 1 . 0))
   (set.gloc.of |core.unicode-assistants'general-category-table-2|)
   (ret.iloc 0 . 0))
 (set.gloc.of |core.unicode-assistants'general-category-table-2|)
 (close
   (0 0 . |core.unicode-assistants'simple-uppercase-table|)
   (call
     (push.const . "simple-uppercase")
     (apply.gloc.of
       |core.unicode-assistants'load-unicode-table-file|
       "../stdlib/core/unicode-assistants.scm"
       .
       72708))
   (push)
   (extend . 1)
   (close (0 0 . |core.unicode-assistants'simple-uppercase-table|) (ret.iloc 1 . 0))
   (set.gloc.of |core.unicode-assistants'simple-uppercase-table|)
   (ret.iloc 0 . 0))
 (set.gloc.of |core.unicode-assistants'simple-uppercase-table|)
 (close
   (0 0 . |core.unicode-assistants'simple-lowercase-table|)
   (call
     (push.const . "simple-lowercase")
     (apply.gloc.of
       |core.unicode-assistants'load-unicode-table-file|
       "../stdlib/core/unicode-assistants.scm"
       .
       76804))
   (push)
   (extend . 1)
   (close (0 0 . |core.unicode-assistants'simple-lowercase-table|) (ret.iloc 1 . 0))
   (set.gloc.of |core.unicode-assistants'simple-lowercase-table|)
   (ret.iloc 0 . 0))
 (set.gloc.of |core.unicode-assistants'simple-lowercase-table|)
 (close
   (0 0 . |core.unicode-assistants'simple-titlecase-table|)
   (call
     (push.const . "simple-titlecase")
     (apply.gloc.of
       |core.unicode-assistants'load-unicode-table-file|
       "../stdlib/core/unicode-assistants.scm"
       .
       80900))
   (push)
   (extend . 1)
   (close (0 0 . |core.unicode-assistants'simple-titlecase-table|) (ret.iloc 1 . 0))
   (set.gloc.of |core.unicode-assistants'simple-titlecase-table|)
   (ret.iloc 0 . 0))
 (set.gloc.of |core.unicode-assistants'simple-titlecase-table|)
 (close
   (0 0 . |core.unicode-assistants'numeric-property-table|)
   (call
     (push.const . "numeric-property")
     (apply.gloc.of
       |core.unicode-assistants'load-unicode-table-file|
       "../stdlib/core/unicode-assistants.scm"
       .
       84996))
   (push)
   (extend . 1)
   (close (0 0 . |core.unicode-assistants'numeric-property-table|) (ret.iloc 1 . 0))
   (set.gloc.of |core.unicode-assistants'numeric-property-table|)
   (ret.iloc 0 . 0))
 (set.gloc.of |core.unicode-assistants'numeric-property-table|)
 (close
   (0 0 . |core.unicode-assistants'other-uppercase-list|)
   (call
     (push.const . "other-uppercase")
     (apply.gloc.of
       |core.unicode-assistants'load-unicode-list-file|
       "../stdlib/core/unicode-assistants.scm"
       .
       89092))
   (push)
   (extend . 1)
   (close (0 0 . |core.unicode-assistants'other-uppercase-list|) (ret.iloc 1 . 0))
   (set.gloc.of |core.unicode-assistants'other-uppercase-list|)
   (ret.iloc 0 . 0))
 (set.gloc.of |core.unicode-assistants'other-uppercase-list|)
 (close
   (0 0 . |core.unicode-assistants'other-lowercase-list|)
   (call
     (push.const . "other-lowercase")
     (apply.gloc.of
       |core.unicode-assistants'load-unicode-list-file|
       "../stdlib/core/unicode-assistants.scm"
       .
       93188))
   (push)
   (extend . 1)
   (close (0 0 . |core.unicode-assistants'other-lowercase-list|) (ret.iloc 1 . 0))
   (set.gloc.of |core.unicode-assistants'other-lowercase-list|)
   (ret.iloc 0 . 0))
 (set.gloc.of |core.unicode-assistants'other-lowercase-list|)
 (close
   (0 0 . |core.unicode-assistants'other-alphabetic-list|)
   (call
     (push.const . "other-alphabetic")
     (apply.gloc.of
       |core.unicode-assistants'load-unicode-list-file|
       "../stdlib/core/unicode-assistants.scm"
       .
       97284))
   (push)
   (extend . 1)
   (close (0 0 . |core.unicode-assistants'other-alphabetic-list|) (ret.iloc 1 . 0))
   (set.gloc.of |core.unicode-assistants'other-alphabetic-list|)
   (ret.iloc 0 . 0))
 (set.gloc.of |core.unicode-assistants'other-alphabetic-list|)
 (close
   (0 0 . |core.unicode-assistants'special-casing-lower-table|)
   (call
     (push.const . "special-casing-lower")
     (apply.gloc.of
       |core.unicode-assistants'load-unicode-table-file|
       "../stdlib/core/unicode-assistants.scm"
       .
       101380))
   (push)
   (extend . 1)
   (close (0 0 . |core.unicode-assistants'special-casing-lower-table|) (ret.iloc 1 . 0))
   (set.gloc.of |core.unicode-assistants'special-casing-lower-table|)
   (ret.iloc 0 . 0))
 (set.gloc.of |core.unicode-assistants'special-casing-lower-table|)
 (close
   (0 0 . |core.unicode-assistants'special-casing-title-table|)
   (call
     (push.const . "special-casing-title")
     (apply.gloc.of
       |core.unicode-assistants'load-unicode-table-file|
       "../stdlib/core/unicode-assistants.scm"
       .
       105476))
   (push)
   (extend . 1)
   (close (0 0 . |core.unicode-assistants'special-casing-title-table|) (ret.iloc 1 . 0))
   (set.gloc.of |core.unicode-assistants'special-casing-title-table|)
   (ret.iloc 0 . 0))
 (set.gloc.of |core.unicode-assistants'special-casing-title-table|)
 (close
   (0 0 . |core.unicode-assistants'special-casing-upper-table|)
   (call
     (push.const . "special-casing-upper")
     (apply.gloc.of
       |core.unicode-assistants'load-unicode-table-file|
       "../stdlib/core/unicode-assistants.scm"
       .
       109572))
   (push)
   (extend . 1)
   (close (0 0 . |core.unicode-assistants'special-casing-upper-table|) (ret.iloc 1 . 0))
   (set.gloc.of |core.unicode-assistants'special-casing-upper-table|)
   (ret.iloc 0 . 0))
 (set.gloc.of |core.unicode-assistants'special-casing-upper-table|)
 (close
   (0 0 . |core.unicode-assistants'case-folding-table|)
   (call
     (push.const . "case-folding")
     (apply.gloc.of
       |core.unicode-assistants'load-unicode-table-file|
       "../stdlib/core/unicode-assistants.scm"
       .
       113668))
   (push)
   (extend . 1)
   (close (0 0 . |core.unicode-assistants'case-folding-table|) (ret.iloc 1 . 0))
   (set.gloc.of |core.unicode-assistants'case-folding-table|)
   (ret.iloc 0 . 0))
 (set.gloc.of |core.unicode-assistants'case-folding-table|)
 (close
   (1 0 . |core.unicode-assistants'general-category|)
   (call
     (apply.gloc.of
       |core.unicode-assistants'general-category-table-1|
       "../stdlib/core/unicode-assistants.scm"
       .
       117791))
   (push)
   (push.iloc.0 . 0)
   (push.subr.gloc.of |.char->integer| 1 "../stdlib/core/unicode-assistants.scm" . 117818)
   (push.const . #f)
   (subr.gloc.of |.core-hashtable-ref| 3 "../stdlib/core/unicode-assistants.scm" . 117771)
   (if.true.ret)
   (call
     (apply.gloc.of
       |core.unicode-assistants'general-category-table-2|
       "../stdlib/core/unicode-assistants.scm"
       .
       118815))
   (push)
   (push.iloc.0 . 0)
   (push.subr.gloc.of |.char->integer| 1 "../stdlib/core/unicode-assistants.scm" . 118842)
   (push.const . Cn)
   (ret.subr.gloc.of |.core-hashtable-ref| "../stdlib/core/unicode-assistants.scm" . 118795))
 (set.gloc.of |core.unicode-assistants'general-category|)
 (close
   (1 0 . |core.unicode-assistants'numeric-property?|)
   (call
     (apply.gloc.of
       |core.unicode-assistants'numeric-property-table|
       "../stdlib/core/unicode-assistants.scm"
       .
       122912))
   (push)
   (push.iloc.0 . 0)
   (push.subr.gloc.of |.char->integer| 1 "../stdlib/core/unicode-assistants.scm" . 122937)
   (push.const . #f)
   (subr.gloc.of |.core-hashtable-ref| 3 "../stdlib/core/unicode-assistants.scm" . 122892)
   (if.false.ret)
   (ret.const . #t))
 (set.gloc.of |core.unicode-assistants'numeric-property?|)
 (close
   (1 0 . |core.unicode-assistants'simple-uppercase|)
   (call
     (apply.gloc.of
       |core.unicode-assistants'simple-uppercase-table|
       "../stdlib/core/unicode-assistants.scm"
       .
       127010))
   (push)
   (push.iloc.0 . 0)
   (push.subr.gloc.of |.char->integer| 1 "../stdlib/core/unicode-assistants.scm" . 127035)
   (push.const . #f)
   (push.subr.gloc.of |.core-hashtable-ref| 3 "../stdlib/core/unicode-assistants.scm" . 126990)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (push.iloc.0 . 0)
     (ret.subr.gloc.of |.integer->char| "../stdlib/core/unicode-assistants.scm" . 128029))
   (ret.iloc 1 . 0))
 (set.gloc.of |core.unicode-assistants'simple-uppercase|)
 (close
   (1 0 . |core.unicode-assistants'simple-lowercase|)
   (call
     (apply.gloc.of
       |core.unicode-assistants'simple-lowercase-table|
       "../stdlib/core/unicode-assistants.scm"
       .
       133154))
   (push)
   (push.iloc.0 . 0)
   (push.subr.gloc.of |.char->integer| 1 "../stdlib/core/unicode-assistants.scm" . 133179)
   (push.const . #f)
   (push.subr.gloc.of |.core-hashtable-ref| 3 "../stdlib/core/unicode-assistants.scm" . 133134)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (push.iloc.0 . 0)
     (ret.subr.gloc.of |.integer->char| "../stdlib/core/unicode-assistants.scm" . 134173))
   (ret.iloc 1 . 0))
 (set.gloc.of |core.unicode-assistants'simple-lowercase|)
 (close
   (1 0 . |core.unicode-assistants'simple-titlecase|)
   (call
     (apply.gloc.of
       |core.unicode-assistants'simple-titlecase-table|
       "../stdlib/core/unicode-assistants.scm"
       .
       139298))
   (push)
   (push.iloc.0 . 0)
   (push.subr.gloc.of |.char->integer| 1 "../stdlib/core/unicode-assistants.scm" . 139323)
   (push.const . #f)
   (push.subr.gloc.of |.core-hashtable-ref| 3 "../stdlib/core/unicode-assistants.scm" . 139278)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (push.iloc.0 . 0)
     (ret.subr.gloc.of |.integer->char| "../stdlib/core/unicode-assistants.scm" . 140317))
   (push.iloc.1 . 0)
   (apply.gloc.of
     |core.unicode-assistants'simple-uppercase|
     "../stdlib/core/unicode-assistants.scm"
     .
     141331))
 (set.gloc.of |core.unicode-assistants'simple-titlecase|)
 (close
   (1 0 . |core.unicode-assistants'other-uppercase-property?|)
   (push.iloc.0 . 0)
   (push.subr.gloc.of |.char->integer| 1 "../stdlib/core/unicode-assistants.scm" . 145425)
   (extend . 1)
   (push.const . 8544)
   (push.iloc.0 . 0)
   (push.const . 9423)
   (subr.gloc.of |.<=| 3 "../stdlib/core/unicode-assistants.scm" . 146446)
   (if.false.ret)
   (push.close
     (1 0)
     (push.car.iloc (0 . 0) "../stdlib/core/unicode-assistants.scm" . 147494)
     (push.iloc.1 . 0)
     (push.cdr.iloc (0 . 0) "../stdlib/core/unicode-assistants.scm" . 147505)
     (ret.subr.gloc.of |.<=| "../stdlib/core/unicode-assistants.scm" . 147490))
   (call
     (apply.gloc.of
       |core.unicode-assistants'other-uppercase-list|
       "../stdlib/core/unicode-assistants.scm"
       .
       147515))
   (push)
   (apply.gloc.of |core.lists'exists| "../stdlib/core/unicode-assistants.scm" . 147470))
 (set.gloc.of |core.unicode-assistants'other-uppercase-property?|)
 (close
   (1 0 . |core.unicode-assistants'other-lowercase-property?|)
   (push.iloc.0 . 0)
   (push.subr.gloc.of |.char->integer| 1 "../stdlib/core/unicode-assistants.scm" . 151569)
   (extend . 1)
   (push.const . 688)
   (push.iloc.0 . 0)
   (push.const . 9449)
   (subr.gloc.of |.<=| 3 "../stdlib/core/unicode-assistants.scm" . 152590)
   (if.false.ret)
   (push.close
     (1 0)
     (push.car.iloc (0 . 0) "../stdlib/core/unicode-assistants.scm" . 153638)
     (push.iloc.1 . 0)
     (push.cdr.iloc (0 . 0) "../stdlib/core/unicode-assistants.scm" . 153649)
     (ret.subr.gloc.of |.<=| "../stdlib/core/unicode-assistants.scm" . 153634))
   (call
     (apply.gloc.of
       |core.unicode-assistants'other-lowercase-list|
       "../stdlib/core/unicode-assistants.scm"
       .
       153659))
   (push)
   (apply.gloc.of |core.lists'exists| "../stdlib/core/unicode-assistants.scm" . 153614))
 (set.gloc.of |core.unicode-assistants'other-lowercase-property?|)
 (close
   (1 0 . |core.unicode-assistants'other-alphabetic-property?|)
   (push.iloc.0 . 0)
   (push.subr.gloc.of |.char->integer| 1 "../stdlib/core/unicode-assistants.scm" . 157713)
   (extend . 1)
   (push.const . 837)
   (push.iloc.0 . 0)
   (push.const . 68111)
   (subr.gloc.of |.<=| 3 "../stdlib/core/unicode-assistants.scm" . 158734)
   (if.false.ret)
   (push.close
     (1 0)
     (push.car.iloc (0 . 0) "../stdlib/core/unicode-assistants.scm" . 159782)
     (push.iloc.1 . 0)
     (push.cdr.iloc (0 . 0) "../stdlib/core/unicode-assistants.scm" . 159793)
     (ret.subr.gloc.of |.<=| "../stdlib/core/unicode-assistants.scm" . 159778))
   (call
     (apply.gloc.of
       |core.unicode-assistants'other-alphabetic-list|
       "../stdlib/core/unicode-assistants.scm"
       .
       159803))
   (push)
   (apply.gloc.of |core.lists'exists| "../stdlib/core/unicode-assistants.scm" . 159758))
 (set.gloc.of |core.unicode-assistants'other-alphabetic-property?|)
 (close
   (1 0 . |core.unicode-assistants'special-casing-lower|)
   (call
     (apply.gloc.of
       |core.unicode-assistants'special-casing-lower-table|
       "../stdlib/core/unicode-assistants.scm"
       .
       163867))
   (push)
   (push.iloc.0 . 0)
   (push.subr.gloc.of |.char->integer| 1 "../stdlib/core/unicode-assistants.scm" . 163896)
   (push.const . #f)
   (ret.subr.gloc.of |.core-hashtable-ref| "../stdlib/core/unicode-assistants.scm" . 163847))
 (set.gloc.of |core.unicode-assistants'special-casing-lower|)
 (close
   (1 0 . |core.unicode-assistants'special-casing-title|)
   (call
     (apply.gloc.of
       |core.unicode-assistants'special-casing-title-table|
       "../stdlib/core/unicode-assistants.scm"
       .
       167963))
   (push)
   (push.iloc.0 . 0)
   (push.subr.gloc.of |.char->integer| 1 "../stdlib/core/unicode-assistants.scm" . 167992)
   (push.const . #f)
   (ret.subr.gloc.of |.core-hashtable-ref| "../stdlib/core/unicode-assistants.scm" . 167943))
 (set.gloc.of |core.unicode-assistants'special-casing-title|)
 (close
   (1 0 . |core.unicode-assistants'special-casing-upper|)
   (call
     (apply.gloc.of
       |core.unicode-assistants'special-casing-upper-table|
       "../stdlib/core/unicode-assistants.scm"
       .
       172059))
   (push)
   (push.iloc.0 . 0)
   (push.subr.gloc.of |.char->integer| 1 "../stdlib/core/unicode-assistants.scm" . 172088)
   (push.const . #f)
   (ret.subr.gloc.of |.core-hashtable-ref| "../stdlib/core/unicode-assistants.scm" . 172039))
 (set.gloc.of |core.unicode-assistants'special-casing-upper|)
 (close
   (1 0 . |core.unicode-assistants'foldcase|)
   (call
     (apply.gloc.of
       |core.unicode-assistants'case-folding-table|
       "../stdlib/core/unicode-assistants.scm"
       .
       176155))
   (push)
   (push.iloc.0 . 0)
   (push.subr.gloc.of |.char->integer| 1 "../stdlib/core/unicode-assistants.scm" . 176176)
   (push.const . #f)
   (ret.subr.gloc.of |.core-hashtable-ref| "../stdlib/core/unicode-assistants.scm" . 176135))
 (set.gloc.of |core.unicode-assistants'foldcase|)
 (close
   (0 0 . |core.unicode-assistants'canonical-class-table|)
   (call
     (push.const . "canonical-class")
     (apply.gloc.of
       |core.unicode-assistants'load-unicode-table-file|
       "../stdlib/core/unicode-assistants.scm"
       .
       180228))
   (push)
   (extend . 1)
   (close (0 0 . |core.unicode-assistants'canonical-class-table|) (ret.iloc 1 . 0))
   (set.gloc.of |core.unicode-assistants'canonical-class-table|)
   (ret.iloc 0 . 0))
 (set.gloc.of |core.unicode-assistants'canonical-class-table|)
 (close
   (0 0 . |core.unicode-assistants'decompose-table|)
   (call
     (push.const . "decompose")
     (apply.gloc.of
       |core.unicode-assistants'load-unicode-table-file|
       "../stdlib/core/unicode-assistants.scm"
       .
       184324))
   (push)
   (extend . 1)
   (close (0 0 . |core.unicode-assistants'decompose-table|) (ret.iloc 1 . 0))
   (set.gloc.of |core.unicode-assistants'decompose-table|)
   (ret.iloc 0 . 0))
 (set.gloc.of |core.unicode-assistants'decompose-table|)
 (close
   (0 0 . |core.unicode-assistants'compose-table|)
   (call
     (push.const . "compose")
     (apply.gloc.of
       |core.unicode-assistants'load-unicode-table-file|
       "../stdlib/core/unicode-assistants.scm"
       .
       188420))
   (push)
   (extend . 1)
   (close (0 0 . |core.unicode-assistants'compose-table|) (ret.iloc 1 . 0))
   (set.gloc.of |core.unicode-assistants'compose-table|)
   (ret.iloc 0 . 0))
 (set.gloc.of |core.unicode-assistants'compose-table|)
 (close
   (0 0 . |core.unicode-assistants'compatibility-table|)
   (call
     (push.const . "compatibility")
     (apply.gloc.of
       |core.unicode-assistants'load-unicode-table-file|
       "../stdlib/core/unicode-assistants.scm"
       .
       192516))
   (push)
   (extend . 1)
   (close (0 0 . |core.unicode-assistants'compatibility-table|) (ret.iloc 1 . 0))
   (set.gloc.of |core.unicode-assistants'compatibility-table|)
   (ret.iloc 0 . 0))
 (set.gloc.of |core.unicode-assistants'compatibility-table|)
 (const . 44032)
 (set.gloc.of |core.unicode-assistants'SBase|)
 (const . 4352)
 (set.gloc.of |core.unicode-assistants'LBase|)
 (const . 4449)
 (set.gloc.of |core.unicode-assistants'VBase|)
 (const . 4519)
 (set.gloc.of |core.unicode-assistants'TBase|)
 (const . 19)
 (set.gloc.of |core.unicode-assistants'LCount|)
 (const . 21)
 (set.gloc.of |core.unicode-assistants'VCount|)
 (const . 28)
 (set.gloc.of |core.unicode-assistants'TCount|)
 (push.gloc.of |core.unicode-assistants'VCount|)
 (push.gloc.of |core.unicode-assistants'TCount|)
 (subr.gloc.of |.*| 2 "../stdlib/core/unicode-assistants.scm" . 201746)
 (set.gloc.of |core.unicode-assistants'NCount|)
 (push.gloc.of |core.unicode-assistants'LCount|)
 (push.gloc.of |core.unicode-assistants'NCount|)
 (subr.gloc.of |.*| 2 "../stdlib/core/unicode-assistants.scm" . 202770)
 (set.gloc.of |core.unicode-assistants'SCount|)
 (close
   (2 0 . |core.unicode-assistants'pair-wise-composition|)
   (call
     (<n.iloc (0 . 0) 0 "../stdlib/core/unicode-assistants.scm" . 206866)
     (if.true.ret)
     (>n.iloc (0 . 0) 1114111 "../stdlib/core/unicode-assistants.scm" . 206878)
     (if.true.ret)
     (<n.iloc (0 . 1) 0 "../stdlib/core/unicode-assistants.scm" . 206897)
     (if.true.ret)
     (push.iloc.0 . 1)
     (push.const . 1114111)
     (ret.subr.gloc.of |.>| "../stdlib/core/unicode-assistants.scm" . 206910))
   (if.true.ret.const . #f)
   (push.iloc.0 . 0)
   (push.gloc.of |core.unicode-assistants'LBase|)
   (push.subr.gloc.of |.-| 2 "../stdlib/core/unicode-assistants.scm" . 208924)
   (push.iloc.0 . 1)
   (push.gloc.of |core.unicode-assistants'VBase|)
   (push.subr.gloc.of |.-| 2 "../stdlib/core/unicode-assistants.scm" . 208949)
   (push.iloc.0 . 0)
   (push.gloc.of |core.unicode-assistants'SBase|)
   (push.subr.gloc.of |.-| 2 "../stdlib/core/unicode-assistants.scm" . 208975)
   (push.iloc.0 . 1)
   (push.gloc.of |core.unicode-assistants'TBase|)
   (push.subr.gloc.of |.-| 2 "../stdlib/core/unicode-assistants.scm" . 209000)
   (extend . 4)
   (call
     (push.const . -1)
     (push.iloc.0 . 0)
     (push.gloc.of |core.unicode-assistants'LCount|)
     (subr.gloc.of |.<| 3 "../stdlib/core/unicode-assistants.scm" . 209948)
     (if.false.ret)
     (push.const . -1)
     (push.iloc.0 . 1)
     (push.gloc.of |core.unicode-assistants'VCount|)
     (ret.subr.gloc.of |.<| "../stdlib/core/unicode-assistants.scm" . 209969))
   (if.true
     (push.gloc.of |core.unicode-assistants'SBase|)
     (push.gloc.of |core.unicode-assistants'TCount|)
     (push.iloc.0 . 1)
     (push.iloc.0 . 0)
     (push.gloc.of |core.unicode-assistants'VCount|)
     (push.subr.gloc.of |.*| 2 "../stdlib/core/unicode-assistants.scm" . 210996)
     (push.subr.gloc.of |.+| 2 "../stdlib/core/unicode-assistants.scm" . 210986)
     (push.subr.gloc.of |.*| 2 "../stdlib/core/unicode-assistants.scm" . 210976)
     (ret.subr.gloc.of |.+| "../stdlib/core/unicode-assistants.scm" . 210967))
   (call
     (push.const . -1)
     (push.iloc.0 . 2)
     (push.gloc.of |core.unicode-assistants'SCount|)
     (subr.gloc.of |.<| 3 "../stdlib/core/unicode-assistants.scm" . 211996)
     (if.false.ret)
     (push.const . -1)
     (push.iloc.0 . 3)
     (push.gloc.of |core.unicode-assistants'TCount|)
     (subr.gloc.of |.<| 3 "../stdlib/core/unicode-assistants.scm" . 212017)
     (if.false.ret)
     (push.const . 0)
     (call
       (push.iloc.0 . 2)
       (push.gloc.of |core.unicode-assistants'TCount|)
       (apply.gloc.of |.mod| "../stdlib/core/unicode-assistants.scm" . 212043))
     (push)
     (ret.subr.gloc.of |.=| "../stdlib/core/unicode-assistants.scm" . 212038))
   (if.true
     (push.iloc.1 . 0)
     (push.iloc.0 . 3)
     (ret.subr.gloc.of |.+| "../stdlib/core/unicode-assistants.scm" . 213015))
   (call
     (apply.gloc.of
       |core.unicode-assistants'compose-table|
       "../stdlib/core/unicode-assistants.scm"
       .
       215083))
   (push)
   (push.iloc.1 . 0)
   (push.const . 65536)
   (push.subr.gloc.of |.*| 2 "../stdlib/core/unicode-assistants.scm" . 215102)
   (push.iloc.1 . 1)
   (push.subr.gloc.of |.+| 2 "../stdlib/core/unicode-assistants.scm" . 215099)
   (push.const . #f)
   (ret.subr.gloc.of |.core-hashtable-ref| "../stdlib/core/unicode-assistants.scm" . 215063))
 (set.gloc.of |core.unicode-assistants'pair-wise-composition|)
 (close
   (3 0 . |core.unicode-assistants'recursive-decomposition|)
   (call
     (apply.gloc.of
       |core.unicode-assistants'decompose-table|
       "../stdlib/core/unicode-assistants.scm"
       .
       219174))
   (push)
   (push.iloc.0 . 1)
   (push.const . #f)
   (push.subr.gloc.of |.core-hashtable-ref| 3 "../stdlib/core/unicode-assistants.scm" . 219154)
   (extend . 1)
   (push.iloc.1 . 1)
   (push.gloc.of |core.unicode-assistants'SBase|)
   (push.subr.gloc.of |.-| 2 "../stdlib/core/unicode-assistants.scm" . 220183)
   (extend . 1)
   (call
     (iloc.1 . 0)
     (if.false.ret)
     (call
       (iloc 2 . 0)
       (if.false.ret)
       (call
         (apply.gloc.of
           |core.unicode-assistants'compatibility-table|
           "../stdlib/core/unicode-assistants.scm"
           .
           221251))
       (push)
       (push.iloc 2 . 1)
       (push.const . #f)
       (ret.subr.gloc.of |.core-hashtable-ref| "../stdlib/core/unicode-assistants.scm" . 221231))
     (push)
     (ret.subr.gloc.of |.not| "../stdlib/core/unicode-assistants.scm" . 221211))
   (if.true
     (push.close
       (1 0)
       (push.iloc 3 . 0)
       (push.iloc.0 . 0)
       (push.iloc 3 . 2)
       (apply.gloc.of
         |core.unicode-assistants'recursive-decomposition|
         "../stdlib/core/unicode-assistants.scm"
         .
         222249))
     (push.iloc.1 . 0)
     (apply.gloc.of |.for-each| "../stdlib/core/unicode-assistants.scm" . 222226))
   (push.const . -1)
   (push.iloc.0 . 0)
   (push.gloc.of |core.unicode-assistants'SCount|)
   (subr.gloc.of |.<| 3 "../stdlib/core/unicode-assistants.scm" . 223250)
   (if.true
     (push.gloc.of |core.unicode-assistants'VBase|)
     (call
       (push.iloc.0 . 0)
       (push.gloc.of |core.unicode-assistants'NCount|)
       (apply.gloc.of |.mod| "../stdlib/core/unicode-assistants.scm" . 225321))
     (push)
     (push.gloc.of |core.unicode-assistants'TCount|)
     (push.subr.gloc.of |.div| 2 "../stdlib/core/unicode-assistants.scm" . 225316)
     (push.subr.gloc.of |.+| 2 "../stdlib/core/unicode-assistants.scm" . 225307)
     (push.gloc.of |core.unicode-assistants'TBase|)
     (call
       (push.iloc.0 . 0)
       (push.gloc.of |core.unicode-assistants'TCount|)
       (apply.gloc.of |.mod| "../stdlib/core/unicode-assistants.scm" . 226340))
     (push)
     (push.subr.gloc.of |.+| 2 "../stdlib/core/unicode-assistants.scm" . 226331)
     (extend . 2)
     (push.iloc 3 . 2)
     (push.gloc.of |core.unicode-assistants'LBase|)
     (push.iloc.1 . 0)
     (push.gloc.of |core.unicode-assistants'NCount|)
     (push.subr.gloc.of |.div| 2 "../stdlib/core/unicode-assistants.scm" . 224292)
     (push.subr.gloc.of |.+| 2 "../stdlib/core/unicode-assistants.scm" . 224283)
     (push.subr.gloc.of |.integer->char| 1 "../stdlib/core/unicode-assistants.scm" . 227365)
     (subr.gloc.of |.put-char| 2 "../stdlib/core/unicode-assistants.scm" . 227348)
     (push.iloc 3 . 2)
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.integer->char| 1 "../stdlib/core/unicode-assistants.scm" . 228389)
     (subr.gloc.of |.put-char| 2 "../stdlib/core/unicode-assistants.scm" . 228372)
     (gloc.of |core.unicode-assistants'TBase|)
     (=.iloc (0 . 1) "../stdlib/core/unicode-assistants.scm" . 229400)
     (if.true.ret)
     (push.iloc 3 . 2)
     (push.iloc.0 . 1)
     (push.subr.gloc.of |.integer->char| 1 "../stdlib/core/unicode-assistants.scm" . 229429)
     (ret.subr.gloc.of |.put-char| "../stdlib/core/unicode-assistants.scm" . 229412))
   (push.iloc 2 . 2)
   (push.iloc 2 . 1)
   (push.subr.gloc.of |.integer->char| 1 "../stdlib/core/unicode-assistants.scm" . 231459)
   (ret.subr.gloc.of |.put-char| "../stdlib/core/unicode-assistants.scm" . 231442))
 (set.gloc.of |core.unicode-assistants'recursive-decomposition|)
 (close
   (2 0 . |core.unicode-assistants'decompose|)
   (subr.gloc.of |.make-string-output-port| 0)
   (push)
   (extend . 1)
   (extend.enclose+
     (1 0 . loop)
     (push.iloc.0 . 0)
     (subr.gloc.of |.eof-object?| 1 "../stdlib/core/unicode-assistants.scm" . 237586)
     (if.true
       (push.iloc 2 . 0)
       (push.subr.gloc.of
         |.extract-accumulated-string|
         1
         "../stdlib/core/unicode-assistants.scm"
         .
         238625)
       (subr.gloc.of |.native-endianness| 0)
       (push)
       (apply.gloc.of
         |core.bytevector-transcoders'string->utf32|
         "../stdlib/core/unicode-assistants.scm"
         .
         238610))
     (call
       (push.iloc 3 . 1)
       (push.iloc.0 . 0)
       (push.subr.gloc.of |.char->integer| 1 "../stdlib/core/unicode-assistants.scm" . 240693)
       (push.iloc 2 . 0)
       (apply.gloc.of
         |core.unicode-assistants'recursive-decomposition|
         "../stdlib/core/unicode-assistants.scm"
         .
         240658))
     (push.iloc 3 . 0)
     (push.subr.gloc.of |.get-char| 1 "../stdlib/core/unicode-assistants.scm" . 241688)
     (apply.iloc+ (1 . 0) "../stdlib/core/unicode-assistants.scm" . 241682))
   (push.iloc 2 . 0)
   (push.subr.gloc.of |.get-char| 1 "../stdlib/core/unicode-assistants.scm" . 236568)
   (apply.iloc+ (0 . 0) "../stdlib/core/unicode-assistants.scm" . 236553))
 (set.gloc.of |core.unicode-assistants'decompose|)
 (close
   (1 0 . |core.unicode-assistants'canonical-class|)
   (call
     (apply.gloc.of
       |core.unicode-assistants'canonical-class-table|
       "../stdlib/core/unicode-assistants.scm"
       .
       245787))
   (push)
   (push.iloc.0 . 0)
   (push.const . 0)
   (ret.subr.gloc.of |.core-hashtable-ref| "../stdlib/core/unicode-assistants.scm" . 245767))
 (set.gloc.of |core.unicode-assistants'canonical-class|)
 (close
   (1 0 . |core.unicode-assistants'sort-combining-marks!|)
   (push.iloc.0 . 0)
   (push.subr.gloc.of |.bytevector-length| 1 "../stdlib/core/unicode-assistants.scm" . 249878)
   (push.const . 4)
   (push.subr.gloc.of |.-| 2 "../stdlib/core/unicode-assistants.scm" . 249875)
   (extend . 1)
   (extend.enclose+
     (1 0 . loop)
     (iloc.0 . 0)
     (>=.iloc (2 . 0) "../stdlib/core/unicode-assistants.scm" . 251922)
     (if.true (ret.iloc 3 . 0))
     (push.iloc 3 . 0)
     (push.iloc.0 . 0)
     (push.subr.gloc.of
       |.bytevector-u32-native-ref|
       2
       "../stdlib/core/unicode-assistants.scm"
       .
       253982)
     (push.iloc 3 . 0)
     (push.n+.iloc (0 . 0) 4 "../stdlib/core/unicode-assistants.scm" . 255036)
     (push.subr.gloc.of
       |.bytevector-u32-native-ref|
       2
       "../stdlib/core/unicode-assistants.scm"
       .
       255006)
     (extend . 2)
     (call
       (push.iloc.0 . 0)
       (apply.gloc.of
         |core.unicode-assistants'canonical-class|
         "../stdlib/core/unicode-assistants.scm"
         .
         256035))
     (push)
     (call
       (push.iloc.0 . 1)
       (apply.gloc.of
         |core.unicode-assistants'canonical-class|
         "../stdlib/core/unicode-assistants.scm"
         .
         257059))
     (push)
     (extend . 2)
     (call
       (>n.iloc (0 . 0) 0 "../stdlib/core/unicode-assistants.scm" . 258082)
       (if.false.ret)
       (>n.iloc (0 . 1) 0 "../stdlib/core/unicode-assistants.scm" . 258096)
       (if.false.ret)
       (push.iloc.0 . 0)
       (push.iloc.0 . 1)
       (ret.subr.gloc.of |.>| "../stdlib/core/unicode-assistants.scm" . 258110))
     (if.true
       (push.iloc 5 . 0)
       (push.iloc 2 . 0)
       (push.iloc.1 . 1)
       (subr.gloc.of
         |.bytevector-u32-native-set!|
         3
         "../stdlib/core/unicode-assistants.scm"
         .
         259101)
       (push.iloc 5 . 0)
       (push.n+.iloc (2 . 0) 4 "../stdlib/core/unicode-assistants.scm" . 260156)
       (push.iloc.1 . 0)
       (subr.gloc.of
         |.bytevector-u32-native-set!|
         3
         "../stdlib/core/unicode-assistants.scm"
         .
         260125)
       (call
         (>=n.iloc (2 . 0) 4 "../stdlib/core/unicode-assistants.scm" . 261159)
         (if.true
           (push.iloc 2 . 0)
           (push.const . 4)
           (ret.subr.gloc.of |.-| "../stdlib/core/unicode-assistants.scm" . 261168))
         (ret.const . 4))
       (push)
       (apply.iloc+ (3 . 0) "../stdlib/core/unicode-assistants.scm" . 261149))
     (push.n+.iloc (2 . 0) 4 "../stdlib/core/unicode-assistants.scm" . 263203)
     (apply.iloc+ (3 . 0) "../stdlib/core/unicode-assistants.scm" . 263197))
   (push.const . 0)
   (apply.iloc+ (0 . 0) "../stdlib/core/unicode-assistants.scm" . 250889))
 (set.gloc.of |core.unicode-assistants'sort-combining-marks!|)
 (close
   (1 0 . |core.unicode-assistants'compose|)
   (push.iloc.0 . 0)
   (push.subr.gloc.of |.bytevector-length| 1 "../stdlib/core/unicode-assistants.scm" . 267282)
   (extend . 1)
   (push.iloc.1 . 0)
   (push.const . 0)
   (push.subr.gloc.of
     |.bytevector-u32-native-ref|
     2
     "../stdlib/core/unicode-assistants.scm"
     .
     268311)
   (extend . 1)
   (extend.enclose+
     (5 0 . loop)
     (iloc.0 . 0)
     (>=.iloc (3 . 0) "../stdlib/core/unicode-assistants.scm" . 271380)
     (if.true
       (push.iloc.0 . 4)
       (push.subr.gloc.of |.make-bytevector| 1 "../stdlib/core/unicode-assistants.scm" . 272418)
       (extend . 1)
       (push.iloc 5 . 0)
       (push.const . 0)
       (push.iloc.0 . 0)
       (push.const . 0)
       (push.iloc.1 . 4)
       (subr.gloc.of |.bytevector-copy!| 5 "../stdlib/core/unicode-assistants.scm" . 273430)
       (push.iloc.0 . 0)
       (subr.gloc.of |.native-endianness| 0)
       (push)
       (push.const . #t)
       (apply.gloc.of
         |core.bytevector-transcoders'utf32->string|
         "../stdlib/core/unicode-assistants.scm"
         .
         274454))
     (push.iloc 4 . 0)
     (push.iloc.0 . 0)
     (push.subr.gloc.of
       |.bytevector-u32-native-ref|
       2
       "../stdlib/core/unicode-assistants.scm"
       .
       276513)
     (extend . 1)
     (call
       (push.iloc.0 . 0)
       (apply.gloc.of
         |core.unicode-assistants'canonical-class|
         "../stdlib/core/unicode-assistants.scm"
         .
         277540))
     (push)
     (extend . 1)
     (call
       (call
         (=n.iloc (2 . 2) 0 "../stdlib/core/unicode-assistants.scm" . 278566)
         (if.true.ret)
         (push.iloc 2 . 2)
         (push.iloc.0 . 0)
         (ret.subr.gloc.of |.<| "../stdlib/core/unicode-assistants.scm" . 278583))
       (if.false.ret)
       (push.iloc 2 . 1)
       (push.iloc.1 . 0)
       (apply.gloc.of
         |core.unicode-assistants'pair-wise-composition|
         "../stdlib/core/unicode-assistants.scm"
         .
         279586))
     (push)
     (extend . 1)
     (iloc.0 . 0)
     (if.true
       (push.iloc 7 . 0)
       (push.iloc 3 . 3)
       (push.iloc.0 . 0)
       (subr.gloc.of
         |.bytevector-u32-native-set!|
         3
         "../stdlib/core/unicode-assistants.scm"
         .
         281634)
       (push.n+.iloc (3 . 0) 4 "../stdlib/core/unicode-assistants.scm" . 282664)
       (push.iloc.0 . 0)
       (call
         (push.iloc.0 . 0)
         (apply.gloc.of
           |core.unicode-assistants'canonical-class|
           "../stdlib/core/unicode-assistants.scm"
           .
           282681))
       (push)
       (push.iloc 3 . 3)
       (push.iloc 3 . 4)
       (apply.iloc+ (4 . 0) "../stdlib/core/unicode-assistants.scm" . 282658))
     (push.iloc 7 . 0)
     (push.iloc 3 . 4)
     (push.iloc 2 . 0)
     (subr.gloc.of |.bytevector-u32-native-set!| 3 "../stdlib/core/unicode-assistants.scm" . 284701)
     (=n.iloc (1 . 0) 0 "../stdlib/core/unicode-assistants.scm" . 285729)
     (if.true
       (push.n+.iloc (3 . 0) 4 "../stdlib/core/unicode-assistants.scm" . 286759)
       (push.iloc 2 . 0)
       (push.iloc.1 . 0)
       (push.iloc 3 . 4)
       (push.n+.iloc (3 . 4) 4 "../stdlib/core/unicode-assistants.scm" . 286789)
       (apply.iloc+ (4 . 0) "../stdlib/core/unicode-assistants.scm" . 286753))
     (push.n+.iloc (3 . 0) 4 "../stdlib/core/unicode-assistants.scm" . 287783)
     (push.iloc 3 . 1)
     (push.iloc.1 . 0)
     (push.iloc 3 . 3)
     (push.n+.iloc (3 . 4) 4 "../stdlib/core/unicode-assistants.scm" . 287819)
     (apply.iloc+ (4 . 0) "../stdlib/core/unicode-assistants.scm" . 287777))
   (push.const . 4)
   (push.iloc.1 . 0)
   (call
     (call
       (push.iloc.1 . 0)
       (apply.gloc.of
         |core.unicode-assistants'canonical-class|
         "../stdlib/core/unicode-assistants.scm"
         .
         269349))
     (push)
     (subr.gloc.of |.zero?| 1 "../stdlib/core/unicode-assistants.scm" . 269342)
     (if.true (ret.const . 0))
     (ret.const . 256))
   (push)
   (push.const . 0)
   (push.const . 4)
   (apply.iloc+ (0 . 0) "../stdlib/core/unicode-assistants.scm" . 270347))
 (set.gloc.of |core.unicode-assistants'compose|)
 (call
   (push.const . syntax)
   (push.const . |core.unicode-assistants'autoload|)
   (push.const
     ()
     ("../stdlib/core/unicode-assistants.scm" . 55301)
     ((_ var init)
      (define var (lambda () (let ((memo init)) (begin (set! var (lambda () memo)) memo))))
      ((init . 0) (var . 0))
      (set! begin memo let lambda define)))
   (push.const
     (SBase import . |core.unicode-assistants'SBase|)
     (letrec* import . |.letrec*|)
     (set! import . |.set!|)
     (native-endianness import . |.native-endianness|)
     (canonical-class import . |core.unicode-assistants'canonical-class|)
     (lambda import . |.lambda|)
     (compatibility-table import . |core.unicode-assistants'compatibility-table|)
     (cdar import . |.cdar|)
     (VBase import . |core.unicode-assistants'VBase|)
     (core-hashtable-set! import . |.core-hashtable-set!|)
     (caar import . |.caar|)
     (bytevector-length import . |.bytevector-length|)
     (general-category import . |core.unicode-assistants'general-category|)
     (pair-wise-composition import . |core.unicode-assistants'pair-wise-composition|)
     (or import . |.or|)
     (other-lowercase-list import . |core.unicode-assistants'other-lowercase-list|)
     (< import . |.<|)
     (foldcase import . |core.unicode-assistants'foldcase|)
     (LCount import . |core.unicode-assistants'LCount|)
     (simple-uppercase import . |core.unicode-assistants'simple-uppercase|)
     (compose-table import . |core.unicode-assistants'compose-table|)
     (other-uppercase-property? import . |core.unicode-assistants'other-uppercase-property?|)
     (decompose-table import . |core.unicode-assistants'decompose-table|)
     (simple-titlecase-table import . |core.unicode-assistants'simple-titlecase-table|)
     (NCount import . |core.unicode-assistants'NCount|)
     (<= import . |.<=|)
     (+ import . |.+|)
     (eqv? import . |.eqv?|)
     (recursive-decomposition import . |core.unicode-assistants'recursive-decomposition|)
     (syntax-rules import . |.syntax-rules|)
     (for-each import . |.for-each|)
     (sort-combining-marks! import . |core.unicode-assistants'sort-combining-marks!|)
     (zero? import . |.zero?|)
     (call-with-port import . |.call-with-port|)
     (bytevector-copy! import . |.bytevector-copy!|)
     (quote import . |.quote|)
     (special-casing-title import . |core.unicode-assistants'special-casing-title|)
     (other-alphabetic-property? import . |core.unicode-assistants'other-alphabetic-property?|)
     (extract-accumulated-string import . |.extract-accumulated-string|)
     (bytevector-u32-native-ref import . |.bytevector-u32-native-ref|)
     (special-casing-upper-table import . |core.unicode-assistants'special-casing-upper-table|)
     (null? import . |.null?|)
     (if import . |.if|)
     (special-casing-title-table import . |core.unicode-assistants'special-casing-title-table|)
     (simple-titlecase import . |core.unicode-assistants'simple-titlecase|)
     (define import . |.define|)
     (cdr import . |.cdr|)
     (other-lowercase-property? import . |core.unicode-assistants'other-lowercase-property?|)
     (* import . |.*|)
     (string->utf32 import . |core.bytevector-transcoders'string->utf32|)
     (get-char import . |.get-char|)
     (numeric-property? import . |core.unicode-assistants'numeric-property?|)
     (utf32->string import . |core.bytevector-transcoders'utf32->string|)
     (=> import . |.=>|)
     (VCount import . |core.unicode-assistants'VCount|)
     (div import . |.div|)
     (other-alphabetic-list import . |core.unicode-assistants'other-alphabetic-list|)
     (not import . |.not|)
     (compose import . |core.unicode-assistants'compose|)
     (canonical-class-table import . |core.unicode-assistants'canonical-class-table|)
     (char->integer import . |.char->integer|)
     (SCount import . |core.unicode-assistants'SCount|)
     (= import . |.=|)
     (mod import . |.mod|)
     (cond import . |.cond|)
     (define-syntax import . |.define-syntax|)
     (eof-object? import . |.eof-object?|)
     (core-hashtable-copy import . |.core-hashtable-copy|)
     (make-string-output-port import . |.make-string-output-port|)
     (begin import . |.begin|)
     (numeric-property-table import . |core.unicode-assistants'numeric-property-table|)
     (core-hashtable-ref import . |.core-hashtable-ref|)
     (> import . |.>|)
     (load-unicode-list-file import . |core.unicode-assistants'load-unicode-list-file|)
     (simple-lowercase import . |core.unicode-assistants'simple-lowercase|)
     (general-category-table-2 import . |core.unicode-assistants'general-category-table-2|)
     (and import . |.and|)
     (exists import . |core.lists'exists|)
     (_ import . |._|)
     (autoload import . |core.unicode-assistants'autoload|)
     (simple-lowercase-table import . |core.unicode-assistants'simple-lowercase-table|)
     (make-bytevector import . |.make-bytevector|)
     (simple-uppercase-table import . |core.unicode-assistants'simple-uppercase-table|)
     (get-datum import . |.get-datum|)
     (>= import . |.>=|)
     (- import . |.-|)
     (LBase import . |core.unicode-assistants'LBase|)
     (general-category-table-1 import . |core.unicode-assistants'general-category-table-1|)
     (integer->char import . |.integer->char|)
     (bytevector-u32-native-set! import . |.bytevector-u32-native-set!|)
     (decompose import . |core.unicode-assistants'decompose|)
     (special-casing-lower-table import . |core.unicode-assistants'special-casing-lower-table|)
     (else import . |.else|)
     (make-core-hashtable import . |.make-core-hashtable|)
     (TBase import . |core.unicode-assistants'TBase|)
     (TCount import . |core.unicode-assistants'TCount|)
     (let import . |.let|)
     (car import . |.car|)
     (load-unicode-table-file import . |core.unicode-assistants'load-unicode-table-file|)
     (other-uppercase-list import . |core.unicode-assistants'other-uppercase-list|)
     (special-casing-lower import . |core.unicode-assistants'special-casing-lower|)
     (case-folding-table import . |core.unicode-assistants'case-folding-table|)
     (special-casing-upper import . |core.unicode-assistants'special-casing-upper|)
     (open-builtin-data-input-port import . |.open-builtin-data-input-port|)
     (let* import . |.let*|)
     (put-char import . |.put-char|))
   (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/unicode-assistants.scm" . 6145))
 (push.const . core.unicode-assistants)
 (push.const . #f)
 (push.const
   (general-category import . |core.unicode-assistants'general-category|)
   (simple-uppercase import . |core.unicode-assistants'simple-uppercase|)
   (simple-lowercase import . |core.unicode-assistants'simple-lowercase|)
   (simple-titlecase import . |core.unicode-assistants'simple-titlecase|)
   (numeric-property? import . |core.unicode-assistants'numeric-property?|)
   (other-uppercase-property? import . |core.unicode-assistants'other-uppercase-property?|)
   (other-lowercase-property? import . |core.unicode-assistants'other-lowercase-property?|)
   (other-alphabetic-property? import . |core.unicode-assistants'other-alphabetic-property?|)
   (special-casing-lower import . |core.unicode-assistants'special-casing-lower|)
   (special-casing-title import . |core.unicode-assistants'special-casing-title|)
   (special-casing-upper import . |core.unicode-assistants'special-casing-upper|)
   (foldcase import . |core.unicode-assistants'foldcase|)
   (pair-wise-composition import . |core.unicode-assistants'pair-wise-composition|)
   (recursive-decomposition import . |core.unicode-assistants'recursive-decomposition|)
   (decompose import . |core.unicode-assistants'decompose|)
   (sort-combining-marks! import . |core.unicode-assistants'sort-combining-marks!|)
   (compose import . |core.unicode-assistants'compose|))
 (apply.gloc.of |.intern-scheme-library| "../stdlib/core/unicode-assistants.scm" . 6145))

((call
   (push.const core bytevector-transcoders)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/unicode.scm" . 6145))
 (call
   (push.const core bytevectors)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/unicode.scm" . 6145))
 (call
   (push.const core unicode-assistants)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/unicode.scm" . 6145))
 (call
   (push.const core io)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/unicode.scm" . 6145))
 (call
   (push.const core lists)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/unicode.scm" . 6145))
 (call
   (push.const core primitives)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/unicode.scm" . 6145))
 (close
   (1 0 . |core.unicode'char-upcase|)
   (push.iloc.0 . 0)
   (push.const . #\a)
   (subr.gloc.of |.char<?| 2 "../stdlib/core/unicode.scm" . 48142)
   (if.true (ret.iloc 0 . 0))
   (push.iloc.0 . 0)
   (push.const . #\z)
   (subr.gloc.of |.char>?| 2 "../stdlib/core/unicode.scm" . 49166)
   (if.true
     (push.iloc.0 . 0)
     (apply.gloc.of
       |core.unicode-assistants'simple-uppercase|
       "../stdlib/core/unicode.scm"
       .
       50190))
   (push.iloc.0 . 0)
   (push.subr.gloc.of |.char->integer| 1 "../stdlib/core/unicode.scm" . 52256)
   (push.const . 32)
   (push.subr.gloc.of |.-| 2 "../stdlib/core/unicode.scm" . 52253)
   (ret.subr.gloc.of |.integer->char| "../stdlib/core/unicode.scm" . 52238))
 (set.gloc.of |core.unicode'char-upcase|)
 (close
   (1 0 . |core.unicode'char-downcase|)
   (push.iloc.0 . 0)
   (push.const . #\A)
   (subr.gloc.of |.char<?| 2 "../stdlib/core/unicode.scm" . 56334)
   (if.true (ret.iloc 0 . 0))
   (push.iloc.0 . 0)
   (push.const . #\Z)
   (subr.gloc.of |.char<=?| 2 "../stdlib/core/unicode.scm" . 57358)
   (if.true
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.char->integer| 1 "../stdlib/core/unicode.scm" . 58400)
     (push.const . 32)
     (push.subr.gloc.of |.+| 2 "../stdlib/core/unicode.scm" . 58397)
     (ret.subr.gloc.of |.integer->char| "../stdlib/core/unicode.scm" . 58382))
   (push.iloc.0 . 0)
   (push.const . #\z)
   (subr.gloc.of |.char>?| 2 "../stdlib/core/unicode.scm" . 59406)
   (if.true
     (push.iloc.0 . 0)
     (apply.gloc.of
       |core.unicode-assistants'simple-lowercase|
       "../stdlib/core/unicode.scm"
       .
       60430))
   (ret.iloc 0 . 0))
 (set.gloc.of |core.unicode'char-downcase|)
 (close
   (1 0 . |core.unicode'char-titlecase|)
   (push.iloc.0 . 0)
   (apply.gloc.of |core.unicode-assistants'simple-titlecase| "../stdlib/core/unicode.scm" . 65543))
 (set.gloc.of |core.unicode'char-titlecase|)
 (close
   (1 0 . |core.unicode'char-foldcase|)
   (push.iloc.0 . 0)
   (push.const . #\z)
   (subr.gloc.of |.char<=?| 2 "../stdlib/core/unicode.scm" . 69646)
   (if.true
     (push.iloc.0 . 0)
     (apply.gloc.of |core.unicode'char-downcase| "../stdlib/core/unicode.scm" . 70670))
   (call
     (push.iloc.0 . 0)
     (push.const . #\İ)
     (subr.gloc.of |.char=?| 2 "../stdlib/core/unicode.scm" . 71698)
     (if.true.ret)
     (push.iloc.0 . 0)
     (push.const . #\ı)
     (ret.subr.gloc.of |.char=?| "../stdlib/core/unicode.scm" . 72722))
   (if.true (ret.iloc 0 . 0))
   (call
     (push.iloc.0 . 0)
     (apply.gloc.of |core.unicode'char-upcase| "../stdlib/core/unicode.scm" . 75805))
   (push)
   (apply.gloc.of |core.unicode'char-downcase| "../stdlib/core/unicode.scm" . 75790))
 (set.gloc.of |core.unicode'char-foldcase|)
 (close
   (2 0 . |core.unicode'char-ci=?|)
   (call
     (push.iloc.0 . 0)
     (apply.gloc.of |core.unicode'char-foldcase| "../stdlib/core/unicode.scm" . 79887))
   (push)
   (call
     (push.iloc.0 . 1)
     (apply.gloc.of |core.unicode'char-foldcase| "../stdlib/core/unicode.scm" . 80911))
   (push)
   (ret.subr.gloc.of |.char=?| "../stdlib/core/unicode.scm" . 79879))
 (set.gloc.of |core.unicode'char-ci=?|)
 (close
   (2 0 . |core.unicode'char-ci<?|)
   (call
     (push.iloc.0 . 0)
     (apply.gloc.of |core.unicode'char-foldcase| "../stdlib/core/unicode.scm" . 85007))
   (push)
   (call
     (push.iloc.0 . 1)
     (apply.gloc.of |core.unicode'char-foldcase| "../stdlib/core/unicode.scm" . 86031))
   (push)
   (ret.subr.gloc.of |.char<?| "../stdlib/core/unicode.scm" . 84999))
 (set.gloc.of |core.unicode'char-ci<?|)
 (close
   (2 0 . |core.unicode'char-ci>?|)
   (call
     (push.iloc.0 . 0)
     (apply.gloc.of |core.unicode'char-foldcase| "../stdlib/core/unicode.scm" . 90127))
   (push)
   (call
     (push.iloc.0 . 1)
     (apply.gloc.of |core.unicode'char-foldcase| "../stdlib/core/unicode.scm" . 91151))
   (push)
   (ret.subr.gloc.of |.char>?| "../stdlib/core/unicode.scm" . 90119))
 (set.gloc.of |core.unicode'char-ci>?|)
 (close
   (2 0 . |core.unicode'char-ci<=?|)
   (call
     (push.iloc.0 . 0)
     (apply.gloc.of |core.unicode'char-foldcase| "../stdlib/core/unicode.scm" . 95248))
   (push)
   (call
     (push.iloc.0 . 1)
     (apply.gloc.of |core.unicode'char-foldcase| "../stdlib/core/unicode.scm" . 96272))
   (push)
   (ret.subr.gloc.of |.char<=?| "../stdlib/core/unicode.scm" . 95239))
 (set.gloc.of |core.unicode'char-ci<=?|)
 (close
   (2 0 . |core.unicode'char-ci>=?|)
   (call
     (push.iloc.0 . 0)
     (apply.gloc.of |core.unicode'char-foldcase| "../stdlib/core/unicode.scm" . 100368))
   (push)
   (call
     (push.iloc.0 . 1)
     (apply.gloc.of |core.unicode'char-foldcase| "../stdlib/core/unicode.scm" . 101392))
   (push)
   (ret.subr.gloc.of |.char>=?| "../stdlib/core/unicode.scm" . 100359))
 (set.gloc.of |core.unicode'char-ci>=?|)
 (close
   (1 0 . |core.unicode'char-alphabetic?|)
   (call
     (push.const . #\a)
     (push.iloc.0 . 0)
     (subr.gloc.of |.char<=?| 2 "../stdlib/core/unicode.scm" . 105488)
     (if.false.ret)
     (push.iloc.0 . 0)
     (push.const . #\z)
     (ret.subr.gloc.of |.char<=?| "../stdlib/core/unicode.scm" . 105505))
   (if.true.ret)
   (call
     (push.const . #\A)
     (push.iloc.0 . 0)
     (subr.gloc.of |.char<=?| 2 "../stdlib/core/unicode.scm" . 106512)
     (if.false.ret)
     (push.iloc.0 . 0)
     (push.const . #\Z)
     (ret.subr.gloc.of |.char<=?| "../stdlib/core/unicode.scm" . 106529))
   (if.true.ret)
   (push.const . #\)
   (push.iloc.0 . 0)
   (subr.gloc.of |.char<=?| 2 "../stdlib/core/unicode.scm" . 107536)
   (if.false.ret)
   (call
     (push.iloc.0 . 0)
     (apply.gloc.of
       |core.unicode-assistants'general-category|
       "../stdlib/core/unicode.scm"
       .
       108566))
   (push)
   (extend . 1)
   (push.iloc.0 . 0)
   (push.const Lu Ll Lt Lm Lo Nl)
   (subr.gloc.of |.memq| 2 "../stdlib/core/unicode.scm" . 108560)
   (if.true.ret.const . #t)
   (push.iloc.0 . 0)
   (push.const Mn Mc So)
   (subr.gloc.of |.memq| 2 "../stdlib/core/unicode.scm" . 108560)
   (if.true
     (push.iloc.1 . 0)
     (apply.gloc.of
       |core.unicode-assistants'other-alphabetic-property?|
       "../stdlib/core/unicode.scm"
       .
       111635))
   (ret.const . #f))
 (set.gloc.of |core.unicode'char-alphabetic?|)
 (close
   (1 0 . |core.unicode'char-numeric?|)
   (call
     (push.const . #\0)
     (push.iloc.0 . 0)
     (subr.gloc.of |.char<=?| 2 "../stdlib/core/unicode.scm" . 116752)
     (if.false.ret)
     (push.iloc.0 . 0)
     (push.const . #\9)
     (ret.subr.gloc.of |.char<=?| "../stdlib/core/unicode.scm" . 116769))
   (if.true.ret)
   (push.const . #\)
   (push.iloc.0 . 0)
   (subr.gloc.of |.char<=?| 2 "../stdlib/core/unicode.scm" . 117776)
   (if.false.ret)
   (call
     (push.iloc.0 . 0)
     (apply.gloc.of
       |core.unicode-assistants'general-category|
       "../stdlib/core/unicode.scm"
       .
       118805))
   (push)
   (const . Nd)
   (ret.eq? "../stdlib/core/unicode.scm" . 118800))
 (set.gloc.of |core.unicode'char-numeric?|)
 (close
   (1 0 . |core.unicode'char-upper-case?|)
   (call
     (push.const . #\A)
     (push.iloc.0 . 0)
     (subr.gloc.of |.char<=?| 2 "../stdlib/core/unicode.scm" . 122896)
     (if.false.ret)
     (push.iloc.0 . 0)
     (push.const . #\Z)
     (ret.subr.gloc.of |.char<=?| "../stdlib/core/unicode.scm" . 122913))
   (if.true.ret)
   (push.const . #\)
   (push.iloc.0 . 0)
   (subr.gloc.of |.char<=?| 2 "../stdlib/core/unicode.scm" . 123920)
   (if.false.ret)
   (call
     (push.iloc.0 . 0)
     (apply.gloc.of
       |core.unicode-assistants'general-category|
       "../stdlib/core/unicode.scm"
       .
       124950))
   (push)
   (extend . 1)
   (push.iloc.0 . 0)
   (const . Lu)
   (if.eq?.ret.const . #t)
   (push.iloc.0 . 0)
   (push.const Nl So)
   (subr.gloc.of |.memq| 2 "../stdlib/core/unicode.scm" . 124944)
   (if.true
     (push.iloc.1 . 0)
     (apply.gloc.of
       |core.unicode-assistants'other-uppercase-property?|
       "../stdlib/core/unicode.scm"
       .
       128019))
   (ret.const . #f))
 (set.gloc.of |core.unicode'char-upper-case?|)
 (close
   (1 0 . |core.unicode'char-lower-case?|)
   (call
     (push.const . #\a)
     (push.iloc.0 . 0)
     (subr.gloc.of |.char<=?| 2 "../stdlib/core/unicode.scm" . 133136)
     (if.false.ret)
     (push.iloc.0 . 0)
     (push.const . #\z)
     (ret.subr.gloc.of |.char<=?| "../stdlib/core/unicode.scm" . 133153))
   (if.true.ret)
   (push.const . #\)
   (push.iloc.0 . 0)
   (subr.gloc.of |.char<=?| 2 "../stdlib/core/unicode.scm" . 134160)
   (if.false.ret)
   (call
     (push.iloc.0 . 0)
     (apply.gloc.of
       |core.unicode-assistants'general-category|
       "../stdlib/core/unicode.scm"
       .
       135190))
   (push)
   (extend . 1)
   (push.iloc.0 . 0)
   (const . Ll)
   (if.eq?.ret.const . #t)
   (push.iloc.0 . 0)
   (push.const Lm Mn Nl So)
   (subr.gloc.of |.memq| 2 "../stdlib/core/unicode.scm" . 135184)
   (if.true
     (push.iloc.1 . 0)
     (apply.gloc.of
       |core.unicode-assistants'other-lowercase-property?|
       "../stdlib/core/unicode.scm"
       .
       138259))
   (ret.const . #f))
 (set.gloc.of |core.unicode'char-lower-case?|)
 (close
   (1 0 . |core.unicode'char-title-case?|)
   (call
     (push.iloc.0 . 0)
     (apply.gloc.of
       |core.unicode-assistants'general-category|
       "../stdlib/core/unicode.scm"
       .
       143372))
   (push)
   (const . Lt)
   (ret.eq? "../stdlib/core/unicode.scm" . 143367))
 (set.gloc.of |core.unicode'char-title-case?|)
 (close
   (1 0 . |core.unicode'char-general-category|)
   (push.iloc.0 . 0)
   (apply.gloc.of |core.unicode-assistants'general-category| "../stdlib/core/unicode.scm" . 147463))
 (set.gloc.of |core.unicode'char-general-category|)
 (close
   (1 0 . |core.unicode'string-upcase|)
   (call
     (push.iloc.0 . 0)
     (apply.gloc.of |core.io'open-string-input-port| "../stdlib/core/unicode.scm" . 151572))
   (push)
   (subr.gloc.of |.make-string-output-port| 0)
   (push)
   (extend . 2)
   (call
     (extend.enclose+
       (1 0 . loop)
       (push.iloc.0 . 0)
       (subr.gloc.of |.eof-object?| 1 "../stdlib/core/unicode.scm" . 155673)
       (if.true
         (push.iloc 2 . 1)
         (ret.subr.gloc.of |.extract-accumulated-string| "../stdlib/core/unicode.scm" . 155690))
       (call
         (push.iloc.0 . 0)
         (apply.gloc.of
           |core.unicode-assistants'special-casing-upper|
           "../stdlib/core/unicode.scm"
           .
           156697))
       (push)
       (extend . 1)
       (iloc.0 . 0)
       (if.true
         (call
           (push.close
             (1 0)
             (push.iloc 4 . 1)
             (call
               (push.iloc.0 . 0)
               (push.subr.gloc.of |.integer->char| 1 "../stdlib/core/unicode.scm" . 158802)
               (apply.gloc.of |core.unicode'char-upcase| "../stdlib/core/unicode.scm" . 158789))
             (push)
             (ret.subr.gloc.of |.put-char| "../stdlib/core/unicode.scm" . 158772))
           (push.iloc.0 . 0)
           (apply.gloc.of |.for-each| "../stdlib/core/unicode.scm" . 158750))
         (push.iloc 3 . 0)
         (push.subr.gloc.of |.get-char| 1 "../stdlib/core/unicode.scm" . 159780)
         (apply.iloc+ (2 . 0) "../stdlib/core/unicode.scm" . 159774))
       (push.iloc 3 . 1)
       (call
         (push.iloc.1 . 0)
         (apply.gloc.of |core.unicode'char-upcase| "../stdlib/core/unicode.scm" . 161834))
       (push)
       (subr.gloc.of |.put-char| 2 "../stdlib/core/unicode.scm" . 161817)
       (push.iloc 3 . 0)
       (push.subr.gloc.of |.get-char| 1 "../stdlib/core/unicode.scm" . 162847)
       (apply.iloc+ (2 . 0) "../stdlib/core/unicode.scm" . 162841))
     (push.iloc.1 . 0)
     (push.subr.gloc.of |.get-char| 1 "../stdlib/core/unicode.scm" . 154655)
     (apply.iloc+ (0 . 0) "../stdlib/core/unicode.scm" . 154640))
   (push)
   (extend . 1)
   (push.iloc 2 . 0)
   (push.iloc.0 . 0)
   (subr.gloc.of |.string=?| 2 "../stdlib/core/unicode.scm" . 163855)
   (if.true (ret.iloc 2 . 0))
   (ret.iloc 0 . 0))
 (set.gloc.of |core.unicode'string-upcase|)
 (close
   (2 0 . |core.unicode'final-sigma?|)
   (push.iloc.0 . 0)
   (push.subr.gloc.of |.lookahead-char| 1 "../stdlib/core/unicode.scm" . 167953)
   (extend . 1)
   (push.iloc.0 . 0)
   (subr.gloc.of |.eof-object?| 1 "../stdlib/core/unicode.scm" . 168976)
   (if.true
     (push.iloc.1 . 1)
     (push.subr.gloc.of |.port-position| 1 "../stdlib/core/unicode.scm" . 170008)
     (push.const . 0)
     (push.subr.gloc.of |.=| 2 "../stdlib/core/unicode.scm" . 170005)
     (ret.subr.gloc.of |.not| "../stdlib/core/unicode.scm" . 170000))
   (call
     (push.iloc.0 . 0)
     (apply.gloc.of |core.unicode'char-alphabetic?| "../stdlib/core/unicode.scm" . 171024))
   (if.true.ret.const . #f)
   (push.iloc.0 . 0)
   (subr.gloc.of |.char-whitespace?| 1 "../stdlib/core/unicode.scm" . 172048)
   (if.true.ret.const . #t)
   (call
     (push.iloc.0 . 0)
     (apply.gloc.of
       |core.unicode-assistants'general-category|
       "../stdlib/core/unicode.scm"
       .
       173077))
   (push)
   (const . Pd)
   (if.eq?.ret.const . #t)
   (push.iloc.1 . 0)
   (push.subr.gloc.of |.port-position| 1 "../stdlib/core/unicode.scm" . 175131)
   (extend . 1)
   (push.iloc 2 . 0)
   (subr.gloc.of |.get-char| 1 "../stdlib/core/unicode.scm" . 176146)
   (call
     (extend.enclose+
       (1 0 . loop)
       (push.iloc.0 . 0)
       (subr.gloc.of |.eof-object?| 1 "../stdlib/core/unicode.scm" . 179234)
       (if.true
         (push.iloc 4 . 1)
         (push.subr.gloc.of |.port-position| 1 "../stdlib/core/unicode.scm" . 180266)
         (push.const . 0)
         (push.subr.gloc.of |.=| 2 "../stdlib/core/unicode.scm" . 180263)
         (ret.subr.gloc.of |.not| "../stdlib/core/unicode.scm" . 180258))
       (call
         (push.iloc.0 . 0)
         (apply.gloc.of |core.unicode'char-alphabetic?| "../stdlib/core/unicode.scm" . 181282))
       (if.true.ret.const . #f)
       (push.iloc.0 . 0)
       (subr.gloc.of |.char-whitespace?| 1 "../stdlib/core/unicode.scm" . 182306)
       (if.true.ret.const . #t)
       (call
         (push.iloc.0 . 0)
         (apply.gloc.of
           |core.unicode-assistants'general-category|
           "../stdlib/core/unicode.scm"
           .
           183335))
       (push)
       (const . Pd)
       (if.eq?.ret.const . #t)
       (push.iloc 4 . 0)
       (push.subr.gloc.of |.get-char| 1 "../stdlib/core/unicode.scm" . 185384)
       (apply.iloc+ (1 . 0) "../stdlib/core/unicode.scm" . 185378))
     (push.iloc 3 . 0)
     (push.subr.gloc.of |.get-char| 1 "../stdlib/core/unicode.scm" . 178216)
     (apply.iloc+ (0 . 0) "../stdlib/core/unicode.scm" . 178201))
   (push)
   (extend . 1)
   (push.iloc 3 . 0)
   (push.iloc.1 . 0)
   (subr.gloc.of |.set-port-position!| 2 "../stdlib/core/unicode.scm" . 186388)
   (ret.iloc 0 . 0))
 (set.gloc.of |core.unicode'final-sigma?|)
 (close
   (1 0 . |core.unicode'string-downcase|)
   (call
     (push.iloc.0 . 0)
     (apply.gloc.of |core.io'open-string-input-port| "../stdlib/core/unicode.scm" . 191508))
   (push)
   (subr.gloc.of |.make-string-output-port| 0)
   (push)
   (extend . 2)
   (call
     (extend.enclose+
       (2 0 . loop)
       (push.iloc.0 . 0)
       (subr.gloc.of |.eof-object?| 1 "../stdlib/core/unicode.scm" . 195609)
       (if.true
         (push.iloc 2 . 1)
         (ret.subr.gloc.of |.extract-accumulated-string| "../stdlib/core/unicode.scm" . 195626))
       (push.iloc.0 . 0)
       (push.const . #\Σ)
       (subr.gloc.of |.char=?| 2 "../stdlib/core/unicode.scm" . 196633)
       (if.true
         (push.iloc.0 . 1)
         (subr.gloc.of |.char-whitespace?| 1 "../stdlib/core/unicode.scm" . 197664)
         (if.true
           (push.iloc 2 . 1)
           (push.const . #\σ)
           (subr.gloc.of |.put-char| 2 "../stdlib/core/unicode.scm" . 198688)
           (push.iloc 2 . 0)
           (push.subr.gloc.of |.get-char| 1 "../stdlib/core/unicode.scm" . 199718)
           (push.iloc.0 . 0)
           (apply.iloc+ (1 . 0) "../stdlib/core/unicode.scm" . 199712))
         (call
           (call
             (push.iloc 2 . 0)
             (push.iloc 2 . 1)
             (apply.gloc.of |core.unicode'final-sigma?| "../stdlib/core/unicode.scm" . 201764))
           (if.true
             (push.iloc 2 . 1)
             (push.const . #\ς)
             (ret.subr.gloc.of |.put-char| "../stdlib/core/unicode.scm" . 202788))
           (push.iloc 2 . 1)
           (push.const . #\σ)
           (ret.subr.gloc.of |.put-char| "../stdlib/core/unicode.scm" . 203812))
         (push.iloc 2 . 0)
         (push.subr.gloc.of |.get-char| 1 "../stdlib/core/unicode.scm" . 204838)
         (push.iloc.0 . 0)
         (apply.iloc+ (1 . 0) "../stdlib/core/unicode.scm" . 204832))
       (call
         (push.iloc.0 . 0)
         (apply.gloc.of
           |core.unicode-assistants'special-casing-lower|
           "../stdlib/core/unicode.scm"
           .
           205849))
       (push)
       (extend . 1)
       (iloc.0 . 0)
       (if.true
         (call
           (push.close
             (1 0)
             (push.iloc 4 . 1)
             (call
               (push.iloc.0 . 0)
               (push.subr.gloc.of |.integer->char| 1 "../stdlib/core/unicode.scm" . 207956)
               (apply.gloc.of |core.unicode'char-downcase| "../stdlib/core/unicode.scm" . 207941))
             (push)
             (ret.subr.gloc.of |.put-char| "../stdlib/core/unicode.scm" . 207924))
           (push.iloc.0 . 0)
           (apply.gloc.of |.for-each| "../stdlib/core/unicode.scm" . 207902))
         (push.iloc 3 . 0)
         (push.subr.gloc.of |.get-char| 1 "../stdlib/core/unicode.scm" . 208932)
         (push.iloc.1 . 0)
         (apply.iloc+ (2 . 0) "../stdlib/core/unicode.scm" . 208926))
       (push.iloc 3 . 1)
       (call
         (push.iloc.1 . 0)
         (apply.gloc.of |core.unicode'char-downcase| "../stdlib/core/unicode.scm" . 210986))
       (push)
       (subr.gloc.of |.put-char| 2 "../stdlib/core/unicode.scm" . 210969)
       (push.iloc 3 . 0)
       (push.subr.gloc.of |.get-char| 1 "../stdlib/core/unicode.scm" . 211999)
       (push.iloc.1 . 0)
       (apply.iloc+ (2 . 0) "../stdlib/core/unicode.scm" . 211993))
     (push.iloc.1 . 0)
     (push.subr.gloc.of |.get-char| 1 "../stdlib/core/unicode.scm" . 194591)
     (push.const . #\space)
     (apply.iloc+ (0 . 0) "../stdlib/core/unicode.scm" . 194576))
   (push)
   (extend . 1)
   (push.iloc 2 . 0)
   (push.iloc.0 . 0)
   (subr.gloc.of |.string=?| 2 "../stdlib/core/unicode.scm" . 213007)
   (if.true (ret.iloc 2 . 0))
   (ret.iloc 0 . 0))
 (set.gloc.of |core.unicode'string-downcase|)
 (close
   (1 0 . |core.unicode'string-foldcase|)
   (call
     (push.iloc.0 . 0)
     (apply.gloc.of |core.io'open-string-input-port| "../stdlib/core/unicode.scm" . 217108))
   (push)
   (subr.gloc.of |.make-string-output-port| 0)
   (push)
   (extend . 2)
   (call
     (extend.enclose+
       (1 0 . loop)
       (push.iloc.0 . 0)
       (subr.gloc.of |.eof-object?| 1 "../stdlib/core/unicode.scm" . 221209)
       (if.true
         (push.iloc 2 . 1)
         (ret.subr.gloc.of |.extract-accumulated-string| "../stdlib/core/unicode.scm" . 221226))
       (call
         (push.iloc.0 . 0)
         (apply.gloc.of |core.unicode-assistants'foldcase| "../stdlib/core/unicode.scm" . 222233))
       (push)
       (extend . 1)
       (iloc.0 . 0)
       (if.true
         (call
           (push.close
             (1 0)
             (push.iloc 4 . 1)
             (push.iloc.0 . 0)
             (push.subr.gloc.of |.integer->char| 1 "../stdlib/core/unicode.scm" . 224325)
             (ret.subr.gloc.of |.put-char| "../stdlib/core/unicode.scm" . 224308))
           (push.iloc.0 . 0)
           (apply.gloc.of |.for-each| "../stdlib/core/unicode.scm" . 224286))
         (push.iloc 3 . 0)
         (push.subr.gloc.of |.get-char| 1 "../stdlib/core/unicode.scm" . 225316)
         (apply.iloc+ (2 . 0) "../stdlib/core/unicode.scm" . 225310))
       (push.iloc 3 . 1)
       (push.iloc.1 . 0)
       (subr.gloc.of |.put-char| 2 "../stdlib/core/unicode.scm" . 227353)
       (push.iloc 3 . 0)
       (push.subr.gloc.of |.get-char| 1 "../stdlib/core/unicode.scm" . 228383)
       (apply.iloc+ (2 . 0) "../stdlib/core/unicode.scm" . 228377))
     (push.iloc.1 . 0)
     (push.subr.gloc.of |.get-char| 1 "../stdlib/core/unicode.scm" . 220191)
     (apply.iloc+ (0 . 0) "../stdlib/core/unicode.scm" . 220176))
   (push)
   (extend . 1)
   (push.iloc 2 . 0)
   (push.iloc.0 . 0)
   (subr.gloc.of |.string=?| 2 "../stdlib/core/unicode.scm" . 229391)
   (if.true (ret.iloc 2 . 0))
   (ret.iloc 0 . 0))
 (set.gloc.of |core.unicode'string-foldcase|)
 (close
   (1 0 . |core.unicode'string-titlecase|)
   (call
     (push.iloc.0 . 0)
     (apply.gloc.of |core.io'open-string-input-port| "../stdlib/core/unicode.scm" . 233492))
   (push)
   (subr.gloc.of |.make-string-output-port| 0)
   (push)
   (extend . 2)
   (extend.unbound . 2)
   (push.close
     (0 0 . titlecase-first-char)
     (extend.enclose+
       (1 0 . loop)
       (push.iloc.0 . 0)
       (subr.gloc.of |.eof-object?| 1 "../stdlib/core/unicode.scm" . 238622)
       (if.true
         (push.iloc 4 . 1)
         (ret.subr.gloc.of |.extract-accumulated-string| "../stdlib/core/unicode.scm" . 239646))
       (call
         (push.iloc.0 . 0)
         (apply.gloc.of
           |core.unicode-assistants'general-category|
           "../stdlib/core/unicode.scm"
           .
           241700))
       (push)
       (push.const Ll Lu Lt)
       (subr.gloc.of |.memq| 2 "../stdlib/core/unicode.scm" . 241694)
       (if.true
         (push.iloc 4 . 1)
         (call
           (push.iloc.0 . 0)
           (apply.gloc.of |core.unicode'char-titlecase| "../stdlib/core/unicode.scm" . 243762))
         (push)
         (subr.gloc.of |.put-char| 2 "../stdlib/core/unicode.scm" . 243745)
         (apply.iloc (3 . 1) "../stdlib/core/unicode.scm" . 244769))
       (push.iloc 4 . 1)
       (push.iloc.0 . 0)
       (subr.gloc.of |.put-char| 2 "../stdlib/core/unicode.scm" . 246817)
       (push.iloc 4 . 0)
       (push.subr.gloc.of |.get-char| 1 "../stdlib/core/unicode.scm" . 247847)
       (apply.iloc+ (1 . 0) "../stdlib/core/unicode.scm" . 247841))
     (push.iloc 3 . 0)
     (push.subr.gloc.of |.get-char| 1 "../stdlib/core/unicode.scm" . 237604)
     (apply.iloc+ (0 . 0) "../stdlib/core/unicode.scm" . 237589))
   (push.close
     (0 0 . downcase-subsequence)
     (extend.enclose+
       (1 0 . loop)
       (push.iloc.0 . 0)
       (subr.gloc.of |.eof-object?| 1 "../stdlib/core/unicode.scm" . 251934)
       (if.true
         (push.iloc 4 . 1)
         (ret.subr.gloc.of |.extract-accumulated-string| "../stdlib/core/unicode.scm" . 252958))
       (call
         (push.iloc.0 . 0)
         (apply.gloc.of
           |core.unicode-assistants'general-category|
           "../stdlib/core/unicode.scm"
           .
           255012))
       (push)
       (extend . 1)
       (push.iloc.0 . 0)
       (push.const Ll Lu Lt)
       (subr.gloc.of |.memq| 2 "../stdlib/core/unicode.scm" . 255006)
       (if.true
         (push.iloc 5 . 1)
         (call
           (push.iloc.1 . 0)
           (apply.gloc.of |core.unicode'char-downcase| "../stdlib/core/unicode.scm" . 257074))
         (push)
         (subr.gloc.of |.put-char| 2 "../stdlib/core/unicode.scm" . 257057)
         (push.iloc 5 . 0)
         (push.subr.gloc.of |.get-char| 1 "../stdlib/core/unicode.scm" . 258087)
         (apply.iloc+ (2 . 0) "../stdlib/core/unicode.scm" . 258081))
       (push.iloc.0 . 0)
       (push.const Po Pf)
       (subr.gloc.of |.memq| 2 "../stdlib/core/unicode.scm" . 255006)
       (if.true
         (push.iloc.1 . 0)
         (push.const #\' #\: #\· #\״ #\’ #\‧)
         (subr.gloc.of |.memq| 2 "../stdlib/core/unicode.scm" . 260129)
         (if.true
           (push.iloc 5 . 1)
           (push.iloc.1 . 0)
           (subr.gloc.of |.put-char| 2 "../stdlib/core/unicode.scm" . 268324)
           (push.iloc 5 . 0)
           (push.subr.gloc.of |.get-char| 1 "../stdlib/core/unicode.scm" . 269354)
           (apply.iloc+ (2 . 0) "../stdlib/core/unicode.scm" . 269348))
         (push.iloc 5 . 1)
         (push.iloc.1 . 0)
         (subr.gloc.of |.put-char| 2 "../stdlib/core/unicode.scm" . 271396)
         (apply.iloc (4 . 0) "../stdlib/core/unicode.scm" . 272420))
       (push.iloc 5 . 1)
       (push.iloc.1 . 0)
       (subr.gloc.of |.put-char| 2 "../stdlib/core/unicode.scm" . 274465)
       (apply.iloc (4 . 0) "../stdlib/core/unicode.scm" . 275489))
     (push.iloc 3 . 0)
     (push.subr.gloc.of |.get-char| 1 "../stdlib/core/unicode.scm" . 250916)
     (apply.iloc+ (0 . 0) "../stdlib/core/unicode.scm" . 250901))
   (enclose . 2)
   (call (apply.iloc (0 . 0) "../stdlib/core/unicode.scm" . 276502))
   (push)
   (extend . 1)
   (push.iloc 3 . 0)
   (push.iloc.0 . 0)
   (subr.gloc.of |.string=?| 2 "../stdlib/core/unicode.scm" . 277521)
   (if.true (ret.iloc 3 . 0))
   (ret.iloc 0 . 0))
 (set.gloc.of |core.unicode'string-titlecase|)
 (close
   (0 1 . |core.unicode'string-ci=?|)
   (push.gloc.of |.string=?|)
   (call
     (push.gloc.of |core.unicode'string-foldcase|)
     (push.iloc.0 . 0)
     (apply.gloc.of |.map| "../stdlib/core/unicode.scm" . 281623))
   (push)
   (apply.gloc.of |.apply| "../stdlib/core/unicode.scm" . 281607))
 (set.gloc.of |core.unicode'string-ci=?|)
 (close
   (0 1 . |core.unicode'string-ci<?|)
   (push.gloc.of |.string<?|)
   (call
     (push.gloc.of |core.unicode'string-foldcase|)
     (push.iloc.0 . 0)
     (apply.gloc.of |.map| "../stdlib/core/unicode.scm" . 285719))
   (push)
   (apply.gloc.of |.apply| "../stdlib/core/unicode.scm" . 285703))
 (set.gloc.of |core.unicode'string-ci<?|)
 (close
   (0 1 . |core.unicode'string-ci>?|)
   (push.gloc.of |.string>?|)
   (call
     (push.gloc.of |core.unicode'string-foldcase|)
     (push.iloc.0 . 0)
     (apply.gloc.of |.map| "../stdlib/core/unicode.scm" . 289815))
   (push)
   (apply.gloc.of |.apply| "../stdlib/core/unicode.scm" . 289799))
 (set.gloc.of |core.unicode'string-ci>?|)
 (close
   (0 1 . |core.unicode'string-ci<=?|)
   (push.gloc.of |.string<=?|)
   (call
     (push.gloc.of |core.unicode'string-foldcase|)
     (push.iloc.0 . 0)
     (apply.gloc.of |.map| "../stdlib/core/unicode.scm" . 293912))
   (push)
   (apply.gloc.of |.apply| "../stdlib/core/unicode.scm" . 293895))
 (set.gloc.of |core.unicode'string-ci<=?|)
 (close
   (0 1 . |core.unicode'string-ci>=?|)
   (push.gloc.of |.string>=?|)
   (call
     (push.gloc.of |core.unicode'string-foldcase|)
     (push.iloc.0 . 0)
     (apply.gloc.of |.map| "../stdlib/core/unicode.scm" . 298008))
   (push)
   (apply.gloc.of |.apply| "../stdlib/core/unicode.scm" . 297991))
 (set.gloc.of |core.unicode'string-ci>=?|)
 (close
   (1 0 . |core.unicode'string-normalize-nfd|)
   (call
     (call
       (call
         (push.iloc.0 . 0)
         (apply.gloc.of |core.io'open-string-input-port| "../stdlib/core/unicode.scm" . 303146))
       (push)
       (push.const . #t)
       (apply.gloc.of |core.unicode-assistants'decompose| "../stdlib/core/unicode.scm" . 303135))
     (push)
     (apply.gloc.of
       |core.unicode-assistants'sort-combining-marks!|
       "../stdlib/core/unicode.scm"
       .
       303112))
   (push)
   (subr.gloc.of |.native-endianness| 0)
   (push)
   (push.const . #t)
   (apply.gloc.of
     |core.bytevector-transcoders'utf32->string|
     "../stdlib/core/unicode.scm"
     .
     302087))
 (set.gloc.of |core.unicode'string-normalize-nfd|)
 (close
   (1 0 . |core.unicode'string-normalize-nfkd|)
   (call
     (call
       (call
         (push.iloc.0 . 0)
         (apply.gloc.of |core.io'open-string-input-port| "../stdlib/core/unicode.scm" . 309290))
       (push)
       (push.const . #f)
       (apply.gloc.of |core.unicode-assistants'decompose| "../stdlib/core/unicode.scm" . 309279))
     (push)
     (apply.gloc.of
       |core.unicode-assistants'sort-combining-marks!|
       "../stdlib/core/unicode.scm"
       .
       309256))
   (push)
   (subr.gloc.of |.native-endianness| 0)
   (push)
   (push.const . #t)
   (apply.gloc.of
     |core.bytevector-transcoders'utf32->string|
     "../stdlib/core/unicode.scm"
     .
     308231))
 (set.gloc.of |core.unicode'string-normalize-nfkd|)
 (close
   (1 0 . |core.unicode'string-normalize-nfc|)
   (call
     (call
       (call
         (push.iloc.0 . 0)
         (apply.gloc.of |core.io'open-string-input-port| "../stdlib/core/unicode.scm" . 316436))
       (push)
       (push.const . #t)
       (apply.gloc.of |core.unicode-assistants'decompose| "../stdlib/core/unicode.scm" . 316425))
     (push)
     (apply.gloc.of
       |core.unicode-assistants'sort-combining-marks!|
       "../stdlib/core/unicode.scm"
       .
       315400))
   (push)
   (apply.gloc.of |core.unicode-assistants'compose| "../stdlib/core/unicode.scm" . 314375))
 (set.gloc.of |core.unicode'string-normalize-nfc|)
 (close
   (1 0 . |core.unicode'string-normalize-nfkc|)
   (call
     (call
       (call
         (push.iloc.0 . 0)
         (apply.gloc.of |core.io'open-string-input-port| "../stdlib/core/unicode.scm" . 322580))
       (push)
       (push.const . #f)
       (apply.gloc.of |core.unicode-assistants'decompose| "../stdlib/core/unicode.scm" . 322569))
     (push)
     (apply.gloc.of
       |core.unicode-assistants'sort-combining-marks!|
       "../stdlib/core/unicode.scm"
       .
       321544))
   (push)
   (apply.gloc.of |core.unicode-assistants'compose| "../stdlib/core/unicode.scm" . 320519))
 (set.gloc.of |core.unicode'string-normalize-nfkc|)
 (push.const . core.unicode)
 (push.const . #f)
 (push.const
   (char-upcase import . |core.unicode'char-upcase|)
   (char-downcase import . |core.unicode'char-downcase|)
   (char-titlecase import . |core.unicode'char-titlecase|)
   (char-foldcase import . |core.unicode'char-foldcase|)
   (char-ci=? import . |core.unicode'char-ci=?|)
   (char-ci<? import . |core.unicode'char-ci<?|)
   (char-ci>? import . |core.unicode'char-ci>?|)
   (char-ci<=? import . |core.unicode'char-ci<=?|)
   (char-ci>=? import . |core.unicode'char-ci>=?|)
   (char-alphabetic? import . |core.unicode'char-alphabetic?|)
   (char-numeric? import . |core.unicode'char-numeric?|)
   (char-whitespace? import . |.char-whitespace?|)
   (char-upper-case? import . |core.unicode'char-upper-case?|)
   (char-lower-case? import . |core.unicode'char-lower-case?|)
   (char-title-case? import . |core.unicode'char-title-case?|)
   (char-general-category import . |core.unicode'char-general-category|)
   (string-upcase import . |core.unicode'string-upcase|)
   (string-downcase import . |core.unicode'string-downcase|)
   (string-foldcase import . |core.unicode'string-foldcase|)
   (string-titlecase import . |core.unicode'string-titlecase|)
   (string-ci=? import . |core.unicode'string-ci=?|)
   (string-ci<? import . |core.unicode'string-ci<?|)
   (string-ci>? import . |core.unicode'string-ci>?|)
   (string-ci<=? import . |core.unicode'string-ci<=?|)
   (string-ci>=? import . |core.unicode'string-ci>=?|)
   (string-normalize-nfd import . |core.unicode'string-normalize-nfd|)
   (string-normalize-nfkd import . |core.unicode'string-normalize-nfkd|)
   (string-normalize-nfc import . |core.unicode'string-normalize-nfc|)
   (string-normalize-nfkc import . |core.unicode'string-normalize-nfkc|))
 (apply.gloc.of |.intern-scheme-library| "../stdlib/core/unicode.scm" . 6145))

((call
   (push.const core optargs)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/hashtables.scm" . 6145))
 (call
   (push.const core unicode)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/hashtables.scm" . 6145))
 (call
   (push.const core lists)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/hashtables.scm" . 6145))
 (call
   (push.const core primitives)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/hashtables.scm" . 6145))
 (call
   (push.const core intrinsics)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/hashtables.scm" . 6145))
 (close
   (5 0 . |core.hashtables'make-generic-hashtable|)
   (extend.unbound . 11)
   (push.close (1 0 . generic-hashtable-size) (ret.iloc 2 . 3))
   (push.close
     (3 0 . generic-hashtable-ref)
     (push.close
       (1 0 . equiv?)
       (push.iloc.0 . 0)
       (push.iloc.1 . 1)
       (apply.iloc (3 . 1) "../stdlib/core/hashtables.scm" . 63525))
     (extend . 1)
     (push.iloc 3 . 2)
     (call (push.iloc.1 . 1) (apply.iloc (3 . 0) "../stdlib/core/hashtables.scm" . 62487))
     (push)
     (push.const . #f)
     (push.subr.gloc.of |.core-hashtable-ref| 3 "../stdlib/core/hashtables.scm" . 64532)
     (extend . 1)
     (iloc.0 . 0)
     (if.true
       (call
         (push.iloc.1 . 0)
         (push.iloc.0 . 0)
         (apply.gloc.of |core.lists'assp| "../stdlib/core/hashtables.scm" . 66592))
       (push)
       (extend . 1)
       (iloc.0 . 0)
       (if.true (push.iloc.0 . 0) (ret.subr.gloc.of |.cdr| "../stdlib/core/hashtables.scm" . 66585))
       (ret.iloc 3 . 2))
     (ret.iloc 2 . 2))
   (push.close
     (3 0 . generic-hashtable-set!)
     (call (push.iloc.0 . 1) (apply.iloc (2 . 0) "../stdlib/core/hashtables.scm" . 72727))
     (push)
     (push.close
       (1 0 . equiv?)
       (push.iloc.0 . 0)
       (push.iloc.1 . 1)
       (apply.iloc (3 . 1) "../stdlib/core/hashtables.scm" . 73765))
     (extend . 2)
     (push.iloc 3 . 2)
     (push.iloc.0 . 0)
     (push.const . #f)
     (push.subr.gloc.of |.core-hashtable-ref| 3 "../stdlib/core/hashtables.scm" . 74772)
     (extend . 1)
     (iloc.0 . 0)
     (if.true
       (call
         (push.iloc.1 . 1)
         (push.iloc.0 . 0)
         (apply.gloc.of |core.lists'assp| "../stdlib/core/hashtables.scm" . 76832))
       (push)
       (extend . 1)
       (iloc.0 . 0)
       (if.true
         (push.iloc.0 . 0)
         (push.iloc 3 . 2)
         (ret.subr.gloc.of |.set-cdr!| "../stdlib/core/hashtables.scm" . 77871))
       (n+.iloc (5 . 3) 1 "../stdlib/core/hashtables.scm" . 79915)
       (set.iloc 5 . 3)
       (push.iloc 5 . 2)
       (push.iloc 2 . 0)
       (push.iloc 3 . 1)
       (iloc 3 . 2)
       (push.cons)
       (iloc.1 . 0)
       (push.cons)
       (ret.subr.gloc.of |.core-hashtable-set!| "../stdlib/core/hashtables.scm" . 80928))
     (n+.iloc (4 . 3) 1 "../stdlib/core/hashtables.scm" . 82975)
     (set.iloc 4 . 3)
     (push.iloc 4 . 2)
     (push.iloc.1 . 0)
     (push.iloc 2 . 1)
     (iloc 2 . 2)
     (push.cons)
     (push.subr.gloc.of |.list| 1 "../stdlib/core/hashtables.scm" . 84022)
     (ret.subr.gloc.of |.core-hashtable-set!| "../stdlib/core/hashtables.scm" . 83988))
   (push.close
     (2 0 . generic-hashtable-delete!)
     (call
       (call (push.iloc.0 . 1) (apply.iloc (2 . 0) "../stdlib/core/hashtables.scm" . 88087))
       (push)
       (push.close
         (1 0 . equiv?)
         (push.iloc.0 . 0)
         (push.iloc.1 . 1)
         (apply.iloc (3 . 1) "../stdlib/core/hashtables.scm" . 89125))
       (extend . 2)
       (push.iloc 3 . 2)
       (push.iloc.0 . 0)
       (push.const . #f)
       (push.subr.gloc.of |.core-hashtable-ref| 3 "../stdlib/core/hashtables.scm" . 90132)
       (extend . 1)
       (iloc.0 . 0)
       (if.true
         (call
           (push.iloc.1 . 1)
           (push.iloc.0 . 0)
           (apply.gloc.of |core.lists'assp| "../stdlib/core/hashtables.scm" . 92192))
         (push)
         (extend . 1)
         (iloc.0 . 0)
         (if.true
           (push.iloc 5 . 2)
           (push.iloc 2 . 0)
           (call
             (push.iloc.0 . 0)
             (push.iloc.1 . 0)
             (apply.gloc.of |core.lists'remq| "../stdlib/core/hashtables.scm" . 94279))
           (push)
           (ret.subr.gloc.of |.core-hashtable-set!| "../stdlib/core/hashtables.scm" . 94245))
         (ret.const.unspec))
       (ret.const.unspec))
     (ret.const.unspec))
   (push.close
     (2 0 . generic-hashtable-contains?)
     (push.close
       (1 0 . equiv?)
       (push.iloc.0 . 0)
       (push.iloc.1 . 1)
       (apply.iloc (3 . 1) "../stdlib/core/hashtables.scm" . 100389))
     (extend . 1)
     (push.iloc 3 . 2)
     (call (push.iloc.1 . 1) (apply.iloc (3 . 0) "../stdlib/core/hashtables.scm" . 99351))
     (push)
     (push.const . #f)
     (push.subr.gloc.of |.core-hashtable-ref| 3 "../stdlib/core/hashtables.scm" . 101396)
     (extend . 1)
     (iloc.0 . 0)
     (if.true
       (call
         (push.iloc.1 . 0)
         (push.iloc.0 . 0)
         (apply.gloc.of |core.lists'assp| "../stdlib/core/hashtables.scm" . 103454))
       (if.false.ret)
       (ret.const . #t))
     (ret.const . #f))
   (push.close
     (1 1 . generic-hashtable-copy)
     (call
       (iloc.0 . 1)
       (if.pair?
         (push.iloc.0 . 1)
         (ret.subr.gloc.of |.car| "../stdlib/core/hashtables.scm" . 109581))
       (ret.const . #t))
     (push)
     (extend . 1)
     (push.iloc 3 . 0)
     (push.iloc 3 . 1)
     (push.iloc 3 . 2)
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.core-hashtable-copy| 2 "../stdlib/core/hashtables.scm" . 109634)
     (push.iloc 3 . 3)
     (push.iloc.0 . 0)
     (apply.gloc.of
       |core.hashtables'make-generic-hashtable|
       "../stdlib/core/hashtables.scm"
       .
       109581))
   (push.close
     (1 1 . generic-hashtable-clear!)
     (push.iloc 2 . 2)
     (call
       (iloc.0 . 1)
       (if.pair?
         (push.iloc.0 . 1)
         (ret.subr.gloc.of |.car| "../stdlib/core/hashtables.scm" . 114701))
       (ret.const . 0))
     (push)
     (subr.gloc.of |.core-hashtable-clear!| 2 "../stdlib/core/hashtables.scm" . 114701)
     (const . 0)
     (set.iloc 2 . 3)
     (ret.const.unspec))
   (push.close
     (1 0 . generic-hashtable->alist)
     (push.gloc.of |.append|)
     (call
       (push.gloc.of |.cdr|)
       (push.iloc 2 . 2)
       (push.subr.gloc.of |.core-hashtable->alist| 1 "../stdlib/core/hashtables.scm" . 119842)
       (apply.gloc.of |.map| "../stdlib/core/hashtables.scm" . 119833))
     (push)
     (apply.gloc.of |.apply| "../stdlib/core/hashtables.scm" . 119819))
   (push.close (1 0 . generic-hashtable-equivalence-function) (ret.iloc 2 . 1))
   (push.close (1 0 . generic-hashtable-hash-function) (ret.iloc 2 . 0))
   (push.close (1 0 . generic-hashtable-mutable?) (ret.iloc 2 . 4))
   (enclose . 11)
   (push.const . generic)
   (push.const . hashtable-handler)
   (push.iloc.1 . 0)
   (push.iloc.1 . 1)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.iloc.0 . 2)
   (push.iloc.0 . 3)
   (push.iloc.0 . 4)
   (push.iloc.0 . 5)
   (push.iloc.0 . 6)
   (push.iloc.0 . 9)
   (push.iloc.0 . 8)
   (push.iloc.0 . 10)
   (push.iloc.0 . 7)
   (push.subr.gloc.of |.vector| 14 "../stdlib/core/hashtables.scm" . 129052)
   (ret.subr.gloc.of |.make-core-hashtable| "../stdlib/core/hashtables.scm" . 128007))
 (set.gloc.of |core.hashtables'make-generic-hashtable|)
 (close
   (2 1 . |core.hashtables'make-hashtable|)
   (call
     (iloc.0 . 2)
     (if.pair? (push.iloc.0 . 2) (ret.subr.gloc.of |.car| "../stdlib/core/hashtables.scm" . 147465))
     (ret.const . 0))
   (push)
   (extend . 1)
   (push.iloc.1 . 0)
   (subr.gloc.of |.procedure?| 1 "../stdlib/core/hashtables.scm" . 147469)
   (if.false.call
     (push.const . make-hashtable)
     (push.const . "expected procedure, but got ~r, as argument 1")
     (push.iloc.1 . 0)
     (push.subr.gloc.of |.format| 2 "../stdlib/core/hashtables.scm" . 148530)
     (apply.gloc.of |.assertion-violation| "../stdlib/core/hashtables.scm" . 148493))
   (push.iloc.1 . 1)
   (subr.gloc.of |.procedure?| 1 "../stdlib/core/hashtables.scm" . 149517)
   (if.false.call
     (push.const . make-hashtable)
     (push.const . "expected procedure, but got ~r, as argument 2")
     (push.iloc.1 . 1)
     (push.subr.gloc.of |.format| 2 "../stdlib/core/hashtables.scm" . 150578)
     (apply.gloc.of |.assertion-violation| "../stdlib/core/hashtables.scm" . 150541))
   (push.iloc.1 . 0)
   (push.iloc.1 . 1)
   (push.const . eq?)
   (push.iloc.0 . 0)
   (push.subr.gloc.of |.make-core-hashtable| 2 "../stdlib/core/hashtables.scm" . 151614)
   (push.const . 0)
   (push.const . #t)
   (apply.gloc.of
     |core.hashtables'make-generic-hashtable|
     "../stdlib/core/hashtables.scm"
     .
     151561))
 (set.gloc.of |core.hashtables'make-hashtable|)
 (close
   (0 1 . |core.hashtables'make-eq-hashtable|)
   (push.const . eq?)
   (call
     (iloc.0 . 0)
     (if.pair? (push.iloc.0 . 0) (ret.subr.gloc.of |.car| "../stdlib/core/hashtables.scm" . 156681))
     (ret.const . 0))
   (push)
   (ret.subr.gloc.of |.make-core-hashtable| "../stdlib/core/hashtables.scm" . 156681))
 (set.gloc.of |core.hashtables'make-eq-hashtable|)
 (close
   (0 1 . |core.hashtables'make-eqv-hashtable|)
   (push.const . eqv?)
   (call
     (iloc.0 . 0)
     (if.pair? (push.iloc.0 . 0) (ret.subr.gloc.of |.car| "../stdlib/core/hashtables.scm" . 161801))
     (ret.const . 0))
   (push)
   (ret.subr.gloc.of |.make-core-hashtable| "../stdlib/core/hashtables.scm" . 161801))
 (set.gloc.of |core.hashtables'make-eqv-hashtable|)
 (close
   (0 1 . |core.hashtables'make-string-hashtable|)
   (push.const . string=?)
   (call
     (iloc.0 . 0)
     (if.pair? (push.iloc.0 . 0) (ret.subr.gloc.of |.car| "../stdlib/core/hashtables.scm" . 166921))
     (ret.const . 0))
   (push)
   (ret.subr.gloc.of |.make-core-hashtable| "../stdlib/core/hashtables.scm" . 166921))
 (set.gloc.of |core.hashtables'make-string-hashtable|)
 (close
   (4 0 . |core.hashtables'hashtable-update!|)
   (push.iloc.0 . 0)
   (subr.gloc.of |.core-hashtable-mutable?| 1 "../stdlib/core/hashtables.scm" . 171019)
   (if.false.call
     (push.const . hashtable-update!)
     (push.const . "expected mutable hashtable")
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.iloc.0 . 2)
     (push.iloc.0 . 3)
     (push.subr.gloc.of |.list| 4 "../stdlib/core/hashtables.scm" . 172112)
     (apply.gloc.of |.assertion-violation| "../stdlib/core/hashtables.scm" . 172043))
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (call
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.iloc.0 . 3)
     (push.subr.gloc.of |.core-hashtable-ref| 3 "../stdlib/core/hashtables.scm" . 173097)
     (apply.iloc (0 . 2) "../stdlib/core/hashtables.scm" . 173091))
   (push)
   (ret.subr.gloc.of |.core-hashtable-set!| "../stdlib/core/hashtables.scm" . 173063))
 (set.gloc.of |core.hashtables'hashtable-update!|)
 (close
   (1 0 . |core.hashtables'hashtable-keys|)
   (push.gloc.of |.vector|)
   (call
     (push.gloc.of |.car|)
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.core-hashtable->alist| 1 "../stdlib/core/hashtables.scm" . 177182)
     (apply.gloc.of |.map| "../stdlib/core/hashtables.scm" . 177173))
   (push)
   (apply.gloc.of |.apply| "../stdlib/core/hashtables.scm" . 177159))
 (set.gloc.of |core.hashtables'hashtable-keys|)
 (close
   (1 0 . |core.hashtables'hashtable-entries|)
   (call
     (push.gloc.of |.vector|)
     (call
       (push.gloc.of |.car|)
       (push.iloc.0 . 0)
       (push.subr.gloc.of |.core-hashtable->alist| 1 "../stdlib/core/hashtables.scm" . 181286)
       (apply.gloc.of |.map| "../stdlib/core/hashtables.scm" . 181277))
     (push)
     (apply.gloc.of |.apply| "../stdlib/core/hashtables.scm" . 181263))
   (push)
   (call
     (push.gloc.of |.vector|)
     (call
       (push.gloc.of |.cdr|)
       (push.iloc.0 . 0)
       (push.subr.gloc.of |.core-hashtable->alist| 1 "../stdlib/core/hashtables.scm" . 182310)
       (apply.gloc.of |.map| "../stdlib/core/hashtables.scm" . 182301))
     (push)
     (apply.gloc.of |.apply| "../stdlib/core/hashtables.scm" . 182287))
   (push)
   (ret.subr.gloc.of |.values| "../stdlib/core/hashtables.scm" . 181255))
 (set.gloc.of |core.hashtables'hashtable-entries|)
 (close
   (1 0 . |core.hashtables'string-ci-hash|)
   (call
     (push.iloc.0 . 0)
     (apply.gloc.of |core.unicode'string-foldcase| "../stdlib/core/hashtables.scm" . 186388))
   (push)
   (ret.subr.gloc.of |.string-hash| "../stdlib/core/hashtables.scm" . 186375))
 (set.gloc.of |core.hashtables'string-ci-hash|)
 (push.const . core.hashtables)
 (push.const . #f)
 (push.const
   (make-eq-hashtable import . |core.hashtables'make-eq-hashtable|)
   (make-eqv-hashtable import . |core.hashtables'make-eqv-hashtable|)
   (make-string-hashtable import . |core.hashtables'make-string-hashtable|)
   (make-hashtable import . |core.hashtables'make-hashtable|)
   (weak-hashtable? import . |.weak-core-hashtable?|)
   (make-weak-hashtable import . |.make-weak-core-hashtable|)
   (hashtable-contains? import . |.core-hashtable-contains?|)
   (hashtable-delete! import . |.core-hashtable-delete!|)
   (hashtable-set! import . |.core-hashtable-set!|)
   (hashtable-ref import . |.core-hashtable-ref|)
   (hashtable-size import . |.core-hashtable-size|)
   (hashtable? import . |.core-hashtable?|)
   (hashtable-update! import . |core.hashtables'hashtable-update!|)
   (hashtable-clear! import . |.core-hashtable-clear!|)
   (hashtable-copy import . |.core-hashtable-copy|)
   (hashtable-keys import . |core.hashtables'hashtable-keys|)
   (hashtable-entries import . |core.hashtables'hashtable-entries|)
   (hashtable-mutable? import . |.core-hashtable-mutable?|)
   (hashtable-hash-function import . |.core-hashtable-hash-function|)
   (hashtable-equivalence-function import . |.core-hashtable-equivalence-function|)
   (equal-hash import . |.equal-hash|)
   (string-hash import . |.string-hash|)
   (string-ci-hash import . |core.hashtables'string-ci-hash|)
   (symbol-hash import . |.symbol-hash|)
   (hashtable->alist import . |.core-hashtable->alist|))
 (apply.gloc.of |.intern-scheme-library| "../stdlib/core/hashtables.scm" . 6145))

((close
   (1 0)
   (push.gloc.of |.patvars|)
   (push.iloc.0 . 0)
   (push.const)
   (push.const ?_ ?struct-name ?field-names)
   (push.const . #f)
   (push.close
     (1 0)
     (call
       (call
         (push.iloc.0 . 0)
         (push.const . ?struct-name)
         (push.const (?struct-name . 0))
         (push.const . ?struct-name)
         (push.const)
         (apply.gloc.of |.syntax-transcribe| "../stdlib/core/struct.scm" . 18461))
       (push)
       (apply.gloc.of |.syntax->datum| "../stdlib/core/struct.scm" . 18461))
     (push)
     (call
       (call
         (push.iloc.0 . 0)
         (push.const . ?field-names)
         (push.const (?field-names . 0))
         (push.const . ?field-names)
         (push.const)
         (apply.gloc.of |.syntax-transcribe| "../stdlib/core/struct.scm" . 19485))
       (push)
       (apply.gloc.of |.syntax->datum| "../stdlib/core/struct.scm" . 19485))
     (push)
     (extend . 2)
     (call
       (iloc.0 . 0)
       (if.symbol?.ret.const . #t)
       (push.const . define-struct)
       (push.const . "expected symbol for struct name")
       (push.iloc 2 . 0)
       (push.iloc.0 . 0)
       (apply.gloc.of |.syntax-violation| "../stdlib/core/struct.scm" . 21520))
     (call
       (extend.enclose+
         (1 0 . loop)
         (iloc.0 . 0)
         (if.not.pair?.ret.const . #f)
         (car.iloc (0 . 0) "../stdlib/core/struct.scm" . 24608)
         (if.symbol?
           (push.car.iloc (0 . 0) "../stdlib/core/struct.scm" . 25633)
           (push.cdr.iloc (0 . 0) "../stdlib/core/struct.scm" . 25645)
           (subr.gloc.of |.memq| 2 "../stdlib/core/struct.scm" . 25627)
           (if.true
             (push.const . define-struct)
             (push.const . "duplicate field name")
             (push.iloc 4 . 0)
             (push.iloc 2 . 1)
             (apply.gloc.of |.syntax-violation| "../stdlib/core/struct.scm" . 26651))
           (push.cdr.iloc (0 . 0) "../stdlib/core/struct.scm" . 27681)
           (apply.iloc+ (1 . 0) "../stdlib/core/struct.scm" . 27675))
         (push.const . define-struct)
         (push.const . "expected symbol for field name")
         (push.iloc 4 . 0)
         (push.iloc 2 . 1)
         (apply.gloc.of |.syntax-violation| "../stdlib/core/struct.scm" . 28695))
       (push.iloc.1 . 1)
       (apply.iloc+ (0 . 0) "../stdlib/core/struct.scm" . 22540))
     (push.const . "make-~a")
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.format| 2 "../stdlib/core/struct.scm" . 29741)
     (push.subr.gloc.of |.string->symbol| 1 "../stdlib/core/struct.scm" . 29725)
     (push.const . "~a?")
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.format| 2 "../stdlib/core/struct.scm" . 30765)
     (push.subr.gloc.of |.string->symbol| 1 "../stdlib/core/struct.scm" . 30749)
     (push.const . "type:~a")
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.format| 2 "../stdlib/core/struct.scm" . 31789)
     (push.subr.gloc.of |.string->symbol| 1 "../stdlib/core/struct.scm" . 31773)
     (push.iloc.0 . 1)
     (push.subr.gloc.of |.length| 1 "../stdlib/core/struct.scm" . 32799)
     (extend . 4)
     (call
       (push.iloc.0 . 3)
       (push.const . 1)
       (apply.gloc.of |core.lists'iota| "../stdlib/core/struct.scm" . 33824))
     (push)
     (extend . 1)
     (push.iloc 3 . 0)
     (call
       (call
         (push.iloc 3 . 0)
         (push.const . ?_)
         (push.const (?_ . 0))
         (push.const . ?_)
         (push.const)
         (apply.gloc.of |.syntax-transcribe| "../stdlib/core/struct.scm" . 36886))
       (push)
       (push.iloc.1 . 0)
       (apply.gloc.of |.datum->syntax| "../stdlib/core/struct.scm" . 36886))
     (push)
     (call
       (call
         (push.iloc 3 . 0)
         (push.const . ?_)
         (push.const (?_ . 0))
         (push.const . ?_)
         (push.const)
         (apply.gloc.of |.syntax-transcribe| "../stdlib/core/struct.scm" . 38934))
       (push)
       (push.iloc.1 . 1)
       (apply.gloc.of |.datum->syntax| "../stdlib/core/struct.scm" . 38934))
     (push)
     (call
       (call
         (push.iloc 3 . 0)
         (push.const . k)
         (push.const)
         (push.const . k)
         (push.const)
         (apply.gloc.of |.syntax-transcribe| "../stdlib/core/struct.scm" . 40982))
       (push)
       (push.const . syntax-rules)
       (push.const)
       (push.const . _)
       (iloc 2 . 1)
       (push.cons)
       (push.const . tuple)
       (push.const . quote)
       (push.iloc.1 . 2)
       (push.subr.gloc.of |.list| 2 "../stdlib/core/struct.scm" . 40982)
       (push.iloc 2 . 1)
       (push.subr.gloc.of |.cons*| 3 "../stdlib/core/struct.scm" . 40982)
       (push.subr.gloc.of |.list| 2 "../stdlib/core/struct.scm" . 40982)
       (push.const _)
       (push.const . tuple)
       (push.const . quote)
       (push.iloc.1 . 2)
       (push.subr.gloc.of |.list| 2 "../stdlib/core/struct.scm" . 40982)
       (call
         (push.iloc.1 . 3)
         (push.const unspecified)
         (apply.gloc.of |core.lists'make-list| "../stdlib/core/struct.scm" . 43078))
       (push)
       (push.subr.gloc.of |.cons*| 3 "../stdlib/core/struct.scm" . 40982)
       (push.subr.gloc.of |.list| 2 "../stdlib/core/struct.scm" . 40982)
       (push.subr.gloc.of |.list| 4 "../stdlib/core/struct.scm" . 40982)
       (apply.gloc.of |.datum->syntax| "../stdlib/core/struct.scm" . 40982))
     (push)
     (call
       (call
         (push.iloc 3 . 0)
         (push.const . k)
         (push.const)
         (push.const . k)
         (push.const)
         (apply.gloc.of |.syntax-transcribe| "../stdlib/core/struct.scm" . 45078))
       (push)
       (push.const . syntax-rules)
       (push.const)
       (push.const _ obj)
       (push.const . and)
       (push.const tuple? obj)
       (push.const . eq?)
       (push.const tuple-ref obj 0)
       (push.const . quote)
       (push.iloc.1 . 2)
       (push.subr.gloc.of |.list| 2 "../stdlib/core/struct.scm" . 45078)
       (push.subr.gloc.of |.list| 3 "../stdlib/core/struct.scm" . 45078)
       (push.subr.gloc.of |.list| 3 "../stdlib/core/struct.scm" . 45078)
       (push.subr.gloc.of |.list| 2 "../stdlib/core/struct.scm" . 45078)
       (push.subr.gloc.of |.list| 3 "../stdlib/core/struct.scm" . 45078)
       (apply.gloc.of |.datum->syntax| "../stdlib/core/struct.scm" . 45078))
     (push)
     (call
       (push.close
         (1 0)
         (call
           (push.iloc 4 . 0)
           (push.const . ?_)
           (push.const (?_ . 0))
           (push.const . ?_)
           (push.const)
           (apply.gloc.of |.syntax-transcribe| "../stdlib/core/struct.scm" . 49181))
         (push)
         (push.const . "~a-~a")
         (push.iloc 3 . 0)
         (push.iloc.0 . 0)
         (push.subr.gloc.of |.format| 3 "../stdlib/core/struct.scm" . 49217)
         (push.subr.gloc.of |.string->symbol| 1 "../stdlib/core/struct.scm" . 49201)
         (apply.gloc.of |.datum->syntax| "../stdlib/core/struct.scm" . 49181))
       (push.iloc 2 . 1)
       (apply.gloc.of |.map| "../stdlib/core/struct.scm" . 48150))
     (push)
     (call
       (push.close
         (1 0)
         (call
           (push.iloc 4 . 0)
           (push.const . ?_)
           (push.const (?_ . 0))
           (push.const . ?_)
           (push.const)
           (apply.gloc.of |.syntax-transcribe| "../stdlib/core/struct.scm" . 53277))
         (push)
         (push.const . "~a-~a-set!")
         (push.iloc 3 . 0)
         (push.iloc.0 . 0)
         (push.subr.gloc.of |.format| 3 "../stdlib/core/struct.scm" . 53313)
         (push.subr.gloc.of |.string->symbol| 1 "../stdlib/core/struct.scm" . 53297)
         (apply.gloc.of |.datum->syntax| "../stdlib/core/struct.scm" . 53277))
       (push.iloc 2 . 1)
       (apply.gloc.of |.map| "../stdlib/core/struct.scm" . 52246))
     (push)
     (call
       (push.close
         (1 0)
         (call
           (push.iloc 4 . 0)
           (push.const . k)
           (push.const)
           (push.const . k)
           (push.const)
           (apply.gloc.of |.syntax-transcribe| "../stdlib/core/struct.scm" . 57373))
         (push)
         (push.const . syntax-rules)
         (push.const)
         (push.const _ obj)
         (push.const . tuple-ref)
         (push.const . obj)
         (push.iloc.0 . 0)
         (push.subr.gloc.of |.list| 3 "../stdlib/core/struct.scm" . 57373)
         (push.subr.gloc.of |.list| 2 "../stdlib/core/struct.scm" . 57373)
         (push.subr.gloc.of |.list| 3 "../stdlib/core/struct.scm" . 57373)
         (apply.gloc.of |.datum->syntax| "../stdlib/core/struct.scm" . 57373))
       (push.iloc.0 . 0)
       (apply.gloc.of |.map| "../stdlib/core/struct.scm" . 56342))
     (push)
     (call
       (push.close
         (1 0)
         (call
           (push.iloc 4 . 0)
           (push.const . k)
           (push.const)
           (push.const . k)
           (push.const)
           (apply.gloc.of |.syntax-transcribe| "../stdlib/core/struct.scm" . 61469))
         (push)
         (push.const . syntax-rules)
         (push.const)
         (push.const _ obj value)
         (push.const . tuple-set!)
         (push.const . obj)
         (push.iloc.0 . 0)
         (push.const value)
         (push.subr.gloc.of |.cons*| 4 "../stdlib/core/struct.scm" . 61469)
         (push.subr.gloc.of |.list| 2 "../stdlib/core/struct.scm" . 61469)
         (push.subr.gloc.of |.list| 3 "../stdlib/core/struct.scm" . 61469)
         (apply.gloc.of |.datum->syntax| "../stdlib/core/struct.scm" . 61469))
       (push.iloc.0 . 0)
       (apply.gloc.of |.map| "../stdlib/core/struct.scm" . 60438))
     (push)
     (push.subr.gloc.of |.list| 8 "../stdlib/core/struct.scm" . 36886)
     (push.const)
     (push.const
       ?make-name
       ?pred-name
       ?make-rules
       ?pred-rules
       (?getter-name ...)
       (?setter-name ...)
       (?getter-rules ...)
       (?setter-rules ...))
     (push.const . #f)
     (push.gloc.of |.fn2.1`2|)
     (push.subr.gloc.of |.list| 3 "../stdlib/core/struct.scm" . 33806)
     (push.const . _)
     (push.const . #f)
     (push.gloc.of |.fn1.1`1|)
     (push.subr.gloc.of |.list| 3 "../stdlib/core/struct.scm" . 36886)
     (apply.gloc.of |.syntax-dispatch| "../stdlib/core/struct.scm" . 33806))
   (push.subr.gloc.of |.list| 3 "../stdlib/core/struct.scm" . 15365)
   (apply.gloc.of |.syntax-dispatch| "../stdlib/core/struct.scm" . 15365))
 (set.gloc.of |.fn3.1`3|)
 (close
   (1 0)
   (push.const . with-syntax)
   (push.const . "value does not match to pattern")
   (push.const
     (?make-name (datum->syntax (syntax ?_) make-name))
     (?pred-name (datum->syntax (syntax ?_) pred-name))
     (?make-rules
       (datum->syntax
         (syntax k)
         `(syntax-rules ()
            ((_ ,@field-names) (tuple ',desc-name ,@field-names))
            ((_) (tuple ',desc-name ,@(make-list field-count '(unspecified)))))))
     (?pred-rules
       (datum->syntax
         (syntax k)
         `(syntax-rules () ((_ obj) (and (tuple? obj) (eq? (tuple-ref obj 0) ',desc-name))))))
     ((?getter-name ...)
      (map (lambda (field-name)
             (datum->syntax (syntax ?_) (string->symbol (format "~a-~a" struct-name field-name))))
           field-names))
     ((?setter-name ...)
      (map (lambda (field-name)
             (datum->syntax
               (syntax ?_)
               (string->symbol (format "~a-~a-set!" struct-name field-name))))
           field-names))
     ((?getter-rules ...)
      (map (lambda (field-ref)
             (datum->syntax (syntax k) `(syntax-rules () ((_ obj) (tuple-ref obj ,field-ref)))))
           field-refs))
     ((?setter-rules ...)
      (map (lambda (field-ref)
             (datum->syntax
               (syntax k)
               `(syntax-rules () ((_ obj value) (tuple-set! obj ,field-ref value)))))
           field-refs)))
   (apply.gloc.of |.syntax-violation| "../stdlib/core/struct.scm" . 36886))
 (set.gloc.of |.fn1.1`1|)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (push.const
     begin
     (define-syntax ?make-name ?make-rules)
     (define-syntax ?pred-name ?pred-rules)
     (define-syntax ?getter-name ?getter-rules)
     ...
     (define-syntax ?setter-name ?setter-rules)
     ...)
   (push.const
     (?setter-rules . 1)
     (?setter-name . 1)
     (?getter-rules . 1)
     (?getter-name . 1)
     (?pred-rules . 0)
     (?pred-name . 0)
     (?make-rules . 0)
     (?make-name . 0))
   (push.const . #f)
   (push.const)
   (apply.gloc.of |.syntax-transcribe| "../stdlib/core/struct.scm" . 63506))
 (set.gloc.of |.fn2.1`2|)
 (call
   (push.const core lists)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/struct.scm" . 6145))
 (call
   (push.const core syntax-case)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/struct.scm" . 6145))
 (call
   (push.const core primitives)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/struct.scm" . 6145))
 (call
   (push.const . syntax)
   (push.const . |core.struct'define-struct|)
   (call
     (push.gloc.of |.fn3.1`3|)
     (apply.gloc.of |.transformer-thunk| "../stdlib/core/struct.scm" . 6145))
   (push)
   (push.const
     (with-syntax import . |core.syntax-case'with-syntax|)
     (unquote-splicing import . |.unquote-splicing|)
     (set! import . |.set!|)
     (tuple? import . |.tuple?|)
     (syntax->datum import . |.syntax->datum|)
     (lambda import . |.lambda|)
     (memq import . |.memq|)
     (quote import . |.quote|)
     (unquote import . |.unquote|)
     (letrec* import . |.letrec*|)
     (format import . |.format|)
     (define-syntax import . |.define-syntax|)
     (define import . |.define|)
     (syntax-case import . |.syntax-case|)
     (syntax-rules import . |.syntax-rules|)
     (tuple-set! import . |.tuple-set!|)
     (tuple import . |.tuple|)
     (syntax import . |.syntax|)
     (string->symbol import . |.string->symbol|)
     (... import . |....|)
     (define-struct import . |core.struct'define-struct|)
     (_ import . |._|)
     (eq? import . |.eq?|)
     (or import . |.or|)
     (tuple-ref import . |.tuple-ref|)
     (datum->syntax import . |.datum->syntax|)
     (syntax-violation import . |.syntax-violation|)
     (pair? import . |.pair?|)
     (if import . |.if|)
     (cdr import . |.cdr|)
     (begin import . |.begin|)
     (quasiquote import . |.quasiquote|)
     (symbol? import . |.symbol?|)
     (length import . |.length|)
     (and import . |.and|)
     (iota import . |core.lists'iota|)
     (unspecified import . |.unspecified|)
     (map import . |.map|)
     (let import . |.let|)
     (car import . |.car|)
     (make-list import . |core.lists'make-list|))
   (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/struct.scm" . 6145))
 (push.const . core.struct)
 (push.const . #f)
 (push.const (define-struct import . |core.struct'define-struct|))
 (apply.gloc.of |.intern-scheme-library| "../stdlib/core/struct.scm" . 6145))

((close
   (1 0)
   (ret.close
     (1 0)
     (push.iloc.1 . 0)
     (push.const . 1)
     (push.subr.gloc.of |.tuple-ref| 2 "../stdlib/core/enums.scm" . 38974)
     (push.const . 1)
     (push.subr.gloc.of |.tuple-ref| 2 "../stdlib/core/enums.scm" . 38974)
     (push.iloc.0 . 0)
     (push.const . #f)
     (ret.subr.gloc.of |.core-hashtable-ref| "../stdlib/core/enums.scm" . 38939)))
 (set.gloc.of |.fn4.1`4|)
 (close
   (1 0)
   (ret.close
     (1 0)
     (call
       (push.iloc.0 . 0)
       (apply.gloc.of |core.lists'remove-duplicate-symbols| "../stdlib/core/enums.scm" . 42022))
     (push)
     (push.iloc.1 . 0)
     (push.const . 1)
     (push.subr.gloc.of |.tuple-ref| 2 "../stdlib/core/enums.scm" . 43071)
     (push.const . 1)
     (push.subr.gloc.of |.tuple-ref| 2 "../stdlib/core/enums.scm" . 43071)
     (extend . 2)
     (call
       (push.close
         (1 0)
         (push.iloc.0 . 0)
         (subr.gloc.of |.symbol?| 1 "../stdlib/core/enums.scm" . 45101)
         (if.false.call
           (push.const . "enum-set constructor")
           (push.const . "expected list of symbols as argument 1")
           (push.iloc 2 . 0)
           (apply.gloc.of |.assertion-violation| "../stdlib/core/enums.scm" . 46125))
         (push.iloc.1 . 1)
         (push.iloc.0 . 0)
         (push.const . #f)
         (subr.gloc.of |.core-hashtable-ref| 3 "../stdlib/core/enums.scm" . 47149)
         (if.true.ret)
         (push.const . "enum-set constructor")
         (push.const . "excpectd symbols which belong to the universe")
         (push.iloc 2 . 0)
         (apply.gloc.of |.assertion-violation| "../stdlib/core/enums.scm" . 48173))
       (push.iloc.0 . 0)
       (apply.gloc.of |.for-each| "../stdlib/core/enums.scm" . 44061))
     (push.const . type:enum-set)
     (push.iloc 2 . 0)
     (push.const . 1)
     (push.subr.gloc.of |.tuple-ref| 2 "../stdlib/core/enums.scm" . 50220)
     (push.iloc.0 . 0)
     (ret.subr.gloc.of |.tuple| "../stdlib/core/enums.scm" . 50220)))
 (set.gloc.of |.fn12.1`12|)
 (close
   (2 0)
   (push.cdr.iloc (0 . 0) "../stdlib/core/enums.scm" . 82986)
   (push.cdr.iloc (0 . 1) "../stdlib/core/enums.scm" . 82994)
   (ret.subr.gloc.of |.<| "../stdlib/core/enums.scm" . 82983))
 (set.gloc.of |.fn14.1`14|)
 (call
   (push.const core sorting)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/enums.scm" . 6145))
 (call
   (push.const core hashtables)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/enums.scm" . 6145))
 (call
   (push.const core lists)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/enums.scm" . 6145))
 (call
   (push.const core struct)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/enums.scm" . 6145))
 (call
   (push.const core primitives)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/enums.scm" . 6145))
 (close
   (2 0 . |core.enums'construct-enum-type|)
   (push.const . type:enum-type)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.gloc.of |.fn4.1`4|)
   (push.gloc.of |.fn12.1`12|)
   (ret.subr.gloc.of |.tuple| "../stdlib/core/enums.scm" . 36887))
 (set.gloc.of |core.enums'construct-enum-type|)
 (close
   (1 0 . |core.enums'make-enumeration|)
   (call
     (push.iloc.0 . 0)
     (apply.gloc.of |core.lists'remove-duplicate-symbols| "../stdlib/core/enums.scm" . 54298))
   (push)
   (extend . 1)
   (call (apply.gloc.of |core.hashtables'make-eq-hashtable| "../stdlib/core/enums.scm" . 55315))
   (push)
   (push.const . 0)
   (extend . 2)
   (call
     (push.close
       (1 0)
       (push.iloc.0 . 0)
       (subr.gloc.of |.symbol?| 1 "../stdlib/core/enums.scm" . 57371)
       (if.false.call
         (push.const . make-enumeration)
         (push.const . "expected list of symbols")
         (push.iloc 2 . 0)
         (apply.gloc.of |.assertion-violation| "../stdlib/core/enums.scm" . 58395))
       (push.iloc.1 . 0)
       (push.iloc.0 . 0)
       (push.iloc.1 . 1)
       (subr.gloc.of |.core-hashtable-set!| 3 "../stdlib/core/enums.scm" . 59415)
       (n+.iloc (1 . 1) 1 "../stdlib/core/enums.scm" . 60451)
       (set.iloc 1 . 1)
       (ret.const.unspec))
     (push.iloc.1 . 0)
     (apply.gloc.of |.for-each| "../stdlib/core/enums.scm" . 56331))
   (push.const . type:enum-set)
   (call
     (push.iloc.0 . 0)
     (push.iloc.1 . 0)
     (apply.gloc.of |core.enums'construct-enum-type| "../stdlib/core/enums.scm" . 62487))
   (push)
   (push.iloc.1 . 0)
   (ret.subr.gloc.of |.tuple| "../stdlib/core/enums.scm" . 63501))
 (set.gloc.of |core.enums'make-enumeration|)
 (close
   (1 0 . |core.enums'enum-set-universe|)
   (push.const . type:enum-set)
   (push.iloc.0 . 0)
   (push.const . 1)
   (push.subr.gloc.of |.tuple-ref| 2 "../stdlib/core/enums.scm" . 67606)
   (push.iloc.0 . 0)
   (push.const . 1)
   (push.subr.gloc.of |.tuple-ref| 2 "../stdlib/core/enums.scm" . 68649)
   (push.const . 2)
   (push.subr.gloc.of |.tuple-ref| 2 "../stdlib/core/enums.scm" . 68649)
   (ret.subr.gloc.of |.tuple| "../stdlib/core/enums.scm" . 67606))
 (set.gloc.of |core.enums'enum-set-universe|)
 (close
   (1 0 . |core.enums'enum-set-indexer|)
   (push.iloc.0 . 0)
   (push.iloc.0 . 0)
   (push.const . 1)
   (push.subr.gloc.of |.tuple-ref| 2 "../stdlib/core/enums.scm" . 72731)
   (push.const . 3)
   (subr.gloc.of |.tuple-ref| 2 "../stdlib/core/enums.scm" . 72731)
   (apply))
 (set.gloc.of |core.enums'enum-set-indexer|)
 (close
   (1 0 . |core.enums'enum-set-constructor|)
   (push.iloc.0 . 0)
   (push.iloc.0 . 0)
   (push.const . 1)
   (push.subr.gloc.of |.tuple-ref| 2 "../stdlib/core/enums.scm" . 76831)
   (push.const . 4)
   (subr.gloc.of |.tuple-ref| 2 "../stdlib/core/enums.scm" . 76831)
   (apply))
 (set.gloc.of |core.enums'enum-set-constructor|)
 (close
   (1 0 . |core.enums'enum-set->list|)
   (push.iloc.0 . 0)
   (push.const . 1)
   (push.subr.gloc.of |.tuple-ref| 2 "../stdlib/core/enums.scm" . 80939)
   (push.const . 1)
   (push.subr.gloc.of |.tuple-ref| 2 "../stdlib/core/enums.scm" . 80939)
   (extend . 1)
   (push.gloc.of |.car|)
   (call
     (push.gloc.of |.fn14.1`14|)
     (call
       (push.close
         (1 0)
         (push.iloc.0 . 0)
         (push.iloc.1 . 0)
         (push.iloc.0 . 0)
         (push.const . #f)
         (subr.gloc.of |.core-hashtable-ref| 3 "../stdlib/core/enums.scm" . 84018)
         (ret.cons "../stdlib/core/enums.scm" . 84010))
       (push.iloc.1 . 0)
       (push.const . 2)
       (push.subr.gloc.of |.tuple-ref| 2 "../stdlib/core/enums.scm" . 83993)
       (apply.gloc.of |.map| "../stdlib/core/enums.scm" . 83993))
     (push)
     (apply.gloc.of |core.sorting'list-sort| "../stdlib/core/enums.scm" . 82958))
   (push)
   (apply.gloc.of |.map| "../stdlib/core/enums.scm" . 81929))
 (set.gloc.of |core.enums'enum-set->list|)
 (close
   (2 0 . |core.enums'enum-set-member?|)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.const . 2)
   (push.subr.gloc.of |.tuple-ref| 2 "../stdlib/core/enums.scm" . 89100)
   (subr.gloc.of |.memq| 2 "../stdlib/core/enums.scm" . 89100)
   (if.false.ret)
   (ret.const . #t))
 (set.gloc.of |core.enums'enum-set-member?|)
 (close
   (2 0 . |core.enums'enum-set-subset?|)
   (push.close
     (1 0)
     (push.iloc.0 . 0)
     (push.iloc.1 . 1)
     (apply.gloc.of |core.enums'enum-set-member?| "../stdlib/core/enums.scm" . 93212))
   (push.iloc.0 . 0)
   (push.const . 2)
   (push.subr.gloc.of |.tuple-ref| 2 "../stdlib/core/enums.scm" . 93191)
   (apply.gloc.of |core.lists'for-all| "../stdlib/core/enums.scm" . 93191))
 (set.gloc.of |core.enums'enum-set-subset?|)
 (close
   (2 0 . |core.enums'enum-set=?|)
   (push.iloc.0 . 0)
   (push.const . 2)
   (push.subr.gloc.of |.tuple-ref| 2 "../stdlib/core/enums.scm" . 98319)
   (push.subr.gloc.of |.length| 1 "../stdlib/core/enums.scm" . 98319)
   (push.iloc.0 . 1)
   (push.const . 2)
   (push.subr.gloc.of |.tuple-ref| 2 "../stdlib/core/enums.scm" . 99343)
   (push.subr.gloc.of |.length| 1 "../stdlib/core/enums.scm" . 99343)
   (subr.gloc.of |.=| 2 "../stdlib/core/enums.scm" . 98316)
   (if.false.ret)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (apply.gloc.of |core.enums'enum-set-subset?| "../stdlib/core/enums.scm" . 100364))
 (set.gloc.of |core.enums'enum-set=?|)
 (close
   (2 0 . |core.enums'enum-set-union|)
   (push.iloc.0 . 0)
   (push.const . 1)
   (push.subr.gloc.of |.tuple-ref| 2 "../stdlib/core/enums.scm" . 104459)
   (push.iloc.0 . 1)
   (push.const . 1)
   (push.subr.gloc.of |.tuple-ref| 2 "../stdlib/core/enums.scm" . 104459)
   (subr.gloc.of |.eq?| 2 "../stdlib/core/enums.scm" . 104459)
   (if.false.call
     (push.const . enum-set-union)
     (push.const . "expected same type enum-sets")
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (apply.gloc.of |.assertion-violation| "../stdlib/core/enums.scm" . 105483))
   (push.const . type:enum-set)
   (push.iloc.0 . 0)
   (push.const . 1)
   (push.subr.gloc.of |.tuple-ref| 2 "../stdlib/core/enums.scm" . 106518)
   (call
     (push.iloc.0 . 0)
     (push.const . 2)
     (push.subr.gloc.of |.tuple-ref| 2 "../stdlib/core/enums.scm" . 107568)
     (push.iloc.0 . 1)
     (push.const . 2)
     (push.subr.gloc.of |.tuple-ref| 2 "../stdlib/core/enums.scm" . 107568)
     (push.subr.gloc.of |.append| 2 "../stdlib/core/enums.scm" . 107568)
     (apply.gloc.of |core.lists'remove-duplicate-symbols| "../stdlib/core/enums.scm" . 107542))
   (push)
   (ret.subr.gloc.of |.tuple| "../stdlib/core/enums.scm" . 106518))
 (set.gloc.of |core.enums'enum-set-union|)
 (close
   (2 0 . |core.enums'enum-set-intersection|)
   (push.iloc.0 . 0)
   (push.const . 1)
   (push.subr.gloc.of |.tuple-ref| 2 "../stdlib/core/enums.scm" . 111627)
   (push.iloc.0 . 1)
   (push.const . 1)
   (push.subr.gloc.of |.tuple-ref| 2 "../stdlib/core/enums.scm" . 111627)
   (subr.gloc.of |.eq?| 2 "../stdlib/core/enums.scm" . 111627)
   (if.false.call
     (push.const . enum-set-intersection)
     (push.const . "expected same type enum-sets")
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (apply.gloc.of |.assertion-violation| "../stdlib/core/enums.scm" . 112651))
   (push.iloc.0 . 1)
   (push.const . 2)
   (push.subr.gloc.of |.tuple-ref| 2 "../stdlib/core/enums.scm" . 113671)
   (extend . 1)
   (push.const . type:enum-set)
   (push.iloc.1 . 0)
   (push.const . 1)
   (push.subr.gloc.of |.tuple-ref| 2 "../stdlib/core/enums.scm" . 114712)
   (call
     (push.gloc.of |.values|)
     (call
       (push.close
         (1 0)
         (push.iloc.0 . 0)
         (push.iloc.1 . 0)
         (subr.gloc.of |.memq| 2 "../stdlib/core/enums.scm" . 115773)
         (if.false.ret)
         (ret.iloc 0 . 0))
       (push.iloc.1 . 0)
       (push.const . 2)
       (push.subr.gloc.of |.tuple-ref| 2 "../stdlib/core/enums.scm" . 115751)
       (apply.gloc.of |.map| "../stdlib/core/enums.scm" . 115751))
     (push)
     (apply.gloc.of |core.lists'filter| "../stdlib/core/enums.scm" . 115736))
   (push)
   (ret.subr.gloc.of |.tuple| "../stdlib/core/enums.scm" . 114712))
 (set.gloc.of |core.enums'enum-set-intersection|)
 (close
   (2 0 . |core.enums'enum-set-difference|)
   (push.iloc.0 . 0)
   (push.const . 1)
   (push.subr.gloc.of |.tuple-ref| 2 "../stdlib/core/enums.scm" . 120843)
   (push.iloc.0 . 1)
   (push.const . 1)
   (push.subr.gloc.of |.tuple-ref| 2 "../stdlib/core/enums.scm" . 120843)
   (subr.gloc.of |.eq?| 2 "../stdlib/core/enums.scm" . 120843)
   (if.false.call
     (push.const . enum-set-difference)
     (push.const . "expected same type enum-sets")
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (apply.gloc.of |.assertion-violation| "../stdlib/core/enums.scm" . 121867))
   (push.iloc.0 . 1)
   (push.const . 2)
   (push.subr.gloc.of |.tuple-ref| 2 "../stdlib/core/enums.scm" . 122887)
   (extend . 1)
   (push.const . type:enum-set)
   (push.iloc.1 . 0)
   (push.const . 1)
   (push.subr.gloc.of |.tuple-ref| 2 "../stdlib/core/enums.scm" . 123928)
   (call
     (push.gloc.of |.values|)
     (call
       (push.close
         (1 0)
         (push.iloc.0 . 0)
         (push.iloc.1 . 0)
         (subr.gloc.of |.memq| 2 "../stdlib/core/enums.scm" . 124994)
         (if.true.ret.const . #f)
         (ret.iloc 0 . 0))
       (push.iloc.1 . 0)
       (push.const . 2)
       (push.subr.gloc.of |.tuple-ref| 2 "../stdlib/core/enums.scm" . 124967)
       (apply.gloc.of |.map| "../stdlib/core/enums.scm" . 124967))
     (push)
     (apply.gloc.of |core.lists'filter| "../stdlib/core/enums.scm" . 124952))
   (push)
   (ret.subr.gloc.of |.tuple| "../stdlib/core/enums.scm" . 123928))
 (set.gloc.of |core.enums'enum-set-difference|)
 (close
   (1 0 . |core.enums'enum-set-complement|)
   (push.iloc.0 . 0)
   (push.const . 2)
   (push.subr.gloc.of |.tuple-ref| 2 "../stdlib/core/enums.scm" . 130055)
   (extend . 1)
   (push.const . type:enum-set)
   (push.iloc.1 . 0)
   (push.const . 1)
   (push.subr.gloc.of |.tuple-ref| 2 "../stdlib/core/enums.scm" . 131096)
   (call
     (push.gloc.of |.values|)
     (call
       (push.close
         (1 0)
         (push.iloc.0 . 0)
         (push.iloc.1 . 0)
         (subr.gloc.of |.memq| 2 "../stdlib/core/enums.scm" . 132162)
         (if.true.ret.const . #f)
         (ret.iloc 0 . 0))
       (push.iloc.1 . 0)
       (push.const . 1)
       (push.subr.gloc.of |.tuple-ref| 2 "../stdlib/core/enums.scm" . 133183)
       (push.const . 2)
       (push.subr.gloc.of |.tuple-ref| 2 "../stdlib/core/enums.scm" . 133183)
       (apply.gloc.of |.map| "../stdlib/core/enums.scm" . 132135))
     (push)
     (apply.gloc.of |core.lists'filter| "../stdlib/core/enums.scm" . 132120))
   (push)
   (ret.subr.gloc.of |.tuple| "../stdlib/core/enums.scm" . 131096))
 (set.gloc.of |core.enums'enum-set-complement|)
 (close
   (2 0 . |core.enums'enum-set-projection|)
   (push.iloc.0 . 1)
   (push.const . 1)
   (push.subr.gloc.of |.tuple-ref| 2 "../stdlib/core/enums.scm" . 137271)
   (push.const . 2)
   (push.subr.gloc.of |.tuple-ref| 2 "../stdlib/core/enums.scm" . 137271)
   (extend . 1)
   (push.const . type:enum-set)
   (push.iloc.1 . 1)
   (push.const . 1)
   (push.subr.gloc.of |.tuple-ref| 2 "../stdlib/core/enums.scm" . 138264)
   (call
     (push.gloc.of |.values|)
     (call
       (push.close
         (1 0)
         (push.iloc.0 . 0)
         (push.iloc.1 . 0)
         (subr.gloc.of |.memq| 2 "../stdlib/core/enums.scm" . 139325)
         (if.false.ret)
         (ret.iloc 0 . 0))
       (push.iloc.1 . 0)
       (push.const . 2)
       (push.subr.gloc.of |.tuple-ref| 2 "../stdlib/core/enums.scm" . 139303)
       (apply.gloc.of |.map| "../stdlib/core/enums.scm" . 139303))
     (push)
     (apply.gloc.of |core.lists'filter| "../stdlib/core/enums.scm" . 139288))
   (push)
   (ret.subr.gloc.of |.tuple| "../stdlib/core/enums.scm" . 138264))
 (set.gloc.of |core.enums'enum-set-projection|)
 (call
   (push.const
     (make-enum-set import . |core.enums'make-enum-set|)
     (append import . |.append|)
     (set! import . |.set!|)
     (define-struct import . |core.struct'define-struct|)
     (lambda import . |.lambda|)
     (enum-type-universe import . |core.enums'enum-type-universe|)
     (enum-set-union import . |core.enums'enum-set-union|)
     (or import . |.or|)
     (enum-type-indexer import . |core.enums'enum-type-indexer|)
     (let import . |.let|)
     (remove-duplicate-symbols import . |core.lists'remove-duplicate-symbols|)
     (enum-type? import . |core.enums'enum-type?|)
     (make-eq-hashtable import . |core.hashtables'make-eq-hashtable|)
     (hashtable-ref import . |.core-hashtable-ref|)
     (enum-type-members-set! import . |core.enums'enum-type-members-set!|)
     (... import . |....|)
     (enum-set-type import . |core.enums'enum-set-type|)
     (syntax-rules import . |.syntax-rules|)
     (define-syntax import . |.define-syntax|)
     (letrec* import . |.letrec*|)
     (quote import . |.quote|)
     (map import . |.map|)
     (cons import . |.cons|)
     (make-enumeration import . |core.enums'make-enumeration|)
     (if import . |.if|)
     (< import . |.<|)
     (define import . |.define|)
     (cdr import . |.cdr|)
     (list-sort import . |core.sorting'list-sort|)
     (length import . |.length|)
     (syntax-case import . |.syntax-case|)
     (values import . |.values|)
     (filter import . |core.lists'filter|)
     (enum-type-indexer-set! import . |core.enums'enum-type-indexer-set!|)
     (for-each import . |.for-each|)
     (enum-set-complement import . |core.enums'enum-set-complement|)
     (not import . |.not|)
     (_ import . |._|)
     (+ import . |.+|)
     (= import . |.=|)
     (enum-set-intersection import . |core.enums'enum-set-intersection|)
     (enum-set-indexer import . |core.enums'enum-set-indexer|)
     (for-all import . |core.lists'for-all|)
     (enum-type-constructor-set! import . |core.enums'enum-type-constructor-set!|)
     (begin import . |.begin|)
     (assertion-violation import . |.assertion-violation|)
     (enum-set-members-set! import . |core.enums'enum-set-members-set!|)
     (define-enumeration import . |core.enums'define-enumeration|)
     (enum-set-projection import . |core.enums'enum-set-projection|)
     (enum-set-constructor import . |core.enums'enum-set-constructor|)
     (syntax->datum import . |.syntax->datum|)
     (and import . |.and|)
     (construct-enum-type import . |core.enums'construct-enum-type|)
     (enum-set-member? import . |core.enums'enum-set-member?|)
     (enum-set-members import . |core.enums'enum-set-members|)
     (hashtable-set! import . |.core-hashtable-set!|)
     (enum-set=? import . |core.enums'enum-set=?|)
     (enum-set? import . |core.enums'enum-set?|)
     (enum-type-universe-set! import . |core.enums'enum-type-universe-set!|)
     (symbol? import . |.symbol?|)
     (eq? import . |.eq?|)
     (enum-set-difference import . |core.enums'enum-set-difference|)
     (syntax-violation import . |.syntax-violation|)
     (enum-type-members import . |core.enums'enum-type-members|)
     (enum-set-type-set! import . |core.enums'enum-set-type-set!|)
     (enum-set->list import . |core.enums'enum-set->list|)
     (memq import . |.memq|)
     (car import . |.car|)
     (enum-set-universe import . |core.enums'enum-set-universe|)
     (enum-set-subset? import . |core.enums'enum-set-subset?|)
     (enum-type-constructor import . |core.enums'enum-type-constructor|)
     (make-enum-type import . |core.enums'make-enum-type|)
     (syntax import . |.syntax|))
   (extend . 1)
   (call
     (push.const . syntax)
     (push.const . |core.enums'make-enum-type|)
     (push.const
       ()
       #f
       ((|_`1| |universe`1| |members`1| |indexer`1| |constructor`1|)
        (|tuple`1|
          (|quote`1| |type:enum-type`1|)
          |universe`1|
          |members`1|
          |indexer`1|
          |constructor`1|)
        ((|constructor`1| . 0) (|indexer`1| . 0) (|members`1| . 0) (|universe`1| . 0) (|_`1| . 0))
        (|type:enum-type`1| |quote`1| |tuple`1|))
       ((|_`1|)
        (|tuple`1|
          (|quote`1| |type:enum-type`1|)
          (|unspecified`1|)
          (|unspecified`1|)
          (|unspecified`1|)
          (|unspecified`1|))
        ((|_`1| . 0))
        (|unspecified`1| |type:enum-type`1| |quote`1| |tuple`1|)))
     (push.iloc.0 . 0)
     (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/enums.scm" . 6145))
   (call
     (push.const . syntax)
     (push.const . |core.enums'enum-type?|)
     (push.const
       ()
       #f
       ((|_`1| |obj`1|)
        (|and`1|
          (|tuple?`1| |obj`1|)
          (|eq?`1| (|tuple-ref`1| |obj`1| 0) (|quote`1| |type:enum-type`1|)))
        ((|obj`1| . 0) (|_`1| . 0))
        (|type:enum-type`1| |quote`1| |tuple-ref`1| |eq?`1| |tuple?`1| |and`1|)))
     (push.iloc.0 . 0)
     (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/enums.scm" . 6145))
   (call
     (push.const . syntax)
     (push.const . |core.enums'enum-type-universe|)
     (push.const
       ()
       #f
       ((|_`1| |obj`1|) (|tuple-ref`1| |obj`1| 1) ((|obj`1| . 0) (|_`1| . 0)) (|tuple-ref`1|)))
     (push.iloc.0 . 0)
     (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/enums.scm" . 6145))
   (call
     (push.const . syntax)
     (push.const . |core.enums'enum-type-members|)
     (push.const
       ()
       #f
       ((|_`1| |obj`1|) (|tuple-ref`1| |obj`1| 2) ((|obj`1| . 0) (|_`1| . 0)) (|tuple-ref`1|)))
     (push.iloc.0 . 0)
     (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/enums.scm" . 6145))
   (call
     (push.const . syntax)
     (push.const . |core.enums'enum-type-indexer|)
     (push.const
       ()
       #f
       ((|_`1| |obj`1|) (|tuple-ref`1| |obj`1| 3) ((|obj`1| . 0) (|_`1| . 0)) (|tuple-ref`1|)))
     (push.iloc.0 . 0)
     (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/enums.scm" . 6145))
   (call
     (push.const . syntax)
     (push.const . |core.enums'enum-type-constructor|)
     (push.const
       ()
       #f
       ((|_`1| |obj`1|) (|tuple-ref`1| |obj`1| 4) ((|obj`1| . 0) (|_`1| . 0)) (|tuple-ref`1|)))
     (push.iloc.0 . 0)
     (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/enums.scm" . 6145))
   (call
     (push.const . syntax)
     (push.const . |core.enums'enum-type-universe-set!|)
     (push.const
       ()
       #f
       ((|_`1| |obj`1| |value`1|)
        (|tuple-set!`1| |obj`1| 1 |value`1|)
        ((|value`1| . 0) (|obj`1| . 0) (|_`1| . 0))
        (|tuple-set!`1|)))
     (push.iloc.0 . 0)
     (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/enums.scm" . 6145))
   (call
     (push.const . syntax)
     (push.const . |core.enums'enum-type-members-set!|)
     (push.const
       ()
       #f
       ((|_`1| |obj`1| |value`1|)
        (|tuple-set!`1| |obj`1| 2 |value`1|)
        ((|value`1| . 0) (|obj`1| . 0) (|_`1| . 0))
        (|tuple-set!`1|)))
     (push.iloc.0 . 0)
     (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/enums.scm" . 6145))
   (call
     (push.const . syntax)
     (push.const . |core.enums'enum-type-indexer-set!|)
     (push.const
       ()
       #f
       ((|_`1| |obj`1| |value`1|)
        (|tuple-set!`1| |obj`1| 3 |value`1|)
        ((|value`1| . 0) (|obj`1| . 0) (|_`1| . 0))
        (|tuple-set!`1|)))
     (push.iloc.0 . 0)
     (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/enums.scm" . 6145))
   (call
     (push.const . syntax)
     (push.const . |core.enums'enum-type-constructor-set!|)
     (push.const
       ()
       #f
       ((|_`1| |obj`1| |value`1|)
        (|tuple-set!`1| |obj`1| 4 |value`1|)
        ((|value`1| . 0) (|obj`1| . 0) (|_`1| . 0))
        (|tuple-set!`1|)))
     (push.iloc.0 . 0)
     (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/enums.scm" . 6145))
   (call
     (push.const . syntax)
     (push.const . |core.enums'make-enum-set|)
     (push.const
       ()
       #f
       ((|_`2| |type`2| |members`2|)
        (|tuple`2| (|quote`2| |type:enum-set`2|) |type`2| |members`2|)
        ((|members`2| . 0) (|type`2| . 0) (|_`2| . 0))
        (|type:enum-set`2| |quote`2| |tuple`2|))
       ((|_`2|)
        (|tuple`2| (|quote`2| |type:enum-set`2|) (|unspecified`2|) (|unspecified`2|))
        ((|_`2| . 0))
        (|unspecified`2| |type:enum-set`2| |quote`2| |tuple`2|)))
     (push.iloc.0 . 0)
     (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/enums.scm" . 6145))
   (call
     (push.const . syntax)
     (push.const . |core.enums'enum-set?|)
     (push.const
       ()
       #f
       ((|_`2| |obj`2|)
        (|and`2|
          (|tuple?`2| |obj`2|)
          (|eq?`2| (|tuple-ref`2| |obj`2| 0) (|quote`2| |type:enum-set`2|)))
        ((|obj`2| . 0) (|_`2| . 0))
        (|type:enum-set`2| |quote`2| |tuple-ref`2| |eq?`2| |tuple?`2| |and`2|)))
     (push.iloc.0 . 0)
     (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/enums.scm" . 6145))
   (call
     (push.const . syntax)
     (push.const . |core.enums'enum-set-type|)
     (push.const
       ()
       #f
       ((|_`2| |obj`2|) (|tuple-ref`2| |obj`2| 1) ((|obj`2| . 0) (|_`2| . 0)) (|tuple-ref`2|)))
     (push.iloc.0 . 0)
     (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/enums.scm" . 6145))
   (call
     (push.const . syntax)
     (push.const . |core.enums'enum-set-members|)
     (push.const
       ()
       #f
       ((|_`2| |obj`2|) (|tuple-ref`2| |obj`2| 2) ((|obj`2| . 0) (|_`2| . 0)) (|tuple-ref`2|)))
     (push.iloc.0 . 0)
     (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/enums.scm" . 6145))
   (call
     (push.const . syntax)
     (push.const . |core.enums'enum-set-type-set!|)
     (push.const
       ()
       #f
       ((|_`2| |obj`2| |value`2|)
        (|tuple-set!`2| |obj`2| 1 |value`2|)
        ((|value`2| . 0) (|obj`2| . 0) (|_`2| . 0))
        (|tuple-set!`2|)))
     (push.iloc.0 . 0)
     (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/enums.scm" . 6145))
   (call
     (push.const . syntax)
     (push.const . |core.enums'enum-set-members-set!|)
     (push.const
       ()
       #f
       ((|_`2| |obj`2| |value`2|)
        (|tuple-set!`2| |obj`2| 2 |value`2|)
        ((|value`2| . 0) (|obj`2| . 0) (|_`2| . 0))
        (|tuple-set!`2|)))
     (push.iloc.0 . 0)
     (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/enums.scm" . 6145))
   (push.const . syntax)
   (push.const . |core.enums'define-enumeration|)
   (push.const
     ()
     ("../stdlib/core/enums.scm" . 143365)
     ((_ type-name (symbol1 ...) constructor-syntax)
      (begin
        (define universe (make-enumeration '(symbol1 ...)))
        (define-syntax type-name
          (lambda (x)
            (syntax-case x
              ()
              ((_ symbol2)
               (or (enum-set-member? (syntax->datum (syntax symbol2)) universe)
                   (syntax-violation 'type-name "excpectd symbols which belong to the universe" x))
               (syntax symbol2)))))
        (define-syntax constructor-syntax
          (lambda (x)
            (syntax-case x
              ()
              ((_ symbol3 (... ...))
               (or (for-all (lambda (e) (enum-set-member? e universe))
                            (syntax->datum (syntax (symbol3 (... ...)))))
                   (syntax-violation
                     'constructor-syntax
                     "excpectd symbols which belong to the universe"
                     x))
               (syntax ((enum-set-constructor universe) '(symbol3 (... ...)))))))))
      ((constructor-syntax . 0) (symbol1 . 1) (type-name . 0))
      (enum-set-constructor
        e
        for-all
        symbol3
        syntax-violation
        syntax
        syntax->datum
        enum-set-member?
        or
        symbol2
        _
        syntax-case
        x
        lambda
        define-syntax
        quote
        make-enumeration
        universe
        define
        begin)))
   (push.iloc.0 . 0)
   (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/enums.scm" . 6145))
 (push.const . core.enums)
 (push.const . #f)
 (push.const
   (make-enumeration import . |core.enums'make-enumeration|)
   (enum-set-universe import . |core.enums'enum-set-universe|)
   (enum-set-indexer import . |core.enums'enum-set-indexer|)
   (enum-set-constructor import . |core.enums'enum-set-constructor|)
   (enum-set->list import . |core.enums'enum-set->list|)
   (enum-set-member? import . |core.enums'enum-set-member?|)
   (enum-set-subset? import . |core.enums'enum-set-subset?|)
   (enum-set=? import . |core.enums'enum-set=?|)
   (enum-set-union import . |core.enums'enum-set-union|)
   (enum-set-intersection import . |core.enums'enum-set-intersection|)
   (enum-set-difference import . |core.enums'enum-set-difference|)
   (enum-set-complement import . |core.enums'enum-set-complement|)
   (enum-set-projection import . |core.enums'enum-set-projection|)
   (define-enumeration import . |core.enums'define-enumeration|))
 (apply.gloc.of |.intern-scheme-library| "../stdlib/core/enums.scm" . 6145))

((close
   (1 0)
   (push.iloc.0 . 0)
   (apply.gloc.of |core.optimize'variable-functional?| "../stdlib/core/optimize.scm" . 485440))
 (set.gloc.of |.fn5.1`5|)
 (close
   (1 0)
   (push.gloc.of |core.optimize'ht-variable-pinned|)
   (push.iloc.0 . 0)
   (push.const . #t)
   (ret.subr.gloc.of |.core-hashtable-set!| "../stdlib/core/optimize.scm" . 374801))
 (set.gloc.of |.fn22.1`22|)
 (close
   (1 0)
   (push.gloc.of |core.optimize'ht-lambda-node|)
   (push.cadr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 993394)
   (subr.gloc.of |.core-hashtable-contains?| 2 "../stdlib/core/optimize.scm" . 993353)
   (if.false.ret)
   (push.iloc.0 . 0)
   (ret.subr.gloc.of |.car| "../stdlib/core/optimize.scm" . 993404))
 (set.gloc.of |.fn8.1`8|)
 (close
   (0 0 . traverse-lambda-node)
   (push.gloc.of |.fn36.1`36|)
   (push.gloc.of |core.optimize'ht-lambda-node|)
   (push.subr.gloc.of |.core-hashtable->alist| 1 "../stdlib/core/optimize.scm" . 489493)
   (apply.gloc.of |.for-each| "../stdlib/core/optimize.scm" . 478217))
 (set.gloc.of |traverse-lambda-node`165|)
 (close
   (1 0)
   (push.gloc.of |core.optimize'ht-variable-binding|)
   (push.iloc.0 . 0)
   (subr.gloc.of |.core-hashtable-contains?| 2 "../stdlib/core/optimize.scm" . 374801)
   (if.true.ret)
   (call
     (push.iloc.0 . 0)
     (subr.gloc.of |.top-level-bound?| 1 "../stdlib/core/optimize.scm" . 374801)
     (if.false.ret)
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.top-level-value| 1 "../stdlib/core/optimize.scm" . 374801)
     (gloc.of |core.optimize'denote-call/cc|)
     (ret.eq? "../stdlib/core/optimize.scm" . 374801))
   (push)
   (ret.subr.gloc.of |.not| "../stdlib/core/optimize.scm" . 374801))
 (set.gloc.of |.fn44.1`44|)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (apply.gloc.of |core.optimize'variable-top-level?| "../stdlib/core/optimize.scm" . 487488))
 (set.gloc.of |.fn69.1`69|)
 (close
   (1 0)
   (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1084473)
   (push.const . stack)
   (apply.gloc.of |core.optimize'closure-attribute-set!| "../stdlib/core/optimize.scm" . 1084449))
 (set.gloc.of |.fn37.1`37|)
 (close (2 0) (ret.iloc 0 . 0))
 (set.gloc.of |.fn2.1`2|)
 (close
   (1 0)
   (push.gloc.of |core.optimize'ht-variable-stackables|)
   (push.iloc.0 . 0)
   (ret.subr.gloc.of |.core-hashtable-contains?| "../stdlib/core/optimize.scm" . 1016885))
 (set.gloc.of |.fn60.1`60|)
 (close
   (1 0 . make-depend-list)
   (call
     (push.iloc.0 . 0)
     (apply.gloc.of |core.optimize'get-free-variables| "../stdlib/core/optimize.scm" . 505878))
   (push)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (push.iloc.0 . 0)
     (subr.gloc.of |.list?| 1 "../stdlib/core/optimize.scm" . 507936)
     (if.false.ret)
     (call
       (push.gloc.of |core.optimize'variable-top-level?|)
       (push.iloc.0 . 0)
       (apply.gloc.of |core.lists'remp| "../stdlib/core/optimize.scm" . 508972))
     (push)
     (extend . 1)
     (iloc.0 . 0)
     (if.not.pair?.ret.const . #f)
     (push.iloc 2 . 0)
     (iloc.0 . 0)
     (ret.cons "../stdlib/core/optimize.scm" . 511015))
   (ret.const . #f))
 (set.gloc.of |make-depend-list`189|)
 (close
   (1 0)
   (push.gloc.of |core.optimize'ht-variable-formals|)
   (push.iloc.0 . 0)
   (push.const . #t)
   (ret.subr.gloc.of |.core-hashtable-set!| "../stdlib/core/optimize.scm" . 374801))
 (set.gloc.of |.fn28.1`28|)
 (close
   (1 0 . loop)
   (call
     (push.iloc.0 . 0)
     (apply.gloc.of |core.optimize'pretty| "../stdlib/core/optimize.scm" . 1141780))
   (push)
   (extend . 1)
   (push.iloc.0 . 0)
   (iloc.1 . 0)
   (if.eq? (ret.iloc 1 . 0))
   (touch.gloc.of |loop`677|)
   (push.iloc.0 . 0)
   (apply.gloc.of |loop`677| "../stdlib/core/optimize.scm" . 1143831))
 (set.gloc.of |loop`677|)
 (close
   (1 0 . post-transform)
   (call
     (push.iloc.0 . 0)
     (apply.gloc.of |core.optimize'process-stackable| "../stdlib/core/optimize.scm" . 1083403))
   (call
     (push.gloc.of |.fn37.1`37|)
     (push.gloc.of |core.optimize'ht-variable-stackables|)
     (push.subr.gloc.of |.core-hashtable->alist| 1 "../stdlib/core/optimize.scm" . 1085461)
     (apply.gloc.of |.for-each| "../stdlib/core/optimize.scm" . 1084427))
   (ret.iloc 0 . 0))
 (set.gloc.of |post-transform`639|)
 (close
   (0 0 . resolve-mutual-recursion)
   (call
     (push.gloc.of |.values|)
     (call
       (push.gloc.of |.fn13.1`13|)
       (push.gloc.of |core.optimize'ht-variable-binding|)
       (push.subr.gloc.of |.core-hashtable->alist| 1 "../stdlib/core/optimize.scm" . 540703)
       (apply.gloc.of |.map| "../stdlib/core/optimize.scm" . 539674))
     (push)
     (apply.gloc.of |core.lists'filter| "../stdlib/core/optimize.scm" . 538642))
   (push)
   (extend . 1)
   (iloc.0 . 0)
   (if.not.pair?.ret.const . #f)
   (call
     (push.close
       (1 0)
       (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 545830)
       (call
         (call
           (touch.gloc.of |make-mutual-list`189|)
           (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 547897)
           (push.iloc.1 . 0)
           (push.const)
           (push.const)
           (apply.gloc.of |make-mutual-list`189| "../stdlib/core/optimize.scm" . 547879))
         (push)
         (apply.gloc.of
           |core.lists'remove-duplicate-symbols|
           "../stdlib/core/optimize.scm"
           .
           546854))
       (ret.cons "../stdlib/core/optimize.scm" . 545824))
     (push.iloc.0 . 0)
     (apply.gloc.of |.map| "../stdlib/core/optimize.scm" . 544793))
   (push)
   (extend . 1)
   (push.close
     (1 0)
     (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 551976)
     (extend . 1)
     (iloc.0 . 0)
     (if.not.pair?.ret.const . #f)
     (call
       (push.close
         (1 0)
         (push.iloc.0 . 0)
         (push.iloc 3 . 0)
         (push.subr.gloc.of |.assq| 2 "../stdlib/core/optimize.scm" . 555070)
         (extend . 1)
         (iloc.0 . 0)
         (if.true
           (touch.gloc.of |list-elts=?`189|)
           (push.iloc 2 . 0)
           (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 555124)
           (apply.gloc.of |list-elts=?`189| "../stdlib/core/optimize.scm" . 555108))
         (push.iloc.1 . 0)
         (apply.gloc.of |core.optimize'variable-top-level?| "../stdlib/core/optimize.scm" . 556099))
       (push.iloc.0 . 0)
       (apply.gloc.of |core.lists'for-all| "../stdlib/core/optimize.scm" . 552992))
     (if.true
       (call
         (touch.gloc.of |lift-variables`189|)
         (push.iloc.0 . 0)
         (apply.gloc.of |lift-variables`189| "../stdlib/core/optimize.scm" . 559155))
       (ret.const . #t))
     (ret.const . #f))
   (push.iloc.0 . 0)
   (apply.gloc.of |core.lists'exists| "../stdlib/core/optimize.scm" . 543762))
 (set.gloc.of |resolve-mutual-recursion`165|)
 (close
   (1 0 . lift-variables)
   (push.gloc.of |.fn75.1`75|)
   (push.iloc.0 . 0)
   (apply.gloc.of |.for-each| "../stdlib/core/optimize.scm" . 496655))
 (set.gloc.of |lift-variables`189|)
 (close
   (1 0)
   (push.const . #t)
   (push.const . "  variable: ~s~%")
   (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 218161)
   (subr.gloc.of |.format| 3 "../stdlib/core/optimize.scm" . 218131)
   (push.const . #t)
   (push.const . "  expr: ~s~%")
   (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 219181)
   (subr.gloc.of |.format| 3 "../stdlib/core/optimize.scm" . 219155)
   (push.const . #t)
   (push.const . "  stat: ~s~%---~%")
   (push.gloc.of |core.optimize'ht-lambda-node|)
   (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 220245)
   (push.const . #f)
   (push.subr.gloc.of |.core-hashtable-ref| 3 "../stdlib/core/optimize.scm" . 220210)
   (ret.subr.gloc.of |.format| "../stdlib/core/optimize.scm" . 220179))
 (set.gloc.of |.fn3.1`3|)
 (close
   (1 0)
   (push.gloc.of |core.optimize'ht-variable-binding|)
   (push.iloc.0 . 0)
   (subr.gloc.of |.core-hashtable-contains?| 2 "../stdlib/core/optimize.scm" . 374801)
   (if.true.ret)
   (call
     (push.iloc.0 . 0)
     (subr.gloc.of |.top-level-bound?| 1 "../stdlib/core/optimize.scm" . 374801)
     (if.false.ret)
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.top-level-value| 1 "../stdlib/core/optimize.scm" . 374801)
     (gloc.of |core.optimize'denote-call/cc|)
     (ret.eq? "../stdlib/core/optimize.scm" . 374801))
   (push)
   (ret.subr.gloc.of |.not| "../stdlib/core/optimize.scm" . 374801))
 (set.gloc.of |.fn24.1`24|)
 (close
   (1 0)
   (car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1121344)
   (if.symbol?
     (push.const . define)
     (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1121344)
     (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1121358)
     (ret.subr.gloc.of |.list| "../stdlib/core/optimize.scm" . 1122359))
   (push.const . define)
   (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1121358)
   (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1121344)
   (ret.subr.gloc.of |.list| "../stdlib/core/optimize.scm" . 1122359))
 (set.gloc.of |.fn38.1`38|)
 (close
   (0 0 . traverse-variable-binding)
   (push.gloc.of |.fn29.1`29|)
   (push.const . #f)
   (push.gloc.of |core.optimize'ht-variable-binding|)
   (push.subr.gloc.of |.core-hashtable->alist| 1 "../stdlib/core/optimize.scm" . 475158)
   (apply.gloc.of |core.lists'fold-left| "../stdlib/core/optimize.scm" . 454665))
 (set.gloc.of |traverse-variable-binding`165|)
 (close
   (1 0)
   (touch.gloc.of |make-depend-list`189|)
   (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 539709)
   (apply.gloc.of |make-depend-list`189| "../stdlib/core/optimize.scm" . 539691))
 (set.gloc.of |.fn13.1`13|)
 (close
   (2 0 . loop)
   (iloc.0 . 0)
   (if.null? (ret.iloc 0 . 1))
   (call
     (touch.gloc.of |concatenate?`85|)
     (push.iloc.0 . 0)
     (apply.gloc.of |concatenate?`85| "../stdlib/core/optimize.scm" . 345105))
   (if.true
     (touch.gloc.of |loop`90|)
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.cdar| 1 "../stdlib/core/optimize.scm" . 346135)
     (call
       (touch.gloc.of |loop`90|)
       (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 347165)
       (push.iloc.0 . 1)
       (apply.gloc.of |loop`90| "../stdlib/core/optimize.scm" . 347159))
     (push)
     (apply.gloc.of |loop`90| "../stdlib/core/optimize.scm" . 346129))
   (iloc.0 . 1)
   (if.null? (ret.iloc 0 . 0))
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (ret.subr.gloc.of |.append| "../stdlib/core/optimize.scm" . 351256))
 (set.gloc.of |loop`90|)
 (close
   (0 0 . loop)
   (call
     (touch.gloc.of |traverse-variable-binding`165|)
     (apply.gloc.of |traverse-variable-binding`165| "../stdlib/core/optimize.scm" . 587792))
   (if.true
     (touch.gloc.of |loop`251|)
     (apply.gloc.of |loop`251| "../stdlib/core/optimize.scm" . 587820))
   (call
     (touch.gloc.of |resolve-mutual-recursion`165|)
     (apply.gloc.of |resolve-mutual-recursion`165| "../stdlib/core/optimize.scm" . 588816))
   (if.true
     (touch.gloc.of |loop`251|)
     (apply.gloc.of |loop`251| "../stdlib/core/optimize.scm" . 588843))
   (ret.const.unspec))
 (set.gloc.of |loop`251|)
 (close
   (1 0)
   (push.gloc.of |core.optimize'ht-lambda-node|)
   (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 480321)
   (push.const . #f)
   (push.subr.gloc.of |.core-hashtable-ref| 3 "../stdlib/core/optimize.scm" . 480286)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (iloc.0 . 0)
     (if.null?
       (push.gloc.of |core.optimize'ht-lambda-node|)
       (push.car.iloc (1 . 0) "../stdlib/core/optimize.scm" . 483406)
       (push.const . functable)
       (ret.subr.gloc.of |.core-hashtable-set!| "../stdlib/core/optimize.scm" . 483370))
     (iloc.0 . 0)
     (if.not.pair?.ret.const . #t)
     (call
       (push.gloc.of |.fn5.1`5|)
       (push.iloc.0 . 0)
       (apply.gloc.of |core.lists'for-all| "../stdlib/core/optimize.scm" . 485418))
     (if.true
       (push.gloc.of |core.optimize'ht-lambda-node|)
       (push.car.iloc (1 . 0) "../stdlib/core/optimize.scm" . 486478)
       (push.const . functable)
       (ret.subr.gloc.of |.core-hashtable-set!| "../stdlib/core/optimize.scm" . 486442))
     (call
       (push.gloc.of |.fn69.1`69|)
       (push.iloc.0 . 0)
       (apply.gloc.of |core.lists'for-all| "../stdlib/core/optimize.scm" . 487466))
     (if.true
       (push.gloc.of |core.optimize'ht-lambda-node|)
       (push.car.iloc (1 . 0) "../stdlib/core/optimize.scm" . 488526)
       (push.const . liftable)
       (ret.subr.gloc.of |.core-hashtable-set!| "../stdlib/core/optimize.scm" . 488490))
     (ret.const.unspec))
   (ret.const.unspec))
 (set.gloc.of |.fn36.1`36|)
 (close
   (1 0)
   (push.const . #t)
   (push.const . "  expr: ~s~%")
   (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 209965)
   (subr.gloc.of |.format| 3 "../stdlib/core/optimize.scm" . 209939)
   (push.const . #t)
   (push.const . "  free: ~s~%---~%")
   (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 210994)
   (ret.subr.gloc.of |.format| "../stdlib/core/optimize.scm" . 210963))
 (set.gloc.of |.fn25.1`25|)
 (close
   (1 0)
   (push.gloc.of |core.optimize'ht-variable-stackables|)
   (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1061982)
   (ret.subr.gloc.of |.core-hashtable-contains?| "../stdlib/core/optimize.scm" . 1061933))
 (set.gloc.of |.fn14.1`14|)
 (close
   (4 0 . make-mutual-list)
   (push.iloc.0 . 0)
   (push.iloc.0 . 2)
   (subr.gloc.of |.memq| 2 "../stdlib/core/optimize.scm" . 516118)
   (if.true (ret.iloc 0 . 3))
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.subr.gloc.of |.assq| 2 "../stdlib/core/optimize.scm" . 517142)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (extend.enclose+
       (2 0 . loop)
       (iloc.0 . 0)
       (if.null? (ret.iloc 0 . 1))
       (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 522285)
       (extend . 1)
       (push.iloc 4 . 0)
       (iloc.0 . 0)
       (if.eq?
         (push.cdr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 524339)
         (push.iloc.1 . 1)
         (apply.iloc+ (2 . 0) "../stdlib/core/optimize.scm" . 524333))
       (push.cdr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 526387)
       (call
         (touch.gloc.of |make-mutual-list`189|)
         (push.iloc.0 . 0)
         (push.iloc 4 . 1)
         (push.iloc 4 . 0)
         (iloc 4 . 2)
         (push.cons)
         (push.iloc.0 . 0)
         (iloc.1 . 1)
         (push.cons)
         (apply.gloc.of |make-mutual-list`189| "../stdlib/core/optimize.scm" . 527411))
       (push)
       (apply.iloc+ (2 . 0) "../stdlib/core/optimize.scm" . 526381))
     (push.iloc.1 . 0)
     (push.iloc 2 . 3)
     (apply.iloc+ (0 . 0) "../stdlib/core/optimize.scm" . 519195))
   (push.iloc.1 . 0)
   (iloc.1 . 3)
   (ret.cons "../stdlib/core/optimize.scm" . 529430))
 (set.gloc.of |make-mutual-list`189|)
 (close
   (1 0)
   (cadr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 374801)
   (if.true.ret)
   (ret.const begin #f))
 (set.gloc.of |.fn23.1`23|)
 (close
   (2 0 . loop)
   (call (apply.gloc.of |core.optimize'clear-context| "../stdlib/core/optimize.scm" . 1099785))
   (call
     (push.iloc.0 . 0)
     (push.const)
     (push.const)
     (push.const . #f)
     (apply.gloc.of |core.optimize'collect-context| "../stdlib/core/optimize.scm" . 1100809))
   (call
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (apply.gloc.of |core.optimize'crawl-lambda-lifting| "../stdlib/core/optimize.scm" . 1101854))
   (push)
   (call
     (push.iloc.0 . 0)
     (apply.gloc.of |core.optimize'crawl-beta-subst| "../stdlib/core/optimize.scm" . 1102884))
   (push)
   (extend . 2)
   (call
     (gloc.of |core.optimize'max-transform-pass|)
     (>=.iloc (1 . 1) "../stdlib/core/optimize.scm" . 1116183)
     (if.false.ret)
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.core-hashtable-size| 1 "../stdlib/core/optimize.scm" . 1117214)
     (push.const . 0)
     (subr.gloc.of |.>| 2 "../stdlib/core/optimize.scm" . 1117211)
     (if.true.ret)
     (push.iloc.0 . 1)
     (push.subr.gloc.of |.core-hashtable-size| 1 "../stdlib/core/optimize.scm" . 1118238)
     (push.const . 0)
     (ret.subr.gloc.of |.>| "../stdlib/core/optimize.scm" . 1118235))
   (if.true
     (touch.gloc.of |loop`648|)
     (push.const . begin)
     (call
       (push.close
         (1 0)
         (extend.enclose+
           (1 0 . loop)
           (call
             (push.iloc.0 . 0)
             (push.iloc 3 . 0)
             (push.iloc 3 . 1)
             (apply.gloc.of |core.optimize'transcribe| "../stdlib/core/optimize.scm" . 1130554))
           (push)
           (extend . 1)
           (push.iloc.0 . 0)
           (iloc.1 . 0)
           (if.eq? (ret.iloc 1 . 0))
           (push.iloc.0 . 0)
           (apply.iloc+ (2 . 0) "../stdlib/core/optimize.scm" . 1132605))
         (push.iloc.1 . 0)
         (apply.iloc+ (0 . 0) "../stdlib/core/optimize.scm" . 1128493))
       (call
         (push.const . begin)
         (call
           (push.gloc.of |.fn38.1`38|)
           (push.iloc.0 . 0)
           (push.subr.gloc.of |.core-hashtable->alist| 1 "../stdlib/core/optimize.scm" . 1125427)
           (apply.gloc.of |.map| "../stdlib/core/optimize.scm" . 1120302))
         (push.cons)
         (push.iloc.1 . 0)
         (push.subr.gloc.of |.list| 2 "../stdlib/core/optimize.scm" . 1133611)
         (apply.gloc.of |core.optimize'flatten-begin| "../stdlib/core/optimize.scm" . 1133611))
       (push)
       (apply.gloc.of |.map| "../stdlib/core/optimize.scm" . 1101833))
     (push.cons)
     (push.n+.iloc (1 . 1) 1 "../stdlib/core/optimize.scm" . 1134625)
     (apply.gloc.of |loop`648| "../stdlib/core/optimize.scm" . 1101833))
   (touch.gloc.of |post-transform`639|)
   (push.iloc.1 . 0)
   (apply.gloc.of |post-transform`639| "../stdlib/core/optimize.scm" . 1136658))
 (set.gloc.of |loop`648|)
 (close
   (2 0 . flatten-expression)
   (call
     (extend.enclose+
       (2 0 . loop)
       (iloc.0 . 0)
       (if.null? (ret.iloc 0 . 1))
       (call
         (car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 875553)
         (if.not.pair?.ret.const . #f)
         (push.iloc 2 . 1)
         (push.iloc.0 . 0)
         (subr.gloc.of |.caar| 1 "../stdlib/core/optimize.scm" . 875573)
         (ret.eq? "../stdlib/core/optimize.scm" . 875564))
       (if.true
         (push.iloc.0 . 0)
         (push.subr.gloc.of |.cdar| 1 "../stdlib/core/optimize.scm" . 876571)
         (call
           (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 877601)
           (push.iloc.0 . 1)
           (apply.iloc+ (1 . 0) "../stdlib/core/optimize.scm" . 877595))
         (push)
         (apply.iloc+ (1 . 0) "../stdlib/core/optimize.scm" . 876565))
       (call
         (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 879653)
         (push.iloc.0 . 1)
         (apply.iloc+ (1 . 0) "../stdlib/core/optimize.scm" . 879647))
       (push)
       (extend . 1)
       (push.iloc.0 . 0)
       (cdr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 880675)
       (if.eq? (ret.iloc 1 . 0))
       (push.car.iloc (1 . 0) "../stdlib/core/optimize.scm" . 882721)
       (iloc.0 . 0)
       (ret.cons "../stdlib/core/optimize.scm" . 882715))
     (push.iloc.1 . 0)
     (push.const)
     (apply.iloc+ (0 . 0) "../stdlib/core/optimize.scm" . 873484))
   (push)
   (push.iloc.0 . 0)
   (call (apply.gloc.of |core.optimize'annotate-hook| "../stdlib/core/optimize.scm" . 872460))
   (apply))
 (set.gloc.of |flatten-expression`432|)
 (close
   (1 0)
   (call
     (push.iloc.0 . 0)
     (const . #f)
     (if.eq?
       (push.gloc.of |.fn49.1`49|)
       (apply.gloc.of |.current-after-expansion-hook| "../stdlib/core/optimize.scm" . 1169424))
     (push.gloc.of |core.optimize'optimize|)
     (apply.gloc.of |.current-after-expansion-hook| "../stdlib/core/optimize.scm" . 1170448))
   (ret.iloc 0 . 0))
 (set.gloc.of |.fn48.1`48|)
 (close
   (2 0)
   (push.gloc.of |core.optimize'ht-lambda-node|)
   (push.cdr.iloc (0 . 1) "../stdlib/core/optimize.scm" . 456770)
   (push.const . #f)
   (push.subr.gloc.of |.core-hashtable-ref| 3 "../stdlib/core/optimize.scm" . 456735)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (iloc.0 . 0)
     (if.null?
       (push.gloc.of |core.optimize'ht-lambda-node|)
       (push.cdr.iloc (1 . 1) "../stdlib/core/optimize.scm" . 459855)
       (push.const . functable)
       (subr.gloc.of |.core-hashtable-set!| 3 "../stdlib/core/optimize.scm" . 459819)
       (ret.const . #t))
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.pair?| 1 "../stdlib/core/optimize.scm" . 461872)
     (subr.gloc.of |.not| 1 "../stdlib/core/optimize.scm" . 461867)
     (if.true (ret.iloc 1 . 0))
     (call
       (cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 462903)
       (if.not.null?.ret.const . #f)
       (push.car.iloc (1 . 1) "../stdlib/core/optimize.scm" . 462920)
       (car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 462928)
       (ret.eq? "../stdlib/core/optimize.scm" . 462915))
     (if.true
       (push.gloc.of |core.optimize'ht-lambda-node|)
       (push.cdr.iloc (1 . 1) "../stdlib/core/optimize.scm" . 463951)
       (push.const . functable)
       (subr.gloc.of |.core-hashtable-set!| 3 "../stdlib/core/optimize.scm" . 463915)
       (ret.const . #t))
     (call
       (push.close
         (1 0)
         (push.car.iloc (2 . 1) "../stdlib/core/optimize.scm" . 465994)
         (iloc.0 . 0)
         (if.eq?.ret.const . #t)
         (push.iloc.0 . 0)
         (apply.gloc.of
           |core.optimize'variable-functional?|
           "../stdlib/core/optimize.scm"
           .
           466006))
       (push.iloc.0 . 0)
       (apply.gloc.of |core.lists'for-all| "../stdlib/core/optimize.scm" . 465963))
     (if.true
       (push.gloc.of |core.optimize'ht-lambda-node|)
       (push.cdr.iloc (1 . 1) "../stdlib/core/optimize.scm" . 467023)
       (push.const . functable)
       (subr.gloc.of |.core-hashtable-set!| 3 "../stdlib/core/optimize.scm" . 466987)
       (ret.const . #t))
     (call
       (push.close
         (1 0)
         (push.car.iloc (2 . 1) "../stdlib/core/optimize.scm" . 469066)
         (iloc.0 . 0)
         (if.eq?.ret.const . #t)
         (push.iloc.0 . 0)
         (apply.gloc.of |core.optimize'variable-top-level?| "../stdlib/core/optimize.scm" . 469078))
       (push.iloc.0 . 0)
       (apply.gloc.of |core.lists'for-all| "../stdlib/core/optimize.scm" . 469035))
     (if.true
       (push.gloc.of |core.optimize'ht-lambda-node|)
       (push.cdr.iloc (1 . 1) "../stdlib/core/optimize.scm" . 470095)
       (push.const . liftable)
       (subr.gloc.of |.core-hashtable-set!| 3 "../stdlib/core/optimize.scm" . 470059)
       (ret.const . #t))
     (ret.iloc 1 . 0))
   (ret.iloc 1 . 0))
 (set.gloc.of |.fn29.1`29|)
 (close (3 0) (ret.iloc 0 . 0))
 (set.gloc.of |.fn49.1`49|)
 (close
   (1 0 . concatenate?)
   (car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 336919)
   (if.not.pair?.ret.const . #f)
   (call
     (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 337947)
     (subr.gloc.of |.list?| 1 "../stdlib/core/optimize.scm" . 337940)
     (if.true.ret)
     (push.const . #f)
     (push.const . "expression is not a proper list")
     (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 339019)
     (apply.gloc.of |.syntax-violation| "../stdlib/core/optimize.scm" . 338964))
   (if.false.ret)
   (push.const . begin)
   (push.iloc.0 . 0)
   (subr.gloc.of |.caar| 1 "../stdlib/core/optimize.scm" . 339996)
   (ret.eq? "../stdlib/core/optimize.scm" . 339984))
 (set.gloc.of |concatenate?`85|)
 (close
   (1 0)
   (push.gloc.of |core.optimize'ht-lambda-node|)
   (push.gloc.of |core.optimize'ht-variable-binding|)
   (push.iloc.0 . 0)
   (push.const . #f)
   (push.subr.gloc.of |.core-hashtable-ref| 3 "../stdlib/core/optimize.scm" . 499740)
   (push.const . liftable)
   (ret.subr.gloc.of |.core-hashtable-set!| "../stdlib/core/optimize.scm" . 497691))
 (set.gloc.of |.fn75.1`75|)
 (close
   (1 0)
   (push.gloc.of |core.optimize'ht-variable-operands-refc|)
   (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1027161)
   (subr.gloc.of |.core-hashtable-contains?| 2 "../stdlib/core/optimize.scm" . 1027109)
   (if.true.ret)
   (push.gloc.of |core.optimize'ht-variable-defined|)
   (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1028179)
   (subr.gloc.of |.core-hashtable-contains?| 2 "../stdlib/core/optimize.scm" . 1028133)
   (if.true.ret)
   (push.gloc.of |core.optimize'ht-variable-pinned|)
   (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1029202)
   (subr.gloc.of |.core-hashtable-contains?| 2 "../stdlib/core/optimize.scm" . 1029157)
   (if.true.ret)
   (push.gloc.of |core.optimize'ht-variable-letrec|)
   (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1030231)
   (subr.gloc.of |.core-hashtable-contains?| 2 "../stdlib/core/optimize.scm" . 1030186)
   (if.false.ret.const . #t)
   (push.gloc.of |core.optimize'ht-lambda-node|)
   (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1031252)
   (push.const . #f)
   (push.subr.gloc.of |.core-hashtable-ref| 3 "../stdlib/core/optimize.scm" . 1031217)
   (subr.gloc.of |.list?| 1 "../stdlib/core/optimize.scm" . 1031210)
   (if.false.ret.const . #t)
   (push.iloc.0 . 0)
   (push.subr.gloc.of |.caddr| 1 "../stdlib/core/optimize.scm" . 1032241)
   (subr.gloc.of |.list?| 1 "../stdlib/core/optimize.scm" . 1032234)
   (if.false.ret.const . #t)
   (push.iloc.0 . 0)
   (push.subr.gloc.of |.caddr| 1 "../stdlib/core/optimize.scm" . 1033275)
   (push.subr.gloc.of |.length| 1 "../stdlib/core/optimize.scm" . 1033267)
   (push.const . 1)
   (push.subr.gloc.of |.+| 2 "../stdlib/core/optimize.scm" . 1033264)
   (extend . 1)
   (push.close
     (1 0)
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.length| 1 "../stdlib/core/optimize.scm" . 1034307)
     (push.iloc.1 . 0)
     (push.subr.gloc.of |.=| 2 "../stdlib/core/optimize.scm" . 1034304)
     (ret.subr.gloc.of |.not| "../stdlib/core/optimize.scm" . 1034299))
   (push.gloc.of |core.optimize'ht-variable-callsites|)
   (push.car.iloc (1 . 0) "../stdlib/core/optimize.scm" . 1035353)
   (push.const)
   (push.subr.gloc.of |.core-hashtable-ref| 3 "../stdlib/core/optimize.scm" . 1035311)
   (apply.gloc.of |core.lists'exists| "../stdlib/core/optimize.scm" . 1034279))
 (set.gloc.of |.fn15.1`15|)
 (close
   (1 0)
   (push.gloc.of |core.optimize'ht-variable-pinned|)
   (push.iloc.0 . 0)
   (push.const . #t)
   (ret.subr.gloc.of |.core-hashtable-set!| "../stdlib/core/optimize.scm" . 374801))
 (set.gloc.of |.fn31.1`31|)
 (close
   (1 0)
   (call
     (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1065009)
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.cdddr| 1 "../stdlib/core/optimize.scm" . 1065017)
     (push.const . #t)
     (apply.gloc.of |core.optimize'check-stackable-seq| "../stdlib/core/optimize.scm" . 1064988))
   (if.false.ret)
   (call
     (push.gloc.of |core.optimize'ht-binding-body-mutual|)
     (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1066062)
     (push.const . #f)
     (push.subr.gloc.of |.core-hashtable-ref| 3 "../stdlib/core/optimize.scm" . 1066019)
     (extend . 1)
     (iloc.0 . 0)
     (if.true
       (push.close
         (1 0)
         (push.car.iloc (2 . 0) "../stdlib/core/optimize.scm" . 1068113)
         (push.iloc.0 . 0)
         (push.const . #f)
         (apply.gloc.of |core.optimize'check-stackable| "../stdlib/core/optimize.scm" . 1068096))
       (call
         (push.cdr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 1069111)
         (push.iloc.0 . 0)
         (apply.gloc.of |core.lists'remq| "../stdlib/core/optimize.scm" . 1069105))
       (push)
       (apply.gloc.of |core.lists'for-all| "../stdlib/core/optimize.scm" . 1068072))
     (ret.const . #t))
   (if.false.ret)
   (call
     (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1071153)
     (push.gloc.of |core.optimize'ht-binding-body-common|)
     (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1071204)
     (push.const)
     (push.subr.gloc.of |.core-hashtable-ref| 3 "../stdlib/core/optimize.scm" . 1071161)
     (push.const . #t)
     (apply.gloc.of |core.optimize'check-stackable-seq| "../stdlib/core/optimize.scm" . 1071132))
   (if.false.ret)
   (push.gloc.of |core.optimize'ht-variable-stackables|)
   (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1074250)
   (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1074258)
   (ret.subr.gloc.of |.core-hashtable-set!| "../stdlib/core/optimize.scm" . 1074206))
 (set.gloc.of |.fn73.1`73|)
 (close
   (2 0 . list-elts=?)
   (push.iloc.0 . 0)
   (push.subr.gloc.of |.length| 1 "../stdlib/core/optimize.scm" . 533527)
   (push.iloc.0 . 1)
   (push.subr.gloc.of |.length| 1 "../stdlib/core/optimize.scm" . 533541)
   (subr.gloc.of |.=| 2 "../stdlib/core/optimize.scm" . 533524)
   (if.false.ret)
   (push.close
     (1 0)
     (push.iloc.0 . 0)
     (push.iloc.1 . 1)
     (ret.subr.gloc.of |.memq| "../stdlib/core/optimize.scm" . 534569))
   (push.iloc.0 . 0)
   (apply.gloc.of |core.lists'for-all| "../stdlib/core/optimize.scm" . 534548))
 (set.gloc.of |list-elts=?`189|)
 (close (2 0) (ret.iloc 0 . 0))
 (set.gloc.of |.fn7.1`7|)
 (close
   (1 0 . loop)
   (iloc.0 . 0)
   (if.null?.ret.const)
   (call
     (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 852002)
     (apply.gloc.of |core.optimize'pretty| "../stdlib/core/optimize.scm" . 851994))
   (push)
   (call
     (touch.gloc.of |loop`425|)
     (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 852024)
     (apply.gloc.of |loop`425| "../stdlib/core/optimize.scm" . 852018))
   (push)
   (extend . 2)
   (call
     (push.iloc.0 . 0)
     (car.iloc (1 . 0) "../stdlib/core/optimize.scm" . 853027)
     (if.not.eq?.ret.const . #f)
     (push.iloc.0 . 1)
     (cdr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 853046)
     (ret.eq? "../stdlib/core/optimize.scm" . 853038))
   (if.true (ret.iloc 1 . 0))
   (push.iloc.0 . 0)
   (iloc.0 . 1)
   (ret.cons "../stdlib/core/optimize.scm" . 855062))
 (set.gloc.of |loop`425|)
 (call
   (push.const core parameters)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/optimize.scm" . 6145))
 (call
   (push.const core destructuring)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/optimize.scm" . 6145))
 (call
   (push.const core lists)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/optimize.scm" . 6145))
 (call
   (push.const core primitives)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/optimize.scm" . 6145))
 (const . 5)
 (set.gloc.of |core.optimize'max-transform-pass|)
 (const . "`")
 (set.gloc.of |core.optimize'noname-lambda-infix|)
 (const . "'")
 (set.gloc.of |core.optimize'library-variable-infix|)
 (call
   (subr.gloc.of |.make-core-hashtable| 0)
   (push)
   (extend . 1)
   (call
     (push.close
       (1 0)
       (push.iloc.1 . 0)
       (push.iloc.0 . 0)
       (push.subr.gloc.of |.top-level-value| 1 "../stdlib/core/optimize.scm" . 43061)
       (push.const . #t)
       (ret.subr.gloc.of |.core-hashtable-set!| "../stdlib/core/optimize.scm" . 43037))
     (push.const
       |.eq?|
       |.eqv?|
       |.equal?|
       |.procedure?|
       |.number?|
       |.complex?|
       |.real?|
       |.rational?|
       |.integer?|
       |.real-valued?|
       |.rational-valued?|
       |.integer-valued?|
       |.exact?|
       |.inexact?|
       |.=|
       |.<|
       |.>|
       |.<=|
       |.>=|
       |.zero?|
       |.positive?|
       |.negative?|
       |.odd?|
       |.even?|
       |.finite?|
       |.infinite?|
       |.nan?|
       |.not|
       |.boolean?|
       |.boolean=?|
       |.pair?|
       |.null?|
       |.list?|
       |.symbol?|
       |.symbol=?|
       |.char?|
       |.char=?|
       |.char<?|
       |.char>?|
       |.char<=?|
       |.char>=?|
       |.string?|
       |.string=?|
       |.string<?|
       |.string>?|
       |.string<=?|
       |.string>=?|
       |.vector?|
       |.flonum?|
       |.fl=?|
       |.fl<?|
       |.fl>?|
       |.fl<=?|
       |.fl>=?|
       |.flinteger?|
       |.flzero?|
       |.flpositive?|
       |.flnegative?|
       |.flodd?|
       |.fleven?|
       |.flfinite?|
       |.flinfinite?|
       |.flnan?|
       |.fixnum?|
       |.fx=?|
       |.fx<?|
       |.fx>?|
       |.fx<=?|
       |.fx>=?|
       |.fxzero?|
       |.fxpositive?|
       |.fxnegative?|
       |.fxodd?|
       |.fxeven?|
       |.identifier?|
       |.bound-identifier=?|
       |.free-identifier=?|
       |.record?|
       |.record-type-generative?|
       |.record-type-sealed?|
       |.record-type-opaque?|
       |.record-field-mutable?|
       |.record-type-descriptor?|
       |.record-type?|
       |.condition?|
       |.message-condition?|
       |.warning?|
       |.serious-condition?|
       |.error?|
       |.violation?|
       |.assertion-violation?|
       |.irritants-condition?|
       |.who-condition?|
       |.non-continuable-violation?|
       |.implementation-restriction-violation?|
       |.lexical-violation?|
       |.syntax-violation?|
       |.undefined-violation?|
       |.char-whitespace?|
       |.eof-object?|
       |.input-port?|
       |.output-port?|
       |.port?|
       |.nonblock-byte-ready?|
       |.port-has-port-position?|
       |.port-has-set-port-position!?|
       |.port-eof?|
       |.i/o-error?|
       |.i/o-read-error?|
       |.i/o-write-error?|
       |.i/o-invalid-position-error?|
       |.i/o-filename-error?|
       |.i/o-file-protection-error?|
       |.i/o-file-is-read-only-error?|
       |.i/o-file-already-exists-error?|
       |.i/o-file-does-not-exist-error?|
       |.i/o-port-error?|
       |.i/o-decoding-error?|
       |.i/o-encoding-error?|
       |.file-exists?|
       |.bytevector?|
       |.bytevector=?|
       |.unspecified?|
       |.tuple?|
       |.weak-mapping?|
       |.core-hashtable?|
       |.weak-core-hashtable?|
       |.core-hashtable-contains?|
       |.core-hashtable-mutable?|
       |.top-level-bound?|
       |.subr?|
       |.inexact|
       |.exact|
       |.max|
       |.min|
       |.+|
       |.*|
       |.-|
       |./|
       |.abs|
       |.div-and-mod|
       |.div|
       |.mod|
       |.div0-and-mod0|
       |.div0|
       |.mod0|
       |.gcd|
       |.lcm|
       |.numerator|
       |.denominator|
       |.floor|
       |.ceiling|
       |.truncate|
       |.round|
       |.rationalize|
       |.exp|
       |.log|
       |.sin|
       |.cos|
       |.tan|
       |.asin|
       |.acos|
       |.atan|
       |.sqrt|
       |.exact-integer-sqrt|
       |.expt|
       |.make-rectangular|
       |.make-polar|
       |.real-part|
       |.imag-part|
       |.magnitude|
       |.angle|
       |.number->string|
       |.string->number|
       |.cons|
       |.car|
       |.cdr|
       |.caar|
       |.cadr|
       |.cdar|
       |.cddr|
       |.caaar|
       |.caadr|
       |.cadar|
       |.caddr|
       |.cdaar|
       |.cdadr|
       |.cddar|
       |.cdddr|
       |.caaaar|
       |.caaadr|
       |.caadar|
       |.caaddr|
       |.cadaar|
       |.cadadr|
       |.caddar|
       |.cadddr|
       |.cdaaar|
       |.cdaadr|
       |.cdadar|
       |.cdaddr|
       |.cddaar|
       |.cddadr|
       |.cdddar|
       |.cddddr|
       |.list|
       |.length|
       |.append|
       |.reverse|
       |.list-tail|
       |.list-ref|
       |.symbol->string|
       |.string->symbol|
       |.char->integer|
       |.integer->char|
       |.make-string|
       |.string|
       |.string-length|
       |.string-ref|
       |.substring|
       |.string-append|
       |.string->list|
       |.list->string|
       |.string-copy|
       |.make-vector|
       |.vector|
       |.vector-length|
       |.vector-ref|
       |.vector->list|
       |.list->vector|
       |.values|
       |.cons*|
       |.memq|
       |.memv|
       |.member|
       |.assq|
       |.assv|
       |.assoc|
       |.list-head|
       |.datum->syntax|
       |.syntax->datum|
       |.syntax-transcribe|
       |.string-contains|
       |.top-level-value|
       |.unspecified|
       |.tuple|
       |.make-tuple|
       |.tuple-ref|
       |.tuple-length|
       |.tuple-index|
       |.tuple->list|
       |.make-core-hashtable|
       |.make-weak-core-hashtable|
       |.core-hashtable-ref|
       |.core-hashtable->alist|
       |.core-hashtable-size|
       |.core-hashtable-copy|
       |.core-hashtable-equivalence-function|
       |.core-hashtable-hash-function|)
     (apply.gloc.of |.for-each| "../stdlib/core/optimize.scm" . 43015))
   (push.iloc.0 . 0)
   (push.const . #t)
   (ret.subr.gloc.of |.core-hashtable-copy| "../stdlib/core/optimize.scm" . 153607))
 (set.gloc.of |core.optimize'ht-primitive-functions|)
 (call
   (subr.gloc.of |.make-core-hashtable| 0)
   (push)
   (extend . 1)
   (call
     (push.close
       (1 0)
       (push.iloc.1 . 0)
       (push.iloc.0 . 0)
       (push.subr.gloc.of |.top-level-value| 1 "../stdlib/core/optimize.scm" . 157749)
       (push.const . #t)
       (ret.subr.gloc.of |.core-hashtable-set!| "../stdlib/core/optimize.scm" . 157725))
     (push.const |.car| |.cdr| |.cadr| |.cddr|)
     (apply.gloc.of |.for-each| "../stdlib/core/optimize.scm" . 157703))
   (push.iloc.0 . 0)
   (push.const . #t)
   (ret.subr.gloc.of |.core-hashtable-copy| "../stdlib/core/optimize.scm" . 159751))
 (set.gloc.of |core.optimize'ht-inlinable-primitive-functions|)
 (call
   (subr.gloc.of |.make-core-hashtable| 0)
   (push)
   (extend . 1)
   (call
     (push.close
       (1 0)
       (push.iloc.1 . 0)
       (push.iloc.0 . 0)
       (push.subr.gloc.of |.top-level-value| 1 "../stdlib/core/optimize.scm" . 164917)
       (push.const . #t)
       (ret.subr.gloc.of |.core-hashtable-set!| "../stdlib/core/optimize.scm" . 164893))
     (push.const |.map| |.for-each|)
     (apply.gloc.of |.for-each| "../stdlib/core/optimize.scm" . 164871))
   (call
     (push.close
       (1 0)
       (push.iloc.1 . 0)
       (push.iloc.0 . 0)
       (push.const . #t)
       (ret.subr.gloc.of |.core-hashtable-set!| "../stdlib/core/optimize.scm" . 166941))
     (push.gloc.of |core.lists'find|)
     (push.gloc.of |core.lists'for-all|)
     (push.gloc.of |core.lists'exists|)
     (push.gloc.of |core.lists'filter|)
     (push.gloc.of |core.lists'partition|)
     (push.gloc.of |core.lists'fold-left|)
     (push.gloc.of |core.lists'fold-right|)
     (push.gloc.of |core.lists'assp|)
     (push.gloc.of |core.lists'memp|)
     (push.gloc.of |core.lists'remp|)
     (push.subr.gloc.of |.list| 10 "../stdlib/core/optimize.scm" . 167953)
     (apply.gloc.of |.for-each| "../stdlib/core/optimize.scm" . 166919))
   (push.iloc.0 . 0)
   (push.const . #t)
   (ret.subr.gloc.of |.core-hashtable-copy| "../stdlib/core/optimize.scm" . 168967))
 (set.gloc.of |core.optimize'ht-special-list-functions|)
 (subr.gloc.of |.make-core-hashtable| 0 "../stdlib/core/optimize.scm" . 171036)
 (set.gloc.of |core.optimize'ht-variable-refc|)
 (subr.gloc.of |.make-core-hashtable| 0 "../stdlib/core/optimize.scm" . 172063)
 (set.gloc.of |core.optimize'ht-variable-binding|)
 (subr.gloc.of |.make-core-hashtable| 0 "../stdlib/core/optimize.scm" . 173086)
 (set.gloc.of |core.optimize'ht-variable-letrec|)
 (subr.gloc.of |.make-core-hashtable| 0 "../stdlib/core/optimize.scm" . 174111)
 (set.gloc.of |core.optimize'ht-variable-defined|)
 (subr.gloc.of |.make-core-hashtable| 0 "../stdlib/core/optimize.scm" . 175135)
 (set.gloc.of |core.optimize'ht-variable-formals|)
 (subr.gloc.of |.make-core-hashtable| 0 "../stdlib/core/optimize.scm" . 176160)
 (set.gloc.of |core.optimize'ht-variable-assigned|)
 (subr.gloc.of |.make-core-hashtable| 0 "../stdlib/core/optimize.scm" . 177189)
 (set.gloc.of |core.optimize'ht-variable-operands-refc|)
 (subr.gloc.of |.make-core-hashtable| 0 "../stdlib/core/optimize.scm" . 178209)
 (set.gloc.of |core.optimize'ht-variable-callsites|)
 (subr.gloc.of |.make-core-hashtable| 0 "../stdlib/core/optimize.scm" . 179230)
 (set.gloc.of |core.optimize'ht-variable-pinned|)
 (subr.gloc.of |.make-core-hashtable| 0 "../stdlib/core/optimize.scm" . 180256)
 (set.gloc.of |core.optimize'ht-variable-privates|)
 (subr.gloc.of |.make-core-hashtable| 0 "../stdlib/core/optimize.scm" . 181282)
 (set.gloc.of |core.optimize'ht-variable-stackables|)
 (subr.gloc.of |.make-core-hashtable| 0 "../stdlib/core/optimize.scm" . 182298)
 (set.gloc.of |core.optimize'ht-lambda-node|)
 (subr.gloc.of |.make-core-hashtable| 0 "../stdlib/core/optimize.scm" . 183330)
 (set.gloc.of |core.optimize'ht-binding-body-common|)
 (subr.gloc.of |.make-core-hashtable| 0 "../stdlib/core/optimize.scm" . 184354)
 (set.gloc.of |core.optimize'ht-binding-body-mutual|)
 (close
   (0 0 . |core.optimize'clear-context|)
   (push.gloc.of |core.optimize'ht-variable-refc|)
   (subr.gloc.of |.core-hashtable-clear!| 1 "../stdlib/core/optimize.scm" . 188423)
   (push.gloc.of |core.optimize'ht-variable-binding|)
   (subr.gloc.of |.core-hashtable-clear!| 1 "../stdlib/core/optimize.scm" . 189447)
   (push.gloc.of |core.optimize'ht-variable-letrec|)
   (subr.gloc.of |.core-hashtable-clear!| 1 "../stdlib/core/optimize.scm" . 190471)
   (push.gloc.of |core.optimize'ht-variable-defined|)
   (subr.gloc.of |.core-hashtable-clear!| 1 "../stdlib/core/optimize.scm" . 191495)
   (push.gloc.of |core.optimize'ht-variable-formals|)
   (subr.gloc.of |.core-hashtable-clear!| 1 "../stdlib/core/optimize.scm" . 192519)
   (push.gloc.of |core.optimize'ht-variable-assigned|)
   (subr.gloc.of |.core-hashtable-clear!| 1 "../stdlib/core/optimize.scm" . 193543)
   (push.gloc.of |core.optimize'ht-variable-operands-refc|)
   (subr.gloc.of |.core-hashtable-clear!| 1 "../stdlib/core/optimize.scm" . 194567)
   (push.gloc.of |core.optimize'ht-variable-callsites|)
   (subr.gloc.of |.core-hashtable-clear!| 1 "../stdlib/core/optimize.scm" . 195591)
   (push.gloc.of |core.optimize'ht-variable-pinned|)
   (subr.gloc.of |.core-hashtable-clear!| 1 "../stdlib/core/optimize.scm" . 196615)
   (push.gloc.of |core.optimize'ht-variable-privates|)
   (subr.gloc.of |.core-hashtable-clear!| 1 "../stdlib/core/optimize.scm" . 197639)
   (push.gloc.of |core.optimize'ht-variable-stackables|)
   (subr.gloc.of |.core-hashtable-clear!| 1 "../stdlib/core/optimize.scm" . 198663)
   (push.gloc.of |core.optimize'ht-lambda-node|)
   (subr.gloc.of |.core-hashtable-clear!| 1 "../stdlib/core/optimize.scm" . 199687)
   (push.gloc.of |core.optimize'ht-binding-body-common|)
   (subr.gloc.of |.core-hashtable-clear!| 1 "../stdlib/core/optimize.scm" . 200711)
   (push.gloc.of |core.optimize'ht-binding-body-mutual|)
   (ret.subr.gloc.of |.core-hashtable-clear!| "../stdlib/core/optimize.scm" . 201735))
 (set.gloc.of |core.optimize'clear-context|)
 (push.const . |.call-with-current-continuation|)
 (subr.gloc.of |.top-level-value| 1 "../stdlib/core/optimize.scm" . 203802)
 (set.gloc.of |core.optimize'denote-call/cc|)
 (close
   (0 0 . |core.optimize'dump-lambda-node|)
   (push.const . #t)
   (push.const . ">>> dump ht-lambda-node~%")
   (subr.gloc.of |.format| 2 "../stdlib/core/optimize.scm" . 207879)
   (push.gloc.of |.fn25.1`25|)
   (push.gloc.of |core.optimize'ht-lambda-node|)
   (push.subr.gloc.of |.core-hashtable->alist| 1 "../stdlib/core/optimize.scm" . 211985)
   (apply.gloc.of |.for-each| "../stdlib/core/optimize.scm" . 208903))
 (set.gloc.of |core.optimize'dump-lambda-node|)
 (close
   (0 0 . |core.optimize'dump-variable-binding|)
   (push.const . #t)
   (push.const . ">>> dump ht-variable-binding~%")
   (subr.gloc.of |.format| 2 "../stdlib/core/optimize.scm" . 216071)
   (push.gloc.of |.fn3.1`3|)
   (push.gloc.of |core.optimize'ht-variable-binding|)
   (push.subr.gloc.of |.core-hashtable->alist| 1 "../stdlib/core/optimize.scm" . 221201)
   (apply.gloc.of |.for-each| "../stdlib/core/optimize.scm" . 217095))
 (set.gloc.of |core.optimize'dump-variable-binding|)
 (close
   (1 0 . |core.optimize'get-free-variables|)
   (push.gloc.of |core.optimize'ht-variable-binding|)
   (push.iloc.0 . 0)
   (push.const . #f)
   (push.subr.gloc.of |.core-hashtable-ref| 3 "../stdlib/core/optimize.scm" . 225294)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (push.gloc.of |core.optimize'ht-lambda-node|)
     (push.iloc.0 . 0)
     (push.const . #f)
     (ret.subr.gloc.of |.core-hashtable-ref| "../stdlib/core/optimize.scm" . 226333))
   (ret.const . #f))
 (set.gloc.of |core.optimize'get-free-variables|)
 (close
   (1 0 . |core.optimize'primitive-function?|)
   (push.iloc.0 . 0)
   (subr.gloc.of |.top-level-bound?| 1 "../stdlib/core/optimize.scm" . 231436)
   (if.false.ret)
   (push.gloc.of |core.optimize'ht-primitive-functions|)
   (push.iloc.0 . 0)
   (push.subr.gloc.of |.top-level-value| 1 "../stdlib/core/optimize.scm" . 232509)
   (ret.subr.gloc.of |.core-hashtable-contains?| "../stdlib/core/optimize.scm" . 232460))
 (set.gloc.of |core.optimize'primitive-function?|)
 (close
   (1 0 . |core.optimize'special-list-function?|)
   (push.iloc.0 . 0)
   (subr.gloc.of |.top-level-bound?| 1 "../stdlib/core/optimize.scm" . 236556)
   (if.false.ret)
   (push.gloc.of |core.optimize'ht-special-list-functions|)
   (push.iloc.0 . 0)
   (push.subr.gloc.of |.top-level-value| 1 "../stdlib/core/optimize.scm" . 237632)
   (ret.subr.gloc.of |.core-hashtable-contains?| "../stdlib/core/optimize.scm" . 237580))
 (set.gloc.of |core.optimize'special-list-function?|)
 (close
   (1 0 . |core.optimize'inlinable-primitive-function?|)
   (iloc.0 . 0)
   (if.not.symbol?.ret.const . #f)
   (push.iloc.0 . 0)
   (subr.gloc.of |.top-level-bound?| 1 "../stdlib/core/optimize.scm" . 242700)
   (if.false.ret)
   (push.gloc.of |core.optimize'ht-inlinable-primitive-functions|)
   (push.iloc.0 . 0)
   (push.subr.gloc.of |.top-level-value| 1 "../stdlib/core/optimize.scm" . 243783)
   (ret.subr.gloc.of |.core-hashtable-contains?| "../stdlib/core/optimize.scm" . 243724))
 (set.gloc.of |core.optimize'inlinable-primitive-function?|)
 (close
   (1 0 . |core.optimize'variable-top-level?|)
   (push.gloc.of |core.optimize'ht-variable-defined|)
   (push.iloc.0 . 0)
   (subr.gloc.of |.core-hashtable-contains?| 2 "../stdlib/core/optimize.scm" . 247819)
   (if.true.ret)
   (call
     (push.gloc.of |core.optimize'ht-variable-binding|)
     (push.iloc.0 . 0)
     (subr.gloc.of |.core-hashtable-contains?| 2 "../stdlib/core/optimize.scm" . 248853)
     (if.true.ret.const . #f)
     (push.gloc.of |core.optimize'ht-variable-formals|)
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.core-hashtable-contains?| 2 "../stdlib/core/optimize.scm" . 249877)
     (ret.subr.gloc.of |.not| "../stdlib/core/optimize.scm" . 249872))
   (if.true.ret)
   (call
     (push.iloc.0 . 0)
     (apply.gloc.of |core.optimize'get-free-variables| "../stdlib/core/optimize.scm" . 250900))
   (push)
   (ret.subr.gloc.of |.symbol?| "../stdlib/core/optimize.scm" . 250891))
 (set.gloc.of |core.optimize'variable-top-level?|)
 (close
   (1 0 . |core.optimize'variable-private?|)
   (push.iloc.0 . 0)
   (push.subr.gloc.of |.symbol->string| 1 "../stdlib/core/optimize.scm" . 254992)
   (extend . 1)
   (call
     (push.iloc.0 . 0)
     (push.gloc.of |core.optimize'noname-lambda-infix|)
     (subr.gloc.of |.string-contains| 2 "../stdlib/core/optimize.scm" . 256018)
     (if.true.ret)
     (push.iloc.0 . 0)
     (push.gloc.of |core.optimize'library-variable-infix|)
     (ret.subr.gloc.of |.string-contains| "../stdlib/core/optimize.scm" . 257042))
   (if.false.ret)
   (ret.const . #t))
 (set.gloc.of |core.optimize'variable-private?|)
 (close
   (1 0 . |core.optimize'variable-functional?|)
   (call
     (push.gloc.of |core.optimize'ht-variable-privates|)
     (push.iloc.0 . 0)
     (subr.gloc.of |.core-hashtable-contains?| 2 "../stdlib/core/optimize.scm" . 262160)
     (if.true.ret)
     (push.gloc.of |core.optimize'ht-variable-defined|)
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.core-hashtable-contains?| 2 "../stdlib/core/optimize.scm" . 263189)
     (ret.subr.gloc.of |.not| "../stdlib/core/optimize.scm" . 263184))
   (if.false.ret)
   (push.gloc.of |core.optimize'ht-variable-binding|)
   (push.iloc.0 . 0)
   (push.const . #f)
   (push.subr.gloc.of |.core-hashtable-ref| 3 "../stdlib/core/optimize.scm" . 264211)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (push.gloc.of |core.optimize'ht-lambda-node|)
     (push.iloc.0 . 0)
     (push.const . #f)
     (push.subr.gloc.of |.core-hashtable-ref| 3 "../stdlib/core/optimize.scm" . 265255)
     (const . functable)
     (ret.eq? "../stdlib/core/optimize.scm" . 265250))
   (ret.const . #f))
 (set.gloc.of |core.optimize'variable-functional?|)
 (close
   (1 0 . |core.optimize'variable-iloc?|)
   (push.gloc.of |core.optimize'ht-variable-formals|)
   (push.iloc.0 . 0)
   (subr.gloc.of |.core-hashtable-contains?| 2 "../stdlib/core/optimize.scm" . 270350)
   (if.true.ret)
   (push.gloc.of |core.optimize'ht-variable-binding|)
   (push.iloc.0 . 0)
   (push.const . #f)
   (push.subr.gloc.of |.core-hashtable-ref| 3 "../stdlib/core/optimize.scm" . 271374)
   (extend . 1)
   (iloc.0 . 0)
   (if.true (push.iloc.0 . 0) (ret.subr.gloc.of |.symbol?| "../stdlib/core/optimize.scm" . 270343))
   (ret.const . #f))
 (set.gloc.of |core.optimize'variable-iloc?|)
 (close
   (1 0 . |core.optimize'function?|)
   (iloc.0 . 0)
   (if.not.pair?.ret.const . #t)
   (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 277527)
   (extend . 1)
   (push.iloc.0 . 0)
   (push.const quote lambda)
   (subr.gloc.of |.memq| 2 "../stdlib/core/optimize.scm" . 278545)
   (if.true.ret)
   (iloc.0 . 0)
   (if.not.symbol?.ret.const . #f)
   (call
     (push.gloc.of |core.optimize'ht-variable-privates|)
     (push.iloc.0 . 0)
     (subr.gloc.of |.core-hashtable-contains?| 2 "../stdlib/core/optimize.scm" . 280602)
     (if.true.ret)
     (push.gloc.of |core.optimize'ht-variable-defined|)
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.core-hashtable-contains?| 2 "../stdlib/core/optimize.scm" . 281631)
     (ret.subr.gloc.of |.not| "../stdlib/core/optimize.scm" . 281626))
   (if.false.ret)
   (call
     (call
       (push.iloc.0 . 0)
       (apply.gloc.of |core.optimize'primitive-function?| "../stdlib/core/optimize.scm" . 282650))
     (if.true.ret)
     (call
       (push.iloc.0 . 0)
       (apply.gloc.of |core.optimize'variable-functional?| "../stdlib/core/optimize.scm" . 283674))
     (if.true.ret)
     (push.iloc.0 . 0)
     (push.const begin if and or)
     (ret.subr.gloc.of |.memq| "../stdlib/core/optimize.scm" . 284698))
   (if.false.ret)
   (push.gloc.of |core.optimize'function?|)
   (push.cdr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 285737)
   (apply.gloc.of |core.lists'for-all| "../stdlib/core/optimize.scm" . 285718))
 (set.gloc.of |core.optimize'function?|)
 (close
   (1 0 . |core.optimize'constant?|)
   (iloc.0 . 0)
   (if.pair?
     (call
       (iloc.0 . 0)
       (if.not.pair?.ret.const . #f)
       (cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 290830)
       (if.not.pair?.ret.const . #f)
       (cddr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 290830)
       (ret.null? "../stdlib/core/optimize.scm" . 290830))
     (push)
     (extend . 1)
     (call
       (iloc.0 . 0)
       (if.false.ret)
       (push.car.iloc (1 . 0) "../stdlib/core/optimize.scm" . 290830)
       (const . begin)
       (ret.eq? "../stdlib/core/optimize.scm" . 290830))
     (if.true
       (push.cadr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 290830)
       (apply.gloc.of |core.optimize'constant?| "../stdlib/core/optimize.scm" . 290830))
     (call
       (iloc.0 . 0)
       (if.false.ret)
       (push.car.iloc (1 . 0) "../stdlib/core/optimize.scm" . 290830)
       (const . quote)
       (ret.eq? "../stdlib/core/optimize.scm" . 290830))
     (if.true.ret.const . #t)
     (push.gloc.of |core.optimize'constant?|)
     (push.iloc.1 . 0)
     (apply.gloc.of |core.lists'for-all| "../stdlib/core/optimize.scm" . 290830))
   (push.iloc.0 . 0)
   (subr.gloc.of |.number?| 1 "../stdlib/core/optimize.scm" . 296978)
   (if.true.ret)
   (push.iloc.0 . 0)
   (subr.gloc.of |.boolean?| 1 "../stdlib/core/optimize.scm" . 298002)
   (if.true.ret)
   (push.iloc.0 . 0)
   (subr.gloc.of |.char?| 1 "../stdlib/core/optimize.scm" . 299026)
   (if.true.ret)
   (push.iloc.0 . 0)
   (subr.gloc.of |.string?| 1 "../stdlib/core/optimize.scm" . 300050)
   (if.true.ret)
   (iloc.0 . 0)
   (if.not.symbol?.ret.const . #f)
   (call
     (call
       (push.iloc.0 . 0)
       (apply.gloc.of |core.optimize'primitive-function?| "../stdlib/core/optimize.scm" . 302107))
     (if.true.ret)
     (push.gloc.of |core.optimize'ht-variable-binding|)
     (push.iloc.0 . 0)
     (subr.gloc.of |.core-hashtable-contains?| 2 "../stdlib/core/optimize.scm" . 303136)
     (if.false.ret)
     (push.gloc.of |core.optimize'ht-variable-privates|)
     (push.iloc.0 . 0)
     (subr.gloc.of |.core-hashtable-contains?| 2 "../stdlib/core/optimize.scm" . 304164)
     (if.true.ret)
     (push.gloc.of |core.optimize'ht-variable-defined|)
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.core-hashtable-contains?| 2 "../stdlib/core/optimize.scm" . 305193)
     (ret.subr.gloc.of |.not| "../stdlib/core/optimize.scm" . 305188))
   (if.false.ret)
   (push.gloc.of |core.optimize'ht-variable-operands-refc|)
   (push.iloc.0 . 0)
   (push.const . 0)
   (push.subr.gloc.of |.core-hashtable-ref| 3 "../stdlib/core/optimize.scm" . 306202)
   (push.const . 1)
   (ret.subr.gloc.of |.=| "../stdlib/core/optimize.scm" . 306199))
 (set.gloc.of |core.optimize'constant?|)
 (close
   (1 0 . |core.optimize'inlinable-expression?|)
   (iloc.0 . 0)
   (if.pair?
     (call
       (iloc.0 . 0)
       (if.not.pair?.ret.const . #f)
       (cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 311310)
       (if.not.pair?.ret.const . #f)
       (cddr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 311310)
       (ret.null? "../stdlib/core/optimize.scm" . 311310))
     (push)
     (extend . 1)
     (call
       (iloc.0 . 0)
       (if.false.ret)
       (push.car.iloc (1 . 0) "../stdlib/core/optimize.scm" . 311310)
       (const . begin)
       (ret.eq? "../stdlib/core/optimize.scm" . 311310))
     (if.true
       (push.cadr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 311310)
       (apply.gloc.of |core.optimize'inlinable-expression?| "../stdlib/core/optimize.scm" . 311310))
     (call
       (iloc.0 . 0)
       (if.false.ret)
       (push.car.iloc (1 . 0) "../stdlib/core/optimize.scm" . 311310)
       (const . quote)
       (ret.eq? "../stdlib/core/optimize.scm" . 311310))
     (if.true
       (cadr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 311310)
       (if.pair?.ret.const . #f)
       (cadr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 311310)
       (if.symbol?.ret.const . #t)
       (push.cadr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 311310)
       (subr.gloc.of |.fixnum?| 1 "../stdlib/core/optimize.scm" . 311310)
       (if.true.ret)
       (push.cadr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 311310)
       (subr.gloc.of |.boolean?| 1 "../stdlib/core/optimize.scm" . 311310)
       (if.true.ret)
       (push.cadr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 311310)
       (subr.gloc.of |.char?| 1 "../stdlib/core/optimize.scm" . 311310)
       (if.true.ret)
       (push.cadr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 311310)
       (ret.subr.gloc.of |.string?| "../stdlib/core/optimize.scm" . 311310))
     (iloc.0 . 0)
     (if.true
       (push.cadr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 311310)
       (extend . 1)
       (call
         (push.car.iloc (2 . 0) "../stdlib/core/optimize.scm" . 311310)
         (apply.gloc.of
           |core.optimize'inlinable-primitive-function?|
           "../stdlib/core/optimize.scm"
           .
           311310))
       (if.false.ret)
       (push.iloc.0 . 0)
       (apply.gloc.of |core.optimize'variable-iloc?| "../stdlib/core/optimize.scm" . 311310))
     (ret.const . #f))
   (iloc.0 . 0)
   (if.symbol?.ret.const . #t)
   (push.iloc.0 . 0)
   (subr.gloc.of |.fixnum?| 1 "../stdlib/core/optimize.scm" . 322593)
   (if.true.ret)
   (push.iloc.0 . 0)
   (subr.gloc.of |.boolean?| 1 "../stdlib/core/optimize.scm" . 322608)
   (if.true.ret)
   (push.iloc.0 . 0)
   (subr.gloc.of |.char?| 1 "../stdlib/core/optimize.scm" . 322624)
   (if.true.ret)
   (push.iloc.0 . 0)
   (ret.subr.gloc.of |.string?| "../stdlib/core/optimize.scm" . 322637))
 (set.gloc.of |core.optimize'inlinable-expression?|)
 (close
   (1 0 . |core.optimize'formals->list|)
   (iloc.0 . 0)
   (if.pair?
     (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 327697)
     (call
       (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 327722)
       (apply.gloc.of |core.optimize'formals->list| "../stdlib/core/optimize.scm" . 327707))
     (ret.cons "../stdlib/core/optimize.scm" . 327691))
   (iloc.0 . 0)
   (if.null?.ret.const)
   (push.iloc.0 . 0)
   (ret.subr.gloc.of |.list| "../stdlib/core/optimize.scm" . 329751))
 (set.gloc.of |core.optimize'formals->list|)
 (close
   (1 0 . |core.optimize'flatten-begin|)
   (call
     (touch.gloc.of |loop`90|)
     (push.iloc.0 . 0)
     (push.const)
     (apply.gloc.of |loop`90| "../stdlib/core/optimize.scm" . 343048))
   (push)
   (push.iloc.0 . 0)
   (call (apply.gloc.of |core.optimize'annotate-hook| "../stdlib/core/optimize.scm" . 342024))
   (apply))
 (set.gloc.of |core.optimize'flatten-begin|)
 (close
   (3 0 . |core.optimize'collect-context-each|)
   (extend.enclose+
     (3 0 . loop)
     (iloc.0 . 0)
     (if.null? (ret.iloc 0 . 1))
     (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 359457)
     (push.iloc 2 . 1)
     (call
       (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 359479)
       (push.iloc.0 . 1)
       (push.const . #t)
       (apply.iloc+ (1 . 0) "../stdlib/core/optimize.scm" . 359473))
     (push)
     (push.iloc.0 . 2)
     (apply.gloc.of |core.optimize'collect-context| "../stdlib/core/optimize.scm" . 359440))
   (push.iloc.1 . 0)
   (push.iloc.1 . 2)
   (push.const . #f)
   (apply.iloc+ (0 . 0) "../stdlib/core/optimize.scm" . 356359))
 (set.gloc.of |core.optimize'collect-context-each|)
 (close
   (3 0 . |core.optimize'collect-context-seq|)
   (extend.enclose+
     (2 0 . loop)
     (iloc.0 . 0)
     (if.null? (ret.iloc 0 . 1))
     (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 366625)
     (push.iloc 2 . 1)
     (call
       (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 366647)
       (push.iloc.0 . 1)
       (apply.iloc+ (1 . 0) "../stdlib/core/optimize.scm" . 366641))
     (push)
     (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 366670)
     (push.subr.gloc.of |.null?| 1 "../stdlib/core/optimize.scm" . 366663)
     (apply.gloc.of |core.optimize'collect-context| "../stdlib/core/optimize.scm" . 366608))
   (push.iloc.1 . 0)
   (push.iloc.1 . 2)
   (apply.iloc+ (0 . 0) "../stdlib/core/optimize.scm" . 363527))
 (set.gloc.of |core.optimize'collect-context-seq|)
 (close
   (4 0 . |core.optimize'collect-context|)
   (iloc.0 . 0)
   (if.pair?
     (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 372756)
     (extend . 1)
     (push.iloc.0 . 0)
     (push.const quote define lambda let letrec*)
     (subr.gloc.of |.memq| 2 "../stdlib/core/optimize.scm" . 372750)
     (if.true
       (call
         (iloc.1 . 0)
         (if.not.pair?.ret.const . #f)
         (cdr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 374801)
         (ret.pair? "../stdlib/core/optimize.scm" . 374801))
       (push)
       (extend . 1)
       (call
         (iloc.0 . 0)
         (if.false.ret)
         (cddr.iloc (2 . 0) "../stdlib/core/optimize.scm" . 374801)
         (if.not.null?.ret.const . #f)
         (push.car.iloc (2 . 0) "../stdlib/core/optimize.scm" . 374801)
         (const . quote)
         (ret.eq? "../stdlib/core/optimize.scm" . 374801))
       (if.true (ret.iloc 2 . 2))
       (call
         (iloc.0 . 0)
         (if.false.ret)
         (cddr.iloc (2 . 0) "../stdlib/core/optimize.scm" . 374801)
         (if.not.pair?.ret.const . #f)
         (push.iloc 2 . 0)
         (subr.gloc.of |.cdddr| 1 "../stdlib/core/optimize.scm" . 374801)
         (if.not.null?.ret.const . #f)
         (push.car.iloc (2 . 0) "../stdlib/core/optimize.scm" . 374801)
         (const . define)
         (ret.eq? "../stdlib/core/optimize.scm" . 374801))
       (if.true
         (push.iloc 2 . 0)
         (push.subr.gloc.of |.caddr| 1 "../stdlib/core/optimize.scm" . 374801)
         (push.cadr.iloc (2 . 0) "../stdlib/core/optimize.scm" . 374801)
         (extend . 2)
         (push.gloc.of |core.optimize'ht-variable-defined|)
         (push.iloc.0 . 1)
         (push.const . #t)
         (subr.gloc.of |.core-hashtable-set!| 3 "../stdlib/core/optimize.scm" . 374801)
         (call
           (call
             (push.iloc.0 . 1)
             (apply.gloc.of
               |core.optimize'variable-private?|
               "../stdlib/core/optimize.scm"
               .
               374801))
           (if.false.ret)
           (push.gloc.of |core.optimize'ht-variable-privates|)
           (push.iloc.0 . 1)
           (push.const . #t)
           (ret.subr.gloc.of |.core-hashtable-set!| "../stdlib/core/optimize.scm" . 374801))
         (push.gloc.of |core.optimize'ht-variable-binding|)
         (push.iloc.0 . 1)
         (call (iloc.0 . 0) (if.true.ret) (ret.const begin #f))
         (push)
         (subr.gloc.of |.core-hashtable-set!| 3 "../stdlib/core/optimize.scm" . 374801)
         (push.iloc.0 . 0)
         (push.iloc 3 . 1)
         (push.iloc 3 . 2)
         (push.iloc 3 . 3)
         (apply.gloc.of |core.optimize'collect-context| "../stdlib/core/optimize.scm" . 374801))
       (call
         (iloc.0 . 0)
         (if.false.ret)
         (push.car.iloc (2 . 0) "../stdlib/core/optimize.scm" . 374801)
         (const . lambda)
         (ret.eq? "../stdlib/core/optimize.scm" . 374801))
       (if.true
         (push.cddr.iloc (2 . 0) "../stdlib/core/optimize.scm" . 374801)
         (extend . 1)
         (call
           (push.cadr.iloc (3 . 0) "../stdlib/core/optimize.scm" . 374801)
           (apply.gloc.of |core.optimize'formals->list| "../stdlib/core/optimize.scm" . 374801))
         (push)
         (extend . 1)
         (call
           (push.gloc.of |.fn28.1`28|)
           (push.iloc.0 . 0)
           (apply.gloc.of |.for-each| "../stdlib/core/optimize.scm" . 374801))
         (call
           (push.iloc.1 . 0)
           (push.iloc.0 . 0)
           (push.const)
           (apply.gloc.of
             |core.optimize'collect-context-seq|
             "../stdlib/core/optimize.scm"
             .
             374801))
         (push)
         (extend . 1)
         (push.gloc.of |core.optimize'ht-lambda-node|)
         (push.iloc 5 . 0)
         (call
           (push.iloc.0 . 0)
           (apply.gloc.of
             |core.lists'remove-duplicate-symbols|
             "../stdlib/core/optimize.scm"
             .
             374801))
         (push)
         (subr.gloc.of |.core-hashtable-set!| 3 "../stdlib/core/optimize.scm" . 374801)
         (call
           (push.close
             (1 0)
             (push.iloc.0 . 0)
             (push.iloc 6 . 1)
             (push.subr.gloc.of |.memq| 2 "../stdlib/core/optimize.scm" . 374801)
             (ret.subr.gloc.of |.not| "../stdlib/core/optimize.scm" . 374801))
           (push.iloc.0 . 0)
           (apply.gloc.of |core.lists'filter| "../stdlib/core/optimize.scm" . 374801))
         (push)
         (push.iloc 5 . 2)
         (ret.subr.gloc.of |.append| "../stdlib/core/optimize.scm" . 374801))
       (call
         (iloc.0 . 0)
         (if.false.ret)
         (push.car.iloc (2 . 0) "../stdlib/core/optimize.scm" . 374801)
         (const . let)
         (ret.eq? "../stdlib/core/optimize.scm" . 374801))
       (if.true
         (push.cddr.iloc (2 . 0) "../stdlib/core/optimize.scm" . 374801)
         (push.cadr.iloc (2 . 0) "../stdlib/core/optimize.scm" . 374801)
         (extend . 2)
         (call
           (push.close
             (1 0)
             (push.gloc.of |core.optimize'ht-variable-binding|)
             (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 374801)
             (call
               (cadr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 374801)
               (if.true.ret)
               (ret.const begin #f))
             (push)
             (subr.gloc.of |.core-hashtable-set!| 3 "../stdlib/core/optimize.scm" . 374801)
             (push.gloc.of |core.optimize'ht-binding-body-common|)
             (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 374801)
             (push.iloc.1 . 0)
             (ret.subr.gloc.of |.core-hashtable-set!| "../stdlib/core/optimize.scm" . 374801))
           (push.iloc.0 . 1)
           (apply.gloc.of |.for-each| "../stdlib/core/optimize.scm" . 374801))
         (call
           (call
             (push.gloc.of |.cadr|)
             (push.iloc.0 . 1)
             (apply.gloc.of |.map| "../stdlib/core/optimize.scm" . 374801))
           (push)
           (push.iloc 3 . 1)
           (push.iloc 3 . 2)
           (apply.gloc.of
             |core.optimize'collect-context-each|
             "../stdlib/core/optimize.scm"
             .
             374801))
         (push)
         (extend . 1)
         (call
           (call
             (push.gloc.of |.fn24.1`24|)
             (push.iloc.0 . 0)
             (apply.gloc.of |core.lists'for-all| "../stdlib/core/optimize.scm" . 374801))
           (if.true.ret)
           (push.gloc.of |.fn22.1`22|)
           (call
             (push.gloc.of |.car|)
             (push.iloc.1 . 1)
             (apply.gloc.of |.map| "../stdlib/core/optimize.scm" . 374801))
           (push)
           (apply.gloc.of |.for-each| "../stdlib/core/optimize.scm" . 374801))
         (push.iloc.1 . 0)
         (call
           (push.gloc.of |.car|)
           (push.iloc.1 . 1)
           (apply.gloc.of |.map| "../stdlib/core/optimize.scm" . 374801))
         (push)
         (push.iloc 4 . 1)
         (push.subr.gloc.of |.append| 2 "../stdlib/core/optimize.scm" . 374801)
         (push.iloc.0 . 0)
         (apply.gloc.of |core.optimize'collect-context-seq| "../stdlib/core/optimize.scm" . 374801))
       (call
         (iloc.0 . 0)
         (if.false.ret)
         (push.car.iloc (2 . 0) "../stdlib/core/optimize.scm" . 374801)
         (const . letrec*)
         (ret.eq? "../stdlib/core/optimize.scm" . 374801))
       (if.true
         (push.cddr.iloc (2 . 0) "../stdlib/core/optimize.scm" . 374801)
         (push.cadr.iloc (2 . 0) "../stdlib/core/optimize.scm" . 374801)
         (extend . 2)
         (call
           (push.close
             (1 0)
             (push.gloc.of |core.optimize'ht-variable-letrec|)
             (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 374801)
             (push.const . #t)
             (subr.gloc.of |.core-hashtable-set!| 3 "../stdlib/core/optimize.scm" . 374801)
             (push.gloc.of |core.optimize'ht-variable-binding|)
             (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 374801)
             (call
               (cadr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 374801)
               (if.true.ret)
               (ret.const begin #f))
             (push)
             (subr.gloc.of |.core-hashtable-set!| 3 "../stdlib/core/optimize.scm" . 374801)
             (push.gloc.of |core.optimize'ht-binding-body-common|)
             (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 374801)
             (push.iloc.1 . 0)
             (ret.subr.gloc.of |.core-hashtable-set!| "../stdlib/core/optimize.scm" . 374801))
           (push.iloc.0 . 1)
           (apply.gloc.of |.for-each| "../stdlib/core/optimize.scm" . 374801))
         (call
           (call
             (push.gloc.of |.fn23.1`23|)
             (push.iloc.0 . 1)
             (apply.gloc.of |.map| "../stdlib/core/optimize.scm" . 374801))
           (push)
           (extend . 1)
           (push.close
             (1 0)
             (push.gloc.of |core.optimize'ht-binding-body-mutual|)
             (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 374801)
             (push.iloc.1 . 0)
             (ret.subr.gloc.of |.core-hashtable-set!| "../stdlib/core/optimize.scm" . 374801))
           (push.iloc.1 . 1)
           (apply.gloc.of |.for-each| "../stdlib/core/optimize.scm" . 374801))
         (call
           (push.gloc.of |.car|)
           (push.iloc.0 . 1)
           (apply.gloc.of |.map| "../stdlib/core/optimize.scm" . 374801))
         (push)
         (push.iloc 3 . 1)
         (push.subr.gloc.of |.append| 2 "../stdlib/core/optimize.scm" . 374801)
         (extend . 1)
         (call
           (call
             (push.gloc.of |.cadr|)
             (push.iloc.1 . 1)
             (apply.gloc.of |.map| "../stdlib/core/optimize.scm" . 374801))
           (push)
           (push.iloc.0 . 0)
           (push.iloc 4 . 2)
           (apply.gloc.of
             |core.optimize'collect-context-each|
             "../stdlib/core/optimize.scm"
             .
             374801))
         (push)
         (extend . 1)
         (call
           (call
             (push.gloc.of |.fn44.1`44|)
             (push.iloc.0 . 0)
             (apply.gloc.of |core.lists'for-all| "../stdlib/core/optimize.scm" . 374801))
           (if.true.ret)
           (push.gloc.of |.fn31.1`31|)
           (call
             (push.gloc.of |.car|)
             (push.iloc 2 . 1)
             (apply.gloc.of |.map| "../stdlib/core/optimize.scm" . 374801))
           (push)
           (apply.gloc.of |.for-each| "../stdlib/core/optimize.scm" . 374801))
         (push.iloc 2 . 0)
         (push.iloc.1 . 0)
         (push.iloc.0 . 0)
         (apply.gloc.of |core.optimize'collect-context-seq| "../stdlib/core/optimize.scm" . 374801))
       (push.const . "coreform-optimize")
       (push.const . "internal inconsistency in ~s")
       (push.gloc.of |core.optimize'collect-context|)
       (push.subr.gloc.of |.format| 2 "../stdlib/core/optimize.scm" . 374801)
       (push.iloc 2 . 0)
       (apply.gloc.of |.assertion-violation| "../stdlib/core/optimize.scm" . 374801))
     (push.iloc.0 . 0)
     (const . if)
     (if.eq?
       (push.cdr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 428071)
       (push.iloc.1 . 1)
       (push.iloc.1 . 2)
       (apply.gloc.of |core.optimize'collect-context-each| "../stdlib/core/optimize.scm" . 428049))
     (push.iloc.0 . 0)
     (const . set!)
     (if.eq?
       (push.gloc.of |core.optimize'ht-variable-assigned|)
       (push.cadr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 430139)
       (push.const . #t)
       (subr.gloc.of |.core-hashtable-set!| 3 "../stdlib/core/optimize.scm" . 430097)
       (push.iloc.1 . 0)
       (push.iloc.1 . 1)
       (push.iloc.1 . 2)
       (apply.gloc.of |core.optimize'collect-context-each| "../stdlib/core/optimize.scm" . 431121))
     (push.iloc.0 . 0)
     (push.const begin and or)
     (subr.gloc.of |.memq| 2 "../stdlib/core/optimize.scm" . 372750)
     (if.true
       (push.cdr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 433190)
       (push.iloc.1 . 1)
       (push.iloc.1 . 2)
       (apply.gloc.of |core.optimize'collect-context-seq| "../stdlib/core/optimize.scm" . 433169))
     (call
       (car.iloc (1 . 0) "../stdlib/core/optimize.scm" . 435231)
       (if.not.symbol?.ret.const . #f)
       (push.gloc.of |core.optimize'ht-variable-callsites|)
       (push.car.iloc (1 . 0) "../stdlib/core/optimize.scm" . 437291)
       (push.iloc.1 . 0)
       (push.gloc.of |core.optimize'ht-variable-callsites|)
       (push.car.iloc (1 . 0) "../stdlib/core/optimize.scm" . 438368)
       (push.const)
       (subr.gloc.of |.core-hashtable-ref| 3 "../stdlib/core/optimize.scm" . 438326)
       (push.cons)
       (ret.subr.gloc.of |.core-hashtable-set!| "../stdlib/core/optimize.scm" . 436246))
     (push.iloc.1 . 0)
     (push.iloc.1 . 1)
     (push.iloc.1 . 2)
     (apply.gloc.of |core.optimize'collect-context-each| "../stdlib/core/optimize.scm" . 439313))
   (iloc.0 . 0)
   (if.symbol?
     (call
       (iloc.0 . 3)
       (if.false.ret)
       (push.gloc.of |core.optimize'ht-variable-operands-refc|)
       (push.iloc.0 . 0)
       (push.gloc.of |core.optimize'ht-variable-operands-refc|)
       (push.iloc.0 . 0)
       (push.const . 0)
       (push.subr.gloc.of |.core-hashtable-ref| 3 "../stdlib/core/optimize.scm" . 442447)
       (push.const . 1)
       (push.subr.gloc.of |.+| 2 "../stdlib/core/optimize.scm" . 442444)
       (ret.subr.gloc.of |.core-hashtable-set!| "../stdlib/core/optimize.scm" . 442392))
     (push.gloc.of |core.optimize'ht-variable-refc|)
     (push.iloc.0 . 0)
     (push.gloc.of |core.optimize'ht-variable-refc|)
     (push.iloc.0 . 0)
     (push.const . 0)
     (push.subr.gloc.of |.core-hashtable-ref| 3 "../stdlib/core/optimize.scm" . 443452)
     (push.const . 1)
     (push.subr.gloc.of |.+| 2 "../stdlib/core/optimize.scm" . 443449)
     (subr.gloc.of |.core-hashtable-set!| 3 "../stdlib/core/optimize.scm" . 443406)
     (call
       (push.iloc.0 . 0)
       (apply.gloc.of |core.optimize'primitive-function?| "../stdlib/core/optimize.scm" . 444437))
     (if.true (ret.iloc 0 . 2))
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (subr.gloc.of |.memq| 2 "../stdlib/core/optimize.scm" . 445461)
     (if.true (ret.iloc 0 . 2))
     (push.iloc.0 . 0)
     (iloc.0 . 2)
     (ret.cons "../stdlib/core/optimize.scm" . 446490))
   (ret.iloc 0 . 2))
 (set.gloc.of |core.optimize'collect-context|)
 (close
   (2 0 . |core.optimize'crawl-lambda-lifting|)
   (extend.enclose+
     (0 0 . make-table)
     (subr.gloc.of |.make-core-hashtable| 0)
     (push)
     (extend . 1)
     (call
       (push.const . 1)
       (extend . 1)
       (push.close
         (1 0)
         (cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 568363)
         (if.symbol?
           (push.iloc 2 . 0)
           (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 569402)
           (push.const . ".fn~a.~a~a~a")
           (push.iloc.1 . 0)
           (push.iloc 5 . 1)
           (push.gloc.of |core.optimize'noname-lambda-infix|)
           (push.iloc.1 . 0)
           (push.subr.gloc.of |.format| 5 "../stdlib/core/optimize.scm" . 569426)
           (push.subr.gloc.of |.string->symbol| 1 "../stdlib/core/optimize.scm" . 569410)
           (subr.gloc.of |.core-hashtable-set!| 3 "../stdlib/core/optimize.scm" . 569378)
           (n+.iloc (1 . 0) 1 "../stdlib/core/optimize.scm" . 570414)
           (set.iloc 1 . 0)
           (ret.const.unspec))
         (ret.const.unspec))
       (push.gloc.of |core.optimize'ht-lambda-node|)
       (push.subr.gloc.of |.core-hashtable->alist| 1 "../stdlib/core/optimize.scm" . 571417)
       (apply.gloc.of |.for-each| "../stdlib/core/optimize.scm" . 567311))
     (call
       (push.close
         (1 0)
         (push.gloc.of |core.optimize'ht-lambda-node|)
         (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 573507)
         (push.const . #f)
         (push.subr.gloc.of |.core-hashtable-ref| 3 "../stdlib/core/optimize.scm" . 573472)
         (extend . 1)
         (iloc.0 . 0)
         (if.true
           (iloc.0 . 0)
           (if.symbol?
             (push.iloc 2 . 0)
             (push.cdr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 576583)
             (subr.gloc.of |.core-hashtable-delete!| 2 "../stdlib/core/optimize.scm" . 576556)
             (push.iloc 2 . 0)
             (push.car.iloc (1 . 0) "../stdlib/core/optimize.scm" . 577604)
             (push.cdr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 577612)
             (ret.subr.gloc.of |.core-hashtable-set!| "../stdlib/core/optimize.scm" . 577580))
           (ret.const.unspec))
         (ret.const.unspec))
       (push.gloc.of |core.optimize'ht-variable-binding|)
       (push.subr.gloc.of |.core-hashtable->alist| 1 "../stdlib/core/optimize.scm" . 578583)
       (apply.gloc.of |.for-each| "../stdlib/core/optimize.scm" . 565259))
     (call
       (push.close
         (1 0)
         (push.iloc.1 . 0)
         (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 580660)
         (ret.subr.gloc.of |.core-hashtable-delete!| "../stdlib/core/optimize.scm" . 580633))
       (push.gloc.of |core.optimize'ht-variable-defined|)
       (push.subr.gloc.of |.core-hashtable->alist| 1 "../stdlib/core/optimize.scm" . 581655)
       (apply.gloc.of |.for-each| "../stdlib/core/optimize.scm" . 579597))
     (ret.iloc 0 . 0))
   (call
     (touch.gloc.of |loop`251|)
     (apply.gloc.of |loop`251| "../stdlib/core/optimize.scm" . 586759))
   (call
     (touch.gloc.of |traverse-lambda-node`165|)
     (apply.gloc.of |traverse-lambda-node`165| "../stdlib/core/optimize.scm" . 589831))
   (apply.iloc+ (0 . 0) "../stdlib/core/optimize.scm" . 590855))
 (set.gloc.of |core.optimize'crawl-lambda-lifting|)
 (close
   (1 0 . |core.optimize'crawl-beta-subst|)
   (subr.gloc.of |.make-core-hashtable| 0)
   (push)
   (extend . 1)
   (call
     (push.close
       (1 0)
       (push.gloc.of |core.optimize'ht-lambda-node|)
       (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 599097)
       (subr.gloc.of |.core-hashtable-contains?| 2 "../stdlib/core/optimize.scm" . 599056)
       (if.true.ret)
       (push.gloc.of |core.optimize'ht-variable-refc|)
       (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 600129)
       (push.const . #f)
       (push.subr.gloc.of |.core-hashtable-ref| 3 "../stdlib/core/optimize.scm" . 600092)
       (extend . 1)
       (call
         (iloc.0 . 0)
         (if.false.ret)
         (call
           (=n.iloc (0 . 0) 1 "../stdlib/core/optimize.scm" . 602146)
           (if.true.ret)
           (push.cdr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 602180)
           (apply.gloc.of
             |core.optimize'inlinable-expression?|
             "../stdlib/core/optimize.scm"
             .
             602157))
         (if.false.ret)
         (push.gloc.of |core.optimize'ht-variable-pinned|)
         (push.car.iloc (1 . 0) "../stdlib/core/optimize.scm" . 603216)
         (subr.gloc.of |.core-hashtable-contains?| 2 "../stdlib/core/optimize.scm" . 603171)
         (if.true.ret.const . #f)
         (push.gloc.of |core.optimize'ht-binding-body-common|)
         (push.car.iloc (1 . 0) "../stdlib/core/optimize.scm" . 604233)
         (push.const . #f)
         (ret.subr.gloc.of |.core-hashtable-ref| "../stdlib/core/optimize.scm" . 604190))
       (push)
       (extend . 1)
       (iloc.0 . 0)
       (if.true
         (call
           (call
             (push.cdr.iloc (2 . 0) "../stdlib/core/optimize.scm" . 606267)
             (apply.gloc.of |core.optimize'constant?| "../stdlib/core/optimize.scm" . 606256))
           (if.true.ret)
           (cdr.iloc (2 . 0) "../stdlib/core/optimize.scm" . 607294)
           (if.not.symbol?.ret.const . #f)
           (push.gloc.of |core.optimize'ht-variable-assigned|)
           (push.cdr.iloc (2 . 0) "../stdlib/core/optimize.scm" . 608361)
           (subr.gloc.of |.core-hashtable-contains?| 2 "../stdlib/core/optimize.scm" . 608314)
           (if.true.ret.const . #f)
           (push.gloc.of |core.optimize'ht-variable-formals|)
           (push.cdr.iloc (2 . 0) "../stdlib/core/optimize.scm" . 609383)
           (subr.gloc.of |.core-hashtable-contains?| 2 "../stdlib/core/optimize.scm" . 609337)
           (if.true.ret)
           (push.gloc.of |core.optimize'ht-variable-binding|)
           (push.cdr.iloc (2 . 0) "../stdlib/core/optimize.scm" . 610412)
           (subr.gloc.of |.core-hashtable-contains?| 2 "../stdlib/core/optimize.scm" . 610366)
           (if.false.ret)
           (push.gloc.of |core.optimize'ht-variable-privates|)
           (push.cdr.iloc (2 . 0) "../stdlib/core/optimize.scm" . 611441)
           (subr.gloc.of |.core-hashtable-contains?| 2 "../stdlib/core/optimize.scm" . 611394)
           (if.true.ret)
           (push.gloc.of |core.optimize'ht-variable-defined|)
           (push.cdr.iloc (2 . 0) "../stdlib/core/optimize.scm" . 612469)
           (push.subr.gloc.of |.core-hashtable-contains?| 2 "../stdlib/core/optimize.scm" . 612423)
           (ret.subr.gloc.of |.not| "../stdlib/core/optimize.scm" . 612418))
         (push)
         (extend . 1)
         (call
           (iloc.0 . 0)
           (if.true.ret)
           (call
             (push.cdr.iloc (3 . 0) "../stdlib/core/optimize.scm" . 614463)
             (apply.gloc.of |core.optimize'function?| "../stdlib/core/optimize.scm" . 614452))
           (if.false.ret)
           (cdr.iloc (3 . 0) "../stdlib/core/optimize.scm" . 615494)
           (if.not.symbol?.ret.const . #t)
           (push.gloc.of |core.optimize'ht-variable-operands-refc|)
           (push.cdr.iloc (3 . 0) "../stdlib/core/optimize.scm" . 616554)
           (push.const . 0)
           (push.subr.gloc.of |.core-hashtable-ref| 3 "../stdlib/core/optimize.scm" . 616508)
           (push.const . 1)
           (ret.subr.gloc.of |.<=| "../stdlib/core/optimize.scm" . 616504))
         (push)
         (extend . 1)
         (call
           (push.close
             (1 0)
             (extend.enclose
               (1 0 . loop)
               (call
                 (<n.iloc (6 . 0) 1 "../stdlib/core/optimize.scm" . 621617)
                 (if.false.ret)
                 (push.const . #t)
                 (apply.iloc (2 . 0) "../stdlib/core/optimize.scm" . 621628))
               (iloc.0 . 0)
               (if.null?.ret.const)
               (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 623672)
               (car.iloc (7 . 0) "../stdlib/core/optimize.scm" . 623682)
               (if.eq?
                 (n+.iloc (6 . 0) -1 "../stdlib/core/optimize.scm" . 624702)
                 (set.iloc 6 . 0)
                 (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 625721)
                 (apply.iloc (1 . 0) "../stdlib/core/optimize.scm" . 625715))
               (car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 626746)
               (if.pair?
                 (push.iloc.0 . 0)
                 (push.subr.gloc.of |.caar| 1 "../stdlib/core/optimize.scm" . 627775)
                 (push.iloc.0 . 0)
                 (push.subr.gloc.of |.cdar| 1 "../stdlib/core/optimize.scm" . 627793)
                 (extend . 2)
                 (iloc.0 . 0)
                 (if.pair?
                   (call
                     (push.car.iloc (1 . 0) "../stdlib/core/optimize.scm" . 629826)
                     (apply.iloc (2 . 0) "../stdlib/core/optimize.scm" . 629820))
                   (push.cdr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 630850)
                   (apply.iloc (2 . 0) "../stdlib/core/optimize.scm" . 630844))
                 (push.iloc.0 . 0)
                 (const . quote)
                 (if.eq?
                   (push.cdr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 632898)
                   (apply.iloc (2 . 0) "../stdlib/core/optimize.scm" . 632892))
                 (push.iloc.0 . 0)
                 (const . lambda)
                 (if.eq?
                   (call
                     (iloc 5 . 0)
                     (if.false.ret)
                     (push.cdr.iloc (0 . 1) "../stdlib/core/optimize.scm" . 634957)
                     (apply.iloc (2 . 0) "../stdlib/core/optimize.scm" . 634951))
                   (push.cdr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 635970)
                   (apply.iloc (2 . 0) "../stdlib/core/optimize.scm" . 635964))
                 (push.iloc.0 . 0)
                 (push.const let letrec*)
                 (subr.gloc.of |.memq| 2 "../stdlib/core/optimize.scm" . 636988)
                 (if.true
                   (call
                     (call
                       (push.gloc.of |.cadr|)
                       (push.car.iloc (0 . 1) "../stdlib/core/optimize.scm" . 638028)
                       (apply.gloc.of |.map| "../stdlib/core/optimize.scm" . 638018))
                     (push)
                     (apply.iloc (2 . 0) "../stdlib/core/optimize.scm" . 638012))
                   (call
                     (push.cdr.iloc (0 . 1) "../stdlib/core/optimize.scm" . 639042)
                     (apply.iloc (2 . 0) "../stdlib/core/optimize.scm" . 639036))
                   (push.cdr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 640066)
                   (apply.iloc (2 . 0) "../stdlib/core/optimize.scm" . 640060))
                 (push.iloc.0 . 0)
                 (push.const begin and or)
                 (subr.gloc.of |.memq| 2 "../stdlib/core/optimize.scm" . 641084)
                 (if.true
                   (call
                     (push.iloc.0 . 1)
                     (apply.iloc (2 . 0) "../stdlib/core/optimize.scm" . 642108))
                   (push.cdr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 643138)
                   (apply.iloc (2 . 0) "../stdlib/core/optimize.scm" . 643132))
                 (push.iloc.0 . 0)
                 (const . set!)
                 (if.eq?
                   (call
                     (iloc 5 . 0)
                     (if.true.ret)
                     (push.const . #f)
                     (apply.iloc (3 . 0) "../stdlib/core/optimize.scm" . 645190))
                   (call
                     (push.car.iloc (8 . 0) "../stdlib/core/optimize.scm" . 646214)
                     (car.iloc (0 . 1) "../stdlib/core/optimize.scm" . 646222)
                     (if.not.eq?.ret.const . #f)
                     (push.const . #f)
                     (apply.iloc (3 . 0) "../stdlib/core/optimize.scm" . 646234))
                   (call
                     (push.cdr.iloc (0 . 1) "../stdlib/core/optimize.scm" . 647234)
                     (apply.iloc (2 . 0) "../stdlib/core/optimize.scm" . 647228))
                   (push.cdr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 648258)
                   (apply.iloc (2 . 0) "../stdlib/core/optimize.scm" . 648252))
                 (push.iloc.0 . 0)
                 (const . if)
                 (if.eq?
                   (call
                     (push.car.iloc (0 . 1) "../stdlib/core/optimize.scm" . 650312)
                     (push.subr.gloc.of |.list| 1 "../stdlib/core/optimize.scm" . 650306)
                     (apply.iloc (2 . 0) "../stdlib/core/optimize.scm" . 650300))
                   (call
                     (iloc 4 . 0)
                     (if.true.ret)
                     (push.const . #f)
                     (apply.iloc (3 . 0) "../stdlib/core/optimize.scm" . 651333))
                   (call
                     (push.cadr.iloc (0 . 1) "../stdlib/core/optimize.scm" . 652360)
                     (push.subr.gloc.of |.list| 1 "../stdlib/core/optimize.scm" . 652354)
                     (apply.iloc (2 . 0) "../stdlib/core/optimize.scm" . 652348))
                   (call
                     (cddr.iloc (0 . 1) "../stdlib/core/optimize.scm" . 653384)
                     (if.not.pair?.ret.const . #f)
                     (push.iloc.0 . 1)
                     (push.subr.gloc.of |.caddr| 1 "../stdlib/core/optimize.scm" . 653409)
                     (push.subr.gloc.of |.list| 1 "../stdlib/core/optimize.scm" . 653403)
                     (apply.iloc (2 . 0) "../stdlib/core/optimize.scm" . 653397))
                   (push.cdr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 654402)
                   (apply.iloc (2 . 0) "../stdlib/core/optimize.scm" . 654396))
                 (call
                   (push.iloc.0 . 0)
                   (car.iloc (8 . 0) "../stdlib/core/optimize.scm" . 656459)
                   (if.not.eq?.ret.const . #f)
                   (n+.iloc (7 . 0) -1 "../stdlib/core/optimize.scm" . 656479)
                   (set.iloc 7 . 0)
                   (ret.const.unspec))
                 (call
                   (push.iloc.0 . 1)
                   (apply.iloc (2 . 0) "../stdlib/core/optimize.scm" . 657468))
                 (call
                   (iloc 5 . 0)
                   (if.true.ret)
                   (call
                     (push.iloc.0 . 0)
                     (apply.gloc.of
                       |core.optimize'primitive-function?|
                       "../stdlib/core/optimize.scm"
                       .
                       659520))
                   (if.true.ret)
                   (call
                     (push.iloc.0 . 0)
                     (apply.gloc.of
                       |core.optimize'variable-functional?|
                       "../stdlib/core/optimize.scm"
                       .
                       660544))
                   (if.true.ret)
                   (call
                     (call
                       (push.iloc.0 . 0)
                       (apply.gloc.of
                         |core.optimize'special-list-function?|
                         "../stdlib/core/optimize.scm"
                         .
                         662597))
                     (if.false.ret)
                     (iloc.0 . 1)
                     (if.not.pair?.ret.const . #f)
                     (car.iloc (0 . 1) "../stdlib/core/optimize.scm" . 664654)
                     (if.not.symbol?.ret.const . #f)
                     (call
                       (push.car.iloc (0 . 1) "../stdlib/core/optimize.scm" . 665694)
                       (apply.gloc.of
                         |core.optimize'primitive-function?|
                         "../stdlib/core/optimize.scm"
                         .
                         665673))
                     (if.true.ret)
                     (push.car.iloc (0 . 1) "../stdlib/core/optimize.scm" . 666719)
                     (apply.gloc.of
                       |core.optimize'variable-functional?|
                       "../stdlib/core/optimize.scm"
                       .
                       666697))
                   (if.true.ret)
                   (push.const . #f)
                   (apply.iloc (3 . 0) "../stdlib/core/optimize.scm" . 668736))
                 (push.cdr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 669762)
                 (apply.iloc (2 . 0) "../stdlib/core/optimize.scm" . 669756))
               (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 671801)
               (apply.iloc (1 . 0) "../stdlib/core/optimize.scm" . 671795))
             (push.iloc 4 . 0)
             (apply.iloc (0 . 0) "../stdlib/core/optimize.scm" . 620586))
           (apply.gloc.of |.call/cc| "../stdlib/core/optimize.scm" . 617504))
         (push)
         (extend . 1)
         (push.iloc.0 . 0)
         (const . #t)
         (if.not.eq?.ret.const . #f)
         (push.iloc 6 . 0)
         (push.car.iloc (5 . 0) "../stdlib/core/optimize.scm" . 673855)
         (push.cdr.iloc (5 . 0) "../stdlib/core/optimize.scm" . 673863)
         (ret.subr.gloc.of |.core-hashtable-set!| "../stdlib/core/optimize.scm" . 673831))
       (ret.const.unspec))
     (push.gloc.of |core.optimize'ht-variable-binding|)
     (push.subr.gloc.of |.core-hashtable->alist| 1 "../stdlib/core/optimize.scm" . 674826)
     (apply.gloc.of |.for-each| "../stdlib/core/optimize.scm" . 595975))
   (call
     (push.close
       (1 0)
       (cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 676899)
       (if.not.symbol?.ret.const . #f)
       (push.iloc.1 . 0)
       (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 677941)
       (ret.subr.gloc.of |.core-hashtable-delete!| "../stdlib/core/optimize.scm" . 677914))
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.core-hashtable->alist| 1 "../stdlib/core/optimize.scm" . 678931)
     (apply.gloc.of |.for-each| "../stdlib/core/optimize.scm" . 675849))
   (ret.iloc 0 . 0))
 (set.gloc.of |core.optimize'crawl-beta-subst|)
 (close
   (2 0 . |core.optimize'check-stackable-each|)
   (extend.enclose+
     (1 0 . loop)
     (iloc.0 . 0)
     (if.null?.ret.const . #t)
     (call
       (push.iloc 2 . 0)
       (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 686119)
       (push.const . #f)
       (apply.gloc.of |core.optimize'check-stackable| "../stdlib/core/optimize.scm" . 686098))
     (if.false.ret)
     (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 687128)
     (apply.iloc+ (1 . 0) "../stdlib/core/optimize.scm" . 687122))
   (push.iloc.1 . 1)
   (apply.iloc+ (0 . 0) "../stdlib/core/optimize.scm" . 684039))
 (set.gloc.of |core.optimize'check-stackable-each|)
 (close
   (3 0 . |core.optimize'check-stackable-seq|)
   (extend.enclose+
     (1 0 . loop)
     (iloc.0 . 0)
     (if.null?.ret.const . #t)
     (call
       (push.iloc 2 . 0)
       (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 693287)
       (call
         (iloc 2 . 2)
         (if.false.ret)
         (cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 693314)
         (ret.null? "../stdlib/core/optimize.scm" . 693307))
       (push)
       (apply.gloc.of |core.optimize'check-stackable| "../stdlib/core/optimize.scm" . 693266))
     (if.false.ret)
     (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 694296)
     (apply.iloc+ (1 . 0) "../stdlib/core/optimize.scm" . 694290))
   (push.iloc.1 . 1)
   (apply.iloc+ (0 . 0) "../stdlib/core/optimize.scm" . 691207))
 (set.gloc.of |core.optimize'check-stackable-seq|)
 (close
   (3 0 . |core.optimize'check-stackable|)
   (iloc.0 . 1)
   (if.pair?
     (push.car.iloc (0 . 1) "../stdlib/core/optimize.scm" . 699412)
     (extend . 1)
     (push.iloc.0 . 0)
     (const . lambda)
     (if.eq?
       (push.iloc.1 . 0)
       (push.cddr.iloc (1 . 1) "../stdlib/core/optimize.scm" . 701482)
       (push.const . #f)
       (apply.gloc.of |core.optimize'check-stackable-seq| "../stdlib/core/optimize.scm" . 701457))
     (push.iloc.0 . 0)
     (push.const begin and or)
     (subr.gloc.of |.memq| 2 "../stdlib/core/optimize.scm" . 699406)
     (if.true
       (push.iloc.1 . 0)
       (push.cdr.iloc (1 . 1) "../stdlib/core/optimize.scm" . 703530)
       (push.iloc.1 . 2)
       (apply.gloc.of |core.optimize'check-stackable-seq| "../stdlib/core/optimize.scm" . 703505))
     (push.iloc.0 . 0)
     (const . let)
     (if.eq?
       (call
         (push.close
           (1 0)
           (push.iloc 2 . 0)
           (push.cadr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 705600)
           (push.const . #f)
           (apply.gloc.of |core.optimize'check-stackable| "../stdlib/core/optimize.scm" . 705579))
         (push.cadr.iloc (1 . 1) "../stdlib/core/optimize.scm" . 705614)
         (apply.gloc.of |core.lists'for-all| "../stdlib/core/optimize.scm" . 705558))
       (if.false.ret)
       (push.iloc.1 . 0)
       (push.cddr.iloc (1 . 1) "../stdlib/core/optimize.scm" . 706607)
       (push.iloc.1 . 2)
       (apply.gloc.of |core.optimize'check-stackable-seq| "../stdlib/core/optimize.scm" . 706582))
     (push.iloc.0 . 0)
     (const . letrec*)
     (if.eq?
       (iloc.1 . 2)
       (if.true
         (call
           (iloc.1 . 1)
           (if.not.pair?.ret.const . #f)
           (cdr.iloc (1 . 1) "../stdlib/core/optimize.scm" . 709656)
           (if.not.pair?.ret.const . #f)
           (cadr.iloc (1 . 1) "../stdlib/core/optimize.scm" . 709656)
           (if.not.pair?.ret.const . #f)
           (push.iloc.1 . 1)
           (subr.gloc.of |.caadr| 1 "../stdlib/core/optimize.scm" . 709656)
           (if.not.pair?.ret.const . #f)
           (push.iloc.1 . 1)
           (subr.gloc.of |.cdaadr| 1 "../stdlib/core/optimize.scm" . 709656)
           (if.not.pair?.ret.const . #f)
           (push.iloc.1 . 1)
           (push.subr.gloc.of |.cdaadr| 1 "../stdlib/core/optimize.scm" . 709656)
           (subr.gloc.of |.car| 1 "../stdlib/core/optimize.scm" . 709656)
           (if.not.pair?.ret.const . #f)
           (push.iloc.1 . 1)
           (push.subr.gloc.of |.cdaadr| 1 "../stdlib/core/optimize.scm" . 709656)
           (subr.gloc.of |.cdar| 1 "../stdlib/core/optimize.scm" . 709656)
           (if.not.pair?.ret.const . #f)
           (cddr.iloc (1 . 1) "../stdlib/core/optimize.scm" . 709656)
           (if.not.pair?.ret.const . #f)
           (push.iloc.1 . 1)
           (subr.gloc.of |.caddr| 1 "../stdlib/core/optimize.scm" . 709656)
           (if.not.pair?.ret.const . #f)
           (push.iloc.1 . 1)
           (push.subr.gloc.of |.cdaadr| 1 "../stdlib/core/optimize.scm" . 709656)
           (subr.gloc.of |.cdr| 1 "../stdlib/core/optimize.scm" . 709656)
           (if.not.null?.ret.const . #f)
           (push.iloc.1 . 1)
           (subr.gloc.of |.cdadr| 1 "../stdlib/core/optimize.scm" . 709656)
           (if.not.null?.ret.const . #f)
           (push.iloc.1 . 1)
           (subr.gloc.of |.cdddr| 1 "../stdlib/core/optimize.scm" . 709656)
           (if.not.null?.ret.const . #f)
           (push.iloc.1 . 1)
           (push.subr.gloc.of |.cdaadr| 1 "../stdlib/core/optimize.scm" . 709656)
           (push.subr.gloc.of |.caar| 1 "../stdlib/core/optimize.scm" . 709656)
           (const . lambda)
           (if.not.eq?.ret.const . #f)
           (push.iloc.1 . 1)
           (push.subr.gloc.of |.caaadr| 1 "../stdlib/core/optimize.scm" . 709656)
           (push.iloc.1 . 1)
           (subr.gloc.of |.caaddr| 1 "../stdlib/core/optimize.scm" . 709656)
           (ret.eq? "../stdlib/core/optimize.scm" . 709656))
         (if.true
           (push.iloc.1 . 1)
           (push.subr.gloc.of |.cdaadr| 1 "../stdlib/core/optimize.scm" . 709656)
           (push.subr.gloc.of |.cddar| 1 "../stdlib/core/optimize.scm" . 709656)
           (extend . 1)
           (call
             (push.iloc 2 . 0)
             (push.iloc 2 . 1)
             (push.subr.gloc.of |.cdaddr| 1 "../stdlib/core/optimize.scm" . 709656)
             (apply.gloc.of
               |core.optimize'check-stackable-each|
               "../stdlib/core/optimize.scm"
               .
               709656))
           (if.false.ret)
           (push.iloc 2 . 0)
           (push.iloc.0 . 0)
           (push.iloc 2 . 2)
           (apply.gloc.of
             |core.optimize'check-stackable-seq|
             "../stdlib/core/optimize.scm"
             .
             709656))
         (call
           (push.close
             (1 0)
             (push.iloc 2 . 0)
             (push.cadr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 709656)
             (push.const . #f)
             (apply.gloc.of |core.optimize'check-stackable| "../stdlib/core/optimize.scm" . 709656))
           (push.cadr.iloc (1 . 1) "../stdlib/core/optimize.scm" . 709656)
           (apply.gloc.of |core.lists'for-all| "../stdlib/core/optimize.scm" . 709656))
         (if.false.ret)
         (push.iloc.1 . 0)
         (push.cddr.iloc (1 . 1) "../stdlib/core/optimize.scm" . 709656)
         (push.iloc.1 . 2)
         (apply.gloc.of |core.optimize'check-stackable-seq| "../stdlib/core/optimize.scm" . 709656))
       (call
         (push.close
           (1 0)
           (push.iloc 2 . 0)
           (push.cadr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 718919)
           (push.const . #f)
           (apply.gloc.of |core.optimize'check-stackable| "../stdlib/core/optimize.scm" . 718898))
         (push.cadr.iloc (1 . 1) "../stdlib/core/optimize.scm" . 718933)
         (apply.gloc.of |core.lists'for-all| "../stdlib/core/optimize.scm" . 718877))
       (if.false.ret)
       (push.iloc.1 . 0)
       (push.cddr.iloc (1 . 1) "../stdlib/core/optimize.scm" . 719926)
       (push.iloc.1 . 2)
       (apply.gloc.of |core.optimize'check-stackable-seq| "../stdlib/core/optimize.scm" . 719901))
     (push.iloc.0 . 0)
     (const . if)
     (if.eq?
       (call
         (push.iloc.1 . 0)
         (push.cadr.iloc (1 . 1) "../stdlib/core/optimize.scm" . 721963)
         (push.const . #f)
         (apply.gloc.of |core.optimize'check-stackable| "../stdlib/core/optimize.scm" . 721942))
       (if.false.ret)
       (call
         (push.iloc.1 . 0)
         (push.iloc.1 . 1)
         (push.subr.gloc.of |.caddr| 1 "../stdlib/core/optimize.scm" . 722987)
         (push.iloc.1 . 2)
         (apply.gloc.of |core.optimize'check-stackable| "../stdlib/core/optimize.scm" . 722966))
       (if.false.ret)
       (push.iloc.1 . 1)
       (subr.gloc.of |.cdddr| 1 "../stdlib/core/optimize.scm" . 724001)
       (if.null?.ret.const . #t)
       (push.iloc.1 . 0)
       (push.iloc.1 . 1)
       (push.subr.gloc.of |.cadddr| 1 "../stdlib/core/optimize.scm" . 724036)
       (push.iloc.1 . 2)
       (apply.gloc.of |core.optimize'check-stackable| "../stdlib/core/optimize.scm" . 724015))
     (push.iloc.0 . 0)
     (const . quote)
     (if.eq?.ret.const . #t)
     (car.iloc (1 . 1) "../stdlib/core/optimize.scm" . 727073)
     (if.symbol?
       (push.car.iloc (1 . 1) "../stdlib/core/optimize.scm" . 728097)
       (iloc.1 . 0)
       (if.eq?
         (iloc.1 . 2)
         (if.false.ret)
         (push.iloc.1 . 0)
         (push.cdr.iloc (1 . 1) "../stdlib/core/optimize.scm" . 729152)
         (apply.gloc.of
           |core.optimize'check-stackable-each|
           "../stdlib/core/optimize.scm"
           .
           729126))
       (push.iloc.1 . 0)
       (push.cdr.iloc (1 . 1) "../stdlib/core/optimize.scm" . 730166)
       (apply.gloc.of |core.optimize'check-stackable-each| "../stdlib/core/optimize.scm" . 730140))
     (push.iloc.1 . 0)
     (push.iloc.1 . 1)
     (apply.gloc.of |core.optimize'check-stackable-each| "../stdlib/core/optimize.scm" . 732184))
   (ret.const . #t))
 (set.gloc.of |core.optimize'check-stackable|)
 (close
   (3 0 . |core.optimize'transcribe-each|)
   (extend.enclose+
     (1 0 . loop)
     (iloc.0 . 0)
     (if.null?.ret.const)
     (call
       (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 740390)
       (push.iloc 2 . 1)
       (push.iloc 2 . 2)
       (apply.gloc.of |core.optimize'transcribe| "../stdlib/core/optimize.scm" . 740378))
     (push)
     (call
       (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 740423)
       (apply.iloc+ (1 . 0) "../stdlib/core/optimize.scm" . 740417))
     (push)
     (extend . 2)
     (call
       (push.iloc.0 . 0)
       (car.iloc (1 . 0) "../stdlib/core/optimize.scm" . 741411)
       (if.not.eq?.ret.const . #f)
       (push.iloc.0 . 1)
       (cdr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 741430)
       (ret.eq? "../stdlib/core/optimize.scm" . 741422))
     (if.true (ret.iloc 1 . 0))
     (push.iloc.0 . 0)
     (iloc.0 . 1)
     (ret.cons "../stdlib/core/optimize.scm" . 743446))
   (push.iloc.1 . 0)
   (apply.iloc+ (0 . 0) "../stdlib/core/optimize.scm" . 737287))
 (set.gloc.of |core.optimize'transcribe-each|)
 (close
   (3 0 . |core.optimize'transcribe-binding-construct|)
   (push.cddr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 753705)
   (extend . 1)
   (call
     (push.gloc.of |.car|)
     (push.cadr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 753686)
     (apply.gloc.of |.map| "../stdlib/core/optimize.scm" . 754709))
   (push)
   (call
     (push.gloc.of |.cadr|)
     (push.cadr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 753686)
     (apply.gloc.of |.map| "../stdlib/core/optimize.scm" . 754735))
   (push)
   (extend . 2)
   (call
     (push.close
       (1 0)
       (push.iloc 3 . 2)
       (push.iloc.0 . 0)
       (subr.gloc.of |.core-hashtable-contains?| 2 "../stdlib/core/optimize.scm" . 756774)
       (if.true.ret.const . #t)
       (push.iloc 3 . 1)
       (push.iloc.0 . 0)
       (subr.gloc.of |.core-hashtable-contains?| 2 "../stdlib/core/optimize.scm" . 757798)
       (if.true.ret.const . #t)
       (push.gloc.of |core.optimize'ht-variable-refc|)
       (push.iloc.0 . 0)
       (push.subr.gloc.of |.core-hashtable-contains?| 2 "../stdlib/core/optimize.scm" . 758827)
       (subr.gloc.of |.not| 1 "../stdlib/core/optimize.scm" . 758822)
       (if.true.ret.const . #f)
       (ret.iloc 0 . 0))
     (push.iloc.0 . 0)
     (apply.gloc.of |.map| "../stdlib/core/optimize.scm" . 755723))
   (push)
   (extend . 1)
   (call
     (push.gloc.of |.symbol?|)
     (push.iloc.0 . 0)
     (apply.gloc.of |core.lists'for-all| "../stdlib/core/optimize.scm" . 761876))
   (if.true
     (call
       (push.iloc 2 . 0)
       (push.iloc 3 . 1)
       (push.iloc 3 . 2)
       (apply.gloc.of |core.optimize'transcribe-each| "../stdlib/core/optimize.scm" . 762916))
     (push)
     (extend . 1)
     (call
       (push.iloc 2 . 1)
       (push.iloc 4 . 1)
       (push.iloc 4 . 2)
       (apply.gloc.of |core.optimize'transcribe-each| "../stdlib/core/optimize.scm" . 763943))
     (push)
     (extend . 1)
     (call
       (call
         (push.gloc.of |.eq?|)
         (push.iloc 3 . 1)
         (push.iloc.0 . 0)
         (apply.gloc.of |core.lists'for-all| "../stdlib/core/optimize.scm" . 764964))
       (if.false.ret)
       (push.gloc.of |.eq?|)
       (push.iloc 4 . 0)
       (push.iloc.1 . 0)
       (apply.gloc.of |core.lists'for-all| "../stdlib/core/optimize.scm" . 764994))
     (if.true (ret.iloc 5 . 0))
     (push.car.iloc (5 . 0) "../stdlib/core/optimize.scm" . 765997)
     (call
       (push.gloc.of |.list|)
       (push.iloc 3 . 0)
       (push.iloc.0 . 0)
       (apply.gloc.of |.map| "../stdlib/core/optimize.scm" . 766009))
     (push)
     (push.iloc.1 . 0)
     (push.subr.gloc.of |.cons*| 3 "../stdlib/core/optimize.scm" . 765988)
     (extend . 1)
     (push.iloc.0 . 0)
     (iloc 6 . 0)
     (if.eq? (ret.iloc 0 . 0))
     (call
       (push.iloc.0 . 0)
       (push.iloc 6 . 0)
       (call (apply.gloc.of |core.optimize'annotate-hook| "../stdlib/core/optimize.scm" . 765988))
       (apply))
     (ret.iloc 0 . 0))
   (call
     (push.iloc 2 . 0)
     (push.iloc 3 . 1)
     (push.iloc 3 . 2)
     (apply.gloc.of |core.optimize'transcribe-each| "../stdlib/core/optimize.scm" . 768036))
   (push)
   (extend . 1)
   (push.close
     (0 0)
     (extend.enclose+
       (5 0 . loop)
       (iloc.0 . 0)
       (if.null?
         (push.iloc.0 . 3)
         (push.subr.gloc.of |.reverse| 1 "../stdlib/core/optimize.scm" . 772149)
         (push.iloc.0 . 4)
         (push.subr.gloc.of |.reverse| 1 "../stdlib/core/optimize.scm" . 773173)
         (ret.subr.gloc.of |.values| "../stdlib/core/optimize.scm" . 772141))
       (push.car.iloc (0 . 1) "../stdlib/core/optimize.scm" . 774194)
       (const . #t)
       (if.eq?
         (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 775219)
         (push.cdr.iloc (0 . 1) "../stdlib/core/optimize.scm" . 775230)
         (push.cdr.iloc (0 . 2) "../stdlib/core/optimize.scm" . 775242)
         (push.iloc.0 . 3)
         (push.iloc.0 . 4)
         (apply.iloc+ (1 . 0) "../stdlib/core/optimize.scm" . 775213))
       (push.car.iloc (0 . 1) "../stdlib/core/optimize.scm" . 778290)
       (const . #f)
       (if.eq?
         (call
           (push.car.iloc (0 . 2) "../stdlib/core/optimize.scm" . 779324)
           (apply.gloc.of |core.optimize'function?| "../stdlib/core/optimize.scm" . 779313))
         (if.true
           (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 780343)
           (push.cdr.iloc (0 . 1) "../stdlib/core/optimize.scm" . 780354)
           (push.cdr.iloc (0 . 2) "../stdlib/core/optimize.scm" . 780366)
           (push.iloc.0 . 3)
           (push.iloc.0 . 4)
           (apply.iloc+ (1 . 0) "../stdlib/core/optimize.scm" . 780337))
         (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 783415)
         (push.cdr.iloc (0 . 1) "../stdlib/core/optimize.scm" . 783426)
         (push.cdr.iloc (0 . 2) "../stdlib/core/optimize.scm" . 783438)
         (call
           (push.car.iloc (0 . 2) "../stdlib/core/optimize.scm" . 784457)
           (push.iloc 7 . 1)
           (push.iloc 7 . 2)
           (apply.gloc.of |core.optimize'transcribe| "../stdlib/core/optimize.scm" . 784445))
         (push)
         (iloc.0 . 3)
         (push.cons)
         (push.iloc.0 . 4)
         (apply.iloc+ (1 . 0) "../stdlib/core/optimize.scm" . 783409))
       (car.iloc (0 . 1) "../stdlib/core/optimize.scm" . 786486)
       (if.symbol?
         (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 787507)
         (push.cdr.iloc (0 . 1) "../stdlib/core/optimize.scm" . 787518)
         (push.cdr.iloc (0 . 2) "../stdlib/core/optimize.scm" . 787530)
         (push.iloc.0 . 3)
         (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 789567)
         (call
           (push.car.iloc (0 . 2) "../stdlib/core/optimize.scm" . 789590)
           (push.iloc 7 . 1)
           (push.iloc 7 . 2)
           (apply.gloc.of |core.optimize'transcribe| "../stdlib/core/optimize.scm" . 789578))
         (push)
         (push.subr.gloc.of |.list| 2 "../stdlib/core/optimize.scm" . 789561)
         (iloc.0 . 4)
         (push.cons)
         (apply.iloc+ (1 . 0) "../stdlib/core/optimize.scm" . 787501))
       (ret.const.unspec))
     (push.iloc 4 . 0)
     (push.iloc 3 . 0)
     (push.iloc 4 . 1)
     (push.const)
     (push.const)
     (apply.iloc+ (0 . 0) "../stdlib/core/optimize.scm" . 770084))
   (push.close
     (2 0)
     (iloc.0 . 0)
     (if.null?
       (push.car.iloc (5 . 0) "../stdlib/core/optimize.scm" . 791592)
       (push.iloc.0 . 1)
       (push.iloc.1 . 0)
       (push.subr.gloc.of |.cons*| 3 "../stdlib/core/optimize.scm" . 791583)
       (extend . 1)
       (push.iloc.0 . 0)
       (iloc 6 . 0)
       (if.eq? (ret.iloc 0 . 0))
       (call
         (push.iloc.0 . 0)
         (push.iloc 6 . 0)
         (call (apply.gloc.of |core.optimize'annotate-hook| "../stdlib/core/optimize.scm" . 791583))
         (apply))
       (ret.iloc 0 . 0))
     (push.car.iloc (5 . 0) "../stdlib/core/optimize.scm" . 793643)
     (const . let)
     (if.eq?
       (push.const . begin)
       (push.iloc.0 . 0)
       (push.car.iloc (5 . 0) "../stdlib/core/optimize.scm" . 794687)
       (push.iloc.0 . 1)
       (push.iloc.1 . 0)
       (push.subr.gloc.of |.cons*| 3 "../stdlib/core/optimize.scm" . 794662)
       (push.subr.gloc.of |.list| 1 "../stdlib/core/optimize.scm" . 794662)
       (subr.gloc.of |.append| 2 "../stdlib/core/optimize.scm" . 794662)
       (push.cons)
       (extend . 1)
       (push.iloc.0 . 0)
       (iloc 6 . 0)
       (if.eq? (ret.iloc 0 . 0))
       (call
         (push.iloc.0 . 0)
         (push.iloc 6 . 0)
         (call (apply.gloc.of |core.optimize'annotate-hook| "../stdlib/core/optimize.scm" . 794662))
         (apply))
       (ret.iloc 0 . 0))
     (push.car.iloc (5 . 0) "../stdlib/core/optimize.scm" . 795691)
     (const . letrec*)
     (if.eq?
       (push.car.iloc (5 . 0) "../stdlib/core/optimize.scm" . 796719)
       (push.iloc.0 . 1)
       (push.iloc.0 . 0)
       (push.iloc.1 . 0)
       (push.subr.gloc.of |.append| 2 "../stdlib/core/optimize.scm" . 796710)
       (push.subr.gloc.of |.cons*| 3 "../stdlib/core/optimize.scm" . 796710)
       (extend . 1)
       (push.iloc.0 . 0)
       (iloc 6 . 0)
       (if.eq? (ret.iloc 0 . 0))
       (call
         (push.iloc.0 . 0)
         (push.iloc 6 . 0)
         (call (apply.gloc.of |core.optimize'annotate-hook| "../stdlib/core/optimize.scm" . 796710))
         (apply))
       (ret.iloc 0 . 0))
     (push.const . "coreform-optimize")
     (push.const . "internal inconsistency in ~s")
     (push.gloc.of |core.optimize'transcribe-binding-construct|)
     (push.subr.gloc.of |.format| 2 "../stdlib/core/optimize.scm" . 798799)
     (push.iloc 5 . 0)
     (apply.gloc.of |.assertion-violation| "../stdlib/core/optimize.scm" . 798758))
   (apply.gloc.of |.call-with-values| "../stdlib/core/optimize.scm" . 768020))
 (set.gloc.of |core.optimize'transcribe-binding-construct|)
 (close
   (3 0 . |core.optimize'transcribe|)
   (iloc.0 . 0)
   (if.pair?
     (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 815124)
     (extend . 1)
     (push.iloc.0 . 0)
     (push.const let letrec*)
     (subr.gloc.of |.memq| 2 "../stdlib/core/optimize.scm" . 815118)
     (if.true
       (push.iloc.1 . 0)
       (push.iloc.1 . 1)
       (push.iloc.1 . 2)
       (apply.gloc.of
         |core.optimize'transcribe-binding-construct|
         "../stdlib/core/optimize.scm"
         .
         817169))
     (push.iloc.0 . 0)
     (push.const quote define lambda if)
     (subr.gloc.of |.memq| 2 "../stdlib/core/optimize.scm" . 815118)
     (if.true
       (call
         (iloc.1 . 0)
         (if.not.pair?.ret.const . #f)
         (cdr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 819217)
         (ret.pair? "../stdlib/core/optimize.scm" . 819217))
       (push)
       (extend . 1)
       (call
         (iloc.0 . 0)
         (if.false.ret)
         (cddr.iloc (2 . 0) "../stdlib/core/optimize.scm" . 819217)
         (if.not.null?.ret.const . #f)
         (push.car.iloc (2 . 0) "../stdlib/core/optimize.scm" . 819217)
         (const . quote)
         (ret.eq? "../stdlib/core/optimize.scm" . 819217))
       (if.true (ret.iloc 2 . 0))
       (call
         (iloc.0 . 0)
         (if.false.ret)
         (push.car.iloc (2 . 0) "../stdlib/core/optimize.scm" . 819217)
         (const . lambda)
         (ret.eq? "../stdlib/core/optimize.scm" . 819217))
       (if.true
         (push.cddr.iloc (2 . 0) "../stdlib/core/optimize.scm" . 819217)
         (push.cadr.iloc (2 . 0) "../stdlib/core/optimize.scm" . 819217)
         (extend . 2)
         (push.iloc 3 . 1)
         (push.iloc 3 . 0)
         (push.const . #f)
         (push.subr.gloc.of |.core-hashtable-ref| 3 "../stdlib/core/optimize.scm" . 819217)
         (extend . 1)
         (iloc.0 . 0)
         (if.true
           (push.iloc.0 . 0)
           (ret.subr.gloc.of |.values| "../stdlib/core/optimize.scm" . 819217))
         (call
           (push.iloc.1 . 0)
           (push.iloc 4 . 1)
           (push.iloc 4 . 2)
           (apply.gloc.of |core.optimize'transcribe-each| "../stdlib/core/optimize.scm" . 819217))
         (push)
         (extend . 1)
         (push.iloc 2 . 0)
         (iloc.0 . 0)
         (if.eq? (ret.iloc 5 . 0))
         (call
           (push.const . lambda)
           (push.iloc 2 . 1)
           (push.iloc.0 . 0)
           (push.subr.gloc.of |.cons*| 3 "../stdlib/core/optimize.scm" . 819217)
           (extend . 1)
           (push.iloc.0 . 0)
           (iloc 6 . 0)
           (if.eq? (ret.iloc 0 . 0))
           (call
             (push.iloc.0 . 0)
             (push.iloc 6 . 0)
             (call
               (apply.gloc.of
                 |core.optimize'annotate-closure-hook|
                 "../stdlib/core/optimize.scm"
                 .
                 819217))
             (apply))
           (ret.iloc 0 . 0))
         (push)
         (extend . 1)
         (push.iloc.0 . 0)
         (iloc 6 . 0)
         (if.eq? (ret.iloc 0 . 0))
         (call
           (push.iloc.0 . 0)
           (push.iloc 6 . 0)
           (call
             (apply.gloc.of |core.optimize'annotate-hook| "../stdlib/core/optimize.scm" . 819217))
           (apply))
         (ret.iloc 0 . 0))
       (call
         (iloc.0 . 0)
         (if.false.ret)
         (cddr.iloc (2 . 0) "../stdlib/core/optimize.scm" . 819217)
         (if.not.pair?.ret.const . #f)
         (push.iloc 2 . 0)
         (subr.gloc.of |.caddr| 1 "../stdlib/core/optimize.scm" . 819217)
         (if.not.pair?.ret.const . #f)
         (push.iloc 2 . 0)
         (subr.gloc.of |.cdaddr| 1 "../stdlib/core/optimize.scm" . 819217)
         (if.not.pair?.ret.const . #f)
         (push.iloc 2 . 0)
         (subr.gloc.of |.cdddr| 1 "../stdlib/core/optimize.scm" . 819217)
         (if.not.null?.ret.const . #f)
         (push.car.iloc (2 . 0) "../stdlib/core/optimize.scm" . 819217)
         (const . define)
         (if.not.eq?.ret.const . #f)
         (push.iloc 2 . 0)
         (push.subr.gloc.of |.caaddr| 1 "../stdlib/core/optimize.scm" . 819217)
         (const . lambda)
         (ret.eq? "../stdlib/core/optimize.scm" . 819217))
       (if.true
         (push.iloc 2 . 0)
         (push.subr.gloc.of |.cdaddr| 1 "../stdlib/core/optimize.scm" . 819217)
         (push.subr.gloc.of |.cdr| 1 "../stdlib/core/optimize.scm" . 819217)
         (push.iloc 2 . 0)
         (push.subr.gloc.of |.cdaddr| 1 "../stdlib/core/optimize.scm" . 819217)
         (push.subr.gloc.of |.car| 1 "../stdlib/core/optimize.scm" . 819217)
         (push.cadr.iloc (2 . 0) "../stdlib/core/optimize.scm" . 819217)
         (extend . 3)
         (call
           (push.iloc.0 . 0)
           (push.iloc 3 . 1)
           (push.iloc 3 . 2)
           (apply.gloc.of |core.optimize'transcribe-each| "../stdlib/core/optimize.scm" . 819217))
         (push)
         (extend . 1)
         (push.iloc.1 . 0)
         (iloc.0 . 0)
         (if.eq? (ret.iloc 4 . 0))
         (push.const . define)
         (push.iloc.1 . 2)
         (call
           (push.const . lambda)
           (push.iloc.1 . 1)
           (push.iloc.0 . 0)
           (push.subr.gloc.of |.cons*| 3 "../stdlib/core/optimize.scm" . 819217)
           (push.iloc 4 . 0)
           (push.subr.gloc.of |.caddr| 1 "../stdlib/core/optimize.scm" . 819217)
           (extend . 2)
           (push.iloc.0 . 0)
           (iloc.0 . 1)
           (if.eq? (ret.iloc 0 . 0))
           (call
             (push.iloc.0 . 0)
             (push.iloc.0 . 1)
             (call
               (apply.gloc.of
                 |core.optimize'annotate-closure-hook|
                 "../stdlib/core/optimize.scm"
                 .
                 819217))
             (apply))
           (ret.iloc 0 . 0))
         (push)
         (push.subr.gloc.of |.list| 3 "../stdlib/core/optimize.scm" . 819217)
         (extend . 1)
         (push.iloc.0 . 0)
         (iloc 5 . 0)
         (if.eq? (ret.iloc 0 . 0))
         (call
           (push.iloc.0 . 0)
           (push.iloc 5 . 0)
           (call
             (apply.gloc.of |core.optimize'annotate-hook| "../stdlib/core/optimize.scm" . 819217))
           (apply))
         (ret.iloc 0 . 0))
       (call
         (push.iloc 2 . 0)
         (push.iloc 2 . 1)
         (push.iloc 2 . 2)
         (apply.gloc.of |core.optimize'transcribe-each| "../stdlib/core/optimize.scm" . 819217))
       (push)
       (extend . 1)
       (push.iloc.0 . 0)
       (iloc 3 . 0)
       (if.eq? (ret.iloc 0 . 0))
       (call
         (push.iloc.0 . 0)
         (push.iloc 3 . 0)
         (call (apply.gloc.of |core.optimize'annotate-hook| "../stdlib/core/optimize.scm" . 819217))
         (apply))
       (ret.iloc 0 . 0))
     (call
       (push.iloc.1 . 0)
       (push.iloc.1 . 1)
       (push.iloc.1 . 2)
       (apply.gloc.of |core.optimize'transcribe-each| "../stdlib/core/optimize.scm" . 837655))
     (push)
     (extend . 1)
     (push.iloc.0 . 0)
     (iloc 2 . 0)
     (if.eq? (ret.iloc 0 . 0))
     (call
       (push.iloc.0 . 0)
       (push.iloc 2 . 0)
       (call (apply.gloc.of |core.optimize'annotate-hook| "../stdlib/core/optimize.scm" . 837655))
       (apply))
     (ret.iloc 0 . 0))
   (iloc.0 . 0)
   (if.symbol?
     (push.iloc.0 . 2)
     (push.iloc.0 . 0)
     (push.const . #f)
     (subr.gloc.of |.core-hashtable-ref| 3 "../stdlib/core/optimize.scm" . 839698)
     (if.true.ret)
     (ret.iloc 0 . 0))
   (ret.iloc 0 . 0))
 (set.gloc.of |core.optimize'transcribe|)
 (close
   (1 0 . |core.optimize'self-evaluation?|)
   (push.iloc.0 . 0)
   (subr.gloc.of |.number?| 1 "../stdlib/core/optimize.scm" . 844811)
   (if.true.ret)
   (push.iloc.0 . 0)
   (subr.gloc.of |.boolean?| 1 "../stdlib/core/optimize.scm" . 844823)
   (if.true.ret)
   (push.iloc.0 . 0)
   (subr.gloc.of |.char?| 1 "../stdlib/core/optimize.scm" . 844836)
   (if.true.ret)
   (push.iloc.0 . 0)
   (subr.gloc.of |.string?| 1 "../stdlib/core/optimize.scm" . 844846)
   (if.true.ret)
   (push.iloc.0 . 0)
   (ret.subr.gloc.of |.bytevector?| "../stdlib/core/optimize.scm" . 844858))
 (set.gloc.of |core.optimize'self-evaluation?|)
 (close
   (1 0 . |core.optimize'pretty-each|)
   (touch.gloc.of |loop`425|)
   (push.iloc.0 . 0)
   (apply.gloc.of |loop`425| "../stdlib/core/optimize.scm" . 848903))
 (set.gloc.of |core.optimize'pretty-each|)
 (close
   (1 0 . |core.optimize'pretty|)
   (iloc.0 . 0)
   (if.pair?
     (car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 886806)
     (if.pair?
       (call
         (iloc.0 . 0)
         (if.not.pair?.ret.const . #f)
         (car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 886795)
         (if.not.pair?.ret.const . #f)
         (push.iloc.0 . 0)
         (subr.gloc.of |.cdar| 1 "../stdlib/core/optimize.scm" . 886795)
         (if.not.pair?.ret.const . #f)
         (push.iloc.0 . 0)
         (push.subr.gloc.of |.cadar| 1 "../stdlib/core/optimize.scm" . 886795)
         (subr.gloc.of |.list?| 1 "../stdlib/core/optimize.scm" . 886795)
         (if.false.ret)
         (push.iloc.0 . 0)
         (push.subr.gloc.of |.caar| 1 "../stdlib/core/optimize.scm" . 886795)
         (const . lambda)
         (if.not.eq?.ret.const . #f)
         (push.iloc.0 . 0)
         (push.subr.gloc.of |.cadar| 1 "../stdlib/core/optimize.scm" . 886795)
         (push.subr.gloc.of |.length| 1 "../stdlib/core/optimize.scm" . 886795)
         (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 886795)
         (push.subr.gloc.of |.length| 1 "../stdlib/core/optimize.scm" . 886795)
         (ret.subr.gloc.of |.=| "../stdlib/core/optimize.scm" . 886795))
       (if.true
         (push.const . let)
         (call
           (push.gloc.of |.list|)
           (push.iloc.0 . 0)
           (push.subr.gloc.of |.cadar| 1 "../stdlib/core/optimize.scm" . 886795)
           (call
             (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 886795)
             (apply.gloc.of |core.optimize'pretty-each| "../stdlib/core/optimize.scm" . 886795))
           (push)
           (apply.gloc.of |.map| "../stdlib/core/optimize.scm" . 886795))
         (push)
         (call
           (call
             (push.iloc.0 . 0)
             (push.subr.gloc.of |.cddar| 1 "../stdlib/core/optimize.scm" . 886795)
             (apply.gloc.of |core.optimize'pretty-each| "../stdlib/core/optimize.scm" . 886795))
           (push)
           (apply.gloc.of |core.optimize'flatten-begin| "../stdlib/core/optimize.scm" . 886795))
         (push)
         (push.subr.gloc.of |.cons*| 3 "../stdlib/core/optimize.scm" . 886795)
         (extend . 1)
         (push.iloc.0 . 0)
         (iloc.1 . 0)
         (if.eq? (ret.iloc 0 . 0))
         (call
           (push.iloc.0 . 0)
           (push.iloc.1 . 0)
           (call
             (apply.gloc.of |core.optimize'annotate-hook| "../stdlib/core/optimize.scm" . 886795))
           (apply))
         (ret.iloc 0 . 0))
       (push.iloc.0 . 0)
       (apply.gloc.of |core.optimize'pretty-each| "../stdlib/core/optimize.scm" . 886795))
     (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 893973)
     (extend . 1)
     (push.iloc.0 . 0)
     (const . and)
     (if.eq?
       (cdr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 896032)
       (if.null?.ret.const . #t)
       (cddr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 897056)
       (if.null?
         (push.cadr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 897075)
         (extend . 1)
         (push.iloc.0 . 0)
         (iloc 2 . 0)
         (if.eq? (ret.iloc 0 . 0))
         (call
           (push.iloc.0 . 0)
           (push.iloc 2 . 0)
           (call
             (apply.gloc.of |core.optimize'annotate-hook| "../stdlib/core/optimize.scm" . 897075))
           (apply))
         (ret.iloc 0 . 0))
       (call
         (push.cdr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 899121)
         (apply.gloc.of |core.optimize'pretty-each| "../stdlib/core/optimize.scm" . 899108))
       (push)
       (extend . 1)
       (push.iloc.0 . 0)
       (cdr.iloc (2 . 0) "../stdlib/core/optimize.scm" . 900139)
       (if.eq?
         (call
           (touch.gloc.of |flatten-expression`432|)
           (push.iloc 2 . 0)
           (push.const . and)
           (apply.gloc.of |flatten-expression`432| "../stdlib/core/optimize.scm" . 901160))
         (push)
         (extend . 1)
         (push.iloc.0 . 0)
         (iloc 3 . 0)
         (if.eq? (ret.iloc 0 . 0))
         (call
           (push.iloc.0 . 0)
           (push.iloc 3 . 0)
           (call
             (apply.gloc.of |core.optimize'annotate-hook| "../stdlib/core/optimize.scm" . 901160))
           (apply))
         (ret.iloc 0 . 0))
       (call
         (touch.gloc.of |flatten-expression`432|)
         (push.const . and)
         (iloc.0 . 0)
         (push.cons)
         (push.const . and)
         (apply.gloc.of |flatten-expression`432| "../stdlib/core/optimize.scm" . 903208))
       (push)
       (extend . 1)
       (push.iloc.0 . 0)
       (iloc 3 . 0)
       (if.eq? (ret.iloc 0 . 0))
       (call
         (push.iloc.0 . 0)
         (push.iloc 3 . 0)
         (call (apply.gloc.of |core.optimize'annotate-hook| "../stdlib/core/optimize.scm" . 903208))
         (apply))
       (ret.iloc 0 . 0))
     (push.iloc.0 . 0)
     (const . or)
     (if.eq?
       (cdr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 905248)
       (if.null?.ret.const . #f)
       (cddr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 906272)
       (if.null?
         (push.cadr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 906291)
         (extend . 1)
         (push.iloc.0 . 0)
         (iloc 2 . 0)
         (if.eq? (ret.iloc 0 . 0))
         (call
           (push.iloc.0 . 0)
           (push.iloc 2 . 0)
           (call
             (apply.gloc.of |core.optimize'annotate-hook| "../stdlib/core/optimize.scm" . 906291))
           (apply))
         (ret.iloc 0 . 0))
       (call
         (push.cdr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 908337)
         (apply.gloc.of |core.optimize'pretty-each| "../stdlib/core/optimize.scm" . 908324))
       (push)
       (extend . 1)
       (push.iloc.0 . 0)
       (cdr.iloc (2 . 0) "../stdlib/core/optimize.scm" . 909355)
       (if.eq?
         (call
           (touch.gloc.of |flatten-expression`432|)
           (push.iloc 2 . 0)
           (push.const . or)
           (apply.gloc.of |flatten-expression`432| "../stdlib/core/optimize.scm" . 910376))
         (push)
         (extend . 1)
         (push.iloc.0 . 0)
         (iloc 3 . 0)
         (if.eq? (ret.iloc 0 . 0))
         (call
           (push.iloc.0 . 0)
           (push.iloc 3 . 0)
           (call
             (apply.gloc.of |core.optimize'annotate-hook| "../stdlib/core/optimize.scm" . 910376))
           (apply))
         (ret.iloc 0 . 0))
       (call
         (touch.gloc.of |flatten-expression`432|)
         (push.const . or)
         (iloc.0 . 0)
         (push.cons)
         (push.const . or)
         (apply.gloc.of |flatten-expression`432| "../stdlib/core/optimize.scm" . 912424))
       (push)
       (extend . 1)
       (push.iloc.0 . 0)
       (iloc 3 . 0)
       (if.eq? (ret.iloc 0 . 0))
       (call
         (push.iloc.0 . 0)
         (push.iloc 3 . 0)
         (call (apply.gloc.of |core.optimize'annotate-hook| "../stdlib/core/optimize.scm" . 912424))
         (apply))
       (ret.iloc 0 . 0))
     (push.iloc.0 . 0)
     (push.const quote begin lambda let letrec* if)
     (subr.gloc.of |.memq| 2 "../stdlib/core/optimize.scm" . 893967)
     (if.true
       (call
         (iloc.1 . 0)
         (if.not.pair?.ret.const . #f)
         (cdr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 914450)
         (ret.pair? "../stdlib/core/optimize.scm" . 914450))
       (push)
       (extend . 1)
       (call
         (iloc.0 . 0)
         (if.false.ret)
         (cadr.iloc (2 . 0) "../stdlib/core/optimize.scm" . 914450)
         (ret.pair? "../stdlib/core/optimize.scm" . 914450))
       (push)
       (extend . 1)
       (call
         (iloc.1 . 0)
         (if.false.ret)
         (cddr.iloc (3 . 0) "../stdlib/core/optimize.scm" . 914450)
         (if.not.pair?.ret.const . #f)
         (push.car.iloc (3 . 0) "../stdlib/core/optimize.scm" . 914450)
         (const . if)
         (ret.eq? "../stdlib/core/optimize.scm" . 914450))
       (push)
       (extend . 1)
       (call
         (iloc 2 . 0)
         (if.false.ret)
         (cddr.iloc (4 . 0) "../stdlib/core/optimize.scm" . 914450)
         (if.not.null?.ret.const . #f)
         (push.car.iloc (4 . 0) "../stdlib/core/optimize.scm" . 914450)
         (const . quote)
         (ret.eq? "../stdlib/core/optimize.scm" . 914450))
       (if.true
         (call
           (push.cadr.iloc (4 . 0) "../stdlib/core/optimize.scm" . 914450)
           (apply.gloc.of |core.optimize'self-evaluation?| "../stdlib/core/optimize.scm" . 914450))
         (if.true
           (push.iloc 4 . 0)
           (ret.subr.gloc.of |.cadr| "../stdlib/core/optimize.scm" . 914450))
         (ret.iloc 4 . 0))
       (call
         (iloc 4 . 0)
         (if.not.pair?.ret.const . #f)
         (push.car.iloc (4 . 0) "../stdlib/core/optimize.scm" . 914450)
         (const . begin)
         (ret.eq? "../stdlib/core/optimize.scm" . 914450))
       (if.true
         (push.cdr.iloc (4 . 0) "../stdlib/core/optimize.scm" . 914450)
         (extend . 1)
         (iloc.0 . 0)
         (if.null? (ret.iloc 5 . 0))
         (call
           (iloc.0 . 0)
           (if.not.pair?.ret.const . #f)
           (cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 914450)
           (ret.null? "../stdlib/core/optimize.scm" . 914450))
         (if.true
           (push.iloc.0 . 0)
           (ret.subr.gloc.of |.car| "../stdlib/core/optimize.scm" . 914450))
         (call
           (call
             (push.iloc.0 . 0)
             (apply.gloc.of |core.optimize'pretty-each| "../stdlib/core/optimize.scm" . 914450))
           (push)
           (apply.gloc.of |core.optimize'flatten-begin| "../stdlib/core/optimize.scm" . 914450))
         (push)
         (extend . 1)
         (push.iloc.0 . 0)
         (iloc.1 . 0)
         (if.eq? (ret.iloc 6 . 0))
         (push.const . begin)
         (iloc.0 . 0)
         (push.cons)
         (extend . 1)
         (push.iloc.0 . 0)
         (iloc 7 . 0)
         (if.eq? (ret.iloc 0 . 0))
         (call
           (push.iloc.0 . 0)
           (push.iloc 7 . 0)
           (call
             (apply.gloc.of |core.optimize'annotate-hook| "../stdlib/core/optimize.scm" . 914450))
           (apply))
         (ret.iloc 0 . 0))
       (call
         (iloc 2 . 0)
         (if.false.ret)
         (push.car.iloc (4 . 0) "../stdlib/core/optimize.scm" . 914450)
         (const . lambda)
         (ret.eq? "../stdlib/core/optimize.scm" . 914450))
       (if.true
         (push.cddr.iloc (4 . 0) "../stdlib/core/optimize.scm" . 914450)
         (push.cadr.iloc (4 . 0) "../stdlib/core/optimize.scm" . 914450)
         (extend . 2)
         (call
           (call
             (push.iloc.0 . 0)
             (apply.gloc.of |core.optimize'pretty-each| "../stdlib/core/optimize.scm" . 914450))
           (push)
           (apply.gloc.of |core.optimize'flatten-begin| "../stdlib/core/optimize.scm" . 914450))
         (push)
         (extend . 1)
         (push.iloc.0 . 0)
         (iloc.1 . 0)
         (if.eq? (ret.iloc 6 . 0))
         (call
           (push.const . lambda)
           (push.iloc.1 . 1)
           (push.iloc.0 . 0)
           (push.subr.gloc.of |.cons*| 3 "../stdlib/core/optimize.scm" . 914450)
           (extend . 1)
           (push.iloc.0 . 0)
           (iloc 7 . 0)
           (if.eq? (ret.iloc 0 . 0))
           (call
             (push.iloc.0 . 0)
             (push.iloc 7 . 0)
             (call
               (apply.gloc.of
                 |core.optimize'annotate-closure-hook|
                 "../stdlib/core/optimize.scm"
                 .
                 914450))
             (apply))
           (ret.iloc 0 . 0))
         (push)
         (extend . 1)
         (push.iloc.0 . 0)
         (iloc 7 . 0)
         (if.eq? (ret.iloc 0 . 0))
         (call
           (push.iloc.0 . 0)
           (push.iloc 7 . 0)
           (call
             (apply.gloc.of |core.optimize'annotate-hook| "../stdlib/core/optimize.scm" . 914450))
           (apply))
         (ret.iloc 0 . 0))
       (call
         (iloc 2 . 0)
         (if.false.ret)
         (push.car.iloc (4 . 0) "../stdlib/core/optimize.scm" . 914450)
         (const . let)
         (ret.eq? "../stdlib/core/optimize.scm" . 914450))
       (if.true
         (push.cddr.iloc (4 . 0) "../stdlib/core/optimize.scm" . 914450)
         (push.cadr.iloc (4 . 0) "../stdlib/core/optimize.scm" . 914450)
         (extend . 2)
         (iloc.0 . 1)
         (if.null?
           (push.const . begin)
           (call
             (push.iloc.0 . 0)
             (apply.gloc.of |core.optimize'flatten-begin| "../stdlib/core/optimize.scm" . 914450))
           (push.cons)
           (extend . 1)
           (push.iloc.0 . 0)
           (iloc 6 . 0)
           (if.eq? (ret.iloc 0 . 0))
           (call
             (push.iloc.0 . 0)
             (push.iloc 6 . 0)
             (call
               (apply.gloc.of |core.optimize'annotate-hook| "../stdlib/core/optimize.scm" . 914450))
             (apply))
           (ret.iloc 0 . 0))
         (call
           (push.gloc.of |.cadr|)
           (push.iloc.0 . 1)
           (apply.gloc.of |.map| "../stdlib/core/optimize.scm" . 914450))
         (push)
         (extend . 1)
         (call
           (push.iloc.0 . 0)
           (apply.gloc.of |core.optimize'pretty-each| "../stdlib/core/optimize.scm" . 914450))
         (push)
         (call
           (call
             (push.iloc.1 . 0)
             (apply.gloc.of |core.optimize'pretty-each| "../stdlib/core/optimize.scm" . 914450))
           (push)
           (apply.gloc.of |core.optimize'flatten-begin| "../stdlib/core/optimize.scm" . 914450))
         (push)
         (extend . 2)
         (call
           (push.iloc 2 . 0)
           (iloc.0 . 1)
           (if.not.eq?.ret.const . #f)
           (push.gloc.of |.eq?|)
           (push.iloc.1 . 0)
           (push.iloc.0 . 0)
           (apply.gloc.of |core.lists'for-all| "../stdlib/core/optimize.scm" . 914450))
         (if.true (ret.iloc 7 . 0))
         (push.const . let)
         (call
           (push.gloc.of |.list|)
           (call
             (push.gloc.of |.car|)
             (push.iloc 2 . 1)
             (apply.gloc.of |.map| "../stdlib/core/optimize.scm" . 914450))
           (push)
           (push.iloc.0 . 0)
           (apply.gloc.of |.map| "../stdlib/core/optimize.scm" . 914450))
         (push)
         (push.iloc.0 . 1)
         (push.subr.gloc.of |.cons*| 3 "../stdlib/core/optimize.scm" . 914450)
         (extend . 1)
         (push.iloc.0 . 0)
         (iloc 8 . 0)
         (if.eq? (ret.iloc 0 . 0))
         (call
           (push.iloc.0 . 0)
           (push.iloc 8 . 0)
           (call
             (apply.gloc.of |core.optimize'annotate-hook| "../stdlib/core/optimize.scm" . 914450))
           (apply))
         (ret.iloc 0 . 0))
       (call
         (iloc 2 . 0)
         (if.false.ret)
         (push.car.iloc (4 . 0) "../stdlib/core/optimize.scm" . 914450)
         (const . letrec*)
         (ret.eq? "../stdlib/core/optimize.scm" . 914450))
       (if.true
         (push.cddr.iloc (4 . 0) "../stdlib/core/optimize.scm" . 914450)
         (push.cadr.iloc (4 . 0) "../stdlib/core/optimize.scm" . 914450)
         (extend . 2)
         (iloc.0 . 1)
         (if.null?
           (push.const . begin)
           (call
             (push.iloc.0 . 0)
             (apply.gloc.of |core.optimize'flatten-begin| "../stdlib/core/optimize.scm" . 914450))
           (push.cons)
           (extend . 1)
           (push.iloc.0 . 0)
           (iloc 6 . 0)
           (if.eq? (ret.iloc 0 . 0))
           (call
             (push.iloc.0 . 0)
             (push.iloc 6 . 0)
             (call
               (apply.gloc.of |core.optimize'annotate-hook| "../stdlib/core/optimize.scm" . 914450))
             (apply))
           (ret.iloc 0 . 0))
         (call
           (push.gloc.of |.cadr|)
           (push.iloc.0 . 1)
           (apply.gloc.of |.map| "../stdlib/core/optimize.scm" . 914450))
         (push)
         (extend . 1)
         (call
           (push.iloc.0 . 0)
           (apply.gloc.of |core.optimize'pretty-each| "../stdlib/core/optimize.scm" . 914450))
         (push)
         (call
           (call
             (push.iloc.1 . 0)
             (apply.gloc.of |core.optimize'pretty-each| "../stdlib/core/optimize.scm" . 914450))
           (push)
           (apply.gloc.of |core.optimize'flatten-begin| "../stdlib/core/optimize.scm" . 914450))
         (push)
         (extend . 2)
         (call
           (push.iloc 2 . 0)
           (iloc.0 . 1)
           (if.not.eq?.ret.const . #f)
           (push.gloc.of |.eq?|)
           (push.iloc.1 . 0)
           (push.iloc.0 . 0)
           (apply.gloc.of |core.lists'for-all| "../stdlib/core/optimize.scm" . 914450))
         (if.true (ret.iloc 7 . 0))
         (push.const . letrec*)
         (call
           (push.gloc.of |.list|)
           (call
             (push.gloc.of |.car|)
             (push.iloc 2 . 1)
             (apply.gloc.of |.map| "../stdlib/core/optimize.scm" . 914450))
           (push)
           (push.iloc.0 . 0)
           (apply.gloc.of |.map| "../stdlib/core/optimize.scm" . 914450))
         (push)
         (push.iloc.0 . 1)
         (push.subr.gloc.of |.cons*| 3 "../stdlib/core/optimize.scm" . 914450)
         (extend . 1)
         (push.iloc.0 . 0)
         (iloc 8 . 0)
         (if.eq? (ret.iloc 0 . 0))
         (call
           (push.iloc.0 . 0)
           (push.iloc 8 . 0)
           (call
             (apply.gloc.of |core.optimize'annotate-hook| "../stdlib/core/optimize.scm" . 914450))
           (apply))
         (ret.iloc 0 . 0))
       (call
         (iloc.1 . 0)
         (if.false.ret)
         (cddr.iloc (4 . 0) "../stdlib/core/optimize.scm" . 914450)
         (if.not.pair?.ret.const . #f)
         (push.iloc 4 . 0)
         (subr.gloc.of |.cdddr| 1 "../stdlib/core/optimize.scm" . 914450)
         (if.not.pair?.ret.const . #f)
         (push.iloc 4 . 0)
         (subr.gloc.of |.cddddr| 1 "../stdlib/core/optimize.scm" . 914450)
         (if.not.null?.ret.const . #f)
         (push.car.iloc (4 . 0) "../stdlib/core/optimize.scm" . 914450)
         (const . if)
         (if.not.eq?.ret.const . #f)
         (push.iloc 4 . 0)
         (push.subr.gloc.of |.caadr| 1 "../stdlib/core/optimize.scm" . 914450)
         (const . and)
         (if.not.eq?.ret.const . #f)
         (push.iloc 4 . 0)
         (push.subr.gloc.of |.cadddr| 1 "../stdlib/core/optimize.scm" . 914450)
         (const . #f)
         (ret.eq? "../stdlib/core/optimize.scm" . 914450))
       (if.true
         (push.iloc 4 . 0)
         (push.subr.gloc.of |.caddr| 1 "../stdlib/core/optimize.scm" . 914450)
         (extend . 1)
         (call
           (touch.gloc.of |flatten-expression`432|)
           (push.const . and)
           (call
             (push.iloc 5 . 0)
             (push.subr.gloc.of |.cdadr| 1 "../stdlib/core/optimize.scm" . 914450)
             (apply.gloc.of |core.optimize'pretty-each| "../stdlib/core/optimize.scm" . 914450))
           (push)
           (call
             (push.iloc.0 . 0)
             (apply.gloc.of |core.optimize'pretty| "../stdlib/core/optimize.scm" . 914450))
           (push)
           (push.subr.gloc.of |.list| 1 "../stdlib/core/optimize.scm" . 914450)
           (subr.gloc.of |.append| 2 "../stdlib/core/optimize.scm" . 914450)
           (push.cons)
           (push.const . and)
           (apply.gloc.of |flatten-expression`432| "../stdlib/core/optimize.scm" . 914450))
         (push)
         (extend . 1)
         (push.iloc.0 . 0)
         (iloc 6 . 0)
         (if.eq? (ret.iloc 0 . 0))
         (call
           (push.iloc.0 . 0)
           (push.iloc 6 . 0)
           (call
             (apply.gloc.of |core.optimize'annotate-hook| "../stdlib/core/optimize.scm" . 914450))
           (apply))
         (ret.iloc 0 . 0))
       (call
         (iloc.0 . 0)
         (if.false.ret)
         (push.cadr.iloc (4 . 0) "../stdlib/core/optimize.scm" . 914450)
         (const . #t)
         (ret.eq? "../stdlib/core/optimize.scm" . 914450))
       (if.true
         (call
           (push.iloc 4 . 0)
           (push.subr.gloc.of |.caddr| 1 "../stdlib/core/optimize.scm" . 914450)
           (apply.gloc.of |core.optimize'pretty| "../stdlib/core/optimize.scm" . 914450))
         (push)
         (extend . 1)
         (push.iloc.0 . 0)
         (iloc 5 . 0)
         (if.eq? (ret.iloc 0 . 0))
         (call
           (push.iloc.0 . 0)
           (push.iloc 5 . 0)
           (call
             (apply.gloc.of |core.optimize'annotate-hook| "../stdlib/core/optimize.scm" . 914450))
           (apply))
         (ret.iloc 0 . 0))
       (call
         (iloc.0 . 0)
         (if.false.ret)
         (push.cadr.iloc (4 . 0) "../stdlib/core/optimize.scm" . 914450)
         (const . #f)
         (ret.eq? "../stdlib/core/optimize.scm" . 914450))
       (if.true
         (push.iloc 4 . 0)
         (push.subr.gloc.of |.cdddr| 1 "../stdlib/core/optimize.scm" . 914450)
         (extend . 1)
         (iloc.0 . 0)
         (if.null?
           (push.const |.unspecified|)
           (extend . 1)
           (push.iloc.0 . 0)
           (iloc 6 . 0)
           (if.eq? (ret.iloc 0 . 0))
           (call
             (push.iloc.0 . 0)
             (push.iloc 6 . 0)
             (call
               (apply.gloc.of |core.optimize'annotate-hook| "../stdlib/core/optimize.scm" . 914450))
             (apply))
           (ret.iloc 0 . 0))
         (call
           (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 914450)
           (apply.gloc.of |core.optimize'pretty| "../stdlib/core/optimize.scm" . 914450))
         (push)
         (extend . 1)
         (push.iloc.0 . 0)
         (iloc 6 . 0)
         (if.eq? (ret.iloc 0 . 0))
         (call
           (push.iloc.0 . 0)
           (push.iloc 6 . 0)
           (call
             (apply.gloc.of |core.optimize'annotate-hook| "../stdlib/core/optimize.scm" . 914450))
           (apply))
         (ret.iloc 0 . 0))
       (call
         (iloc.1 . 0)
         (if.false.ret)
         (push.iloc 4 . 0)
         (subr.gloc.of |.cdadr| 1 "../stdlib/core/optimize.scm" . 914450)
         (if.not.pair?.ret.const . #f)
         (cddr.iloc (4 . 0) "../stdlib/core/optimize.scm" . 914450)
         (if.not.pair?.ret.const . #f)
         (push.iloc 4 . 0)
         (subr.gloc.of |.cdddr| 1 "../stdlib/core/optimize.scm" . 914450)
         (if.not.pair?.ret.const . #f)
         (push.iloc 4 . 0)
         (subr.gloc.of |.cddadr| 1 "../stdlib/core/optimize.scm" . 914450)
         (if.not.null?.ret.const . #f)
         (push.iloc 4 . 0)
         (subr.gloc.of |.cddddr| 1 "../stdlib/core/optimize.scm" . 914450)
         (if.not.null?.ret.const . #f)
         (push.car.iloc (4 . 0) "../stdlib/core/optimize.scm" . 914450)
         (const . if)
         (if.not.eq?.ret.const . #f)
         (push.iloc 4 . 0)
         (push.subr.gloc.of |.caadr| 1 "../stdlib/core/optimize.scm" . 914450)
         (const . not)
         (if.not.eq?.ret.const . #f)
         (push.const . not)
         (apply.gloc.of |core.optimize'primitive-function?| "../stdlib/core/optimize.scm" . 914450))
       (if.true
         (push.iloc 4 . 0)
         (push.subr.gloc.of |.cadddr| 1 "../stdlib/core/optimize.scm" . 914450)
         (push.iloc 4 . 0)
         (push.subr.gloc.of |.caddr| 1 "../stdlib/core/optimize.scm" . 914450)
         (extend . 2)
         (push.const . if)
         (call
           (push.iloc 5 . 0)
           (push.subr.gloc.of |.cadadr| 1 "../stdlib/core/optimize.scm" . 914450)
           (apply.gloc.of |core.optimize'pretty| "../stdlib/core/optimize.scm" . 914450))
         (push)
         (call
           (push.iloc.0 . 0)
           (apply.gloc.of |core.optimize'pretty| "../stdlib/core/optimize.scm" . 914450))
         (push)
         (call
           (push.iloc.0 . 1)
           (apply.gloc.of |core.optimize'pretty| "../stdlib/core/optimize.scm" . 914450))
         (push)
         (push.subr.gloc.of |.list| 4 "../stdlib/core/optimize.scm" . 914450)
         (extend . 1)
         (push.iloc.0 . 0)
         (iloc 6 . 0)
         (if.eq? (ret.iloc 0 . 0))
         (call
           (push.iloc.0 . 0)
           (push.iloc 6 . 0)
           (call
             (apply.gloc.of |core.optimize'annotate-hook| "../stdlib/core/optimize.scm" . 914450))
           (apply))
         (ret.iloc 0 . 0))
       (call
         (iloc 4 . 0)
         (if.not.pair?.ret.const . #f)
         (push.car.iloc (4 . 0) "../stdlib/core/optimize.scm" . 914450)
         (const . if)
         (ret.eq? "../stdlib/core/optimize.scm" . 914450))
       (if.true
         (push.iloc 4 . 0)
         (apply.gloc.of |core.optimize'pretty-each| "../stdlib/core/optimize.scm" . 914450))
       (push.const . "coreform-optimize")
       (push.const . "internal inconsistency in ~s")
       (push.gloc.of |core.optimize'pretty|)
       (push.subr.gloc.of |.format| 2 "../stdlib/core/optimize.scm" . 914450)
       (push.iloc 4 . 0)
       (apply.gloc.of |.assertion-violation| "../stdlib/core/optimize.scm" . 914450))
     (push.iloc.1 . 0)
     (apply.gloc.of |core.optimize'pretty-each| "../stdlib/core/optimize.scm" . 961554))
   (ret.iloc 0 . 0))
 (set.gloc.of |core.optimize'pretty|)
 (close
   (1 0 . |core.optimize'process-stackable|)
   (extend.unbound . 5)
   (push.close
     (2 0 . trace-lineage-each)
     (extend.enclose+
       (1 0 . loop)
       (iloc.0 . 0)
       (if.pair?
         (call
           (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 974883)
           (push.iloc 2 . 1)
           (apply.iloc (3 . 1) "../stdlib/core/optimize.scm" . 974868))
         (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 975898)
         (apply.iloc+ (1 . 0) "../stdlib/core/optimize.scm" . 975892))
       (ret.const.unspec))
     (push.iloc.1 . 0)
     (apply.iloc+ (0 . 0) "../stdlib/core/optimize.scm" . 972811))
   (push.close
     (2 0 . trace-lineage)
     (iloc.0 . 0)
     (if.pair?
       (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 981016)
       (extend . 1)
       (push.iloc.0 . 0)
       (const . define)
       (if.eq?
         (push.gloc.of |core.optimize'ht-lambda-node|)
         (push.iloc.1 . 0)
         (push.subr.gloc.of |.caddr| 1 "../stdlib/core/optimize.scm" . 983109)
         (subr.gloc.of |.core-hashtable-contains?| 2 "../stdlib/core/optimize.scm" . 983068)
         (if.true
           (push.iloc.1 . 0)
           (push.subr.gloc.of |.caddr| 1 "../stdlib/core/optimize.scm" . 984118)
           (push.subr.gloc.of |.cddr| 1 "../stdlib/core/optimize.scm" . 984112)
           (push.iloc.1 . 1)
           (apply.iloc (2 . 0) "../stdlib/core/optimize.scm" . 984092))
         (push.iloc.1 . 0)
         (push.subr.gloc.of |.caddr| 1 "../stdlib/core/optimize.scm" . 986155)
         (push.iloc.1 . 1)
         (apply.iloc (2 . 1) "../stdlib/core/optimize.scm" . 986140))
       (push.iloc.0 . 0)
       (const . lambda)
       (if.eq?
         (push.close
           (1 0)
           (push.iloc 3 . 4)
           (push.iloc.0 . 0)
           (push.const . #t)
           (ret.subr.gloc.of |.core-hashtable-set!| "../stdlib/core/optimize.scm" . 988203))
         (push.iloc.1 . 1)
         (apply.gloc.of |.for-each| "../stdlib/core/optimize.scm" . 988181))
       (push.iloc.0 . 0)
       (const . let)
       (if.eq?
         (call
           (push.close
             (1 0)
             (push.cadr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 990266)
             (push.iloc 2 . 1)
             (apply.iloc (3 . 1) "../stdlib/core/optimize.scm" . 990251))
           (push.cadr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 990286)
           (apply.gloc.of |.for-each| "../stdlib/core/optimize.scm" . 990229))
         (push.cddr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 991273)
         (push.iloc.1 . 1)
         (apply.iloc (2 . 0) "../stdlib/core/optimize.scm" . 991253))
       (push.iloc.0 . 0)
       (const . letrec*)
       (if.eq?
         (call
           (push.gloc.of |.values|)
           (call
             (push.gloc.of |.fn8.1`8|)
             (push.cadr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 993414)
             (apply.gloc.of |.map| "../stdlib/core/optimize.scm" . 993331))
           (push)
           (apply.gloc.of |core.lists'filter| "../stdlib/core/optimize.scm" . 993316))
         (push)
         (extend . 1)
         (call
           (push.close
             (1 0)
             (push.gloc.of |core.optimize'ht-lambda-node|)
             (push.cadr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 995411)
             (subr.gloc.of |.core-hashtable-contains?| 2 "../stdlib/core/optimize.scm" . 995370)
             (if.true
               (call
                 (push.close
                   (1 0)
                   (push.iloc 5 . 4)
                   (push.iloc.0 . 0)
                   (push.const)
                   (push.subr.gloc.of
                     |.core-hashtable-ref|
                     3
                     "../stdlib/core/optimize.scm"
                     .
                     997441)
                   (extend . 1)
                   (push.iloc.0 . 0)
                   (const . #t)
                   (if.eq?.ret.const . #f)
                   (push.iloc 6 . 4)
                   (push.iloc.1 . 0)
                   (push.car.iloc (2 . 0) "../stdlib/core/optimize.scm" . 999528)
                   (iloc.0 . 0)
                   (push.cons)
                   (ret.subr.gloc.of |.core-hashtable-set!| "../stdlib/core/optimize.scm" . 999485))
                 (push.iloc 3 . 1)
                 (apply.gloc.of |.for-each| "../stdlib/core/optimize.scm" . 996394))
               (push.iloc.0 . 0)
               (push.subr.gloc.of |.cddadr| 1 "../stdlib/core/optimize.scm" . 1001534)
               (push.iloc.1 . 0)
               (push.iloc 3 . 1)
               (push.subr.gloc.of |.append| 2 "../stdlib/core/optimize.scm" . 1001545)
               (apply.iloc (4 . 0) "../stdlib/core/optimize.scm" . 1001514))
             (push.cadr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1003577)
             (push.iloc.1 . 0)
             (push.iloc 3 . 1)
             (push.subr.gloc.of |.append| 2 "../stdlib/core/optimize.scm" . 1003586)
             (apply.iloc (4 . 1) "../stdlib/core/optimize.scm" . 1003562))
           (push.cadr.iloc (2 . 0) "../stdlib/core/optimize.scm" . 1004577)
           (apply.gloc.of |.for-each| "../stdlib/core/optimize.scm" . 993301))
         (push.cddr.iloc (2 . 0) "../stdlib/core/optimize.scm" . 1005611)
         (push.iloc 2 . 1)
         (apply.iloc (3 . 0) "../stdlib/core/optimize.scm" . 1005591))
       (push.iloc.0 . 0)
       (const . quote)
       (if.eq?.ret.const . #f)
       (push.iloc.1 . 0)
       (push.iloc.1 . 1)
       (apply.iloc (2 . 0) "../stdlib/core/optimize.scm" . 1008661))
     (ret.const . #f))
   (push.close
     (1 0 . contain-heap-lambda?)
     (push.iloc.1 . 4)
     (push.iloc.0 . 0)
     (push.const . #f)
     (push.subr.gloc.of |.core-hashtable-ref| 3 "../stdlib/core/optimize.scm" . 1013778)
     (extend . 1)
     (iloc.0 . 0)
     (if.true
       (push.iloc.0 . 0)
       (const . #t)
       (if.eq?.ret.const . #t)
       (call
         (push.gloc.of |.fn60.1`60|)
         (push.iloc.0 . 0)
         (apply.gloc.of |core.lists'for-all| "../stdlib/core/optimize.scm" . 1016864))
       (push)
       (ret.subr.gloc.of |.not| "../stdlib/core/optimize.scm" . 1016859))
     (ret.const . #f))
   (enclose . 3)
   (subr.gloc.of |.make-core-hashtable| 0 "../stdlib/core/optimize.scm" . 967704)
   (set.iloc 0 . 3)
   (subr.gloc.of |.make-core-hashtable| 0 "../stdlib/core/optimize.scm" . 968733)
   (set.iloc 0 . 4)
   (call
     (push.iloc.1 . 0)
     (push.const)
     (apply.iloc (0 . 1) "../stdlib/core/optimize.scm" . 1019911))
   (call
     (push.close
       (1 0)
       (cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1021985)
       (if.not.symbol?.ret.const . #f)
       (push.iloc.1 . 3)
       (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1023030)
       (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1023038)
       (ret.subr.gloc.of |.core-hashtable-set!| "../stdlib/core/optimize.scm" . 1023000))
     (push.gloc.of |core.optimize'ht-variable-binding|)
     (push.subr.gloc.of |.core-hashtable->alist| 1 "../stdlib/core/optimize.scm" . 1024017)
     (apply.gloc.of |.for-each| "../stdlib/core/optimize.scm" . 1020935))
   (call
     (push.gloc.of |.fn15.1`15|)
     (push.gloc.of |core.optimize'ht-variable-binding|)
     (push.subr.gloc.of |.core-hashtable->alist| 1 "../stdlib/core/optimize.scm" . 1036319)
     (apply.gloc.of |core.lists'remp| "../stdlib/core/optimize.scm" . 1026073))
   (push)
   (extend . 1)
   (call
     (extend.enclose+
       (1 0 . loop)
       (call
         (push.close
           (1 0)
           (push.gloc.of |core.optimize'ht-variable-stackables|)
           (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1040460)
           (subr.gloc.of |.core-hashtable-contains?| 2 "../stdlib/core/optimize.scm" . 1040411)
           (if.true.ret)
           (push.gloc.of |core.optimize'ht-lambda-node|)
           (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1041482)
           (push.const)
           (push.subr.gloc.of |.core-hashtable-ref| 3 "../stdlib/core/optimize.scm" . 1041447)
           (extend . 1)
           (call
             (call
               (push.car.iloc (1 . 0) "../stdlib/core/optimize.scm" . 1043524)
               (apply.iloc (5 . 2) "../stdlib/core/optimize.scm" . 1043502))
             (if.true.ret.const . #f)
             (push.close
               (1 0)
               (push.car.iloc (2 . 0) "../stdlib/core/optimize.scm" . 1046589)
               (iloc.0 . 0)
               (if.eq?.ret.const . #t)
               (call
                 (push.iloc.0 . 0)
                 (apply.gloc.of
                   |core.optimize'primitive-function?|
                   "../stdlib/core/optimize.scm"
                   .
                   1047608))
               (if.true.ret)
               (call
                 (push.iloc.0 . 0)
                 (apply.gloc.of
                   |core.optimize'variable-top-level?|
                   "../stdlib/core/optimize.scm"
                   .
                   1048632))
               (if.true.ret)
               (push.gloc.of |core.optimize'ht-variable-stackables|)
               (push.iloc.0 . 0)
               (subr.gloc.of |.core-hashtable-contains?| 2 "../stdlib/core/optimize.scm" . 1049656)
               (if.true.ret)
               (call
                 (push.iloc.0 . 0)
                 (apply.gloc.of
                   |core.optimize'variable-iloc?|
                   "../stdlib/core/optimize.scm"
                   .
                   1050685))
               (if.false.ret)
               (call (push.iloc.0 . 0) (apply.iloc (6 . 2) "../stdlib/core/optimize.scm" . 1051714))
               (push)
               (ret.subr.gloc.of |.not| "../stdlib/core/optimize.scm" . 1051709))
             (push.iloc.0 . 0)
             (apply.gloc.of |core.lists'for-all| "../stdlib/core/optimize.scm" . 1044521))
           (if.true
             (push.gloc.of |core.optimize'ht-variable-stackables|)
             (push.car.iloc (1 . 0) "../stdlib/core/optimize.scm" . 1055824)
             (push.cdr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 1055832)
             (ret.subr.gloc.of |.core-hashtable-set!| "../stdlib/core/optimize.scm" . 1055780))
           (ret.const.unspec))
         (push.iloc 2 . 0)
         (apply.gloc.of |.for-each| "../stdlib/core/optimize.scm" . 1038345))
       (push.gloc.of |core.optimize'ht-variable-stackables|)
       (push.subr.gloc.of |.core-hashtable-size| 1 "../stdlib/core/optimize.scm" . 1058838)
       (extend . 1)
       (iloc.1 . 0)
       (=.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1059857)
       (if.true.ret)
       (push.iloc.0 . 0)
       (apply.iloc+ (2 . 0) "../stdlib/core/optimize.scm" . 1059870))
     (push.gloc.of |core.optimize'ht-variable-stackables|)
     (push.subr.gloc.of |.core-hashtable-size| 1 "../stdlib/core/optimize.scm" . 1038362)
     (apply.iloc+ (0 . 0) "../stdlib/core/optimize.scm" . 1038345))
   (push.gloc.of |.fn73.1`73|)
   (call
     (push.gloc.of |.fn14.1`14|)
     (push.iloc.0 . 0)
     (apply.gloc.of |core.lists'remp| "../stdlib/core/optimize.scm" . 1061915))
   (push)
   (apply.gloc.of |.for-each| "../stdlib/core/optimize.scm" . 1061897))
 (set.gloc.of |core.optimize'process-stackable|)
 (close
   (1 0 . |core.optimize'transform|)
   (touch.gloc.of |loop`648|)
   (call
     (push.iloc.0 . 0)
     (apply.gloc.of |core.optimize'pretty-form| "../stdlib/core/optimize.scm" . 1098776))
   (push)
   (push.const . 1)
   (apply.gloc.of |loop`648| "../stdlib/core/optimize.scm" . 1098759))
 (set.gloc.of |core.optimize'transform|)
 (close
   (1 0 . |core.optimize'pretty-form|)
   (touch.gloc.of |loop`677|)
   (push.iloc.0 . 0)
   (apply.gloc.of |loop`677| "../stdlib/core/optimize.scm" . 1140743))
 (set.gloc.of |core.optimize'pretty-form|)
 (call
   (push.gloc.of |.fn7.1`7|)
   (apply.gloc.of |.make-parameter| "../stdlib/core/optimize.scm" . 1145881))
 (set.gloc.of |core.optimize'annotate-hook|)
 (call
   (push.gloc.of |.fn2.1`2|)
   (apply.gloc.of |.make-parameter| "../stdlib/core/optimize.scm" . 1146913))
 (set.gloc.of |core.optimize'annotate-closure-hook|)
 (close
   (2 0 . |core.optimize'closure-attribute-set!|)
   (push.iloc.0 . 0)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (call
     (apply.gloc.of |core.optimize'annotate-closure-hook| "../stdlib/core/optimize.scm" . 1150984))
   (apply))
 (set.gloc.of |core.optimize'closure-attribute-set!|)
 (close
   (3 0 . |core.optimize'optimize|)
   (call (apply.gloc.of |core.optimize'coreform-optimize| "../stdlib/core/optimize.scm" . 1155088))
   (push)
   (const . 0)
   (if.eq?
     (push.iloc.0 . 0)
     (apply.gloc.of |core.optimize'pretty-form| "../stdlib/core/optimize.scm" . 1156107))
   (push.const . #f)
   (push.const . #f)
   (extend . 2)
   (push.close
     (0 0)
     (call (apply.gloc.of |core.optimize'annotate-hook| "../stdlib/core/optimize.scm" . 1158157))
     (set.iloc 1 . 0)
     (call
       (apply.gloc.of
         |core.optimize'annotate-closure-hook|
         "../stdlib/core/optimize.scm"
         .
         1158157))
     (set.iloc 1 . 1)
     (call
       (push.iloc 2 . 1)
       (apply.gloc.of |core.optimize'annotate-hook| "../stdlib/core/optimize.scm" . 1158157))
     (push.iloc 2 . 2)
     (apply.gloc.of |core.optimize'annotate-closure-hook| "../stdlib/core/optimize.scm" . 1158157))
   (push.close
     (0 0)
     (call
       (push.iloc 2 . 0)
       (apply.gloc.of |core.optimize'transform| "../stdlib/core/optimize.scm" . 1158169))
     (push)
     (extend . 1)
     (call (apply.gloc.of |core.optimize'clear-context| "../stdlib/core/optimize.scm" . 1159183))
     (push.iloc.0 . 0)
     (apply.gloc.of |core.optimize'pretty-form| "../stdlib/core/optimize.scm" . 1160207))
   (push.close
     (0 0)
     (call
       (push.iloc.1 . 0)
       (apply.gloc.of |core.optimize'annotate-hook| "../stdlib/core/optimize.scm" . 1158157))
     (push.iloc.1 . 1)
     (apply.gloc.of |core.optimize'annotate-closure-hook| "../stdlib/core/optimize.scm" . 1158157))
   (apply.gloc.of |.dynamic-wind| "../stdlib/core/optimize.scm" . 1158157))
 (set.gloc.of |core.optimize'optimize|)
 (call (push.const . #t) (apply.gloc.of |.make-parameter| "../stdlib/core/optimize.scm" . 1162267))
 (set.gloc.of |core.optimize'coreform-pretty|)
 (call
   (push.const . #t)
   (push.gloc.of |.fn48.1`48|)
   (apply.gloc.of |.make-parameter| "../stdlib/core/optimize.scm" . 6145))
 (set.gloc.of |core.optimize'coreform-optimize|)
 (call
   (push.const
     (let import . |.let|)
     (caar import . |.caar|)
     (fixnum? import . |.fixnum?|)
     (core-hashtable-size import . |.core-hashtable-size|)
     (dump-variable-binding import . |core.optimize'dump-variable-binding|)
     (caddr import . |.caddr|)
     (+ import . |.+|)
     (transcribe import . |core.optimize'transcribe|)
     (inlinable-primitive-function? import . |core.optimize'inlinable-primitive-function?|)
     (remq import . |core.lists'remq|)
     (for-each import . |.for-each|)
     (unquote import . |.unquote|)
     (check-stackable-each import . |core.optimize'check-stackable-each|)
     (symbol? import . |.symbol?|)
     (char? import . |.char?|)
     (cdar import . |.cdar|)
     (core-hashtable-delete! import . |.core-hashtable-delete!|)
     (variable-private? import . |core.optimize'variable-private?|)
     (collect-context-each import . |core.optimize'collect-context-each|)
     (pretty-each import . |core.optimize'pretty-each|)
     (lambda import . |.lambda|)
     (destructuring-match import . |core.destructuring'destructuring-match|)
     (check-stackable import . |core.optimize'check-stackable|)
     (> import . |.>|)
     (ht-special-list-functions import . |core.optimize'ht-special-list-functions|)
     (let* import . |.let*|)
     (variable-iloc? import . |core.optimize'variable-iloc?|)
     (format import . |.format|)
     (optimize import . |core.optimize'optimize|)
     (syntax-rules import . |.syntax-rules|)
     (number? import . |.number?|)
     (= import . |.=|)
     (memq import . |.memq|)
     (list import . |.list|)
     (process-stackable import . |core.optimize'process-stackable|)
     (ht-variable-assigned import . |core.optimize'ht-variable-assigned|)
     (core-hashtable-set! import . |.core-hashtable-set!|)
     (coreform-optimize import . |core.optimize'coreform-optimize|)
     (cons import . |.cons|)
     (primitive-function? import . |core.optimize'primitive-function?|)
     (define-inline-assistant import . |core.optimize'define-inline-assistant|)
     (boolean? import . |.boolean?|)
     (unquote-splicing import . |.unquote-splicing|)
     (top-level-value import . |.top-level-value|)
     (annotate-closure-hook import . |core.optimize'annotate-closure-hook|)
     (cadr import . |.cadr|)
     (remove-duplicate-symbols import . |core.lists'remove-duplicate-symbols|)
     (current-after-expansion-hook import . |.current-after-expansion-hook|)
     (diagnostics import . |core.optimize'diagnostics|)
     (- import . |.-|)
     (ht-variable-stackables import . |core.optimize'ht-variable-stackables|)
     (not import . |.not|)
     (set! import . |.set!|)
     (quasiquote import . |.quasiquote|)
     (pair? import . |.pair?|)
     (define-syntax import . |.define-syntax|)
     (_ import . |._|)
     (inlinable-expression? import . |core.optimize'inlinable-expression?|)
     (cddr import . |.cddr|)
     (max-transform-pass import . |core.optimize'max-transform-pass|)
     (eq? import . |.eq?|)
     (fold-right import . |core.lists'fold-right|)
     (string? import . |.string?|)
     (collect-context-seq import . |core.optimize'collect-context-seq|)
     (else import . |.else|)
     (core-hashtable-contains? import . |.core-hashtable-contains?|)
     (quote import . |.quote|)
     (self-evaluation? import . |core.optimize'self-evaluation?|)
     (core-hashtable-clear! import . |.core-hashtable-clear!|)
     (make-parameter import . |.make-parameter|)
     (constant? import . |core.optimize'constant?|)
     (pretty-form import . |core.optimize'pretty-form|)
     (noname-lambda-infix import . |core.optimize'noname-lambda-infix|)
     (length import . |.length|)
     (null? import . |.null?|)
     (transcribe-binding-construct import . |core.optimize'transcribe-binding-construct|)
     (ht-binding-body-mutual import . |core.optimize'ht-binding-body-mutual|)
     (cadddr import . |.cadddr|)
     (ht-variable-defined import . |core.optimize'ht-variable-defined|)
     (ht-binding-body-common import . |core.optimize'ht-binding-body-common|)
     (define-inline import . |core.optimize'define-inline|)
     (cond import . |.cond|)
     (symbol->string import . |.symbol->string|)
     (call/cc import . |.call/cc|)
     (reverse import . |.reverse|)
     (variable-functional? import . |core.optimize'variable-functional?|)
     (partition import . |core.lists'partition|)
     (closure-attribute-set! import . |core.optimize'closure-attribute-set!|)
     (pretty import . |core.optimize'pretty|)
     (flatten-begin import . |core.optimize'flatten-begin|)
     (transform import . |core.optimize'transform|)
     (formals->list import . |core.optimize'formals->list|)
     (filter import . |core.lists'filter|)
     (annotate-hook import . |core.optimize'annotate-hook|)
     (ht-inlinable-primitive-functions import . |core.optimize'ht-inlinable-primitive-functions|)
     (library-variable-infix import . |core.optimize'library-variable-infix|)
     (remp import . |core.lists'remp|)
     (... import . |....|)
     (ht-variable-letrec import . |core.optimize'ht-variable-letrec|)
     (crawl-lambda-lifting import . |core.optimize'crawl-lambda-lifting|)
     (make-core-hashtable import . |.make-core-hashtable|)
     (syntax-violation import . |.syntax-violation|)
     (for-all import . |core.lists'for-all|)
     (clear-context import . |core.optimize'clear-context|)
     (ht-variable-callsites import . |core.optimize'ht-variable-callsites|)
     (cdddr import . |.cdddr|)
     (get-free-variables import . |core.optimize'get-free-variables|)
     (find import . |core.lists'find|)
     (list? import . |.list?|)
     (coreform-pretty import . |core.optimize'coreform-pretty|)
     (cdr import . |.cdr|)
     (and import . |.and|)
     (dump-lambda-node import . |core.optimize'dump-lambda-node|)
     (exists import . |core.lists'exists|)
     (cddadr import . |.cddadr|)
     (denote-call/cc import . |core.optimize'denote-call/cc|)
     (begin import . |.begin|)
     (crawl-beta-subst import . |core.optimize'crawl-beta-subst|)
     (ht-variable-pinned import . |core.optimize'ht-variable-pinned|)
     (map import . |.map|)
     (ht-primitive-functions import . |core.optimize'ht-primitive-functions|)
     (assp import . |core.lists'assp|)
     (case import . |.case|)
     (assq import . |.assq|)
     (special-list-function? import . |core.optimize'special-list-function?|)
     (ht-lambda-node import . |core.optimize'ht-lambda-node|)
     (check-stackable-seq import . |core.optimize'check-stackable-seq|)
     (top-level-bound? import . |.top-level-bound?|)
     (< import . |.<|)
     (ht-variable-operands-refc import . |core.optimize'ht-variable-operands-refc|)
     (if import . |.if|)
     (memp import . |core.lists'memp|)
     (define import . |.define|)
     (append import . |.append|)
     (core-hashtable-ref import . |.core-hashtable-ref|)
     (ht-variable-binding import . |core.optimize'ht-variable-binding|)
     (assertion-violation import . |.assertion-violation|)
     (core-hashtable->alist import . |.core-hashtable->alist|)
     (ht-variable-privates import . |core.optimize'ht-variable-privates|)
     (letrec* import . |.letrec*|)
     (values import . |.values|)
     (collect-context import . |core.optimize'collect-context|)
     (string->symbol import . |.string->symbol|)
     (car import . |.car|)
     (<= import . |.<=|)
     (string-contains import . |.string-contains|)
     (transcribe-each import . |core.optimize'transcribe-each|)
     (=> import . |.=>|)
     (ht-variable-formals import . |core.optimize'ht-variable-formals|)
     (let-values import . |.let-values|)
     (function? import . |core.optimize'function?|)
     (fold-left import . |core.lists'fold-left|)
     (ht-variable-refc import . |core.optimize'ht-variable-refc|)
     (or import . |.or|)
     (bytevector? import . |.bytevector?|)
     (core-hashtable-copy import . |.core-hashtable-copy|)
     (parameterize import . |core.parameters'parameterize|)
     (variable-top-level? import . |core.optimize'variable-top-level?|))
   (extend . 1)
   (call
     (push.const . syntax)
     (push.const . |core.optimize'define-inline-assistant|)
     (push.const
       ()
       ("../stdlib/core/optimize.scm" . 16389)
       ((_ func () (args ...) (vars ...) . body)
        (define-syntax func (syntax-rules () ((_ args ...) (let ((vars args) ...) . body))))
        ((body . 0) (vars . 1) (args . 1) (func . 0))
        (let _ syntax-rules define-syntax))
       ((_ func (e1 e2 ...) (args ...) . more)
        (define-inline-assistant func (e2 ...) (temp args ...) . more)
        ((more . 0) (args . 1) (e2 . 1) (e1 . 0) (func . 0))
        (temp define-inline-assistant)))
     (push.iloc.0 . 0)
     (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/optimize.scm" . 6145))
   (call
     (push.const . syntax)
     (push.const . |core.optimize'define-inline|)
     (push.const
       (lambda)
       ("../stdlib/core/optimize.scm" . 26629)
       ((_ func (lambda (vars ...) body1 body2 ...))
        (define-inline-assistant func (vars ...) () (vars ...) body1 body2 ...)
        ((body2 . 1) (body1 . 0) (vars . 1) (func . 0))
        (define-inline-assistant))
       ((_ (func vars ...) body1 body2 ...)
        (define-inline-assistant func (vars ...) () (vars ...) body1 body2 ...)
        ((body2 . 1) (body1 . 0) (vars . 1) (func . 0))
        (define-inline-assistant)))
     (push.iloc.0 . 0)
     (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/optimize.scm" . 6145))
   (push.const . syntax)
   (push.const . |core.optimize'diagnostics|)
   (push.const () ("../stdlib/core/optimize.scm" . 33822) ((_ _) #f () ()))
   (push.iloc.0 . 0)
   (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/optimize.scm" . 6145))
 (push.const . core.optimize)
 (push.const . #f)
 (push.const (coreform-optimize import . |core.optimize'coreform-optimize|))
 (apply.gloc.of |.intern-scheme-library| "../stdlib/core/optimize.scm" . 6145))

((call
   (push.const core intrinsics)
   (apply.gloc.of |.require-scheme-library| "../stdlib/rnrs/base.scm" . 2049))
 (push.const . rnrs.base)
 (push.const 6)
 (push.const
   (define import . |.define|)
   (define-syntax import . |.define-syntax|)
   (quote import . |.quote|)
   (lambda import . |.lambda|)
   (if import . |.if|)
   (set! import . |.set!|)
   (cond import . |.cond|)
   (case import . |.case|)
   (and import . |.and|)
   (or import . |.or|)
   (let import . |.let|)
   (let* import . |.let*|)
   (letrec import . |.letrec|)
   (letrec* import . |.letrec*|)
   (let-values import . |.let-values|)
   (let*-values import . |.let*-values|)
   (begin import . |.begin|)
   (quasiquote import . |.quasiquote|)
   (unquote import . |.unquote|)
   (unquote-splicing import . |.unquote-splicing|)
   (let-syntax import . |.let-syntax|)
   (letrec-syntax import . |.letrec-syntax|)
   (syntax-rules import . |.syntax-rules|)
   (identifier-syntax import . |.identifier-syntax|)
   (assert import . |.assert|)
   (else import . |.else|)
   (=> import . |.=>|)
   (... import . |....|)
   (_ import . |._|)
   (eq? import . |.eq?|)
   (eqv? import . |.eqv?|)
   (equal? import . |.equal?|)
   (procedure? import . |.procedure?|)
   (number? import . |.number?|)
   (complex? import . |.complex?|)
   (real? import . |.real?|)
   (rational? import . |.rational?|)
   (integer? import . |.integer?|)
   (real-valued? import . |.real-valued?|)
   (rational-valued? import . |.rational-valued?|)
   (integer-valued? import . |.integer-valued?|)
   (exact? import . |.exact?|)
   (inexact? import . |.inexact?|)
   (inexact import . |.inexact|)
   (exact import . |.exact|)
   (= import . |.=|)
   (< import . |.<|)
   (> import . |.>|)
   (<= import . |.<=|)
   (>= import . |.>=|)
   (zero? import . |.zero?|)
   (positive? import . |.positive?|)
   (negative? import . |.negative?|)
   (odd? import . |.odd?|)
   (even? import . |.even?|)
   (finite? import . |.finite?|)
   (infinite? import . |.infinite?|)
   (nan? import . |.nan?|)
   (max import . |.max|)
   (min import . |.min|)
   (+ import . |.+|)
   (* import . |.*|)
   (- import . |.-|)
   (/ import . |./|)
   (abs import . |.abs|)
   (div-and-mod import . |.div-and-mod|)
   (div import . |.div|)
   (mod import . |.mod|)
   (div0-and-mod0 import . |.div0-and-mod0|)
   (div0 import . |.div0|)
   (mod0 import . |.mod0|)
   (gcd import . |.gcd|)
   (lcm import . |.lcm|)
   (numerator import . |.numerator|)
   (denominator import . |.denominator|)
   (floor import . |.floor|)
   (ceiling import . |.ceiling|)
   (truncate import . |.truncate|)
   (round import . |.round|)
   (rationalize import . |.rationalize|)
   (exp import . |.exp|)
   (log import . |.log|)
   (sin import . |.sin|)
   (cos import . |.cos|)
   (tan import . |.tan|)
   (asin import . |.asin|)
   (acos import . |.acos|)
   (atan import . |.atan|)
   (sqrt import . |.sqrt|)
   (exact-integer-sqrt import . |.exact-integer-sqrt|)
   (expt import . |.expt|)
   (make-rectangular import . |.make-rectangular|)
   (make-polar import . |.make-polar|)
   (real-part import . |.real-part|)
   (imag-part import . |.imag-part|)
   (magnitude import . |.magnitude|)
   (angle import . |.angle|)
   (number->string import . |.number->string|)
   (string->number import . |.string->number|)
   (not import . |.not|)
   (boolean? import . |.boolean?|)
   (boolean=? import . |.boolean=?|)
   (pair? import . |.pair?|)
   (cons import . |.cons|)
   (car import . |.car|)
   (cdr import . |.cdr|)
   (caar import . |.caar|)
   (cadr import . |.cadr|)
   (cdar import . |.cdar|)
   (cddr import . |.cddr|)
   (caaar import . |.caaar|)
   (caadr import . |.caadr|)
   (cadar import . |.cadar|)
   (caddr import . |.caddr|)
   (cdaar import . |.cdaar|)
   (cdadr import . |.cdadr|)
   (cddar import . |.cddar|)
   (cdddr import . |.cdddr|)
   (caaaar import . |.caaaar|)
   (caaadr import . |.caaadr|)
   (caadar import . |.caadar|)
   (caaddr import . |.caaddr|)
   (cadaar import . |.cadaar|)
   (cadadr import . |.cadadr|)
   (caddar import . |.caddar|)
   (cadddr import . |.cadddr|)
   (cdaaar import . |.cdaaar|)
   (cdaadr import . |.cdaadr|)
   (cdadar import . |.cdadar|)
   (cdaddr import . |.cdaddr|)
   (cddaar import . |.cddaar|)
   (cddadr import . |.cddadr|)
   (cdddar import . |.cdddar|)
   (cddddr import . |.cddddr|)
   (null? import . |.null?|)
   (list? import . |.list?|)
   (list import . |.list|)
   (length import . |.length|)
   (append import . |.append|)
   (reverse import . |.reverse|)
   (list-tail import . |.list-tail|)
   (list-ref import . |.list-ref|)
   (map import . |.map|)
   (for-each import . |.for-each|)
   (symbol? import . |.symbol?|)
   (symbol->string import . |.symbol->string|)
   (string->symbol import . |.string->symbol|)
   (symbol=? import . |.symbol=?|)
   (char? import . |.char?|)
   (char->integer import . |.char->integer|)
   (integer->char import . |.integer->char|)
   (char=? import . |.char=?|)
   (char<? import . |.char<?|)
   (char>? import . |.char>?|)
   (char<=? import . |.char<=?|)
   (char>=? import . |.char>=?|)
   (string? import . |.string?|)
   (make-string import . |.make-string|)
   (string import . |.string|)
   (string-length import . |.string-length|)
   (string-ref import . |.string-ref|)
   (string=? import . |.string=?|)
   (string<? import . |.string<?|)
   (string>? import . |.string>?|)
   (string<=? import . |.string<=?|)
   (string>=? import . |.string>=?|)
   (substring import . |.substring|)
   (string-append import . |.string-append|)
   (string->list import . |.string->list|)
   (list->string import . |.list->string|)
   (string-copy import . |.string-copy|)
   (string-for-each import . |.string-for-each|)
   (vector? import . |.vector?|)
   (make-vector import . |.make-vector|)
   (vector import . |.vector|)
   (vector-length import . |.vector-length|)
   (vector-ref import . |.vector-ref|)
   (vector-set! import . |.vector-set!|)
   (vector->list import . |.vector->list|)
   (list->vector import . |.list->vector|)
   (vector-fill! import . |.vector-fill!|)
   (vector-map import . |.vector-map|)
   (vector-for-each import . |.vector-for-each|)
   (error import . |.error|)
   (assertion-violation import . |.assertion-violation|)
   (apply import . |.apply|)
   (call-with-current-continuation import . |.call-with-current-continuation|)
   (call/cc import . |.call/cc|)
   (values import . |.values|)
   (call-with-values import . |.call-with-values|)
   (dynamic-wind import . |.dynamic-wind|))
 (apply.gloc.of |.intern-scheme-library| "../stdlib/rnrs/base.scm" . 2049))

((call
   (push.const core unicode)
   (apply.gloc.of |.require-scheme-library| "../stdlib/rnrs/unicode.scm" . 2049))
 (push.const . rnrs.unicode)
 (push.const 6)
 (push.const
   (char-upcase import . |core.unicode'char-upcase|)
   (char-downcase import . |core.unicode'char-downcase|)
   (char-titlecase import . |core.unicode'char-titlecase|)
   (char-foldcase import . |core.unicode'char-foldcase|)
   (char-ci=? import . |core.unicode'char-ci=?|)
   (char-ci<? import . |core.unicode'char-ci<?|)
   (char-ci>? import . |core.unicode'char-ci>?|)
   (char-ci<=? import . |core.unicode'char-ci<=?|)
   (char-ci>=? import . |core.unicode'char-ci>=?|)
   (char-alphabetic? import . |core.unicode'char-alphabetic?|)
   (char-numeric? import . |core.unicode'char-numeric?|)
   (char-whitespace? import . |.char-whitespace?|)
   (char-upper-case? import . |core.unicode'char-upper-case?|)
   (char-lower-case? import . |core.unicode'char-lower-case?|)
   (char-title-case? import . |core.unicode'char-title-case?|)
   (char-general-category import . |core.unicode'char-general-category|)
   (string-upcase import . |core.unicode'string-upcase|)
   (string-downcase import . |core.unicode'string-downcase|)
   (string-titlecase import . |core.unicode'string-titlecase|)
   (string-foldcase import . |core.unicode'string-foldcase|)
   (string-ci=? import . |core.unicode'string-ci=?|)
   (string-ci<? import . |core.unicode'string-ci<?|)
   (string-ci>? import . |core.unicode'string-ci>?|)
   (string-ci<=? import . |core.unicode'string-ci<=?|)
   (string-ci>=? import . |core.unicode'string-ci>=?|)
   (string-normalize-nfd import . |core.unicode'string-normalize-nfd|)
   (string-normalize-nfkd import . |core.unicode'string-normalize-nfkd|)
   (string-normalize-nfc import . |core.unicode'string-normalize-nfc|)
   (string-normalize-nfkc import . |core.unicode'string-normalize-nfkc|))
 (apply.gloc.of |.intern-scheme-library| "../stdlib/rnrs/unicode.scm" . 2049))

((call
   (push.const core bytevector-transcoders)
   (apply.gloc.of |.require-scheme-library| "../stdlib/rnrs/bytevectors.scm" . 2049))
 (call
   (push.const core bytevectors)
   (apply.gloc.of |.require-scheme-library| "../stdlib/rnrs/bytevectors.scm" . 2049))
 (push.const . rnrs.bytevectors)
 (push.const 6)
 (push.const
   (endianness import . |core.bytevectors'endianness|)
   (native-endianness import . |.native-endianness|)
   (bytevector? import . |.bytevector?|)
   (make-bytevector import . |.make-bytevector|)
   (bytevector-length import . |.bytevector-length|)
   (bytevector=? import . |.bytevector=?|)
   (bytevector-fill! import . |.bytevector-fill!|)
   (bytevector-copy! import . |.bytevector-copy!|)
   (bytevector-copy import . |.bytevector-copy|)
   (bytevector-u8-ref import . |.bytevector-u8-ref|)
   (bytevector-s8-ref import . |.bytevector-s8-ref|)
   (bytevector-u8-set! import . |.bytevector-u8-set!|)
   (bytevector-s8-set! import . |.bytevector-s8-set!|)
   (bytevector->u8-list import . |.bytevector->u8-list|)
   (u8-list->bytevector import . |.u8-list->bytevector|)
   (bytevector-u16-ref import . |.bytevector-u16-ref|)
   (bytevector-s16-ref import . |.bytevector-s16-ref|)
   (bytevector-u16-native-ref import . |.bytevector-u16-native-ref|)
   (bytevector-s16-native-ref import . |.bytevector-s16-native-ref|)
   (bytevector-u16-set! import . |.bytevector-u16-set!|)
   (bytevector-s16-set! import . |.bytevector-s16-set!|)
   (bytevector-u16-native-set! import . |.bytevector-u16-native-set!|)
   (bytevector-s16-native-set! import . |.bytevector-s16-native-set!|)
   (bytevector-u32-ref import . |.bytevector-u32-ref|)
   (bytevector-s32-ref import . |.bytevector-s32-ref|)
   (bytevector-u32-native-ref import . |.bytevector-u32-native-ref|)
   (bytevector-s32-native-ref import . |.bytevector-s32-native-ref|)
   (bytevector-u32-set! import . |.bytevector-u32-set!|)
   (bytevector-s32-set! import . |.bytevector-s32-set!|)
   (bytevector-u32-native-set! import . |.bytevector-u32-native-set!|)
   (bytevector-s32-native-set! import . |.bytevector-s32-native-set!|)
   (bytevector-u64-ref import . |.bytevector-u64-ref|)
   (bytevector-s64-ref import . |.bytevector-s64-ref|)
   (bytevector-u64-native-ref import . |.bytevector-u64-native-ref|)
   (bytevector-s64-native-ref import . |.bytevector-s64-native-ref|)
   (bytevector-u64-set! import . |.bytevector-u64-set!|)
   (bytevector-s64-set! import . |.bytevector-s64-set!|)
   (bytevector-u64-native-set! import . |.bytevector-u64-native-set!|)
   (bytevector-s64-native-set! import . |.bytevector-s64-native-set!|)
   (bytevector-ieee-single-ref import . |.bytevector-ieee-single-ref|)
   (bytevector-ieee-single-native-ref import . |.bytevector-ieee-single-native-ref|)
   (bytevector-ieee-single-set! import . |.bytevector-ieee-single-set!|)
   (bytevector-ieee-single-native-set! import . |.bytevector-ieee-single-native-set!|)
   (bytevector-ieee-double-ref import . |.bytevector-ieee-double-ref|)
   (bytevector-ieee-double-native-ref import . |.bytevector-ieee-double-native-ref|)
   (bytevector-ieee-double-set! import . |.bytevector-ieee-double-set!|)
   (bytevector-ieee-double-native-set! import . |.bytevector-ieee-double-native-set!|)
   (bytevector-uint-ref import . |core.bytevectors'bytevector-uint-ref|)
   (bytevector-sint-ref import . |core.bytevectors'bytevector-sint-ref|)
   (bytevector-uint-set! import . |core.bytevectors'bytevector-uint-set!|)
   (bytevector-sint-set! import . |core.bytevectors'bytevector-sint-set!|)
   (bytevector->uint-list import . |core.bytevectors'bytevector->uint-list|)
   (bytevector->sint-list import . |core.bytevectors'bytevector->sint-list|)
   (uint-list->bytevector import . |core.bytevectors'uint-list->bytevector|)
   (sint-list->bytevector import . |core.bytevectors'sint-list->bytevector|)
   (string->utf8 import . |.string->utf8|)
   (utf8->string import . |.utf8->string|)
   (string->utf16 import . |core.bytevector-transcoders'string->utf16|)
   (utf16->string import . |core.bytevector-transcoders'utf16->string|)
   (string->utf32 import . |core.bytevector-transcoders'string->utf32|)
   (utf32->string import . |core.bytevector-transcoders'utf32->string|))
 (apply.gloc.of |.intern-scheme-library| "../stdlib/rnrs/bytevectors.scm" . 2049))

((call
   (push.const core lists)
   (apply.gloc.of |.require-scheme-library| "../stdlib/rnrs/lists.scm" . 2049))
 (push.const . rnrs.lists)
 (push.const 6)
 (push.const
   (find import . |core.lists'find|)
   (for-all import . |core.lists'for-all|)
   (exists import . |core.lists'exists|)
   (filter import . |core.lists'filter|)
   (partition import . |core.lists'partition|)
   (fold-left import . |core.lists'fold-left|)
   (fold-right import . |core.lists'fold-right|)
   (remp import . |core.lists'remp|)
   (remove import . |core.lists'remove|)
   (remv import . |core.lists'remv|)
   (remq import . |core.lists'remq|)
   (memp import . |core.lists'memp|)
   (member import . |.member|)
   (memv import . |.memv|)
   (memq import . |.memq|)
   (assp import . |core.lists'assp|)
   (assoc import . |.assoc|)
   (assv import . |.assv|)
   (assq import . |.assq|)
   (cons* import . |.cons*|))
 (apply.gloc.of |.intern-scheme-library| "../stdlib/rnrs/lists.scm" . 2049))

((call
   (push.const core sorting)
   (apply.gloc.of |.require-scheme-library| "../stdlib/rnrs/sorting.scm" . 2049))
 (push.const . rnrs.sorting)
 (push.const 6)
 (push.const
   (list-sort import . |core.sorting'list-sort|)
   (vector-sort import . |core.sorting'vector-sort|)
   (vector-sort! import . |core.sorting'vector-sort!|))
 (apply.gloc.of |.intern-scheme-library| "../stdlib/rnrs/sorting.scm" . 2049))

((call
   (push.const core control)
   (apply.gloc.of |.require-scheme-library| "../stdlib/rnrs/control.scm" . 2049))
 (push.const . rnrs.control)
 (push.const 6)
 (push.const
   (when import . |core.control'when|)
   (unless import . |core.control'unless|)
   (do import . |.do|)
   (case-lambda import . |core.control'case-lambda|))
 (apply.gloc.of |.intern-scheme-library| "../stdlib/rnrs/control.scm" . 2049))

((call
   (push.const core records)
   (apply.gloc.of |.require-scheme-library| "../stdlib/rnrs/records/syntactic.scm" . 2049))
 (push.const . rnrs.records.syntactic)
 (push.const 6)
 (push.const
   (define-record-type import . |core.records'define-record-type|)
   (record-type-descriptor import . |core.records'record-type-descriptor|)
   (record-constructor-descriptor import . |core.records'record-constructor-descriptor|))
 (apply.gloc.of |.intern-scheme-library| "../stdlib/rnrs/records/syntactic.scm" . 2049))

((call
   (push.const core records)
   (apply.gloc.of |.require-scheme-library| "../stdlib/rnrs/records/procedural.scm" . 2049))
 (push.const . rnrs.records.procedural)
 (push.const 6)
 (push.const
   (make-record-type-descriptor import . |.make-record-type-descriptor|)
   (record-type-descriptor? import . |.record-type-descriptor?|)
   (make-record-constructor-descriptor import . |.make-record-constructor-descriptor|)
   (record-constructor import . |.record-constructor|)
   (record-predicate import . |.record-predicate|)
   (record-accessor import . |.record-accessor|)
   (record-mutator import . |.record-mutator|))
 (apply.gloc.of |.intern-scheme-library| "../stdlib/rnrs/records/procedural.scm" . 2049))

((call
   (push.const core records)
   (apply.gloc.of |.require-scheme-library| "../stdlib/rnrs/records/inspection.scm" . 2049))
 (push.const . rnrs.records.inspection)
 (push.const 6)
 (push.const
   (record? import . |.record?|)
   (record-rtd import . |.record-rtd|)
   (record-type-name import . |.record-type-name|)
   (record-type-parent import . |.record-type-parent|)
   (record-type-uid import . |.record-type-uid|)
   (record-type-generative? import . |.record-type-generative?|)
   (record-type-sealed? import . |.record-type-sealed?|)
   (record-type-opaque? import . |.record-type-opaque?|)
   (record-type-field-names import . |.record-type-field-names|)
   (record-field-mutable? import . |.record-field-mutable?|))
 (apply.gloc.of |.intern-scheme-library| "../stdlib/rnrs/records/inspection.scm" . 2049))

((call
   (push.const core exceptions)
   (apply.gloc.of |.require-scheme-library| "../stdlib/rnrs/exceptions.scm" . 2049))
 (push.const . rnrs.exceptions)
 (push.const 6)
 (push.const
   (with-exception-handler import . |.with-exception-handler|)
   (guard import . |core.exceptions'guard|)
   (raise import . |.raise|)
   (raise-continuable import . |.raise-continuable|))
 (apply.gloc.of |.intern-scheme-library| "../stdlib/rnrs/exceptions.scm" . 2049))

((call
   (push.const core conditions)
   (apply.gloc.of |.require-scheme-library| "../stdlib/rnrs/conditions.scm" . 2049))
 (push.const . rnrs.conditions)
 (push.const 6)
 (push.const
   (&condition import . |.&condition|)
   (condition import . |.condition|)
   (simple-conditions import . |.simple-conditions|)
   (condition? import . |.condition?|)
   (condition-predicate import . |.condition-predicate|)
   (condition-accessor import . |.condition-accessor|)
   (define-condition-type import . |core.conditions'define-condition-type|)
   (&message import . |.&message|)
   (make-message-condition import . |.make-message-condition|)
   (message-condition? import . |.message-condition?|)
   (condition-message import . |.condition-message|)
   (&warning import . |.&warning|)
   (make-warning import . |.make-warning|)
   (warning? import . |.warning?|)
   (&serious import . |.&serious|)
   (make-serious-condition import . |.make-serious-condition|)
   (serious-condition? import . |.serious-condition?|)
   (&error import . |.&error|)
   (make-error import . |.make-error|)
   (error? import . |.error?|)
   (&violation import . |.&violation|)
   (make-violation import . |.make-violation|)
   (violation? import . |.violation?|)
   (&assertion import . |.&assertion|)
   (make-assertion-violation import . |.make-assertion-violation|)
   (assertion-violation? import . |.assertion-violation?|)
   (&irritants import . |.&irritants|)
   (make-irritants-condition import . |.make-irritants-condition|)
   (irritants-condition? import . |.irritants-condition?|)
   (&who import . |.&who|)
   (make-who-condition import . |.make-who-condition|)
   (who-condition? import . |.who-condition?|)
   (condition-who import . |.condition-who|)
   (condition-irritants import . |.condition-irritants|)
   (&non-continuable import . |.&non-continuable|)
   (make-non-continuable-violation import . |.make-non-continuable-violation|)
   (non-continuable-violation? import . |.non-continuable-violation?|)
   (&implementation-restriction import . |.&implementation-restriction|)
   (make-implementation-restriction-violation import . |.make-implementation-restriction-violation|)
   (implementation-restriction-violation? import . |.implementation-restriction-violation?|)
   (&lexical import . |.&lexical|)
   (make-lexical-violation import . |.make-lexical-violation|)
   (lexical-violation? import . |.lexical-violation?|)
   (&syntax import . |.&syntax|)
   (make-syntax-violation import . |.make-syntax-violation|)
   (syntax-violation? import . |.syntax-violation?|)
   (syntax-violation-form import . |.syntax-violation-form|)
   (syntax-violation-subform import . |.syntax-violation-subform|)
   (&undefined import . |.&undefined|)
   (make-undefined-violation import . |.make-undefined-violation|)
   (undefined-violation? import . |.undefined-violation?|))
 (apply.gloc.of |.intern-scheme-library| "../stdlib/rnrs/conditions.scm" . 2049))

((call
   (push.const core io)
   (apply.gloc.of |.require-scheme-library| "../stdlib/rnrs/io/ports.scm" . 2049))
 (push.const . rnrs.io.ports)
 (push.const 6)
 (push.const
   (&i/o import . |.&i/o|)
   (make-i/o-error import . |.make-i/o-error|)
   (i/o-error? import . |.i/o-error?|)
   (&i/o-read import . |.&i/o-read|)
   (make-i/o-read-error import . |.make-i/o-read-error|)
   (i/o-read-error? import . |.i/o-read-error?|)
   (&i/o-write import . |.&i/o-write|)
   (make-i/o-write-error import . |.make-i/o-write-error|)
   (i/o-write-error? import . |.i/o-write-error?|)
   (&i/o-invalid-position import . |.&i/o-invalid-position|)
   (make-i/o-invalid-position-error import . |.make-i/o-invalid-position-error|)
   (i/o-invalid-position-error? import . |.i/o-invalid-position-error?|)
   (i/o-error-position import . |.i/o-error-position|)
   (&i/o-filename import . |.&i/o-filename|)
   (make-i/o-filename-error import . |.make-i/o-filename-error|)
   (i/o-filename-error? import . |.i/o-filename-error?|)
   (i/o-error-filename import . |.i/o-error-filename|)
   (&i/o-file-protection import . |.&i/o-file-protection|)
   (make-i/o-file-protection-error import . |.make-i/o-file-protection-error|)
   (i/o-file-protection-error? import . |.i/o-file-protection-error?|)
   (&i/o-file-is-read-only import . |.&i/o-file-is-read-only|)
   (make-i/o-file-is-read-only-error import . |.make-i/o-file-is-read-only-error|)
   (i/o-file-is-read-only-error? import . |.i/o-file-is-read-only-error?|)
   (&i/o-file-already-exists import . |.&i/o-file-already-exists|)
   (make-i/o-file-already-exists-error import . |.make-i/o-file-already-exists-error|)
   (i/o-file-already-exists-error? import . |.i/o-file-already-exists-error?|)
   (&i/o-file-does-not-exist import . |.&i/o-file-does-not-exist|)
   (make-i/o-file-does-not-exist-error import . |.make-i/o-file-does-not-exist-error|)
   (i/o-file-does-not-exist-error? import . |.i/o-file-does-not-exist-error?|)
   (&i/o-port import . |.&i/o-port|)
   (make-i/o-port-error import . |.make-i/o-port-error|)
   (i/o-port-error? import . |.i/o-port-error?|)
   (i/o-error-port import . |.i/o-error-port|)
   (&i/o-decoding import . |.&i/o-decoding|)
   (make-i/o-decoding-error import . |.make-i/o-decoding-error|)
   (i/o-decoding-error? import . |.i/o-decoding-error?|)
   (&i/o-encoding import . |.&i/o-encoding|)
   (make-i/o-encoding-error import . |.make-i/o-encoding-error|)
   (i/o-encoding-error? import . |.i/o-encoding-error?|)
   (i/o-encoding-error-char import . |.i/o-encoding-error-char|)
   (file-options import . |core.io'file-options|)
   (buffer-mode import . |core.io'buffer-mode|)
   (buffer-mode? import . |core.io'buffer-mode?|)
   (utf-8-codec import . |core.io'utf-8-codec|)
   (utf-16-codec import . |core.io'utf-16-codec|)
   (latin-1-codec import . |core.io'latin-1-codec|)
   (eol-style import . |core.io'eol-style|)
   (error-handling-mode import . |core.io'error-handling-mode|)
   (make-transcoder import . |core.io'make-transcoder|)
   (transcoder-codec import . |core.io'transcoder-codec|)
   (transcoder-eol-style import . |core.io'transcoder-eol-style|)
   (transcoder-error-handling-mode import . |core.io'transcoder-error-handling-mode|)
   (native-transcoder import . |core.io'native-transcoder|)
   (native-eol-style import . |core.io'native-eol-style|)
   (bytevector->string import . |core.io'bytevector->string|)
   (string->bytevector import . |core.io'string->bytevector|)
   (eof-object import . |.eof-object|)
   (eof-object? import . |.eof-object?|)
   (port? import . |.port?|)
   (port-transcoder import . |core.io'port-transcoder|)
   (textual-port? import . |core.io'textual-port?|)
   (binary-port? import . |core.io'binary-port?|)
   (transcoded-port import . |core.io'transcoded-port|)
   (port-has-port-position? import . |.port-has-port-position?|)
   (port-position import . |.port-position|)
   (port-has-set-port-position!? import . |.port-has-set-port-position!?|)
   (set-port-position! import . |.set-port-position!|)
   (close-port import . |.close-port|)
   (call-with-port import . |.call-with-port|)
   (input-port? import . |.input-port?|)
   (port-eof? import . |.port-eof?|)
   (open-file-input-port import . |core.io'open-file-input-port|)
   (open-bytevector-input-port import . |core.io'open-bytevector-input-port|)
   (open-string-input-port import . |core.io'open-string-input-port|)
   (standard-input-port import . |.standard-input-port|)
   (current-input-port import . |.current-input-port|)
   (get-u8 import . |.get-u8|)
   (lookahead-u8 import . |.lookahead-u8|)
   (get-bytevector-n import . |.get-bytevector-n|)
   (get-bytevector-n! import . |.get-bytevector-n!|)
   (get-bytevector-some import . |.get-bytevector-some|)
   (get-bytevector-all import . |.get-bytevector-all|)
   (get-char import . |.get-char|)
   (lookahead-char import . |.lookahead-char|)
   (get-string-n import . |.get-string-n|)
   (get-string-n! import . |.get-string-n!|)
   (get-string-all import . |.get-string-all|)
   (get-line import . |.get-line|)
   (get-datum import . |.get-datum|)
   (output-port? import . |.output-port?|)
   (flush-output-port import . |.flush-output-port|)
   (output-port-buffer-mode import . |.output-port-buffer-mode|)
   (open-file-output-port import . |core.io'open-file-output-port|)
   (open-bytevector-output-port import . |core.io'open-bytevector-output-port|)
   (call-with-bytevector-output-port import . |core.io'call-with-bytevector-output-port|)
   (open-string-output-port import . |core.io'open-string-output-port|)
   (call-with-string-output-port import . |core.io'call-with-string-output-port|)
   (standard-output-port import . |.standard-output-port|)
   (standard-error-port import . |.standard-error-port|)
   (current-output-port import . |.current-output-port|)
   (current-error-port import . |.current-error-port|)
   (put-u8 import . |.put-u8|)
   (put-bytevector import . |.put-bytevector|)
   (put-char import . |.put-char|)
   (put-string import . |.put-string|)
   (put-datum import . |.put-datum|)
   (open-file-input/output-port import . |core.io'open-file-input/output-port|)
   (make-custom-binary-input-port import . |core.io'make-custom-binary-input-port|)
   (make-custom-textual-input-port import . |core.io'make-custom-textual-input-port|)
   (make-custom-binary-output-port import . |core.io'make-custom-binary-output-port|)
   (make-custom-textual-output-port import . |core.io'make-custom-textual-output-port|)
   (make-custom-binary-input/output-port import . |core.io'make-custom-binary-input/output-port|)
   (make-custom-textual-input/output-port import . |core.io'make-custom-textual-input/output-port|))
 (apply.gloc.of |.intern-scheme-library| "../stdlib/rnrs/io/ports.scm" . 2049))

((call
   (push.const core io)
   (apply.gloc.of |.require-scheme-library| "../stdlib/rnrs/io/simple.scm" . 2049))
 (push.const . rnrs.io.simple)
 (push.const 6)
 (push.const
   (&i/o import . |.&i/o|)
   (make-i/o-error import . |.make-i/o-error|)
   (i/o-error? import . |.i/o-error?|)
   (&i/o-read import . |.&i/o-read|)
   (make-i/o-read-error import . |.make-i/o-read-error|)
   (i/o-read-error? import . |.i/o-read-error?|)
   (&i/o-write import . |.&i/o-write|)
   (make-i/o-write-error import . |.make-i/o-write-error|)
   (i/o-write-error? import . |.i/o-write-error?|)
   (&i/o-invalid-position import . |.&i/o-invalid-position|)
   (make-i/o-invalid-position-error import . |.make-i/o-invalid-position-error|)
   (i/o-invalid-position-error? import . |.i/o-invalid-position-error?|)
   (i/o-error-position import . |.i/o-error-position|)
   (&i/o-filename import . |.&i/o-filename|)
   (make-i/o-filename-error import . |.make-i/o-filename-error|)
   (i/o-filename-error? import . |.i/o-filename-error?|)
   (i/o-error-filename import . |.i/o-error-filename|)
   (&i/o-file-protection import . |.&i/o-file-protection|)
   (make-i/o-file-protection-error import . |.make-i/o-file-protection-error|)
   (i/o-file-protection-error? import . |.i/o-file-protection-error?|)
   (&i/o-file-is-read-only import . |.&i/o-file-is-read-only|)
   (make-i/o-file-is-read-only-error import . |.make-i/o-file-is-read-only-error|)
   (i/o-file-is-read-only-error? import . |.i/o-file-is-read-only-error?|)
   (&i/o-file-already-exists import . |.&i/o-file-already-exists|)
   (make-i/o-file-already-exists-error import . |.make-i/o-file-already-exists-error|)
   (i/o-file-already-exists-error? import . |.i/o-file-already-exists-error?|)
   (&i/o-file-does-not-exist import . |.&i/o-file-does-not-exist|)
   (make-i/o-file-does-not-exist-error import . |.make-i/o-file-does-not-exist-error|)
   (i/o-file-does-not-exist-error? import . |.i/o-file-does-not-exist-error?|)
   (&i/o-port import . |.&i/o-port|)
   (make-i/o-port-error import . |.make-i/o-port-error|)
   (i/o-port-error? import . |.i/o-port-error?|)
   (i/o-error-port import . |.i/o-error-port|)
   (&i/o-decoding import . |.&i/o-decoding|)
   (make-i/o-decoding-error import . |.make-i/o-decoding-error|)
   (i/o-decoding-error? import . |.i/o-decoding-error?|)
   (&i/o-encoding import . |.&i/o-encoding|)
   (make-i/o-encoding-error import . |.make-i/o-encoding-error|)
   (i/o-encoding-error? import . |.i/o-encoding-error?|)
   (i/o-encoding-error-char import . |.i/o-encoding-error-char|)
   (current-input-port import . |.current-input-port|)
   (current-output-port import . |.current-output-port|)
   (current-error-port import . |.current-error-port|)
   (eof-object import . |.eof-object|)
   (eof-object? import . |.eof-object?|)
   (input-port? import . |.input-port?|)
   (output-port? import . |.output-port?|)
   (call-with-input-file import . |core.io'call-with-input-file|)
   (call-with-output-file import . |core.io'call-with-output-file|)
   (with-input-from-file import . |core.io'with-input-from-file|)
   (with-output-to-file import . |core.io'with-output-to-file|)
   (open-input-file import . |core.io'open-input-file|)
   (open-output-file import . |core.io'open-output-file|)
   (close-input-port import . |core.io'close-input-port|)
   (close-output-port import . |core.io'close-output-port|)
   (read-char import . |.read-char|)
   (peek-char import . |.peek-char|)
   (read import . |.read|)
   (write-char import . |.write-char|)
   (newline import . |.newline|)
   (display import . |.display|)
   (write import . |.write|))
 (apply.gloc.of |.intern-scheme-library| "../stdlib/rnrs/io/simple.scm" . 2049))

((call
   (push.const core files)
   (apply.gloc.of |.require-scheme-library| "../stdlib/rnrs/files.scm" . 2049))
 (push.const . rnrs.files)
 (push.const 6)
 (push.const (file-exists? import . |.file-exists?|) (delete-file import . |.delete-file|))
 (apply.gloc.of |.intern-scheme-library| "../stdlib/rnrs/files.scm" . 2049))

((call
   (push.const core primitives)
   (apply.gloc.of |.require-scheme-library| "../stdlib/rnrs/programs.scm" . 2049))
 (push.const . rnrs.programs)
 (push.const 6)
 (push.const (command-line import . |.command-line|) (exit import . |.exit|))
 (apply.gloc.of |.intern-scheme-library| "../stdlib/rnrs/programs.scm" . 2049))

((call
   (push.const core arithmetic)
   (apply.gloc.of |.require-scheme-library| "../stdlib/rnrs/arithmetic/fixnums.scm" . 2049))
 (push.const . rnrs.arithmetic.fixnums)
 (push.const 6)
 (push.const
   (fixnum? import . |.fixnum?|)
   (fixnum-width import . |.fixnum-width|)
   (least-fixnum import . |.least-fixnum|)
   (greatest-fixnum import . |.greatest-fixnum|)
   (fx=? import . |.fx=?|)
   (fx<? import . |.fx<?|)
   (fx>? import . |.fx>?|)
   (fx<=? import . |.fx<=?|)
   (fx>=? import . |.fx>=?|)
   (fxzero? import . |.fxzero?|)
   (fxpositive? import . |.fxpositive?|)
   (fxnegative? import . |.fxnegative?|)
   (fxodd? import . |.fxodd?|)
   (fxeven? import . |.fxeven?|)
   (fxmax import . |.fxmax|)
   (fxmin import . |.fxmin|)
   (fx+ import . |.fx+|)
   (fx* import . |.fx*|)
   (fx- import . |.fx-|)
   (fxdiv import . |.fxdiv|)
   (fxmod import . |core.arithmetic'fxmod|)
   (fxdiv-and-mod import . |core.arithmetic'fxdiv-and-mod|)
   (fxdiv0 import . |.fxdiv0|)
   (fxmod0 import . |core.arithmetic'fxmod0|)
   (fxdiv0-and-mod0 import . |core.arithmetic'fxdiv0-and-mod0|)
   (fx+/carry import . |core.arithmetic'fx+/carry|)
   (fx-/carry import . |core.arithmetic'fx-/carry|)
   (fx*/carry import . |core.arithmetic'fx*/carry|)
   (fxnot import . |.fxnot|)
   (fxand import . |.fxand|)
   (fxior import . |.fxior|)
   (fxxor import . |.fxxor|)
   (fxif import . |.fxif|)
   (fxbit-count import . |.fxbit-count|)
   (fxlength import . |.fxlength|)
   (fxfirst-bit-set import . |.fxfirst-bit-set|)
   (fxbit-set? import . |.fxbit-set?|)
   (fxcopy-bit import . |.fxcopy-bit|)
   (fxbit-field import . |.fxbit-field|)
   (fxcopy-bit-field import . |.fxcopy-bit-field|)
   (fxarithmetic-shift import . |.fxarithmetic-shift|)
   (fxarithmetic-shift-left import . |.fxarithmetic-shift-left|)
   (fxarithmetic-shift-right import . |.fxarithmetic-shift-right|)
   (fxrotate-bit-field import . |core.arithmetic'fxrotate-bit-field|)
   (fxreverse-bit-field import . |core.arithmetic'fxreverse-bit-field|))
 (apply.gloc.of |.intern-scheme-library| "../stdlib/rnrs/arithmetic/fixnums.scm" . 2049))

((call
   (push.const core arithmetic)
   (apply.gloc.of |.require-scheme-library| "../stdlib/rnrs/arithmetic/flonums.scm" . 2049))
 (push.const . rnrs.arithmetic.flonums)
 (push.const 6)
 (push.const
   (flonum? import . |.flonum?|)
   (real->flonum import . |.real->flonum|)
   (fl=? import . |.fl=?|)
   (fl<? import . |.fl<?|)
   (fl>? import . |.fl>?|)
   (fl<=? import . |.fl<=?|)
   (fl>=? import . |.fl>=?|)
   (flinteger? import . |.flinteger?|)
   (flzero? import . |.flzero?|)
   (flpositive? import . |.flpositive?|)
   (flnegative? import . |.flnegative?|)
   (flodd? import . |.flodd?|)
   (fleven? import . |.fleven?|)
   (flfinite? import . |.flfinite?|)
   (flinfinite? import . |.flinfinite?|)
   (flnan? import . |.flnan?|)
   (flmax import . |.flmax|)
   (flmin import . |.flmin|)
   (fl+ import . |.fl+|)
   (fl* import . |.fl*|)
   (fl- import . |.fl-|)
   (fl/ import . |.fl/|)
   (fldiv-and-mod import . |core.arithmetic'fldiv-and-mod|)
   (fldiv import . |.fldiv|)
   (flmod import . |core.arithmetic'flmod|)
   (fldiv0-and-mod0 import . |core.arithmetic'fldiv0-and-mod0|)
   (fldiv0 import . |.fldiv0|)
   (flmod0 import . |core.arithmetic'flmod0|)
   (flnumerator import . |.flnumerator|)
   (fldenominator import . |.fldenominator|)
   (flfloor import . |.flfloor|)
   (flceiling import . |.flceiling|)
   (fltruncate import . |.fltruncate|)
   (flround import . |.flround|)
   (flexp import . |.flexp|)
   (flexpt import . |.flexpt|)
   (fllog import . |.fllog|)
   (flsin import . |.flsin|)
   (flcos import . |.flcos|)
   (fltan import . |.fltan|)
   (flasin import . |.flasin|)
   (flacos import . |.flacos|)
   (flatan import . |.flatan|)
   (flabs import . |.flabs|)
   (flsqrt import . |.flsqrt|)
   (fixnum->flonum import . |.fixnum->flonum|)
   (&no-infinities import . |.&no-infinities|)
   (make-no-infinities-violation import . |.make-no-infinities-violation|)
   (no-infinities-violation? import . |.no-infinities-violation?|)
   (&no-nans import . |.&no-nans|)
   (make-no-nans-violation import . |.make-no-nans-violation|)
   (no-nans-violation? import . |.no-nans-violation?|))
 (apply.gloc.of |.intern-scheme-library| "../stdlib/rnrs/arithmetic/flonums.scm" . 2049))

((call
   (push.const core arithmetic)
   (apply.gloc.of |.require-scheme-library| "../stdlib/rnrs/arithmetic/bitwise.scm" . 2049))
 (push.const . rnrs.arithmetic.bitwise)
 (push.const 6)
 (push.const
   (bitwise-not import . |.bitwise-not|)
   (bitwise-and import . |.bitwise-and|)
   (bitwise-ior import . |.bitwise-ior|)
   (bitwise-xor import . |.bitwise-xor|)
   (bitwise-if import . |core.arithmetic'bitwise-if|)
   (bitwise-bit-count import . |.bitwise-bit-count|)
   (bitwise-length import . |.bitwise-length|)
   (bitwise-first-bit-set import . |.bitwise-first-bit-set|)
   (bitwise-bit-set? import . |core.arithmetic'bitwise-bit-set?|)
   (bitwise-copy-bit import . |core.arithmetic'bitwise-copy-bit|)
   (bitwise-bit-field import . |core.arithmetic'bitwise-bit-field|)
   (bitwise-copy-bit-field import . |core.arithmetic'bitwise-copy-bit-field|)
   (bitwise-arithmetic-shift import . |.bitwise-arithmetic-shift|)
   (bitwise-arithmetic-shift-left import . |core.arithmetic'bitwise-arithmetic-shift-left|)
   (bitwise-arithmetic-shift-right import . |core.arithmetic'bitwise-arithmetic-shift-right|)
   (bitwise-rotate-bit-field import . |core.arithmetic'bitwise-rotate-bit-field|)
   (bitwise-reverse-bit-field import . |core.arithmetic'bitwise-reverse-bit-field|))
 (apply.gloc.of |.intern-scheme-library| "../stdlib/rnrs/arithmetic/bitwise.scm" . 2049))

((call
   (push.const core syntax-case)
   (apply.gloc.of |.require-scheme-library| "../stdlib/rnrs/syntax-case.scm" . 2049))
 (push.const . rnrs.syntax-case)
 (push.const 6)
 (push.const
   (make-variable-transformer import . |.make-variable-transformer|)
   (syntax-case import . |.syntax-case|)
   (_ import . |._|)
   (... import . |....|)
   (syntax import . |.syntax|)
   (identifier? import . |.identifier?|)
   (bound-identifier=? import . |.bound-identifier=?|)
   (free-identifier=? import . |.free-identifier=?|)
   (syntax->datum import . |.syntax->datum|)
   (datum->syntax import . |.datum->syntax|)
   (generate-temporaries import . |.generate-temporaries|)
   (with-syntax import . |core.syntax-case'with-syntax|)
   (quasisyntax import . |core.syntax-case'quasisyntax|)
   (unsyntax import . |core.syntax-case'unsyntax|)
   (unsyntax-splicing import . |core.syntax-case'unsyntax-splicing|)
   (syntax-violation import . |.syntax-violation|))
 (apply.gloc.of |.intern-scheme-library| "../stdlib/rnrs/syntax-case.scm" . 2049))

((call
   (push.const core hashtables)
   (apply.gloc.of |.require-scheme-library| "../stdlib/rnrs/hashtables.scm" . 2049))
 (push.const . rnrs.hashtables)
 (push.const 6)
 (push.const
   (make-eq-hashtable import . |core.hashtables'make-eq-hashtable|)
   (make-eqv-hashtable import . |core.hashtables'make-eqv-hashtable|)
   (make-hashtable import . |core.hashtables'make-hashtable|)
   (hashtable? import . |.core-hashtable?|)
   (hashtable-size import . |.core-hashtable-size|)
   (hashtable-ref import . |.core-hashtable-ref|)
   (hashtable-set! import . |.core-hashtable-set!|)
   (hashtable-delete! import . |.core-hashtable-delete!|)
   (hashtable-contains? import . |.core-hashtable-contains?|)
   (hashtable-update! import . |core.hashtables'hashtable-update!|)
   (hashtable-copy import . |.core-hashtable-copy|)
   (hashtable-clear! import . |.core-hashtable-clear!|)
   (hashtable-keys import . |core.hashtables'hashtable-keys|)
   (hashtable-entries import . |core.hashtables'hashtable-entries|)
   (hashtable-equivalence-function import . |.core-hashtable-equivalence-function|)
   (hashtable-hash-function import . |.core-hashtable-hash-function|)
   (hashtable-mutable? import . |.core-hashtable-mutable?|)
   (equal-hash import . |.equal-hash|)
   (string-hash import . |.string-hash|)
   (string-ci-hash import . |core.hashtables'string-ci-hash|)
   (symbol-hash import . |.symbol-hash|))
 (apply.gloc.of |.intern-scheme-library| "../stdlib/rnrs/hashtables.scm" . 2049))

((call
   (push.const core enums)
   (apply.gloc.of |.require-scheme-library| "../stdlib/rnrs/enums.scm" . 2049))
 (push.const . rnrs.enums)
 (push.const 6)
 (push.const
   (make-enumeration import . |core.enums'make-enumeration|)
   (enum-set-universe import . |core.enums'enum-set-universe|)
   (enum-set-indexer import . |core.enums'enum-set-indexer|)
   (enum-set-constructor import . |core.enums'enum-set-constructor|)
   (enum-set->list import . |core.enums'enum-set->list|)
   (enum-set-member? import . |core.enums'enum-set-member?|)
   (enum-set-subset? import . |core.enums'enum-set-subset?|)
   (enum-set=? import . |core.enums'enum-set=?|)
   (enum-set-union import . |core.enums'enum-set-union|)
   (enum-set-intersection import . |core.enums'enum-set-intersection|)
   (enum-set-difference import . |core.enums'enum-set-difference|)
   (enum-set-complement import . |core.enums'enum-set-complement|)
   (enum-set-projection import . |core.enums'enum-set-projection|)
   (define-enumeration import . |core.enums'define-enumeration|))
 (apply.gloc.of |.intern-scheme-library| "../stdlib/rnrs/enums.scm" . 2049))

((call
   (push.const rnrs enums)
   (apply.gloc.of |.require-scheme-library| "../stdlib/rnrs.scm" . 2049))
 (call
   (push.const rnrs hashtables)
   (apply.gloc.of |.require-scheme-library| "../stdlib/rnrs.scm" . 2049))
 (call
   (push.const rnrs syntax-case)
   (apply.gloc.of |.require-scheme-library| "../stdlib/rnrs.scm" . 2049))
 (call
   (push.const rnrs arithmetic bitwise)
   (apply.gloc.of |.require-scheme-library| "../stdlib/rnrs.scm" . 2049))
 (call
   (push.const rnrs arithmetic flonums)
   (apply.gloc.of |.require-scheme-library| "../stdlib/rnrs.scm" . 2049))
 (call
   (push.const rnrs arithmetic fixnums)
   (apply.gloc.of |.require-scheme-library| "../stdlib/rnrs.scm" . 2049))
 (call
   (push.const rnrs programs)
   (apply.gloc.of |.require-scheme-library| "../stdlib/rnrs.scm" . 2049))
 (call
   (push.const rnrs files)
   (apply.gloc.of |.require-scheme-library| "../stdlib/rnrs.scm" . 2049))
 (call
   (push.const rnrs io simple)
   (apply.gloc.of |.require-scheme-library| "../stdlib/rnrs.scm" . 2049))
 (call
   (push.const rnrs io ports)
   (apply.gloc.of |.require-scheme-library| "../stdlib/rnrs.scm" . 2049))
 (call
   (push.const rnrs conditions)
   (apply.gloc.of |.require-scheme-library| "../stdlib/rnrs.scm" . 2049))
 (call
   (push.const rnrs exceptions)
   (apply.gloc.of |.require-scheme-library| "../stdlib/rnrs.scm" . 2049))
 (call
   (push.const rnrs records inspection)
   (apply.gloc.of |.require-scheme-library| "../stdlib/rnrs.scm" . 2049))
 (call
   (push.const rnrs records procedural)
   (apply.gloc.of |.require-scheme-library| "../stdlib/rnrs.scm" . 2049))
 (call
   (push.const rnrs records syntactic)
   (apply.gloc.of |.require-scheme-library| "../stdlib/rnrs.scm" . 2049))
 (call
   (push.const rnrs control)
   (apply.gloc.of |.require-scheme-library| "../stdlib/rnrs.scm" . 2049))
 (call
   (push.const rnrs sorting)
   (apply.gloc.of |.require-scheme-library| "../stdlib/rnrs.scm" . 2049))
 (call
   (push.const rnrs lists)
   (apply.gloc.of |.require-scheme-library| "../stdlib/rnrs.scm" . 2049))
 (call
   (push.const rnrs bytevectors)
   (apply.gloc.of |.require-scheme-library| "../stdlib/rnrs.scm" . 2049))
 (call
   (push.const rnrs unicode)
   (apply.gloc.of |.require-scheme-library| "../stdlib/rnrs.scm" . 2049))
 (call (push.const rnrs base) (apply.gloc.of |.require-scheme-library| "../stdlib/rnrs.scm" . 2049))
 (push.const . rnrs)
 (push.const 6)
 (push.const
   (define import . |.define|)
   (define-syntax import . |.define-syntax|)
   (quote import . |.quote|)
   (lambda import . |.lambda|)
   (if import . |.if|)
   (set! import . |.set!|)
   (cond import . |.cond|)
   (case import . |.case|)
   (and import . |.and|)
   (or import . |.or|)
   (let import . |.let|)
   (let* import . |.let*|)
   (letrec import . |.letrec|)
   (letrec* import . |.letrec*|)
   (let-values import . |.let-values|)
   (let*-values import . |.let*-values|)
   (begin import . |.begin|)
   (quasiquote import . |.quasiquote|)
   (unquote import . |.unquote|)
   (unquote-splicing import . |.unquote-splicing|)
   (let-syntax import . |.let-syntax|)
   (letrec-syntax import . |.letrec-syntax|)
   (syntax-rules import . |.syntax-rules|)
   (identifier-syntax import . |.identifier-syntax|)
   (assert import . |.assert|)
   (else import . |.else|)
   (=> import . |.=>|)
   (... import . |....|)
   (_ import . |._|)
   (eq? import . |.eq?|)
   (eqv? import . |.eqv?|)
   (equal? import . |.equal?|)
   (procedure? import . |.procedure?|)
   (number? import . |.number?|)
   (complex? import . |.complex?|)
   (real? import . |.real?|)
   (rational? import . |.rational?|)
   (integer? import . |.integer?|)
   (real-valued? import . |.real-valued?|)
   (rational-valued? import . |.rational-valued?|)
   (integer-valued? import . |.integer-valued?|)
   (exact? import . |.exact?|)
   (inexact? import . |.inexact?|)
   (inexact import . |.inexact|)
   (exact import . |.exact|)
   (= import . |.=|)
   (< import . |.<|)
   (> import . |.>|)
   (<= import . |.<=|)
   (>= import . |.>=|)
   (zero? import . |.zero?|)
   (positive? import . |.positive?|)
   (negative? import . |.negative?|)
   (odd? import . |.odd?|)
   (even? import . |.even?|)
   (finite? import . |.finite?|)
   (infinite? import . |.infinite?|)
   (nan? import . |.nan?|)
   (max import . |.max|)
   (min import . |.min|)
   (+ import . |.+|)
   (* import . |.*|)
   (- import . |.-|)
   (/ import . |./|)
   (abs import . |.abs|)
   (div-and-mod import . |.div-and-mod|)
   (div import . |.div|)
   (mod import . |.mod|)
   (div0-and-mod0 import . |.div0-and-mod0|)
   (div0 import . |.div0|)
   (mod0 import . |.mod0|)
   (gcd import . |.gcd|)
   (lcm import . |.lcm|)
   (numerator import . |.numerator|)
   (denominator import . |.denominator|)
   (floor import . |.floor|)
   (ceiling import . |.ceiling|)
   (truncate import . |.truncate|)
   (round import . |.round|)
   (rationalize import . |.rationalize|)
   (exp import . |.exp|)
   (log import . |.log|)
   (sin import . |.sin|)
   (cos import . |.cos|)
   (tan import . |.tan|)
   (asin import . |.asin|)
   (acos import . |.acos|)
   (atan import . |.atan|)
   (sqrt import . |.sqrt|)
   (exact-integer-sqrt import . |.exact-integer-sqrt|)
   (expt import . |.expt|)
   (make-rectangular import . |.make-rectangular|)
   (make-polar import . |.make-polar|)
   (real-part import . |.real-part|)
   (imag-part import . |.imag-part|)
   (magnitude import . |.magnitude|)
   (angle import . |.angle|)
   (number->string import . |.number->string|)
   (string->number import . |.string->number|)
   (not import . |.not|)
   (boolean? import . |.boolean?|)
   (boolean=? import . |.boolean=?|)
   (pair? import . |.pair?|)
   (cons import . |.cons|)
   (car import . |.car|)
   (cdr import . |.cdr|)
   (caar import . |.caar|)
   (cadr import . |.cadr|)
   (cdar import . |.cdar|)
   (cddr import . |.cddr|)
   (caaar import . |.caaar|)
   (caadr import . |.caadr|)
   (cadar import . |.cadar|)
   (caddr import . |.caddr|)
   (cdaar import . |.cdaar|)
   (cdadr import . |.cdadr|)
   (cddar import . |.cddar|)
   (cdddr import . |.cdddr|)
   (caaaar import . |.caaaar|)
   (caaadr import . |.caaadr|)
   (caadar import . |.caadar|)
   (caaddr import . |.caaddr|)
   (cadaar import . |.cadaar|)
   (cadadr import . |.cadadr|)
   (caddar import . |.caddar|)
   (cadddr import . |.cadddr|)
   (cdaaar import . |.cdaaar|)
   (cdaadr import . |.cdaadr|)
   (cdadar import . |.cdadar|)
   (cdaddr import . |.cdaddr|)
   (cddaar import . |.cddaar|)
   (cddadr import . |.cddadr|)
   (cdddar import . |.cdddar|)
   (cddddr import . |.cddddr|)
   (null? import . |.null?|)
   (list? import . |.list?|)
   (list import . |.list|)
   (length import . |.length|)
   (append import . |.append|)
   (reverse import . |.reverse|)
   (list-tail import . |.list-tail|)
   (list-ref import . |.list-ref|)
   (map import . |.map|)
   (for-each import . |.for-each|)
   (symbol? import . |.symbol?|)
   (symbol->string import . |.symbol->string|)
   (string->symbol import . |.string->symbol|)
   (symbol=? import . |.symbol=?|)
   (char? import . |.char?|)
   (char->integer import . |.char->integer|)
   (integer->char import . |.integer->char|)
   (char=? import . |.char=?|)
   (char<? import . |.char<?|)
   (char>? import . |.char>?|)
   (char<=? import . |.char<=?|)
   (char>=? import . |.char>=?|)
   (string? import . |.string?|)
   (make-string import . |.make-string|)
   (string import . |.string|)
   (string-length import . |.string-length|)
   (string-ref import . |.string-ref|)
   (string=? import . |.string=?|)
   (string<? import . |.string<?|)
   (string>? import . |.string>?|)
   (string<=? import . |.string<=?|)
   (string>=? import . |.string>=?|)
   (substring import . |.substring|)
   (string-append import . |.string-append|)
   (string->list import . |.string->list|)
   (list->string import . |.list->string|)
   (string-copy import . |.string-copy|)
   (string-for-each import . |.string-for-each|)
   (vector? import . |.vector?|)
   (make-vector import . |.make-vector|)
   (vector import . |.vector|)
   (vector-length import . |.vector-length|)
   (vector-ref import . |.vector-ref|)
   (vector-set! import . |.vector-set!|)
   (vector->list import . |.vector->list|)
   (list->vector import . |.list->vector|)
   (vector-fill! import . |.vector-fill!|)
   (vector-map import . |.vector-map|)
   (vector-for-each import . |.vector-for-each|)
   (error import . |.error|)
   (assertion-violation import . |.assertion-violation|)
   (apply import . |.apply|)
   (call-with-current-continuation import . |.call-with-current-continuation|)
   (call/cc import . |.call/cc|)
   (values import . |.values|)
   (call-with-values import . |.call-with-values|)
   (dynamic-wind import . |.dynamic-wind|)
   (char-upcase import . |core.unicode'char-upcase|)
   (char-downcase import . |core.unicode'char-downcase|)
   (char-titlecase import . |core.unicode'char-titlecase|)
   (char-foldcase import . |core.unicode'char-foldcase|)
   (char-ci=? import . |core.unicode'char-ci=?|)
   (char-ci<? import . |core.unicode'char-ci<?|)
   (char-ci>? import . |core.unicode'char-ci>?|)
   (char-ci<=? import . |core.unicode'char-ci<=?|)
   (char-ci>=? import . |core.unicode'char-ci>=?|)
   (char-alphabetic? import . |core.unicode'char-alphabetic?|)
   (char-numeric? import . |core.unicode'char-numeric?|)
   (char-whitespace? import . |.char-whitespace?|)
   (char-upper-case? import . |core.unicode'char-upper-case?|)
   (char-lower-case? import . |core.unicode'char-lower-case?|)
   (char-title-case? import . |core.unicode'char-title-case?|)
   (char-general-category import . |core.unicode'char-general-category|)
   (string-upcase import . |core.unicode'string-upcase|)
   (string-downcase import . |core.unicode'string-downcase|)
   (string-titlecase import . |core.unicode'string-titlecase|)
   (string-foldcase import . |core.unicode'string-foldcase|)
   (string-ci=? import . |core.unicode'string-ci=?|)
   (string-ci<? import . |core.unicode'string-ci<?|)
   (string-ci>? import . |core.unicode'string-ci>?|)
   (string-ci<=? import . |core.unicode'string-ci<=?|)
   (string-ci>=? import . |core.unicode'string-ci>=?|)
   (string-normalize-nfd import . |core.unicode'string-normalize-nfd|)
   (string-normalize-nfkd import . |core.unicode'string-normalize-nfkd|)
   (string-normalize-nfc import . |core.unicode'string-normalize-nfc|)
   (string-normalize-nfkc import . |core.unicode'string-normalize-nfkc|)
   (endianness import . |core.bytevectors'endianness|)
   (native-endianness import . |.native-endianness|)
   (bytevector? import . |.bytevector?|)
   (make-bytevector import . |.make-bytevector|)
   (bytevector-length import . |.bytevector-length|)
   (bytevector=? import . |.bytevector=?|)
   (bytevector-fill! import . |.bytevector-fill!|)
   (bytevector-copy! import . |.bytevector-copy!|)
   (bytevector-copy import . |.bytevector-copy|)
   (bytevector-u8-ref import . |.bytevector-u8-ref|)
   (bytevector-s8-ref import . |.bytevector-s8-ref|)
   (bytevector-u8-set! import . |.bytevector-u8-set!|)
   (bytevector-s8-set! import . |.bytevector-s8-set!|)
   (bytevector->u8-list import . |.bytevector->u8-list|)
   (u8-list->bytevector import . |.u8-list->bytevector|)
   (bytevector-u16-ref import . |.bytevector-u16-ref|)
   (bytevector-s16-ref import . |.bytevector-s16-ref|)
   (bytevector-u16-native-ref import . |.bytevector-u16-native-ref|)
   (bytevector-s16-native-ref import . |.bytevector-s16-native-ref|)
   (bytevector-u16-set! import . |.bytevector-u16-set!|)
   (bytevector-s16-set! import . |.bytevector-s16-set!|)
   (bytevector-u16-native-set! import . |.bytevector-u16-native-set!|)
   (bytevector-s16-native-set! import . |.bytevector-s16-native-set!|)
   (bytevector-u32-ref import . |.bytevector-u32-ref|)
   (bytevector-s32-ref import . |.bytevector-s32-ref|)
   (bytevector-u32-native-ref import . |.bytevector-u32-native-ref|)
   (bytevector-s32-native-ref import . |.bytevector-s32-native-ref|)
   (bytevector-u32-set! import . |.bytevector-u32-set!|)
   (bytevector-s32-set! import . |.bytevector-s32-set!|)
   (bytevector-u32-native-set! import . |.bytevector-u32-native-set!|)
   (bytevector-s32-native-set! import . |.bytevector-s32-native-set!|)
   (bytevector-u64-ref import . |.bytevector-u64-ref|)
   (bytevector-s64-ref import . |.bytevector-s64-ref|)
   (bytevector-u64-native-ref import . |.bytevector-u64-native-ref|)
   (bytevector-s64-native-ref import . |.bytevector-s64-native-ref|)
   (bytevector-u64-set! import . |.bytevector-u64-set!|)
   (bytevector-s64-set! import . |.bytevector-s64-set!|)
   (bytevector-u64-native-set! import . |.bytevector-u64-native-set!|)
   (bytevector-s64-native-set! import . |.bytevector-s64-native-set!|)
   (bytevector-ieee-single-ref import . |.bytevector-ieee-single-ref|)
   (bytevector-ieee-single-native-ref import . |.bytevector-ieee-single-native-ref|)
   (bytevector-ieee-single-set! import . |.bytevector-ieee-single-set!|)
   (bytevector-ieee-single-native-set! import . |.bytevector-ieee-single-native-set!|)
   (bytevector-ieee-double-ref import . |.bytevector-ieee-double-ref|)
   (bytevector-ieee-double-native-ref import . |.bytevector-ieee-double-native-ref|)
   (bytevector-ieee-double-set! import . |.bytevector-ieee-double-set!|)
   (bytevector-ieee-double-native-set! import . |.bytevector-ieee-double-native-set!|)
   (bytevector-uint-ref import . |core.bytevectors'bytevector-uint-ref|)
   (bytevector-sint-ref import . |core.bytevectors'bytevector-sint-ref|)
   (bytevector-uint-set! import . |core.bytevectors'bytevector-uint-set!|)
   (bytevector-sint-set! import . |core.bytevectors'bytevector-sint-set!|)
   (bytevector->uint-list import . |core.bytevectors'bytevector->uint-list|)
   (bytevector->sint-list import . |core.bytevectors'bytevector->sint-list|)
   (uint-list->bytevector import . |core.bytevectors'uint-list->bytevector|)
   (sint-list->bytevector import . |core.bytevectors'sint-list->bytevector|)
   (string->utf8 import . |.string->utf8|)
   (utf8->string import . |.utf8->string|)
   (string->utf16 import . |core.bytevector-transcoders'string->utf16|)
   (utf16->string import . |core.bytevector-transcoders'utf16->string|)
   (string->utf32 import . |core.bytevector-transcoders'string->utf32|)
   (utf32->string import . |core.bytevector-transcoders'utf32->string|)
   (find import . |core.lists'find|)
   (for-all import . |core.lists'for-all|)
   (exists import . |core.lists'exists|)
   (filter import . |core.lists'filter|)
   (partition import . |core.lists'partition|)
   (fold-left import . |core.lists'fold-left|)
   (fold-right import . |core.lists'fold-right|)
   (remp import . |core.lists'remp|)
   (remove import . |core.lists'remove|)
   (remv import . |core.lists'remv|)
   (remq import . |core.lists'remq|)
   (memp import . |core.lists'memp|)
   (member import . |.member|)
   (memv import . |.memv|)
   (memq import . |.memq|)
   (assp import . |core.lists'assp|)
   (assoc import . |.assoc|)
   (assv import . |.assv|)
   (assq import . |.assq|)
   (cons* import . |.cons*|)
   (list-sort import . |core.sorting'list-sort|)
   (vector-sort import . |core.sorting'vector-sort|)
   (vector-sort! import . |core.sorting'vector-sort!|)
   (when import . |core.control'when|)
   (unless import . |core.control'unless|)
   (do import . |.do|)
   (case-lambda import . |core.control'case-lambda|)
   (define-record-type import . |core.records'define-record-type|)
   (record-type-descriptor import . |core.records'record-type-descriptor|)
   (record-constructor-descriptor import . |core.records'record-constructor-descriptor|)
   (make-record-type-descriptor import . |.make-record-type-descriptor|)
   (record-type-descriptor? import . |.record-type-descriptor?|)
   (make-record-constructor-descriptor import . |.make-record-constructor-descriptor|)
   (record-constructor import . |.record-constructor|)
   (record-predicate import . |.record-predicate|)
   (record-accessor import . |.record-accessor|)
   (record-mutator import . |.record-mutator|)
   (record? import . |.record?|)
   (record-rtd import . |.record-rtd|)
   (record-type-name import . |.record-type-name|)
   (record-type-parent import . |.record-type-parent|)
   (record-type-uid import . |.record-type-uid|)
   (record-type-generative? import . |.record-type-generative?|)
   (record-type-sealed? import . |.record-type-sealed?|)
   (record-type-opaque? import . |.record-type-opaque?|)
   (record-type-field-names import . |.record-type-field-names|)
   (record-field-mutable? import . |.record-field-mutable?|)
   (with-exception-handler import . |.with-exception-handler|)
   (guard import . |core.exceptions'guard|)
   (raise import . |.raise|)
   (raise-continuable import . |.raise-continuable|)
   (&condition import . |.&condition|)
   (condition import . |.condition|)
   (simple-conditions import . |.simple-conditions|)
   (condition? import . |.condition?|)
   (condition-predicate import . |.condition-predicate|)
   (condition-accessor import . |.condition-accessor|)
   (define-condition-type import . |core.conditions'define-condition-type|)
   (&message import . |.&message|)
   (make-message-condition import . |.make-message-condition|)
   (message-condition? import . |.message-condition?|)
   (condition-message import . |.condition-message|)
   (&warning import . |.&warning|)
   (make-warning import . |.make-warning|)
   (warning? import . |.warning?|)
   (&serious import . |.&serious|)
   (make-serious-condition import . |.make-serious-condition|)
   (serious-condition? import . |.serious-condition?|)
   (&error import . |.&error|)
   (make-error import . |.make-error|)
   (error? import . |.error?|)
   (&violation import . |.&violation|)
   (make-violation import . |.make-violation|)
   (violation? import . |.violation?|)
   (&assertion import . |.&assertion|)
   (make-assertion-violation import . |.make-assertion-violation|)
   (assertion-violation? import . |.assertion-violation?|)
   (&irritants import . |.&irritants|)
   (make-irritants-condition import . |.make-irritants-condition|)
   (irritants-condition? import . |.irritants-condition?|)
   (condition-irritants import . |.condition-irritants|)
   (&who import . |.&who|)
   (make-who-condition import . |.make-who-condition|)
   (who-condition? import . |.who-condition?|)
   (condition-who import . |.condition-who|)
   (&non-continuable import . |.&non-continuable|)
   (make-non-continuable-violation import . |.make-non-continuable-violation|)
   (non-continuable-violation? import . |.non-continuable-violation?|)
   (&implementation-restriction import . |.&implementation-restriction|)
   (make-implementation-restriction-violation import . |.make-implementation-restriction-violation|)
   (implementation-restriction-violation? import . |.implementation-restriction-violation?|)
   (&lexical import . |.&lexical|)
   (make-lexical-violation import . |.make-lexical-violation|)
   (lexical-violation? import . |.lexical-violation?|)
   (&syntax import . |.&syntax|)
   (make-syntax-violation import . |.make-syntax-violation|)
   (syntax-violation? import . |.syntax-violation?|)
   (syntax-violation-form import . |.syntax-violation-form|)
   (syntax-violation-subform import . |.syntax-violation-subform|)
   (&undefined import . |.&undefined|)
   (make-undefined-violation import . |.make-undefined-violation|)
   (undefined-violation? import . |.undefined-violation?|)
   (&i/o import . |.&i/o|)
   (make-i/o-error import . |.make-i/o-error|)
   (i/o-error? import . |.i/o-error?|)
   (&i/o-read import . |.&i/o-read|)
   (make-i/o-read-error import . |.make-i/o-read-error|)
   (i/o-read-error? import . |.i/o-read-error?|)
   (&i/o-write import . |.&i/o-write|)
   (make-i/o-write-error import . |.make-i/o-write-error|)
   (i/o-write-error? import . |.i/o-write-error?|)
   (&i/o-invalid-position import . |.&i/o-invalid-position|)
   (make-i/o-invalid-position-error import . |.make-i/o-invalid-position-error|)
   (i/o-invalid-position-error? import . |.i/o-invalid-position-error?|)
   (i/o-error-position import . |.i/o-error-position|)
   (&i/o-filename import . |.&i/o-filename|)
   (make-i/o-filename-error import . |.make-i/o-filename-error|)
   (i/o-filename-error? import . |.i/o-filename-error?|)
   (i/o-error-filename import . |.i/o-error-filename|)
   (&i/o-file-protection import . |.&i/o-file-protection|)
   (make-i/o-file-protection-error import . |.make-i/o-file-protection-error|)
   (i/o-file-protection-error? import . |.i/o-file-protection-error?|)
   (&i/o-file-is-read-only import . |.&i/o-file-is-read-only|)
   (make-i/o-file-is-read-only-error import . |.make-i/o-file-is-read-only-error|)
   (i/o-file-is-read-only-error? import . |.i/o-file-is-read-only-error?|)
   (&i/o-file-already-exists import . |.&i/o-file-already-exists|)
   (make-i/o-file-already-exists-error import . |.make-i/o-file-already-exists-error|)
   (i/o-file-already-exists-error? import . |.i/o-file-already-exists-error?|)
   (&i/o-file-does-not-exist import . |.&i/o-file-does-not-exist|)
   (make-i/o-file-does-not-exist-error import . |.make-i/o-file-does-not-exist-error|)
   (i/o-file-does-not-exist-error? import . |.i/o-file-does-not-exist-error?|)
   (&i/o-port import . |.&i/o-port|)
   (make-i/o-port-error import . |.make-i/o-port-error|)
   (i/o-port-error? import . |.i/o-port-error?|)
   (i/o-error-port import . |.i/o-error-port|)
   (&i/o-decoding import . |.&i/o-decoding|)
   (make-i/o-decoding-error import . |.make-i/o-decoding-error|)
   (i/o-decoding-error? import . |.i/o-decoding-error?|)
   (&i/o-encoding import . |.&i/o-encoding|)
   (make-i/o-encoding-error import . |.make-i/o-encoding-error|)
   (i/o-encoding-error? import . |.i/o-encoding-error?|)
   (i/o-encoding-error-char import . |.i/o-encoding-error-char|)
   (file-options import . |core.io'file-options|)
   (buffer-mode import . |core.io'buffer-mode|)
   (buffer-mode? import . |core.io'buffer-mode?|)
   (utf-8-codec import . |core.io'utf-8-codec|)
   (utf-16-codec import . |core.io'utf-16-codec|)
   (latin-1-codec import . |core.io'latin-1-codec|)
   (eol-style import . |core.io'eol-style|)
   (error-handling-mode import . |core.io'error-handling-mode|)
   (make-transcoder import . |core.io'make-transcoder|)
   (transcoder-codec import . |core.io'transcoder-codec|)
   (transcoder-eol-style import . |core.io'transcoder-eol-style|)
   (transcoder-error-handling-mode import . |core.io'transcoder-error-handling-mode|)
   (native-transcoder import . |core.io'native-transcoder|)
   (native-eol-style import . |core.io'native-eol-style|)
   (bytevector->string import . |core.io'bytevector->string|)
   (string->bytevector import . |core.io'string->bytevector|)
   (eof-object import . |.eof-object|)
   (eof-object? import . |.eof-object?|)
   (port? import . |.port?|)
   (port-transcoder import . |core.io'port-transcoder|)
   (textual-port? import . |core.io'textual-port?|)
   (binary-port? import . |core.io'binary-port?|)
   (transcoded-port import . |core.io'transcoded-port|)
   (port-has-port-position? import . |.port-has-port-position?|)
   (port-position import . |.port-position|)
   (port-has-set-port-position!? import . |.port-has-set-port-position!?|)
   (set-port-position! import . |.set-port-position!|)
   (close-port import . |.close-port|)
   (call-with-port import . |.call-with-port|)
   (input-port? import . |.input-port?|)
   (port-eof? import . |.port-eof?|)
   (open-file-input-port import . |core.io'open-file-input-port|)
   (open-bytevector-input-port import . |core.io'open-bytevector-input-port|)
   (open-string-input-port import . |core.io'open-string-input-port|)
   (standard-input-port import . |.standard-input-port|)
   (current-input-port import . |.current-input-port|)
   (get-u8 import . |.get-u8|)
   (lookahead-u8 import . |.lookahead-u8|)
   (get-bytevector-n import . |.get-bytevector-n|)
   (get-bytevector-n! import . |.get-bytevector-n!|)
   (get-bytevector-some import . |.get-bytevector-some|)
   (get-bytevector-all import . |.get-bytevector-all|)
   (get-char import . |.get-char|)
   (lookahead-char import . |.lookahead-char|)
   (get-string-n import . |.get-string-n|)
   (get-string-n! import . |.get-string-n!|)
   (get-string-all import . |.get-string-all|)
   (get-line import . |.get-line|)
   (get-datum import . |.get-datum|)
   (output-port? import . |.output-port?|)
   (flush-output-port import . |.flush-output-port|)
   (output-port-buffer-mode import . |.output-port-buffer-mode|)
   (open-file-output-port import . |core.io'open-file-output-port|)
   (open-bytevector-output-port import . |core.io'open-bytevector-output-port|)
   (call-with-bytevector-output-port import . |core.io'call-with-bytevector-output-port|)
   (open-string-output-port import . |core.io'open-string-output-port|)
   (call-with-string-output-port import . |core.io'call-with-string-output-port|)
   (standard-output-port import . |.standard-output-port|)
   (standard-error-port import . |.standard-error-port|)
   (current-output-port import . |.current-output-port|)
   (current-error-port import . |.current-error-port|)
   (put-u8 import . |.put-u8|)
   (put-bytevector import . |.put-bytevector|)
   (put-char import . |.put-char|)
   (put-string import . |.put-string|)
   (put-datum import . |.put-datum|)
   (open-file-input/output-port import . |core.io'open-file-input/output-port|)
   (make-custom-binary-input-port import . |core.io'make-custom-binary-input-port|)
   (make-custom-textual-input-port import . |core.io'make-custom-textual-input-port|)
   (make-custom-binary-output-port import . |core.io'make-custom-binary-output-port|)
   (make-custom-textual-output-port import . |core.io'make-custom-textual-output-port|)
   (make-custom-binary-input/output-port import . |core.io'make-custom-binary-input/output-port|)
   (make-custom-textual-input/output-port import . |core.io'make-custom-textual-input/output-port|)
   (call-with-input-file import . |core.io'call-with-input-file|)
   (call-with-output-file import . |core.io'call-with-output-file|)
   (with-input-from-file import . |core.io'with-input-from-file|)
   (with-output-to-file import . |core.io'with-output-to-file|)
   (open-input-file import . |core.io'open-input-file|)
   (open-output-file import . |core.io'open-output-file|)
   (close-input-port import . |core.io'close-input-port|)
   (close-output-port import . |core.io'close-output-port|)
   (read-char import . |.read-char|)
   (peek-char import . |.peek-char|)
   (read import . |.read|)
   (write-char import . |.write-char|)
   (newline import . |.newline|)
   (display import . |.display|)
   (write import . |.write|)
   (file-exists? import . |.file-exists?|)
   (delete-file import . |.delete-file|)
   (make-enumeration import . |core.enums'make-enumeration|)
   (enum-set-universe import . |core.enums'enum-set-universe|)
   (enum-set-indexer import . |core.enums'enum-set-indexer|)
   (enum-set-constructor import . |core.enums'enum-set-constructor|)
   (enum-set->list import . |core.enums'enum-set->list|)
   (enum-set-member? import . |core.enums'enum-set-member?|)
   (enum-set-subset? import . |core.enums'enum-set-subset?|)
   (enum-set=? import . |core.enums'enum-set=?|)
   (enum-set-union import . |core.enums'enum-set-union|)
   (enum-set-intersection import . |core.enums'enum-set-intersection|)
   (enum-set-difference import . |core.enums'enum-set-difference|)
   (enum-set-complement import . |core.enums'enum-set-complement|)
   (enum-set-projection import . |core.enums'enum-set-projection|)
   (define-enumeration import . |core.enums'define-enumeration|)
   (command-line import . |.command-line|)
   (exit import . |.exit|)
   (fixnum? import . |.fixnum?|)
   (fixnum-width import . |.fixnum-width|)
   (least-fixnum import . |.least-fixnum|)
   (greatest-fixnum import . |.greatest-fixnum|)
   (fx=? import . |.fx=?|)
   (fx<? import . |.fx<?|)
   (fx>? import . |.fx>?|)
   (fx<=? import . |.fx<=?|)
   (fx>=? import . |.fx>=?|)
   (fxzero? import . |.fxzero?|)
   (fxpositive? import . |.fxpositive?|)
   (fxnegative? import . |.fxnegative?|)
   (fxodd? import . |.fxodd?|)
   (fxeven? import . |.fxeven?|)
   (fxmax import . |.fxmax|)
   (fxmin import . |.fxmin|)
   (fx+ import . |.fx+|)
   (fx* import . |.fx*|)
   (fx- import . |.fx-|)
   (fxdiv import . |.fxdiv|)
   (fxmod import . |core.arithmetic'fxmod|)
   (fxdiv-and-mod import . |core.arithmetic'fxdiv-and-mod|)
   (fxdiv0 import . |.fxdiv0|)
   (fxmod0 import . |core.arithmetic'fxmod0|)
   (fxdiv0-and-mod0 import . |core.arithmetic'fxdiv0-and-mod0|)
   (fx+/carry import . |core.arithmetic'fx+/carry|)
   (fx-/carry import . |core.arithmetic'fx-/carry|)
   (fx*/carry import . |core.arithmetic'fx*/carry|)
   (fxnot import . |.fxnot|)
   (fxand import . |.fxand|)
   (fxior import . |.fxior|)
   (fxxor import . |.fxxor|)
   (fxif import . |.fxif|)
   (fxbit-count import . |.fxbit-count|)
   (fxlength import . |.fxlength|)
   (fxfirst-bit-set import . |.fxfirst-bit-set|)
   (fxbit-set? import . |.fxbit-set?|)
   (fxcopy-bit import . |.fxcopy-bit|)
   (fxbit-field import . |.fxbit-field|)
   (fxcopy-bit-field import . |.fxcopy-bit-field|)
   (fxarithmetic-shift import . |.fxarithmetic-shift|)
   (fxarithmetic-shift-left import . |.fxarithmetic-shift-left|)
   (fxarithmetic-shift-right import . |.fxarithmetic-shift-right|)
   (fxrotate-bit-field import . |core.arithmetic'fxrotate-bit-field|)
   (fxreverse-bit-field import . |core.arithmetic'fxreverse-bit-field|)
   (flonum? import . |.flonum?|)
   (real->flonum import . |.real->flonum|)
   (fl=? import . |.fl=?|)
   (fl<? import . |.fl<?|)
   (fl>? import . |.fl>?|)
   (fl<=? import . |.fl<=?|)
   (fl>=? import . |.fl>=?|)
   (flinteger? import . |.flinteger?|)
   (flzero? import . |.flzero?|)
   (flpositive? import . |.flpositive?|)
   (flnegative? import . |.flnegative?|)
   (flodd? import . |.flodd?|)
   (fleven? import . |.fleven?|)
   (flfinite? import . |.flfinite?|)
   (flinfinite? import . |.flinfinite?|)
   (flnan? import . |.flnan?|)
   (flmax import . |.flmax|)
   (flmin import . |.flmin|)
   (fl+ import . |.fl+|)
   (fl* import . |.fl*|)
   (fl- import . |.fl-|)
   (fl/ import . |.fl/|)
   (fldiv-and-mod import . |core.arithmetic'fldiv-and-mod|)
   (fldiv import . |.fldiv|)
   (flmod import . |core.arithmetic'flmod|)
   (fldiv0-and-mod0 import . |core.arithmetic'fldiv0-and-mod0|)
   (fldiv0 import . |.fldiv0|)
   (flmod0 import . |core.arithmetic'flmod0|)
   (flnumerator import . |.flnumerator|)
   (fldenominator import . |.fldenominator|)
   (flfloor import . |.flfloor|)
   (flceiling import . |.flceiling|)
   (fltruncate import . |.fltruncate|)
   (flround import . |.flround|)
   (flabs import . |.flabs|)
   (flexpt import . |.flexpt|)
   (flsqrt import . |.flsqrt|)
   (flexp import . |.flexp|)
   (fllog import . |.fllog|)
   (flsin import . |.flsin|)
   (flcos import . |.flcos|)
   (fltan import . |.fltan|)
   (flasin import . |.flasin|)
   (flacos import . |.flacos|)
   (flatan import . |.flatan|)
   (fixnum->flonum import . |.fixnum->flonum|)
   (&no-infinities import . |.&no-infinities|)
   (make-no-infinities-violation import . |.make-no-infinities-violation|)
   (no-infinities-violation? import . |.no-infinities-violation?|)
   (&no-nans import . |.&no-nans|)
   (make-no-nans-violation import . |.make-no-nans-violation|)
   (no-nans-violation? import . |.no-nans-violation?|)
   (bitwise-not import . |.bitwise-not|)
   (bitwise-and import . |.bitwise-and|)
   (bitwise-ior import . |.bitwise-ior|)
   (bitwise-xor import . |.bitwise-xor|)
   (bitwise-if import . |core.arithmetic'bitwise-if|)
   (bitwise-bit-count import . |.bitwise-bit-count|)
   (bitwise-length import . |.bitwise-length|)
   (bitwise-first-bit-set import . |.bitwise-first-bit-set|)
   (bitwise-bit-set? import . |core.arithmetic'bitwise-bit-set?|)
   (bitwise-copy-bit import . |core.arithmetic'bitwise-copy-bit|)
   (bitwise-bit-field import . |core.arithmetic'bitwise-bit-field|)
   (bitwise-copy-bit-field import . |core.arithmetic'bitwise-copy-bit-field|)
   (bitwise-arithmetic-shift import . |.bitwise-arithmetic-shift|)
   (bitwise-arithmetic-shift-left import . |core.arithmetic'bitwise-arithmetic-shift-left|)
   (bitwise-arithmetic-shift-right import . |core.arithmetic'bitwise-arithmetic-shift-right|)
   (bitwise-rotate-bit-field import . |core.arithmetic'bitwise-rotate-bit-field|)
   (bitwise-reverse-bit-field import . |core.arithmetic'bitwise-reverse-bit-field|)
   (syntax-case import . |.syntax-case|)
   (syntax import . |.syntax|)
   (with-syntax import . |core.syntax-case'with-syntax|)
   (make-variable-transformer import . |.make-variable-transformer|)
   (identifier? import . |.identifier?|)
   (bound-identifier=? import . |.bound-identifier=?|)
   (free-identifier=? import . |.free-identifier=?|)
   (datum->syntax import . |.datum->syntax|)
   (syntax->datum import . |.syntax->datum|)
   (generate-temporaries import . |.generate-temporaries|)
   (quasisyntax import . |core.syntax-case'quasisyntax|)
   (unsyntax import . |core.syntax-case'unsyntax|)
   (unsyntax-splicing import . |core.syntax-case'unsyntax-splicing|)
   (syntax-violation import . |.syntax-violation|)
   (make-eq-hashtable import . |core.hashtables'make-eq-hashtable|)
   (make-eqv-hashtable import . |core.hashtables'make-eqv-hashtable|)
   (make-hashtable import . |core.hashtables'make-hashtable|)
   (hashtable? import . |.core-hashtable?|)
   (hashtable-size import . |.core-hashtable-size|)
   (hashtable-ref import . |.core-hashtable-ref|)
   (hashtable-set! import . |.core-hashtable-set!|)
   (hashtable-delete! import . |.core-hashtable-delete!|)
   (hashtable-contains? import . |.core-hashtable-contains?|)
   (hashtable-update! import . |core.hashtables'hashtable-update!|)
   (hashtable-copy import . |.core-hashtable-copy|)
   (hashtable-clear! import . |.core-hashtable-clear!|)
   (hashtable-keys import . |core.hashtables'hashtable-keys|)
   (hashtable-entries import . |core.hashtables'hashtable-entries|)
   (hashtable-equivalence-function import . |.core-hashtable-equivalence-function|)
   (hashtable-hash-function import . |.core-hashtable-hash-function|)
   (hashtable-mutable? import . |.core-hashtable-mutable?|)
   (equal-hash import . |.equal-hash|)
   (string-hash import . |.string-hash|)
   (string-ci-hash import . |core.hashtables'string-ci-hash|)
   (symbol-hash import . |.symbol-hash|))
 (apply.gloc.of |.intern-scheme-library| "../stdlib/rnrs.scm" . 2049))

((call (push.const rnrs) (apply.gloc.of |.require-scheme-library| "../stdlib/core.scm" . 1025))
 (call
   (push.const core enums)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core.scm" . 1025))
 (call
   (push.const core struct)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core.scm" . 1025))
 (call
   (push.const core hashtables)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core.scm" . 1025))
 (call
   (push.const core unicode)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core.scm" . 1025))
 (call
   (push.const core bytevector-transcoders)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core.scm" . 1025))
 (call
   (push.const core conditions)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core.scm" . 1025))
 (call
   (push.const core records)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core.scm" . 1025))
 (call
   (push.const core destructuring)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core.scm" . 1025))
 (call
   (push.const core lists)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core.scm" . 1025))
 (call
   (push.const core chkarg)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core.scm" . 1025))
 (call
   (push.const core optargs)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core.scm" . 1025))
 (call
   (push.const core control)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core.scm" . 1025))
 (call (push.const core r5rs) (apply.gloc.of |.require-scheme-library| "../stdlib/core.scm" . 1025))
 (call
   (push.const core syntax-case)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core.scm" . 1025))
 (call
   (push.const core bytevectors)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core.scm" . 1025))
 (call
   (push.const core sorting)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core.scm" . 1025))
 (call
   (push.const core arithmetic)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core.scm" . 1025))
 (call
   (push.const core exceptions)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core.scm" . 1025))
 (call
   (push.const core files)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core.scm" . 1025))
 (call (push.const core io) (apply.gloc.of |.require-scheme-library| "../stdlib/core.scm" . 1025))
 (call
   (push.const core parameters)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core.scm" . 1025))
 (call
   (push.const core optimize)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core.scm" . 1025))
 (call
   (push.const core primitives)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core.scm" . 1025))
 (push.const . core)
 (push.const . #f)
 (push.const
   (&assertion import . |.&assertion|)
   (&condition import . |.&condition|)
   (&error import . |.&error|)
   (&i/o import . |.&i/o|)
   (&i/o-decoding import . |.&i/o-decoding|)
   (&i/o-encoding import . |.&i/o-encoding|)
   (&i/o-file-already-exists import . |.&i/o-file-already-exists|)
   (&i/o-file-does-not-exist import . |.&i/o-file-does-not-exist|)
   (&i/o-file-is-read-only import . |.&i/o-file-is-read-only|)
   (&i/o-file-protection import . |.&i/o-file-protection|)
   (&i/o-filename import . |.&i/o-filename|)
   (&i/o-invalid-position import . |.&i/o-invalid-position|)
   (&i/o-port import . |.&i/o-port|)
   (&i/o-read import . |.&i/o-read|)
   (&i/o-write import . |.&i/o-write|)
   (&implementation-restriction import . |.&implementation-restriction|)
   (&irritants import . |.&irritants|)
   (&lexical import . |.&lexical|)
   (&message import . |.&message|)
   (&no-infinities import . |.&no-infinities|)
   (&no-nans import . |.&no-nans|)
   (&non-continuable import . |.&non-continuable|)
   (&serious import . |.&serious|)
   (&syntax import . |.&syntax|)
   (&undefined import . |.&undefined|)
   (&violation import . |.&violation|)
   (&warning import . |.&warning|)
   (&who import . |.&who|)
   (* import . |.*|)
   (+ import . |.+|)
   (- import . |.-|)
   (... import . |....|)
   (/ import . |./|)
   (< import . |.<|)
   (<= import . |.<=|)
   (= import . |.=|)
   (=> import . |.=>|)
   (> import . |.>|)
   (>= import . |.>=|)
   (_ import . |._|)
   (abs import . |.abs|)
   (acos import . |.acos|)
   (add-library-path import . |.add-library-path|)
   (add-load-path import . |.add-load-path|)
   (and import . |.and|)
   (angle import . |.angle|)
   (append import . |.append|)
   (apply import . |.apply|)
   (architecture-feature import . |.architecture-feature|)
   (asin import . |.asin|)
   (assert import . |.assert|)
   (assertion-violation import . |.assertion-violation|)
   (assertion-violation? import . |.assertion-violation?|)
   (assoc import . |.assoc|)
   (assp import . |core.lists'assp|)
   (assq import . |.assq|)
   (assv import . |.assv|)
   (atan import . |.atan|)
   (auto-compile-cache import . |.auto-compile-cache|)
   (auto-compile-verbose import . |.auto-compile-verbose|)
   (backtrace import . |.backtrace|)
   (backtrace-line-length import . |.backtrace-line-length|)
   (begin import . |.begin|)
   (binary-port? import . |core.io'binary-port?|)
   (bitwise-and import . |.bitwise-and|)
   (bitwise-arithmetic-shift import . |.bitwise-arithmetic-shift|)
   (bitwise-arithmetic-shift-left import . |core.arithmetic'bitwise-arithmetic-shift-left|)
   (bitwise-arithmetic-shift-right import . |core.arithmetic'bitwise-arithmetic-shift-right|)
   (bitwise-bit-count import . |.bitwise-bit-count|)
   (bitwise-bit-field import . |core.arithmetic'bitwise-bit-field|)
   (bitwise-bit-set? import . |core.arithmetic'bitwise-bit-set?|)
   (bitwise-copy-bit import . |core.arithmetic'bitwise-copy-bit|)
   (bitwise-copy-bit-field import . |core.arithmetic'bitwise-copy-bit-field|)
   (bitwise-first-bit-set import . |.bitwise-first-bit-set|)
   (bitwise-if import . |core.arithmetic'bitwise-if|)
   (bitwise-ior import . |.bitwise-ior|)
   (bitwise-length import . |.bitwise-length|)
   (bitwise-not import . |.bitwise-not|)
   (bitwise-reverse-bit-field import . |core.arithmetic'bitwise-reverse-bit-field|)
   (bitwise-rotate-bit-field import . |core.arithmetic'bitwise-rotate-bit-field|)
   (bitwise-xor import . |.bitwise-xor|)
   (boolean=? import . |.boolean=?|)
   (boolean? import . |.boolean?|)
   (bound-identifier=? import . |.bound-identifier=?|)
   (break import . |core.lists'break|)
   (buffer-mode import . |core.io'buffer-mode|)
   (buffer-mode? import . |core.io'buffer-mode?|)
   (bytevector->sint-list import . |core.bytevectors'bytevector->sint-list|)
   (bytevector->string import . |core.io'bytevector->string|)
   (bytevector->u8-list import . |.bytevector->u8-list|)
   (bytevector->uint-list import . |core.bytevectors'bytevector->uint-list|)
   (bytevector-copy import . |.bytevector-copy|)
   (bytevector-copy! import . |.bytevector-copy!|)
   (bytevector-fill! import . |.bytevector-fill!|)
   (bytevector-ieee-double-native-ref import . |.bytevector-ieee-double-native-ref|)
   (bytevector-ieee-double-native-set! import . |.bytevector-ieee-double-native-set!|)
   (bytevector-ieee-double-ref import . |.bytevector-ieee-double-ref|)
   (bytevector-ieee-double-set! import . |.bytevector-ieee-double-set!|)
   (bytevector-ieee-single-native-ref import . |.bytevector-ieee-single-native-ref|)
   (bytevector-ieee-single-native-set! import . |.bytevector-ieee-single-native-set!|)
   (bytevector-ieee-single-ref import . |.bytevector-ieee-single-ref|)
   (bytevector-ieee-single-set! import . |.bytevector-ieee-single-set!|)
   (bytevector-length import . |.bytevector-length|)
   (bytevector-s16-native-ref import . |.bytevector-s16-native-ref|)
   (bytevector-s16-native-set! import . |.bytevector-s16-native-set!|)
   (bytevector-s16-ref import . |.bytevector-s16-ref|)
   (bytevector-s16-set! import . |.bytevector-s16-set!|)
   (bytevector-s32-native-ref import . |.bytevector-s32-native-ref|)
   (bytevector-s32-native-set! import . |.bytevector-s32-native-set!|)
   (bytevector-s32-ref import . |.bytevector-s32-ref|)
   (bytevector-s32-set! import . |.bytevector-s32-set!|)
   (bytevector-s64-native-ref import . |.bytevector-s64-native-ref|)
   (bytevector-s64-native-set! import . |.bytevector-s64-native-set!|)
   (bytevector-s64-ref import . |.bytevector-s64-ref|)
   (bytevector-s64-set! import . |.bytevector-s64-set!|)
   (bytevector-s8-ref import . |.bytevector-s8-ref|)
   (bytevector-s8-set! import . |.bytevector-s8-set!|)
   (bytevector-sint-ref import . |core.bytevectors'bytevector-sint-ref|)
   (bytevector-sint-set! import . |core.bytevectors'bytevector-sint-set!|)
   (bytevector-u16-native-ref import . |.bytevector-u16-native-ref|)
   (bytevector-u16-native-set! import . |.bytevector-u16-native-set!|)
   (bytevector-u16-ref import . |.bytevector-u16-ref|)
   (bytevector-u16-set! import . |.bytevector-u16-set!|)
   (bytevector-u32-native-ref import . |.bytevector-u32-native-ref|)
   (bytevector-u32-native-set! import . |.bytevector-u32-native-set!|)
   (bytevector-u32-ref import . |.bytevector-u32-ref|)
   (bytevector-u32-set! import . |.bytevector-u32-set!|)
   (bytevector-u64-native-ref import . |.bytevector-u64-native-ref|)
   (bytevector-u64-native-set! import . |.bytevector-u64-native-set!|)
   (bytevector-u64-ref import . |.bytevector-u64-ref|)
   (bytevector-u64-set! import . |.bytevector-u64-set!|)
   (bytevector-u8-ref import . |.bytevector-u8-ref|)
   (bytevector-u8-set! import . |.bytevector-u8-set!|)
   (bytevector-uint-ref import . |core.bytevectors'bytevector-uint-ref|)
   (bytevector-uint-set! import . |core.bytevectors'bytevector-uint-set!|)
   (bytevector=? import . |.bytevector=?|)
   (bytevector? import . |.bytevector?|)
   (caaaar import . |.caaaar|)
   (caaadr import . |.caaadr|)
   (caaar import . |.caaar|)
   (caadar import . |.caadar|)
   (caaddr import . |.caaddr|)
   (caadr import . |.caadr|)
   (caar import . |.caar|)
   (cadaar import . |.cadaar|)
   (cadadr import . |.cadadr|)
   (cadar import . |.cadar|)
   (caddar import . |.caddar|)
   (cadddr import . |.cadddr|)
   (caddr import . |.caddr|)
   (cadr import . |.cadr|)
   (call-shared-object->double import . |.call-shared-object->double|)
   (call-shared-object->int import . |.call-shared-object->int|)
   (call-shared-object->intptr import . |.call-shared-object->intptr|)
   (call-shared-object->void import . |.call-shared-object->void|)
   (call-with-bytevector-output-port import . |core.io'call-with-bytevector-output-port|)
   (call-with-current-continuation import . |.call-with-current-continuation|)
   (call-with-input-file import . |core.io'call-with-input-file|)
   (call-with-output-file import . |core.io'call-with-output-file|)
   (call-with-port import . |.call-with-port|)
   (call-with-string-output-port import . |core.io'call-with-string-output-port|)
   (call-with-values import . |.call-with-values|)
   (call/cc import . |.call/cc|)
   (car import . |.car|)
   (case import . |.case|)
   (case-lambda import . |core.control'case-lambda|)
   (cdaaar import . |.cdaaar|)
   (cdaadr import . |.cdaadr|)
   (cdaar import . |.cdaar|)
   (cdadar import . |.cdadar|)
   (cdaddr import . |.cdaddr|)
   (cdadr import . |.cdadr|)
   (cdar import . |.cdar|)
   (cddaar import . |.cddaar|)
   (cddadr import . |.cddadr|)
   (cddar import . |.cddar|)
   (cdddar import . |.cdddar|)
   (cddddr import . |.cddddr|)
   (cdddr import . |.cdddr|)
   (cddr import . |.cddr|)
   (cdr import . |.cdr|)
   (ceiling import . |.ceiling|)
   (char->integer import . |.char->integer|)
   (char-alphabetic? import . |core.unicode'char-alphabetic?|)
   (char-ci<=? import . |core.unicode'char-ci<=?|)
   (char-ci<? import . |core.unicode'char-ci<?|)
   (char-ci=? import . |core.unicode'char-ci=?|)
   (char-ci>=? import . |core.unicode'char-ci>=?|)
   (char-ci>? import . |core.unicode'char-ci>?|)
   (char-downcase import . |core.unicode'char-downcase|)
   (char-foldcase import . |core.unicode'char-foldcase|)
   (char-general-category import . |core.unicode'char-general-category|)
   (char-lower-case? import . |core.unicode'char-lower-case?|)
   (char-numeric? import . |core.unicode'char-numeric?|)
   (char-title-case? import . |core.unicode'char-title-case?|)
   (char-titlecase import . |core.unicode'char-titlecase|)
   (char-upcase import . |core.unicode'char-upcase|)
   (char-upper-case? import . |core.unicode'char-upper-case?|)
   (char-whitespace? import . |.char-whitespace?|)
   (char<=? import . |.char<=?|)
   (char<? import . |.char<?|)
   (char=? import . |.char=?|)
   (char>=? import . |.char>=?|)
   (char>? import . |.char>?|)
   (char? import . |.char?|)
   (check-argument import . |core.chkarg'check-argument|)
   (close-input-port import . |core.io'close-input-port|)
   (close-output-port import . |core.io'close-output-port|)
   (close-port import . |.close-port|)
   (closure-code import . |.closure-code|)
   (collect import . |.collect|)
   (collect-notify import . |.collect-notify|)
   (collect-stack-notify import . |.collect-stack-notify|)
   (collect-trip-bytes import . |.collect-trip-bytes|)
   (command-line import . |.command-line|)
   (command-line-shift import . |.command-line-shift|)
   (compile import . |.compile|)
   (compile-coreform import . |.compile-coreform|)
   (complex? import . |.complex?|)
   (cond import . |.cond|)
   (condition import . |.condition|)
   (condition-accessor import . |.condition-accessor|)
   (condition-irritants import . |.condition-irritants|)
   (condition-message import . |.condition-message|)
   (condition-predicate import . |.condition-predicate|)
   (condition-who import . |.condition-who|)
   (condition? import . |.condition?|)
   (cons import . |.cons|)
   (cons* import . |.cons*|)
   (copy-environment-macros! import . |.copy-environment-macros!|)
   (copy-environment-variables! import . |.copy-environment-variables!|)
   (core-eval import . |.core-eval|)
   (core-hashtable->alist import . |.core-hashtable->alist|)
   (core-hashtable-clear! import . |.core-hashtable-clear!|)
   (core-hashtable-contains? import . |.core-hashtable-contains?|)
   (core-hashtable-copy import . |.core-hashtable-copy|)
   (core-hashtable-delete! import . |.core-hashtable-delete!|)
   (core-hashtable-equivalence-function import . |.core-hashtable-equivalence-function|)
   (core-hashtable-hash-function import . |.core-hashtable-hash-function|)
   (core-hashtable-mutable? import . |.core-hashtable-mutable?|)
   (core-hashtable-ref import . |.core-hashtable-ref|)
   (core-hashtable-set! import . |.core-hashtable-set!|)
   (core-hashtable-size import . |.core-hashtable-size|)
   (core-hashtable? import . |.core-hashtable?|)
   (core-read import . |.core-read|)
   (coreform-optimize import . |core.optimize'coreform-optimize|)
   (cos import . |.cos|)
   (create-directory import . |.create-directory|)
   (cstring->string import . |.cstring->string|)
   (current-after-expansion-hook import . |.current-after-expansion-hook|)
   (current-directory import . |.current-directory|)
   (current-dynamic-environment import . |.current-dynamic-environment|)
   (current-environment import . |.current-environment|)
   (current-error-port import . |.current-error-port|)
   (current-input-port import . |.current-input-port|)
   (current-macro-environment import . |.current-macro-environment|)
   (current-output-port import . |.current-output-port|)
   (current-source-comments import . |.current-source-comments|)
   (current-variable-environment import . |.current-variable-environment|)
   (datum->syntax import . |.datum->syntax|)
   (define import . |.define|)
   (define-condition-type import . |core.conditions'define-condition-type|)
   (define-enumeration import . |core.enums'define-enumeration|)
   (define-macro import . |.define-macro|)
   (define-record-type import . |core.records'define-record-type|)
   (define-struct import . |core.struct'define-struct|)
   (define-syntax import . |.define-syntax|)
   (delay import . |core.r5rs'delay|)
   (delete-file import . |.delete-file|)
   (denominator import . |.denominator|)
   (destructuring-bind import . |core.destructuring'destructuring-bind|)
   (destructuring-match import . |core.destructuring'destructuring-match|)
   (directory-list import . |.directory-list|)
   (display import . |.display|)
   (display-backtrace import . |.display-backtrace|)
   (display-heap-statistics import . |.display-heap-statistics|)
   (display-object-statistics import . |.display-object-statistics|)
   (div import . |.div|)
   (div-and-mod import . |.div-and-mod|)
   (div0 import . |.div0|)
   (div0-and-mod0 import . |.div0-and-mod0|)
   (do import . |.do|)
   (drop import . |core.lists'drop|)
   (dynamic-wind import . |.dynamic-wind|)
   (else import . |.else|)
   (endianness import . |core.bytevectors'endianness|)
   (enum-set->list import . |core.enums'enum-set->list|)
   (enum-set-complement import . |core.enums'enum-set-complement|)
   (enum-set-constructor import . |core.enums'enum-set-constructor|)
   (enum-set-difference import . |core.enums'enum-set-difference|)
   (enum-set-indexer import . |core.enums'enum-set-indexer|)
   (enum-set-intersection import . |core.enums'enum-set-intersection|)
   (enum-set-member? import . |core.enums'enum-set-member?|)
   (enum-set-projection import . |core.enums'enum-set-projection|)
   (enum-set-subset? import . |core.enums'enum-set-subset?|)
   (enum-set-union import . |core.enums'enum-set-union|)
   (enum-set-universe import . |core.enums'enum-set-universe|)
   (enum-set=? import . |core.enums'enum-set=?|)
   (environment import . |.environment|)
   (eof-object import . |.eof-object|)
   (eof-object? import . |.eof-object?|)
   (eol-style import . |core.io'eol-style|)
   (eq? import . |.eq?|)
   (equal-hash import . |.equal-hash|)
   (equal? import . |.equal?|)
   (eqv? import . |.eqv?|)
   (error import . |.error|)
   (error-handling-mode import . |core.io'error-handling-mode|)
   (error? import . |.error?|)
   (eval import . |.eval|)
   (even? import . |.even?|)
   (exact import . |.exact|)
   (exact->inexact import . |.inexact|)
   (exact-integer-sqrt import . |.exact-integer-sqrt|)
   (exact? import . |.exact?|)
   (exists import . |core.lists'exists|)
   (exit import . |.exit|)
   (exp import . |.exp|)
   (expansion-backtrace import . |.expansion-backtrace|)
   (expt import . |.expt|)
   (extend-lexical-syntax import . |.extend-lexical-syntax|)
   (extract-accumulated-bytevector import . |.extract-accumulated-bytevector|)
   (extract-accumulated-string import . |.extract-accumulated-string|)
   (file-exists? import . |.file-exists?|)
   (file-options import . |core.io'file-options|)
   (filter import . |core.lists'filter|)
   (find import . |core.lists'find|)
   (finite? import . |.finite?|)
   (fixnum->flonum import . |.fixnum->flonum|)
   (fixnum-width import . |.fixnum-width|)
   (fixnum? import . |.fixnum?|)
   (fl* import . |.fl*|)
   (fl+ import . |.fl+|)
   (fl- import . |.fl-|)
   (fl/ import . |.fl/|)
   (fl<=? import . |.fl<=?|)
   (fl<? import . |.fl<?|)
   (fl=? import . |.fl=?|)
   (fl>=? import . |.fl>=?|)
   (fl>? import . |.fl>?|)
   (flabs import . |.flabs|)
   (flacos import . |.flacos|)
   (flasin import . |.flasin|)
   (flatan import . |.flatan|)
   (flceiling import . |.flceiling|)
   (flcos import . |.flcos|)
   (fldenominator import . |.fldenominator|)
   (fldiv import . |.fldiv|)
   (fldiv-and-mod import . |core.arithmetic'fldiv-and-mod|)
   (fldiv0 import . |.fldiv0|)
   (fldiv0-and-mod0 import . |core.arithmetic'fldiv0-and-mod0|)
   (fleven? import . |.fleven?|)
   (flexp import . |.flexp|)
   (flexpt import . |.flexpt|)
   (flfinite? import . |.flfinite?|)
   (flfloor import . |.flfloor|)
   (flinfinite? import . |.flinfinite?|)
   (flinteger? import . |.flinteger?|)
   (fllog import . |.fllog|)
   (flmax import . |.flmax|)
   (flmin import . |.flmin|)
   (flmod import . |core.arithmetic'flmod|)
   (flmod0 import . |core.arithmetic'flmod0|)
   (flnan? import . |.flnan?|)
   (flnegative? import . |.flnegative?|)
   (flnumerator import . |.flnumerator|)
   (flodd? import . |.flodd?|)
   (flonum->float import . |.flonum->float|)
   (flonum? import . |.flonum?|)
   (floor import . |.floor|)
   (flpositive? import . |.flpositive?|)
   (flround import . |.flround|)
   (flsin import . |.flsin|)
   (flsqrt import . |.flsqrt|)
   (fltan import . |.fltan|)
   (fltruncate import . |.fltruncate|)
   (flush-output-port import . |.flush-output-port|)
   (flzero? import . |.flzero?|)
   (fold-left import . |core.lists'fold-left|)
   (fold-right import . |core.lists'fold-right|)
   (for-all import . |core.lists'for-all|)
   (for-each import . |.for-each|)
   (force import . |core.r5rs'force|)
   (format import . |.format|)
   (free-identifier=? import . |.free-identifier=?|)
   (fx* import . |.fx*|)
   (fx*/carry import . |core.arithmetic'fx*/carry|)
   (fx+ import . |.fx+|)
   (fx+/carry import . |core.arithmetic'fx+/carry|)
   (fx- import . |.fx-|)
   (fx-/carry import . |core.arithmetic'fx-/carry|)
   (fx<=? import . |.fx<=?|)
   (fx<? import . |.fx<?|)
   (fx=? import . |.fx=?|)
   (fx>=? import . |.fx>=?|)
   (fx>? import . |.fx>?|)
   (fxand import . |.fxand|)
   (fxarithmetic-shift import . |.fxarithmetic-shift|)
   (fxarithmetic-shift-left import . |.fxarithmetic-shift-left|)
   (fxarithmetic-shift-right import . |.fxarithmetic-shift-right|)
   (fxbit-count import . |.fxbit-count|)
   (fxbit-field import . |.fxbit-field|)
   (fxbit-set? import . |.fxbit-set?|)
   (fxcopy-bit import . |.fxcopy-bit|)
   (fxcopy-bit-field import . |.fxcopy-bit-field|)
   (fxdiv import . |.fxdiv|)
   (fxdiv-and-mod import . |core.arithmetic'fxdiv-and-mod|)
   (fxdiv0 import . |.fxdiv0|)
   (fxdiv0-and-mod0 import . |core.arithmetic'fxdiv0-and-mod0|)
   (fxeven? import . |.fxeven?|)
   (fxfirst-bit-set import . |.fxfirst-bit-set|)
   (fxif import . |.fxif|)
   (fxior import . |.fxior|)
   (fxlength import . |.fxlength|)
   (fxmax import . |.fxmax|)
   (fxmin import . |.fxmin|)
   (fxmod import . |core.arithmetic'fxmod|)
   (fxmod0 import . |core.arithmetic'fxmod0|)
   (fxnegative? import . |.fxnegative?|)
   (fxnot import . |.fxnot|)
   (fxodd? import . |.fxodd?|)
   (fxpositive? import . |.fxpositive?|)
   (fxreverse-bit-field import . |core.arithmetic'fxreverse-bit-field|)
   (fxrotate-bit-field import . |core.arithmetic'fxrotate-bit-field|)
   (fxxor import . |.fxxor|)
   (fxzero? import . |.fxzero?|)
   (gcd import . |.gcd|)
   (generate-temporaries import . |.generate-temporaries|)
   (generate-temporary-symbol import . |.generate-temporary-symbol|)
   (gensym import . |.gensym|)
   (get-accumulated-string import . |.get-accumulated-string|)
   (get-bytevector-all import . |.get-bytevector-all|)
   (get-bytevector-n import . |.get-bytevector-n|)
   (get-bytevector-n! import . |.get-bytevector-n!|)
   (get-bytevector-some import . |.get-bytevector-some|)
   (get-char import . |.get-char|)
   (get-datum import . |.get-datum|)
   (get-line import . |.get-line|)
   (get-string-all import . |.get-string-all|)
   (get-string-n import . |.get-string-n|)
   (get-string-n! import . |.get-string-n!|)
   (get-u8 import . |.get-u8|)
   (greatest-fixnum import . |.greatest-fixnum|)
   (guard import . |core.exceptions'guard|)
   (hashtable->alist import . |.core-hashtable->alist|)
   (hashtable-clear! import . |.core-hashtable-clear!|)
   (hashtable-contains? import . |.core-hashtable-contains?|)
   (hashtable-copy import . |.core-hashtable-copy|)
   (hashtable-delete! import . |.core-hashtable-delete!|)
   (hashtable-entries import . |core.hashtables'hashtable-entries|)
   (hashtable-equivalence-function import . |.core-hashtable-equivalence-function|)
   (hashtable-hash-function import . |.core-hashtable-hash-function|)
   (hashtable-keys import . |core.hashtables'hashtable-keys|)
   (hashtable-mutable? import . |.core-hashtable-mutable?|)
   (hashtable-ref import . |.core-hashtable-ref|)
   (hashtable-set! import . |.core-hashtable-set!|)
   (hashtable-size import . |.core-hashtable-size|)
   (hashtable-update! import . |core.hashtables'hashtable-update!|)
   (hashtable? import . |.core-hashtable?|)
   (home-directory import . |.home-directory|)
   (i/o-decoding-error? import . |.i/o-decoding-error?|)
   (i/o-encoding-error-char import . |.i/o-encoding-error-char|)
   (i/o-encoding-error? import . |.i/o-encoding-error?|)
   (i/o-error-filename import . |.i/o-error-filename|)
   (i/o-error-port import . |.i/o-error-port|)
   (i/o-error-position import . |.i/o-error-position|)
   (i/o-error? import . |.i/o-error?|)
   (i/o-file-already-exists-error? import . |.i/o-file-already-exists-error?|)
   (i/o-file-does-not-exist-error? import . |.i/o-file-does-not-exist-error?|)
   (i/o-file-is-read-only-error? import . |.i/o-file-is-read-only-error?|)
   (i/o-file-protection-error? import . |.i/o-file-protection-error?|)
   (i/o-filename-error? import . |.i/o-filename-error?|)
   (i/o-invalid-position-error? import . |.i/o-invalid-position-error?|)
   (i/o-port-error? import . |.i/o-port-error?|)
   (i/o-read-error? import . |.i/o-read-error?|)
   (i/o-write-error? import . |.i/o-write-error?|)
   (identifier-syntax import . |.identifier-syntax|)
   (identifier? import . |.identifier?|)
   (if import . |.if|)
   (imag-part import . |.imag-part|)
   (implementation-restriction-violation? import . |.implementation-restriction-violation?|)
   (inexact import . |.inexact|)
   (inexact->exact import . |.exact|)
   (inexact? import . |.inexact?|)
   (infinite? import . |.infinite?|)
   (input-port? import . |.input-port?|)
   (integer->char import . |.integer->char|)
   (integer-valued? import . |.integer-valued?|)
   (integer? import . |.integer?|)
   (interaction-environment import . |.interaction-environment|)
   (iota import . |core.lists'iota|)
   (irritants-condition? import . |.irritants-condition?|)
   (lambda import . |.lambda|)
   (latin-1-codec import . |core.io'latin-1-codec|)
   (lcm import . |.lcm|)
   (least-fixnum import . |.least-fixnum|)
   (length import . |.length|)
   (let import . |.let|)
   (let* import . |.let*|)
   (let*-values import . |.let*-values|)
   (let-optionals import . |core.optargs'let-optionals|)
   (let-syntax import . |.let-syntax|)
   (let-values import . |.let-values|)
   (letrec import . |.letrec|)
   (letrec* import . |.letrec*|)
   (letrec-syntax import . |.letrec-syntax|)
   (lexical-violation? import . |.lexical-violation?|)
   (library import . |.library|)
   (library-extensions import . |.library-extensions|)
   (list import . |.list|)
   (list->string import . |.list->string|)
   (list->vector import . |.list->vector|)
   (list-head import . |.list-head|)
   (list-of-unique-symbols? import . |core.lists'list-of-unique-symbols?|)
   (list-ref import . |.list-ref|)
   (list-sort import . |core.sorting'list-sort|)
   (list-tail import . |.list-tail|)
   (list-transpose import . |.list-transpose|)
   (list-transpose* import . |.list-transpose*|)
   (list-transpose+ import . |.list-transpose+|)
   (list? import . |.list?|)
   (load import . |.load|)
   (load-shared-object import . |.load-shared-object|)
   (log import . |.log|)
   (lookahead-char import . |.lookahead-char|)
   (lookahead-u8 import . |.lookahead-u8|)
   (lookup-process-environment import . |.lookup-process-environment|)
   (lookup-shared-object import . |.lookup-shared-object|)
   (macro-expand import . |.macro-expand|)
   (magnitude import . |.magnitude|)
   (make-assertion-violation import . |.make-assertion-violation|)
   (make-bytevector import . |.make-bytevector|)
   (make-bytevector-mapping import . |.make-bytevector-mapping|)
   (make-callback import . |.make-callback|)
   (make-core-hashtable import . |.make-core-hashtable|)
   (make-custom-binary-input-port import . |core.io'make-custom-binary-input-port|)
   (make-custom-binary-input/output-port import . |core.io'make-custom-binary-input/output-port|)
   (make-custom-binary-output-port import . |core.io'make-custom-binary-output-port|)
   (make-custom-textual-input-port import . |core.io'make-custom-textual-input-port|)
   (make-custom-textual-input/output-port import . |core.io'make-custom-textual-input/output-port|)
   (make-custom-textual-output-port import . |core.io'make-custom-textual-output-port|)
   (make-enumeration import . |core.enums'make-enumeration|)
   (make-environment import . |.make-environment|)
   (make-eq-hashtable import . |core.hashtables'make-eq-hashtable|)
   (make-eqv-hashtable import . |core.hashtables'make-eqv-hashtable|)
   (make-error import . |.make-error|)
   (make-hashtable import . |core.hashtables'make-hashtable|)
   (make-i/o-decoding-error import . |.make-i/o-decoding-error|)
   (make-i/o-encoding-error import . |.make-i/o-encoding-error|)
   (make-i/o-error import . |.make-i/o-error|)
   (make-i/o-file-already-exists-error import . |.make-i/o-file-already-exists-error|)
   (make-i/o-file-does-not-exist-error import . |.make-i/o-file-does-not-exist-error|)
   (make-i/o-file-is-read-only-error import . |.make-i/o-file-is-read-only-error|)
   (make-i/o-file-protection-error import . |.make-i/o-file-protection-error|)
   (make-i/o-filename-error import . |.make-i/o-filename-error|)
   (make-i/o-invalid-position-error import . |.make-i/o-invalid-position-error|)
   (make-i/o-port-error import . |.make-i/o-port-error|)
   (make-i/o-read-error import . |.make-i/o-read-error|)
   (make-i/o-write-error import . |.make-i/o-write-error|)
   (make-implementation-restriction-violation import . |.make-implementation-restriction-violation|)
   (make-irritants-condition import . |.make-irritants-condition|)
   (make-lexical-violation import . |.make-lexical-violation|)
   (make-list import . |core.lists'make-list|)
   (make-message-condition import . |.make-message-condition|)
   (make-no-infinities-violation import . |.make-no-infinities-violation|)
   (make-no-nans-violation import . |.make-no-nans-violation|)
   (make-non-continuable-violation import . |.make-non-continuable-violation|)
   (make-parameter import . |.make-parameter|)
   (make-polar import . |.make-polar|)
   (make-record-constructor-descriptor import . |.make-record-constructor-descriptor|)
   (make-record-type import . |.make-record-type|)
   (make-record-type-descriptor import . |.make-record-type-descriptor|)
   (make-rectangular import . |.make-rectangular|)
   (make-serious-condition import . |.make-serious-condition|)
   (make-string import . |.make-string|)
   (make-string-hashtable import . |core.hashtables'make-string-hashtable|)
   (make-string-input-port import . |.make-string-input-port|)
   (make-string-output-port import . |.make-string-output-port|)
   (make-syntax-violation import . |.make-syntax-violation|)
   (make-temporary-file-port import . |.make-temporary-file-port|)
   (make-transcoded-port import . |.make-transcoded-port|)
   (make-transcoder import . |core.io'make-transcoder|)
   (make-tuple import . |.make-tuple|)
   (make-undefined-violation import . |.make-undefined-violation|)
   (make-variable-transformer import . |.make-variable-transformer|)
   (make-vector import . |.make-vector|)
   (make-violation import . |.make-violation|)
   (make-warning import . |.make-warning|)
   (make-weak-core-hashtable import . |.make-weak-core-hashtable|)
   (make-weak-hashtable import . |.make-weak-core-hashtable|)
   (make-weak-mapping import . |.make-weak-mapping|)
   (make-who-condition import . |.make-who-condition|)
   (map import . |.map|)
   (max import . |.max|)
   (member import . |.member|)
   (memp import . |core.lists'memp|)
   (memq import . |.memq|)
   (memv import . |.memv|)
   (message-condition? import . |.message-condition?|)
   (microsecond import . |.microsecond|)
   (min import . |.min|)
   (mod import . |.mod|)
   (mod0 import . |.mod0|)
   (modulo import . |.modulo|)
   (nan? import . |.nan?|)
   (native-endianness import . |.native-endianness|)
   (native-eol-style import . |core.io'native-eol-style|)
   (native-transcoder import . |core.io'native-transcoder|)
   (native-transcoder-descriptor import . |.native-transcoder-descriptor|)
   (negative? import . |.negative?|)
   (newline import . |.newline|)
   (no-infinities-violation? import . |.no-infinities-violation?|)
   (no-nans-violation? import . |.no-nans-violation?|)
   (non-continuable-violation? import . |.non-continuable-violation?|)
   (nonblock-byte-ready? import . |.nonblock-byte-ready?|)
   (not import . |.not|)
   (null? import . |.null?|)
   (number->string import . |.number->string|)
   (number? import . |.number?|)
   (numerator import . |.numerator|)
   (odd? import . |.odd?|)
   (open-builtin-data-input-port import . |.open-builtin-data-input-port|)
   (open-bytevector-input-port import . |core.io'open-bytevector-input-port|)
   (open-bytevector-output-port import . |core.io'open-bytevector-output-port|)
   (open-file-input-port import . |core.io'open-file-input-port|)
   (open-file-input/output-port import . |core.io'open-file-input/output-port|)
   (open-file-output-port import . |core.io'open-file-output-port|)
   (open-input-file import . |core.io'open-input-file|)
   (open-output-file import . |core.io'open-output-file|)
   (open-port import . |.open-port|)
   (open-string-input-port import . |core.io'open-string-input-port|)
   (open-string-output-port import . |core.io'open-string-output-port|)
   (open-temporary-file-port import . |core.io'open-temporary-file-port|)
   (or import . |.or|)
   (output-port-buffer-mode import . |.output-port-buffer-mode|)
   (output-port? import . |.output-port?|)
   (pair? import . |.pair?|)
   (parameterize import . |core.parameters'parameterize|)
   (partition import . |core.lists'partition|)
   (peek-char import . |.peek-char|)
   (port-device-subtype import . |.port-device-subtype|)
   (port-eof? import . |.port-eof?|)
   (port-has-port-position? import . |.port-has-port-position?|)
   (port-has-set-port-position!? import . |.port-has-set-port-position!?|)
   (port-position import . |.port-position|)
   (port-transcoder import . |core.io'port-transcoder|)
   (port-transcoder-descriptor import . |.port-transcoder-descriptor|)
   (port? import . |.port?|)
   (positive? import . |.positive?|)
   (pretty-print import . |.pretty-print|)
   (pretty-print-initial-indent import . |.pretty-print-initial-indent|)
   (pretty-print-line-length import . |.pretty-print-line-length|)
   (pretty-print-maximum-lines import . |.pretty-print-maximum-lines|)
   (pretty-print-unwrap-syntax import . |.pretty-print-unwrap-syntax|)
   (procedure? import . |.procedure?|)
   (put-byte import . |.put-byte|)
   (put-bytevector import . |.put-bytevector|)
   (put-char import . |.put-char|)
   (put-datum import . |.put-datum|)
   (put-fasl import . |.put-fasl|)
   (put-string import . |.put-string|)
   (put-u8 import . |.put-u8|)
   (quasiquote import . |.quasiquote|)
   (quasisyntax import . |core.syntax-case'quasisyntax|)
   (quote import . |.quote|)
   (quotient import . |.quotient|)
   (raise import . |.raise|)
   (raise-continuable import . |.raise-continuable|)
   (rational-valued? import . |.rational-valued?|)
   (rational? import . |.rational?|)
   (rationalize import . |.rationalize|)
   (read import . |.read|)
   (read-char import . |.read-char|)
   (real->flonum import . |.real->flonum|)
   (real-part import . |.real-part|)
   (real-valued? import . |.real-valued?|)
   (real? import . |.real?|)
   (record-accessor import . |.record-accessor|)
   (record-constructor import . |.record-constructor|)
   (record-constructor-descriptor import . |core.records'record-constructor-descriptor|)
   (record-field-mutable? import . |.record-field-mutable?|)
   (record-mutator import . |.record-mutator|)
   (record-predicate import . |.record-predicate|)
   (record-rtd import . |.record-rtd|)
   (record-type-descriptor import . |core.records'record-type-descriptor|)
   (record-type-descriptor? import . |.record-type-descriptor?|)
   (record-type-field-names import . |.record-type-field-names|)
   (record-type-generative? import . |.record-type-generative?|)
   (record-type-name import . |.record-type-name|)
   (record-type-opaque? import . |.record-type-opaque?|)
   (record-type-parent import . |.record-type-parent|)
   (record-type-rcd import . |.record-type-rcd|)
   (record-type-rtd import . |.record-type-rtd|)
   (record-type-sealed? import . |.record-type-sealed?|)
   (record-type-uid import . |.record-type-uid|)
   (record-type? import . |.record-type?|)
   (record? import . |.record?|)
   (remainder import . |.remainder|)
   (remove import . |core.lists'remove|)
   (remove-duplicate-symbols import . |core.lists'remove-duplicate-symbols|)
   (remp import . |core.lists'remp|)
   (remq import . |core.lists'remq|)
   (remv import . |core.lists'remv|)
   (restricted-print-line-length import . |.restricted-print-line-length|)
   (reverse import . |.reverse|)
   (round import . |.round|)
   (scheme-error import . |.scheme-error|)
   (scheme-library-exports import . |.scheme-library-exports|)
   (scheme-library-paths import . |.scheme-library-paths|)
   (scheme-load-paths import . |.scheme-load-paths|)
   (scheme-load-verbose import . |.scheme-load-verbose|)
   (serious-condition? import . |.serious-condition?|)
   (set! import . |.set!|)
   (set-car! import . |.set-car!|)
   (set-cdr! import . |.set-cdr!|)
   (set-current-error-port! import . |.set-current-error-port!|)
   (set-current-input-port! import . |.set-current-input-port!|)
   (set-current-output-port! import . |.set-current-output-port!|)
   (set-port-position! import . |.set-port-position!|)
   (set-top-level-value! import . |.set-top-level-value!|)
   (simple-conditions import . |.simple-conditions|)
   (sin import . |.sin|)
   (sint-list->bytevector import . |core.bytevectors'sint-list->bytevector|)
   (sqrt import . |.sqrt|)
   (standard-error-port import . |.standard-error-port|)
   (standard-input-port import . |.standard-input-port|)
   (standard-output-port import . |.standard-output-port|)
   (stdcall-shared-object->double import . |.stdcall-shared-object->double|)
   (stdcall-shared-object->int import . |.stdcall-shared-object->int|)
   (stdcall-shared-object->intptr import . |.stdcall-shared-object->intptr|)
   (stdcall-shared-object->void import . |.stdcall-shared-object->void|)
   (string import . |.string|)
   (string->bytevector import . |core.io'string->bytevector|)
   (string->cstring import . |.string->cstring|)
   (string->list import . |.string->list|)
   (string->number import . |.string->number|)
   (string->symbol import . |.string->symbol|)
   (string->utf16 import . |core.bytevector-transcoders'string->utf16|)
   (string->utf32 import . |core.bytevector-transcoders'string->utf32|)
   (string->utf8 import . |.string->utf8|)
   (string-append import . |.string-append|)
   (string-ci-hash import . |core.hashtables'string-ci-hash|)
   (string-ci<=? import . |core.unicode'string-ci<=?|)
   (string-ci<? import . |core.unicode'string-ci<?|)
   (string-ci=? import . |core.unicode'string-ci=?|)
   (string-ci>=? import . |core.unicode'string-ci>=?|)
   (string-ci>? import . |core.unicode'string-ci>?|)
   (string-contains import . |.string-contains|)
   (string-copy import . |.string-copy|)
   (string-downcase import . |core.unicode'string-downcase|)
   (string-fill! import . |.string-fill!|)
   (string-foldcase import . |core.unicode'string-foldcase|)
   (string-for-each import . |.string-for-each|)
   (string-hash import . |.string-hash|)
   (string-length import . |.string-length|)
   (string-normalize-nfc import . |core.unicode'string-normalize-nfc|)
   (string-normalize-nfd import . |core.unicode'string-normalize-nfd|)
   (string-normalize-nfkc import . |core.unicode'string-normalize-nfkc|)
   (string-normalize-nfkd import . |core.unicode'string-normalize-nfkd|)
   (string-ref import . |.string-ref|)
   (string-set! import . |.string-set!|)
   (string-titlecase import . |core.unicode'string-titlecase|)
   (string-upcase import . |core.unicode'string-upcase|)
   (string<=? import . |.string<=?|)
   (string<? import . |.string<?|)
   (string=? import . |.string=?|)
   (string>=? import . |.string>=?|)
   (string>? import . |.string>?|)
   (string? import . |.string?|)
   (subr? import . |.subr?|)
   (substring import . |.substring|)
   (symbol->string import . |.symbol->string|)
   (symbol-hash import . |.symbol-hash|)
   (symbol=? import . |.symbol=?|)
   (symbol? import . |.symbol?|)
   (syntax import . |.syntax|)
   (syntax->datum import . |.syntax->datum|)
   (syntax-case import . |.syntax-case|)
   (syntax-rules import . |.syntax-rules|)
   (syntax-violation import . |.syntax-violation|)
   (syntax-violation-form import . |.syntax-violation-form|)
   (syntax-violation-subform import . |.syntax-violation-subform|)
   (syntax-violation? import . |.syntax-violation?|)
   (system-environment import . |.system-environment|)
   (system-share-path import . |.system-share-path|)
   (take import . |core.lists'take|)
   (tan import . |.tan|)
   (textual-port? import . |core.io'textual-port?|)
   (time-usage import . |.time-usage|)
   (top-level-bound? import . |.top-level-bound?|)
   (top-level-value import . |.top-level-value|)
   (transcoded-port import . |core.io'transcoded-port|)
   (transcoder-codec import . |core.io'transcoder-codec|)
   (transcoder-eol-style import . |core.io'transcoder-eol-style|)
   (transcoder-error-handling-mode import . |core.io'transcoder-error-handling-mode|)
   (truncate import . |.truncate|)
   (tuple import . |.tuple|)
   (tuple->list import . |.tuple->list|)
   (tuple-index import . |.tuple-index|)
   (tuple-length import . |.tuple-length|)
   (tuple-ref import . |.tuple-ref|)
   (tuple-set! import . |.tuple-set!|)
   (tuple? import . |.tuple?|)
   (u8-list->bytevector import . |.u8-list->bytevector|)
   (uint-list->bytevector import . |core.bytevectors'uint-list->bytevector|)
   (undefined-violation? import . |.undefined-violation?|)
   (unless import . |core.control'unless|)
   (unquote import . |.unquote|)
   (unquote-splicing import . |.unquote-splicing|)
   (unspecified import . |.unspecified|)
   (unspecified? import . |.unspecified?|)
   (unsyntax import . |core.syntax-case'unsyntax|)
   (unsyntax-splicing import . |core.syntax-case'unsyntax-splicing|)
   (usleep import . |.usleep|)
   (utf-16-codec import . |core.io'utf-16-codec|)
   (utf-8-codec import . |core.io'utf-8-codec|)
   (utf16->string import . |core.bytevector-transcoders'utf16->string|)
   (utf32->string import . |core.bytevector-transcoders'utf32->string|)
   (utf8->string import . |.utf8->string|)
   (values import . |.values|)
   (vector import . |.vector|)
   (vector->list import . |.vector->list|)
   (vector-fill! import . |.vector-fill!|)
   (vector-for-each import . |.vector-for-each|)
   (vector-length import . |.vector-length|)
   (vector-map import . |.vector-map|)
   (vector-ref import . |.vector-ref|)
   (vector-set! import . |.vector-set!|)
   (vector-sort import . |core.sorting'vector-sort|)
   (vector-sort! import . |core.sorting'vector-sort!|)
   (vector? import . |.vector?|)
   (violation? import . |.violation?|)
   (warning? import . |.warning?|)
   (weak-core-hashtable? import . |.weak-core-hashtable?|)
   (weak-hashtable? import . |.weak-core-hashtable?|)
   (weak-mapping-key import . |.weak-mapping-key|)
   (weak-mapping-value import . |.weak-mapping-value|)
   (weak-mapping? import . |.weak-mapping?|)
   (when import . |core.control'when|)
   (who-condition? import . |.who-condition?|)
   (with-exception-handler import . |.with-exception-handler|)
   (with-input-from-file import . |core.io'with-input-from-file|)
   (with-output-to-file import . |core.io'with-output-to-file|)
   (with-syntax import . |core.syntax-case'with-syntax|)
   (write import . |.write|)
   (write-char import . |.write-char|)
   (write-with-shared-structure import . |.write-with-shared-structure|)
   (zero? import . |.zero?|))
 (apply.gloc.of |.intern-scheme-library| "../stdlib/core.scm" . 1025))

